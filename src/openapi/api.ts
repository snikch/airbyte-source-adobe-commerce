/* tslint:disable */
/* eslint-disable */
/**
 * Magento B2B
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 2.2.10
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import { Configuration } from './configuration';
import globalAxios, { AxiosPromise, AxiosInstance, AxiosRequestConfig } from 'axios';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from './common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from './base';

/**
 * 
 * @export
 * @interface AmazonPaymentAddressManagementV1GetBillingAddressPutRequest
 */
export interface AmazonPaymentAddressManagementV1GetBillingAddressPutRequest {
    /**
     * 
     * @type {string}
     * @memberof AmazonPaymentAddressManagementV1GetBillingAddressPutRequest
     */
    'addressConsentToken': string;
}
/**
 * Interface LinkInterface Represents link with collected data and initialized vector for decryption.
 * @export
 * @interface AnalyticsDataLinkInterface
 */
export interface AnalyticsDataLinkInterface {
    /**
     * 
     * @type {string}
     * @memberof AnalyticsDataLinkInterface
     */
    'url': string;
    /**
     * 
     * @type {string}
     * @memberof AnalyticsDataLinkInterface
     */
    'initialization_vector': string;
}
/**
 * Interface BulkStatusInterface Bulk summary data with list of operations items summary data.
 * @export
 * @interface AsynchronousOperationsDataBulkOperationsStatusInterface
 */
export interface AsynchronousOperationsDataBulkOperationsStatusInterface {
    /**
     * List of operation with statuses (short data).
     * @type {Array<AsynchronousOperationsDataSummaryOperationStatusInterface>}
     * @memberof AsynchronousOperationsDataBulkOperationsStatusInterface
     */
    'operations_list': Array<AsynchronousOperationsDataSummaryOperationStatusInterface>;
    /**
     * ExtensionInterface class for @see \\Magento\\AsynchronousOperations\\Api\\Data\\BulkSummaryInterface
     * @type {object}
     * @memberof AsynchronousOperationsDataBulkOperationsStatusInterface
     */
    'extension_attributes'?: object;
    /**
     * Bulk uuid
     * @type {string}
     * @memberof AsynchronousOperationsDataBulkOperationsStatusInterface
     */
    'bulk_id': string;
    /**
     * Bulk description
     * @type {string}
     * @memberof AsynchronousOperationsDataBulkOperationsStatusInterface
     */
    'description': string;
    /**
     * Bulk scheduled time
     * @type {string}
     * @memberof AsynchronousOperationsDataBulkOperationsStatusInterface
     */
    'start_time': string;
    /**
     * User id
     * @type {number}
     * @memberof AsynchronousOperationsDataBulkOperationsStatusInterface
     */
    'user_id': number;
    /**
     * Total number of operations scheduled in scope of this bulk
     * @type {number}
     * @memberof AsynchronousOperationsDataBulkOperationsStatusInterface
     */
    'operation_count': number;
}
/**
 * Interface BulkStatusInterface Bulk summary data with list of operations items full data.
 * @export
 * @interface AsynchronousOperationsDataDetailedBulkOperationsStatusInterface
 */
export interface AsynchronousOperationsDataDetailedBulkOperationsStatusInterface {
    /**
     * Operations list.
     * @type {Array<AsynchronousOperationsDataDetailedOperationStatusInterface>}
     * @memberof AsynchronousOperationsDataDetailedBulkOperationsStatusInterface
     */
    'operations_list': Array<AsynchronousOperationsDataDetailedOperationStatusInterface>;
    /**
     * ExtensionInterface class for @see \\Magento\\AsynchronousOperations\\Api\\Data\\BulkSummaryInterface
     * @type {object}
     * @memberof AsynchronousOperationsDataDetailedBulkOperationsStatusInterface
     */
    'extension_attributes'?: object;
    /**
     * Bulk uuid
     * @type {string}
     * @memberof AsynchronousOperationsDataDetailedBulkOperationsStatusInterface
     */
    'bulk_id': string;
    /**
     * Bulk description
     * @type {string}
     * @memberof AsynchronousOperationsDataDetailedBulkOperationsStatusInterface
     */
    'description': string;
    /**
     * Bulk scheduled time
     * @type {string}
     * @memberof AsynchronousOperationsDataDetailedBulkOperationsStatusInterface
     */
    'start_time': string;
    /**
     * User id
     * @type {number}
     * @memberof AsynchronousOperationsDataDetailedBulkOperationsStatusInterface
     */
    'user_id': number;
    /**
     * Total number of operations scheduled in scope of this bulk
     * @type {number}
     * @memberof AsynchronousOperationsDataDetailedBulkOperationsStatusInterface
     */
    'operation_count': number;
}
/**
 * 
 * @export
 * @interface AsynchronousOperationsDataDetailedOperationStatusInterface
 */
export interface AsynchronousOperationsDataDetailedOperationStatusInterface {
    /**
     * Serialized Data
     * @type {string}
     * @memberof AsynchronousOperationsDataDetailedOperationStatusInterface
     */
    'result_serialized_data': string;
    /**
     * ExtensionInterface class for @see \\Magento\\AsynchronousOperations\\Api\\Data\\OperationInterface
     * @type {object}
     * @memberof AsynchronousOperationsDataDetailedOperationStatusInterface
     */
    'extension_attributes'?: object;
    /**
     * Id
     * @type {number}
     * @memberof AsynchronousOperationsDataDetailedOperationStatusInterface
     */
    'id': number;
    /**
     * Bulk uuid
     * @type {string}
     * @memberof AsynchronousOperationsDataDetailedOperationStatusInterface
     */
    'bulk_uuid': string;
    /**
     * Queue Topic
     * @type {string}
     * @memberof AsynchronousOperationsDataDetailedOperationStatusInterface
     */
    'topic_name': string;
    /**
     * Data
     * @type {string}
     * @memberof AsynchronousOperationsDataDetailedOperationStatusInterface
     */
    'serialized_data': string;
    /**
     * Operation status
     * @type {number}
     * @memberof AsynchronousOperationsDataDetailedOperationStatusInterface
     */
    'status': number;
    /**
     * Result message
     * @type {string}
     * @memberof AsynchronousOperationsDataDetailedOperationStatusInterface
     */
    'result_message': string;
    /**
     * Error code
     * @type {number}
     * @memberof AsynchronousOperationsDataDetailedOperationStatusInterface
     */
    'error_code': number;
}
/**
 * Getter Class OperationsStatusInterface Instead of OperationInterface this class don\'t provide all operation data and not responsive to set any data, just to get operation data without serialized_data and result_serialized_data
 * @export
 * @interface AsynchronousOperationsDataSummaryOperationStatusInterface
 */
export interface AsynchronousOperationsDataSummaryOperationStatusInterface {
    /**
     * Id
     * @type {number}
     * @memberof AsynchronousOperationsDataSummaryOperationStatusInterface
     */
    'id': number;
    /**
     * Operation status
     * @type {number}
     * @memberof AsynchronousOperationsDataSummaryOperationStatusInterface
     */
    'status': number;
    /**
     * Result message
     * @type {string}
     * @memberof AsynchronousOperationsDataSummaryOperationStatusInterface
     */
    'result_message': string;
    /**
     * Error code
     * @type {number}
     * @memberof AsynchronousOperationsDataSummaryOperationStatusInterface
     */
    'error_code': number;
}
/**
 * Interface BundleOptionInterface
 * @export
 * @interface BundleDataBundleOptionInterface
 */
export interface BundleDataBundleOptionInterface {
    /**
     * Bundle option id.
     * @type {number}
     * @memberof BundleDataBundleOptionInterface
     */
    'option_id': number;
    /**
     * Bundle option quantity.
     * @type {number}
     * @memberof BundleDataBundleOptionInterface
     */
    'option_qty': number;
    /**
     * Bundle option selection ids.
     * @type {Array<number>}
     * @memberof BundleDataBundleOptionInterface
     */
    'option_selections': Array<number>;
    /**
     * ExtensionInterface class for @see \\Magento\\Bundle\\Api\\Data\\BundleOptionInterface
     * @type {object}
     * @memberof BundleDataBundleOptionInterface
     */
    'extension_attributes'?: object;
}
/**
 * Interface LinkInterface
 * @export
 * @interface BundleDataLinkInterface
 */
export interface BundleDataLinkInterface {
    /**
     * The identifier
     * @type {string}
     * @memberof BundleDataLinkInterface
     */
    'id'?: string;
    /**
     * Linked product sku
     * @type {string}
     * @memberof BundleDataLinkInterface
     */
    'sku'?: string;
    /**
     * Option id
     * @type {number}
     * @memberof BundleDataLinkInterface
     */
    'option_id'?: number;
    /**
     * Qty
     * @type {number}
     * @memberof BundleDataLinkInterface
     */
    'qty'?: number;
    /**
     * Position
     * @type {number}
     * @memberof BundleDataLinkInterface
     */
    'position'?: number;
    /**
     * Is default
     * @type {boolean}
     * @memberof BundleDataLinkInterface
     */
    'is_default': boolean;
    /**
     * Price
     * @type {number}
     * @memberof BundleDataLinkInterface
     */
    'price': number;
    /**
     * Price type
     * @type {number}
     * @memberof BundleDataLinkInterface
     */
    'price_type': number;
    /**
     * Whether quantity could be changed
     * @type {number}
     * @memberof BundleDataLinkInterface
     */
    'can_change_quantity'?: number;
    /**
     * ExtensionInterface class for @see \\Magento\\Bundle\\Api\\Data\\LinkInterface
     * @type {object}
     * @memberof BundleDataLinkInterface
     */
    'extension_attributes'?: object;
}
/**
 * Interface OptionInterface
 * @export
 * @interface BundleDataOptionInterface
 */
export interface BundleDataOptionInterface {
    /**
     * Option id
     * @type {number}
     * @memberof BundleDataOptionInterface
     */
    'option_id'?: number;
    /**
     * Option title
     * @type {string}
     * @memberof BundleDataOptionInterface
     */
    'title'?: string;
    /**
     * Is required option
     * @type {boolean}
     * @memberof BundleDataOptionInterface
     */
    'required'?: boolean;
    /**
     * Input type
     * @type {string}
     * @memberof BundleDataOptionInterface
     */
    'type'?: string;
    /**
     * Option position
     * @type {number}
     * @memberof BundleDataOptionInterface
     */
    'position'?: number;
    /**
     * Product sku
     * @type {string}
     * @memberof BundleDataOptionInterface
     */
    'sku'?: string;
    /**
     * Product links
     * @type {Array<BundleDataLinkInterface>}
     * @memberof BundleDataOptionInterface
     */
    'product_links'?: Array<BundleDataLinkInterface>;
    /**
     * ExtensionInterface class for @see \\Magento\\Bundle\\Api\\Data\\OptionInterface
     * @type {object}
     * @memberof BundleDataOptionInterface
     */
    'extension_attributes'?: object;
}
/**
 * Interface OptionTypeInterface
 * @export
 * @interface BundleDataOptionTypeInterface
 */
export interface BundleDataOptionTypeInterface {
    /**
     * Type label
     * @type {string}
     * @memberof BundleDataOptionTypeInterface
     */
    'label': string;
    /**
     * Type code
     * @type {string}
     * @memberof BundleDataOptionTypeInterface
     */
    'code': string;
    /**
     * ExtensionInterface class for @see \\Magento\\Bundle\\Api\\Data\\OptionTypeInterface
     * @type {object}
     * @memberof BundleDataOptionTypeInterface
     */
    'extension_attributes'?: object;
}
/**
 * 
 * @export
 * @interface BundleProductLinkManagementV1SaveChildPutRequest
 */
export interface BundleProductLinkManagementV1SaveChildPutRequest {
    /**
     * 
     * @type {BundleDataLinkInterface}
     * @memberof BundleProductLinkManagementV1SaveChildPutRequest
     */
    'linkedProduct': BundleDataLinkInterface;
}
/**
 * 
 * @export
 * @interface BundleProductOptionManagementV1SavePostRequest
 */
export interface BundleProductOptionManagementV1SavePostRequest {
    /**
     * 
     * @type {BundleDataOptionInterface}
     * @memberof BundleProductOptionManagementV1SavePostRequest
     */
    'option': BundleDataOptionInterface;
}
/**
 * 
 * @export
 * @interface CatalogAttributeSetManagementV1CreatePostRequest
 */
export interface CatalogAttributeSetManagementV1CreatePostRequest {
    /**
     * 
     * @type {EavDataAttributeSetInterface}
     * @memberof CatalogAttributeSetManagementV1CreatePostRequest
     */
    'attributeSet': EavDataAttributeSetInterface;
    /**
     * 
     * @type {number}
     * @memberof CatalogAttributeSetManagementV1CreatePostRequest
     */
    'skeletonId': number;
}
/**
 * 
 * @export
 * @interface CatalogBasePriceStorageV1GetPostRequest
 */
export interface CatalogBasePriceStorageV1GetPostRequest {
    /**
     * 
     * @type {Array<string>}
     * @memberof CatalogBasePriceStorageV1GetPostRequest
     */
    'skus': Array<string>;
}
/**
 * 
 * @export
 * @interface CatalogBasePriceStorageV1UpdatePostRequest
 */
export interface CatalogBasePriceStorageV1UpdatePostRequest {
    /**
     * 
     * @type {Array<CatalogDataBasePriceInterface>}
     * @memberof CatalogBasePriceStorageV1UpdatePostRequest
     */
    'prices': Array<CatalogDataBasePriceInterface>;
}
/**
 * 
 * @export
 * @interface CatalogCategoryLinkRepositoryV1SavePutRequest
 */
export interface CatalogCategoryLinkRepositoryV1SavePutRequest {
    /**
     * 
     * @type {CatalogDataCategoryProductLinkInterface}
     * @memberof CatalogCategoryLinkRepositoryV1SavePutRequest
     */
    'productLink': CatalogDataCategoryProductLinkInterface;
}
/**
 * 
 * @export
 * @interface CatalogCategoryManagementV1MovePutRequest
 */
export interface CatalogCategoryManagementV1MovePutRequest {
    /**
     * 
     * @type {number}
     * @memberof CatalogCategoryManagementV1MovePutRequest
     */
    'parentId': number;
    /**
     * 
     * @type {number}
     * @memberof CatalogCategoryManagementV1MovePutRequest
     */
    'afterId'?: number;
}
/**
 * 
 * @export
 * @interface CatalogCategoryRepositoryV1SavePostRequest
 */
export interface CatalogCategoryRepositoryV1SavePostRequest {
    /**
     * 
     * @type {CatalogDataCategoryInterface}
     * @memberof CatalogCategoryRepositoryV1SavePostRequest
     */
    'category': CatalogDataCategoryInterface;
}
/**
 * 
 * @export
 * @interface CatalogCostStorageV1UpdatePostRequest
 */
export interface CatalogCostStorageV1UpdatePostRequest {
    /**
     * 
     * @type {Array<CatalogDataCostInterface>}
     * @memberof CatalogCostStorageV1UpdatePostRequest
     */
    'prices': Array<CatalogDataCostInterface>;
}
/**
 * Price interface.
 * @export
 * @interface CatalogDataBasePriceInterface
 */
export interface CatalogDataBasePriceInterface {
    /**
     * Price.
     * @type {number}
     * @memberof CatalogDataBasePriceInterface
     */
    'price': number;
    /**
     * Store id.
     * @type {number}
     * @memberof CatalogDataBasePriceInterface
     */
    'store_id': number;
    /**
     * SKU.
     * @type {string}
     * @memberof CatalogDataBasePriceInterface
     */
    'sku': string;
    /**
     * ExtensionInterface class for @see \\Magento\\Catalog\\Api\\Data\\BasePriceInterface
     * @type {object}
     * @memberof CatalogDataBasePriceInterface
     */
    'extension_attributes'?: object;
}
/**
 * 
 * @export
 * @interface CatalogDataCategoryAttributeInterface
 */
export interface CatalogDataCategoryAttributeInterface {
    /**
     * WYSIWYG flag
     * @type {boolean}
     * @memberof CatalogDataCategoryAttributeInterface
     */
    'is_wysiwyg_enabled'?: boolean;
    /**
     * The HTML tags are allowed on the frontend
     * @type {boolean}
     * @memberof CatalogDataCategoryAttributeInterface
     */
    'is_html_allowed_on_front'?: boolean;
    /**
     * It is used for sorting in product listing
     * @type {boolean}
     * @memberof CatalogDataCategoryAttributeInterface
     */
    'used_for_sort_by'?: boolean;
    /**
     * It used in layered navigation
     * @type {boolean}
     * @memberof CatalogDataCategoryAttributeInterface
     */
    'is_filterable'?: boolean;
    /**
     * It is used in search results layered navigation
     * @type {boolean}
     * @memberof CatalogDataCategoryAttributeInterface
     */
    'is_filterable_in_search'?: boolean;
    /**
     * It is used in catalog product grid
     * @type {boolean}
     * @memberof CatalogDataCategoryAttributeInterface
     */
    'is_used_in_grid'?: boolean;
    /**
     * It is visible in catalog product grid
     * @type {boolean}
     * @memberof CatalogDataCategoryAttributeInterface
     */
    'is_visible_in_grid'?: boolean;
    /**
     * It is filterable in catalog product grid
     * @type {boolean}
     * @memberof CatalogDataCategoryAttributeInterface
     */
    'is_filterable_in_grid'?: boolean;
    /**
     * Position
     * @type {number}
     * @memberof CatalogDataCategoryAttributeInterface
     */
    'position'?: number;
    /**
     * Apply to value for the element
     * @type {Array<string>}
     * @memberof CatalogDataCategoryAttributeInterface
     */
    'apply_to'?: Array<string>;
    /**
     * The attribute can be used in Quick Search
     * @type {string}
     * @memberof CatalogDataCategoryAttributeInterface
     */
    'is_searchable'?: string;
    /**
     * The attribute can be used in Advanced Search
     * @type {string}
     * @memberof CatalogDataCategoryAttributeInterface
     */
    'is_visible_in_advanced_search'?: string;
    /**
     * The attribute can be compared on the frontend
     * @type {string}
     * @memberof CatalogDataCategoryAttributeInterface
     */
    'is_comparable'?: string;
    /**
     * The attribute can be used for promo rules
     * @type {string}
     * @memberof CatalogDataCategoryAttributeInterface
     */
    'is_used_for_promo_rules'?: string;
    /**
     * The attribute is visible on the frontend
     * @type {string}
     * @memberof CatalogDataCategoryAttributeInterface
     */
    'is_visible_on_front'?: string;
    /**
     * The attribute can be used in product listing
     * @type {string}
     * @memberof CatalogDataCategoryAttributeInterface
     */
    'used_in_product_listing'?: string;
    /**
     * Attribute is visible on frontend.
     * @type {boolean}
     * @memberof CatalogDataCategoryAttributeInterface
     */
    'is_visible'?: boolean;
    /**
     * Attribute scope
     * @type {string}
     * @memberof CatalogDataCategoryAttributeInterface
     */
    'scope'?: string;
    /**
     * ExtensionInterface class for @see \\Magento\\Catalog\\Api\\Data\\EavAttributeInterface
     * @type {object}
     * @memberof CatalogDataCategoryAttributeInterface
     */
    'extension_attributes'?: object;
    /**
     * Id of the attribute.
     * @type {number}
     * @memberof CatalogDataCategoryAttributeInterface
     */
    'attribute_id'?: number;
    /**
     * Code of the attribute.
     * @type {string}
     * @memberof CatalogDataCategoryAttributeInterface
     */
    'attribute_code': string;
    /**
     * HTML for input element.
     * @type {string}
     * @memberof CatalogDataCategoryAttributeInterface
     */
    'frontend_input': string;
    /**
     * Entity type id
     * @type {string}
     * @memberof CatalogDataCategoryAttributeInterface
     */
    'entity_type_id': string;
    /**
     * Attribute is required.
     * @type {boolean}
     * @memberof CatalogDataCategoryAttributeInterface
     */
    'is_required': boolean;
    /**
     * Options of the attribute (key => value pairs for select)
     * @type {Array<EavDataAttributeOptionInterface>}
     * @memberof CatalogDataCategoryAttributeInterface
     */
    'options'?: Array<EavDataAttributeOptionInterface>;
    /**
     * Current attribute has been defined by a user.
     * @type {boolean}
     * @memberof CatalogDataCategoryAttributeInterface
     */
    'is_user_defined'?: boolean;
    /**
     * Frontend label for default store
     * @type {string}
     * @memberof CatalogDataCategoryAttributeInterface
     */
    'default_frontend_label'?: string;
    /**
     * Frontend label for each store
     * @type {Array<EavDataAttributeFrontendLabelInterface>}
     * @memberof CatalogDataCategoryAttributeInterface
     */
    'frontend_labels': Array<EavDataAttributeFrontendLabelInterface>;
    /**
     * The note attribute for the element.
     * @type {string}
     * @memberof CatalogDataCategoryAttributeInterface
     */
    'note'?: string;
    /**
     * Backend type.
     * @type {string}
     * @memberof CatalogDataCategoryAttributeInterface
     */
    'backend_type'?: string;
    /**
     * Backend model
     * @type {string}
     * @memberof CatalogDataCategoryAttributeInterface
     */
    'backend_model'?: string;
    /**
     * Source model
     * @type {string}
     * @memberof CatalogDataCategoryAttributeInterface
     */
    'source_model'?: string;
    /**
     * Default value for the element.
     * @type {string}
     * @memberof CatalogDataCategoryAttributeInterface
     */
    'default_value'?: string;
    /**
     * This is a unique attribute
     * @type {string}
     * @memberof CatalogDataCategoryAttributeInterface
     */
    'is_unique'?: string;
    /**
     * Frontend class of attribute
     * @type {string}
     * @memberof CatalogDataCategoryAttributeInterface
     */
    'frontend_class'?: string;
    /**
     * Validation rules.
     * @type {Array<EavDataAttributeValidationRuleInterface>}
     * @memberof CatalogDataCategoryAttributeInterface
     */
    'validation_rules'?: Array<EavDataAttributeValidationRuleInterface>;
    /**
     * Custom attributes values.
     * @type {Array<FrameworkAttributeInterface>}
     * @memberof CatalogDataCategoryAttributeInterface
     */
    'custom_attributes'?: Array<FrameworkAttributeInterface>;
}
/**
 * 
 * @export
 * @interface CatalogDataCategoryAttributeSearchResultsInterface
 */
export interface CatalogDataCategoryAttributeSearchResultsInterface {
    /**
     * Attributes list.
     * @type {Array<CatalogDataCategoryAttributeInterface>}
     * @memberof CatalogDataCategoryAttributeSearchResultsInterface
     */
    'items': Array<CatalogDataCategoryAttributeInterface>;
    /**
     * 
     * @type {FrameworkSearchCriteriaInterface}
     * @memberof CatalogDataCategoryAttributeSearchResultsInterface
     */
    'search_criteria': FrameworkSearchCriteriaInterface;
    /**
     * Total count.
     * @type {number}
     * @memberof CatalogDataCategoryAttributeSearchResultsInterface
     */
    'total_count': number;
}
/**
 * 
 * @export
 * @interface CatalogDataCategoryInterface
 */
export interface CatalogDataCategoryInterface {
    /**
     * 
     * @type {number}
     * @memberof CatalogDataCategoryInterface
     */
    'id'?: number;
    /**
     * Parent category ID
     * @type {number}
     * @memberof CatalogDataCategoryInterface
     */
    'parent_id'?: number;
    /**
     * Category name
     * @type {string}
     * @memberof CatalogDataCategoryInterface
     */
    'name'?: string;
    /**
     * Whether category is active
     * @type {boolean}
     * @memberof CatalogDataCategoryInterface
     */
    'is_active'?: boolean;
    /**
     * Category position
     * @type {number}
     * @memberof CatalogDataCategoryInterface
     */
    'position'?: number;
    /**
     * Category level
     * @type {number}
     * @memberof CatalogDataCategoryInterface
     */
    'level'?: number;
    /**
     * 
     * @type {string}
     * @memberof CatalogDataCategoryInterface
     */
    'children'?: string;
    /**
     * 
     * @type {string}
     * @memberof CatalogDataCategoryInterface
     */
    'created_at'?: string;
    /**
     * 
     * @type {string}
     * @memberof CatalogDataCategoryInterface
     */
    'updated_at'?: string;
    /**
     * 
     * @type {string}
     * @memberof CatalogDataCategoryInterface
     */
    'path'?: string;
    /**
     * 
     * @type {Array<string>}
     * @memberof CatalogDataCategoryInterface
     */
    'available_sort_by'?: Array<string>;
    /**
     * 
     * @type {boolean}
     * @memberof CatalogDataCategoryInterface
     */
    'include_in_menu'?: boolean;
    /**
     * ExtensionInterface class for @see \\Magento\\Catalog\\Api\\Data\\CategoryInterface
     * @type {object}
     * @memberof CatalogDataCategoryInterface
     */
    'extension_attributes'?: object;
    /**
     * Custom attributes values.
     * @type {Array<FrameworkAttributeInterface>}
     * @memberof CatalogDataCategoryInterface
     */
    'custom_attributes'?: Array<FrameworkAttributeInterface>;
}
/**
 * 
 * @export
 * @interface CatalogDataCategoryLinkInterface
 */
export interface CatalogDataCategoryLinkInterface {
    /**
     * 
     * @type {number}
     * @memberof CatalogDataCategoryLinkInterface
     */
    'position'?: number;
    /**
     * Category id
     * @type {string}
     * @memberof CatalogDataCategoryLinkInterface
     */
    'category_id': string;
    /**
     * ExtensionInterface class for @see \\Magento\\Catalog\\Api\\Data\\CategoryLinkInterface
     * @type {object}
     * @memberof CatalogDataCategoryLinkInterface
     */
    'extension_attributes'?: object;
}
/**
 * 
 * @export
 * @interface CatalogDataCategoryProductLinkInterface
 */
export interface CatalogDataCategoryProductLinkInterface {
    /**
     * 
     * @type {string}
     * @memberof CatalogDataCategoryProductLinkInterface
     */
    'sku'?: string;
    /**
     * 
     * @type {number}
     * @memberof CatalogDataCategoryProductLinkInterface
     */
    'position'?: number;
    /**
     * Category id
     * @type {string}
     * @memberof CatalogDataCategoryProductLinkInterface
     */
    'category_id': string;
    /**
     * ExtensionInterface class for @see \\Magento\\Catalog\\Api\\Data\\CategoryProductLinkInterface
     * @type {object}
     * @memberof CatalogDataCategoryProductLinkInterface
     */
    'extension_attributes'?: object;
}
/**
 * 
 * @export
 * @interface CatalogDataCategorySearchResultsInterface
 */
export interface CatalogDataCategorySearchResultsInterface {
    /**
     * Categories
     * @type {Array<CatalogDataCategoryInterface>}
     * @memberof CatalogDataCategorySearchResultsInterface
     */
    'items': Array<CatalogDataCategoryInterface>;
    /**
     * 
     * @type {FrameworkSearchCriteriaInterface}
     * @memberof CatalogDataCategorySearchResultsInterface
     */
    'search_criteria': FrameworkSearchCriteriaInterface;
    /**
     * Total count.
     * @type {number}
     * @memberof CatalogDataCategorySearchResultsInterface
     */
    'total_count': number;
}
/**
 * 
 * @export
 * @interface CatalogDataCategoryTreeInterface
 */
export interface CatalogDataCategoryTreeInterface {
    /**
     * 
     * @type {number}
     * @memberof CatalogDataCategoryTreeInterface
     */
    'id'?: number;
    /**
     * Parent category ID
     * @type {number}
     * @memberof CatalogDataCategoryTreeInterface
     */
    'parent_id': number;
    /**
     * Category name
     * @type {string}
     * @memberof CatalogDataCategoryTreeInterface
     */
    'name': string;
    /**
     * Whether category is active
     * @type {boolean}
     * @memberof CatalogDataCategoryTreeInterface
     */
    'is_active': boolean;
    /**
     * Category position
     * @type {number}
     * @memberof CatalogDataCategoryTreeInterface
     */
    'position': number;
    /**
     * Category level
     * @type {number}
     * @memberof CatalogDataCategoryTreeInterface
     */
    'level': number;
    /**
     * Product count
     * @type {number}
     * @memberof CatalogDataCategoryTreeInterface
     */
    'product_count': number;
    /**
     * 
     * @type {Array<CatalogDataCategoryTreeInterface>}
     * @memberof CatalogDataCategoryTreeInterface
     */
    'children_data': Array<CatalogDataCategoryTreeInterface>;
}
/**
 * Cost interface.
 * @export
 * @interface CatalogDataCostInterface
 */
export interface CatalogDataCostInterface {
    /**
     * Cost value.
     * @type {number}
     * @memberof CatalogDataCostInterface
     */
    'cost': number;
    /**
     * Store id.
     * @type {number}
     * @memberof CatalogDataCostInterface
     */
    'store_id': number;
    /**
     * SKU.
     * @type {string}
     * @memberof CatalogDataCostInterface
     */
    'sku': string;
    /**
     * ExtensionInterface class for @see \\Magento\\Catalog\\Api\\Data\\CostInterface
     * @type {object}
     * @memberof CatalogDataCostInterface
     */
    'extension_attributes'?: object;
}
/**
 * ExtensionInterface class for @see \\Magento\\Catalog\\Api\\Data\\CustomOptionInterface
 * @export
 * @interface CatalogDataCustomOptionExtensionInterface
 */
export interface CatalogDataCustomOptionExtensionInterface {
    /**
     * 
     * @type {FrameworkDataImageContentInterface}
     * @memberof CatalogDataCustomOptionExtensionInterface
     */
    'file_info'?: FrameworkDataImageContentInterface;
}
/**
 * Interface CustomOptionInterface
 * @export
 * @interface CatalogDataCustomOptionInterface
 */
export interface CatalogDataCustomOptionInterface {
    /**
     * Option id
     * @type {string}
     * @memberof CatalogDataCustomOptionInterface
     */
    'option_id': string;
    /**
     * Option value
     * @type {string}
     * @memberof CatalogDataCustomOptionInterface
     */
    'option_value': string;
    /**
     * 
     * @type {CatalogDataCustomOptionExtensionInterface}
     * @memberof CatalogDataCustomOptionInterface
     */
    'extension_attributes'?: CatalogDataCustomOptionExtensionInterface;
}
/**
 * Interface returned in case of incorrect price passed to efficient price API.
 * @export
 * @interface CatalogDataPriceUpdateResultInterface
 */
export interface CatalogDataPriceUpdateResultInterface {
    /**
     * Error message, that contains description of error occurred during price update.
     * @type {string}
     * @memberof CatalogDataPriceUpdateResultInterface
     */
    'message': string;
    /**
     * Parameters, that could be displayed in error message placeholders.
     * @type {Array<string>}
     * @memberof CatalogDataPriceUpdateResultInterface
     */
    'parameters': Array<string>;
    /**
     * ExtensionInterface class for @see \\Magento\\Catalog\\Api\\Data\\PriceUpdateResultInterface
     * @type {object}
     * @memberof CatalogDataPriceUpdateResultInterface
     */
    'extension_attributes'?: object;
}
/**
 * 
 * @export
 * @interface CatalogDataProductAttributeInterface
 */
export interface CatalogDataProductAttributeInterface {
    /**
     * WYSIWYG flag
     * @type {boolean}
     * @memberof CatalogDataProductAttributeInterface
     */
    'is_wysiwyg_enabled'?: boolean;
    /**
     * The HTML tags are allowed on the frontend
     * @type {boolean}
     * @memberof CatalogDataProductAttributeInterface
     */
    'is_html_allowed_on_front'?: boolean;
    /**
     * It is used for sorting in product listing
     * @type {boolean}
     * @memberof CatalogDataProductAttributeInterface
     */
    'used_for_sort_by'?: boolean;
    /**
     * It used in layered navigation
     * @type {boolean}
     * @memberof CatalogDataProductAttributeInterface
     */
    'is_filterable'?: boolean;
    /**
     * It is used in search results layered navigation
     * @type {boolean}
     * @memberof CatalogDataProductAttributeInterface
     */
    'is_filterable_in_search'?: boolean;
    /**
     * It is used in catalog product grid
     * @type {boolean}
     * @memberof CatalogDataProductAttributeInterface
     */
    'is_used_in_grid'?: boolean;
    /**
     * It is visible in catalog product grid
     * @type {boolean}
     * @memberof CatalogDataProductAttributeInterface
     */
    'is_visible_in_grid'?: boolean;
    /**
     * It is filterable in catalog product grid
     * @type {boolean}
     * @memberof CatalogDataProductAttributeInterface
     */
    'is_filterable_in_grid'?: boolean;
    /**
     * Position
     * @type {number}
     * @memberof CatalogDataProductAttributeInterface
     */
    'position'?: number;
    /**
     * Apply to value for the element
     * @type {Array<string>}
     * @memberof CatalogDataProductAttributeInterface
     */
    'apply_to'?: Array<string>;
    /**
     * The attribute can be used in Quick Search
     * @type {string}
     * @memberof CatalogDataProductAttributeInterface
     */
    'is_searchable'?: string;
    /**
     * The attribute can be used in Advanced Search
     * @type {string}
     * @memberof CatalogDataProductAttributeInterface
     */
    'is_visible_in_advanced_search'?: string;
    /**
     * The attribute can be compared on the frontend
     * @type {string}
     * @memberof CatalogDataProductAttributeInterface
     */
    'is_comparable'?: string;
    /**
     * The attribute can be used for promo rules
     * @type {string}
     * @memberof CatalogDataProductAttributeInterface
     */
    'is_used_for_promo_rules'?: string;
    /**
     * The attribute is visible on the frontend
     * @type {string}
     * @memberof CatalogDataProductAttributeInterface
     */
    'is_visible_on_front'?: string;
    /**
     * The attribute can be used in product listing
     * @type {string}
     * @memberof CatalogDataProductAttributeInterface
     */
    'used_in_product_listing'?: string;
    /**
     * Attribute is visible on frontend.
     * @type {boolean}
     * @memberof CatalogDataProductAttributeInterface
     */
    'is_visible'?: boolean;
    /**
     * Attribute scope
     * @type {string}
     * @memberof CatalogDataProductAttributeInterface
     */
    'scope'?: string;
    /**
     * ExtensionInterface class for @see \\Magento\\Catalog\\Api\\Data\\EavAttributeInterface
     * @type {object}
     * @memberof CatalogDataProductAttributeInterface
     */
    'extension_attributes'?: object;
    /**
     * Id of the attribute.
     * @type {number}
     * @memberof CatalogDataProductAttributeInterface
     */
    'attribute_id'?: number;
    /**
     * Code of the attribute.
     * @type {string}
     * @memberof CatalogDataProductAttributeInterface
     */
    'attribute_code': string;
    /**
     * HTML for input element.
     * @type {string}
     * @memberof CatalogDataProductAttributeInterface
     */
    'frontend_input': string;
    /**
     * Entity type id
     * @type {string}
     * @memberof CatalogDataProductAttributeInterface
     */
    'entity_type_id': string;
    /**
     * Attribute is required.
     * @type {boolean}
     * @memberof CatalogDataProductAttributeInterface
     */
    'is_required': boolean;
    /**
     * Options of the attribute (key => value pairs for select)
     * @type {Array<EavDataAttributeOptionInterface>}
     * @memberof CatalogDataProductAttributeInterface
     */
    'options'?: Array<EavDataAttributeOptionInterface>;
    /**
     * Current attribute has been defined by a user.
     * @type {boolean}
     * @memberof CatalogDataProductAttributeInterface
     */
    'is_user_defined'?: boolean;
    /**
     * Frontend label for default store
     * @type {string}
     * @memberof CatalogDataProductAttributeInterface
     */
    'default_frontend_label'?: string;
    /**
     * Frontend label for each store
     * @type {Array<EavDataAttributeFrontendLabelInterface>}
     * @memberof CatalogDataProductAttributeInterface
     */
    'frontend_labels': Array<EavDataAttributeFrontendLabelInterface>;
    /**
     * The note attribute for the element.
     * @type {string}
     * @memberof CatalogDataProductAttributeInterface
     */
    'note'?: string;
    /**
     * Backend type.
     * @type {string}
     * @memberof CatalogDataProductAttributeInterface
     */
    'backend_type'?: string;
    /**
     * Backend model
     * @type {string}
     * @memberof CatalogDataProductAttributeInterface
     */
    'backend_model'?: string;
    /**
     * Source model
     * @type {string}
     * @memberof CatalogDataProductAttributeInterface
     */
    'source_model'?: string;
    /**
     * Default value for the element.
     * @type {string}
     * @memberof CatalogDataProductAttributeInterface
     */
    'default_value'?: string;
    /**
     * This is a unique attribute
     * @type {string}
     * @memberof CatalogDataProductAttributeInterface
     */
    'is_unique'?: string;
    /**
     * Frontend class of attribute
     * @type {string}
     * @memberof CatalogDataProductAttributeInterface
     */
    'frontend_class'?: string;
    /**
     * Validation rules.
     * @type {Array<EavDataAttributeValidationRuleInterface>}
     * @memberof CatalogDataProductAttributeInterface
     */
    'validation_rules'?: Array<EavDataAttributeValidationRuleInterface>;
    /**
     * Custom attributes values.
     * @type {Array<FrameworkAttributeInterface>}
     * @memberof CatalogDataProductAttributeInterface
     */
    'custom_attributes'?: Array<FrameworkAttributeInterface>;
}
/**
 * ExtensionInterface class for @see \\Magento\\Catalog\\Api\\Data\\ProductAttributeMediaGalleryEntryInterface
 * @export
 * @interface CatalogDataProductAttributeMediaGalleryEntryExtensionInterface
 */
export interface CatalogDataProductAttributeMediaGalleryEntryExtensionInterface {
    /**
     * 
     * @type {FrameworkDataVideoContentInterface}
     * @memberof CatalogDataProductAttributeMediaGalleryEntryExtensionInterface
     */
    'video_content'?: FrameworkDataVideoContentInterface;
}
/**
 * 
 * @export
 * @interface CatalogDataProductAttributeMediaGalleryEntryInterface
 */
export interface CatalogDataProductAttributeMediaGalleryEntryInterface {
    /**
     * Gallery entry ID
     * @type {number}
     * @memberof CatalogDataProductAttributeMediaGalleryEntryInterface
     */
    'id'?: number;
    /**
     * Media type
     * @type {string}
     * @memberof CatalogDataProductAttributeMediaGalleryEntryInterface
     */
    'media_type': string;
    /**
     * Gallery entry alternative text
     * @type {string}
     * @memberof CatalogDataProductAttributeMediaGalleryEntryInterface
     */
    'label': string;
    /**
     * Gallery entry position (sort order)
     * @type {number}
     * @memberof CatalogDataProductAttributeMediaGalleryEntryInterface
     */
    'position': number;
    /**
     * If gallery entry is hidden from product page
     * @type {boolean}
     * @memberof CatalogDataProductAttributeMediaGalleryEntryInterface
     */
    'disabled': boolean;
    /**
     * Gallery entry image types (thumbnail, image, small_image etc)
     * @type {Array<string>}
     * @memberof CatalogDataProductAttributeMediaGalleryEntryInterface
     */
    'types': Array<string>;
    /**
     * File path
     * @type {string}
     * @memberof CatalogDataProductAttributeMediaGalleryEntryInterface
     */
    'file'?: string;
    /**
     * 
     * @type {FrameworkDataImageContentInterface}
     * @memberof CatalogDataProductAttributeMediaGalleryEntryInterface
     */
    'content'?: FrameworkDataImageContentInterface;
    /**
     * 
     * @type {CatalogDataProductAttributeMediaGalleryEntryExtensionInterface}
     * @memberof CatalogDataProductAttributeMediaGalleryEntryInterface
     */
    'extension_attributes'?: CatalogDataProductAttributeMediaGalleryEntryExtensionInterface;
}
/**
 * 
 * @export
 * @interface CatalogDataProductAttributeSearchResultsInterface
 */
export interface CatalogDataProductAttributeSearchResultsInterface {
    /**
     * Attributes list.
     * @type {Array<CatalogDataProductAttributeInterface>}
     * @memberof CatalogDataProductAttributeSearchResultsInterface
     */
    'items': Array<CatalogDataProductAttributeInterface>;
    /**
     * 
     * @type {FrameworkSearchCriteriaInterface}
     * @memberof CatalogDataProductAttributeSearchResultsInterface
     */
    'search_criteria': FrameworkSearchCriteriaInterface;
    /**
     * Total count.
     * @type {number}
     * @memberof CatalogDataProductAttributeSearchResultsInterface
     */
    'total_count': number;
}
/**
 * 
 * @export
 * @interface CatalogDataProductAttributeTypeInterface
 */
export interface CatalogDataProductAttributeTypeInterface {
    /**
     * Value
     * @type {string}
     * @memberof CatalogDataProductAttributeTypeInterface
     */
    'value': string;
    /**
     * Type label
     * @type {string}
     * @memberof CatalogDataProductAttributeTypeInterface
     */
    'label': string;
    /**
     * ExtensionInterface class for @see \\Magento\\Catalog\\Api\\Data\\ProductAttributeTypeInterface
     * @type {object}
     * @memberof CatalogDataProductAttributeTypeInterface
     */
    'extension_attributes'?: object;
}
/**
 * ExtensionInterface class for @see \\Magento\\Catalog\\Api\\Data\\ProductCustomOptionInterface
 * @export
 * @interface CatalogDataProductCustomOptionExtensionInterface
 */
export interface CatalogDataProductCustomOptionExtensionInterface {
    /**
     * 
     * @type {string}
     * @memberof CatalogDataProductCustomOptionExtensionInterface
     */
    'vertex_flex_field'?: string;
}
/**
 * 
 * @export
 * @interface CatalogDataProductCustomOptionInterface
 */
export interface CatalogDataProductCustomOptionInterface {
    /**
     * Product SKU
     * @type {string}
     * @memberof CatalogDataProductCustomOptionInterface
     */
    'product_sku': string;
    /**
     * Option id
     * @type {number}
     * @memberof CatalogDataProductCustomOptionInterface
     */
    'option_id'?: number;
    /**
     * Option title
     * @type {string}
     * @memberof CatalogDataProductCustomOptionInterface
     */
    'title': string;
    /**
     * Option type
     * @type {string}
     * @memberof CatalogDataProductCustomOptionInterface
     */
    'type': string;
    /**
     * Sort order
     * @type {number}
     * @memberof CatalogDataProductCustomOptionInterface
     */
    'sort_order': number;
    /**
     * Is require
     * @type {boolean}
     * @memberof CatalogDataProductCustomOptionInterface
     */
    'is_require': boolean;
    /**
     * Price
     * @type {number}
     * @memberof CatalogDataProductCustomOptionInterface
     */
    'price'?: number;
    /**
     * Price type
     * @type {string}
     * @memberof CatalogDataProductCustomOptionInterface
     */
    'price_type'?: string;
    /**
     * Sku
     * @type {string}
     * @memberof CatalogDataProductCustomOptionInterface
     */
    'sku'?: string;
    /**
     * 
     * @type {string}
     * @memberof CatalogDataProductCustomOptionInterface
     */
    'file_extension'?: string;
    /**
     * 
     * @type {number}
     * @memberof CatalogDataProductCustomOptionInterface
     */
    'max_characters'?: number;
    /**
     * 
     * @type {number}
     * @memberof CatalogDataProductCustomOptionInterface
     */
    'image_size_x'?: number;
    /**
     * 
     * @type {number}
     * @memberof CatalogDataProductCustomOptionInterface
     */
    'image_size_y'?: number;
    /**
     * 
     * @type {Array<CatalogDataProductCustomOptionValuesInterface>}
     * @memberof CatalogDataProductCustomOptionInterface
     */
    'values'?: Array<CatalogDataProductCustomOptionValuesInterface>;
    /**
     * 
     * @type {CatalogDataProductCustomOptionExtensionInterface}
     * @memberof CatalogDataProductCustomOptionInterface
     */
    'extension_attributes'?: CatalogDataProductCustomOptionExtensionInterface;
}
/**
 * 
 * @export
 * @interface CatalogDataProductCustomOptionTypeInterface
 */
export interface CatalogDataProductCustomOptionTypeInterface {
    /**
     * Option type label
     * @type {string}
     * @memberof CatalogDataProductCustomOptionTypeInterface
     */
    'label': string;
    /**
     * Option type code
     * @type {string}
     * @memberof CatalogDataProductCustomOptionTypeInterface
     */
    'code': string;
    /**
     * Option type group
     * @type {string}
     * @memberof CatalogDataProductCustomOptionTypeInterface
     */
    'group': string;
    /**
     * ExtensionInterface class for @see \\Magento\\Catalog\\Api\\Data\\ProductCustomOptionTypeInterface
     * @type {object}
     * @memberof CatalogDataProductCustomOptionTypeInterface
     */
    'extension_attributes'?: object;
}
/**
 * 
 * @export
 * @interface CatalogDataProductCustomOptionValuesInterface
 */
export interface CatalogDataProductCustomOptionValuesInterface {
    /**
     * Option title
     * @type {string}
     * @memberof CatalogDataProductCustomOptionValuesInterface
     */
    'title': string;
    /**
     * Sort order
     * @type {number}
     * @memberof CatalogDataProductCustomOptionValuesInterface
     */
    'sort_order': number;
    /**
     * Price
     * @type {number}
     * @memberof CatalogDataProductCustomOptionValuesInterface
     */
    'price': number;
    /**
     * Price type
     * @type {string}
     * @memberof CatalogDataProductCustomOptionValuesInterface
     */
    'price_type': string;
    /**
     * Sku
     * @type {string}
     * @memberof CatalogDataProductCustomOptionValuesInterface
     */
    'sku'?: string;
    /**
     * Option type id
     * @type {number}
     * @memberof CatalogDataProductCustomOptionValuesInterface
     */
    'option_type_id'?: number;
}
/**
 * ExtensionInterface class for @see \\Magento\\Catalog\\Api\\Data\\ProductInterface
 * @export
 * @interface CatalogDataProductExtensionInterface
 */
export interface CatalogDataProductExtensionInterface {
    /**
     * 
     * @type {Array<number>}
     * @memberof CatalogDataProductExtensionInterface
     */
    'website_ids'?: Array<number>;
    /**
     * 
     * @type {Array<CatalogDataCategoryLinkInterface>}
     * @memberof CatalogDataProductExtensionInterface
     */
    'category_links'?: Array<CatalogDataCategoryLinkInterface>;
    /**
     * 
     * @type {Array<BundleDataOptionInterface>}
     * @memberof CatalogDataProductExtensionInterface
     */
    'bundle_product_options'?: Array<BundleDataOptionInterface>;
    /**
     * 
     * @type {CatalogInventoryDataStockItemInterface}
     * @memberof CatalogDataProductExtensionInterface
     */
    'stock_item'?: CatalogInventoryDataStockItemInterface;
    /**
     * 
     * @type {Array<ConfigurableProductDataOptionInterface>}
     * @memberof CatalogDataProductExtensionInterface
     */
    'configurable_product_options'?: Array<ConfigurableProductDataOptionInterface>;
    /**
     * 
     * @type {Array<number>}
     * @memberof CatalogDataProductExtensionInterface
     */
    'configurable_product_links'?: Array<number>;
    /**
     * 
     * @type {Array<DownloadableDataLinkInterface>}
     * @memberof CatalogDataProductExtensionInterface
     */
    'downloadable_product_links'?: Array<DownloadableDataLinkInterface>;
    /**
     * 
     * @type {Array<DownloadableDataSampleInterface>}
     * @memberof CatalogDataProductExtensionInterface
     */
    'downloadable_product_samples'?: Array<DownloadableDataSampleInterface>;
    /**
     * 
     * @type {Array<GiftCardDataGiftcardAmountInterface>}
     * @memberof CatalogDataProductExtensionInterface
     */
    'giftcard_amounts'?: Array<GiftCardDataGiftcardAmountInterface>;
}
/**
 * 
 * @export
 * @interface CatalogDataProductInterface
 */
export interface CatalogDataProductInterface {
    /**
     * Id
     * @type {number}
     * @memberof CatalogDataProductInterface
     */
    'id'?: number;
    /**
     * Sku
     * @type {string}
     * @memberof CatalogDataProductInterface
     */
    'sku': string;
    /**
     * Name
     * @type {string}
     * @memberof CatalogDataProductInterface
     */
    'name'?: string;
    /**
     * Attribute set id
     * @type {number}
     * @memberof CatalogDataProductInterface
     */
    'attribute_set_id'?: number;
    /**
     * Price
     * @type {number}
     * @memberof CatalogDataProductInterface
     */
    'price'?: number;
    /**
     * Status
     * @type {number}
     * @memberof CatalogDataProductInterface
     */
    'status'?: number;
    /**
     * Visibility
     * @type {number}
     * @memberof CatalogDataProductInterface
     */
    'visibility'?: number;
    /**
     * Type id
     * @type {string}
     * @memberof CatalogDataProductInterface
     */
    'type_id'?: string;
    /**
     * Created date
     * @type {string}
     * @memberof CatalogDataProductInterface
     */
    'created_at'?: string;
    /**
     * Updated date
     * @type {string}
     * @memberof CatalogDataProductInterface
     */
    'updated_at'?: string;
    /**
     * Weight
     * @type {number}
     * @memberof CatalogDataProductInterface
     */
    'weight'?: number;
    /**
     * 
     * @type {CatalogDataProductExtensionInterface}
     * @memberof CatalogDataProductInterface
     */
    'extension_attributes'?: CatalogDataProductExtensionInterface;
    /**
     * Product links info
     * @type {Array<CatalogDataProductLinkInterface>}
     * @memberof CatalogDataProductInterface
     */
    'product_links'?: Array<CatalogDataProductLinkInterface>;
    /**
     * List of product options
     * @type {Array<CatalogDataProductCustomOptionInterface>}
     * @memberof CatalogDataProductInterface
     */
    'options'?: Array<CatalogDataProductCustomOptionInterface>;
    /**
     * Media gallery entries
     * @type {Array<CatalogDataProductAttributeMediaGalleryEntryInterface>}
     * @memberof CatalogDataProductInterface
     */
    'media_gallery_entries'?: Array<CatalogDataProductAttributeMediaGalleryEntryInterface>;
    /**
     * List of product tier prices
     * @type {Array<CatalogDataProductTierPriceInterface>}
     * @memberof CatalogDataProductInterface
     */
    'tier_prices'?: Array<CatalogDataProductTierPriceInterface>;
    /**
     * Custom attributes values.
     * @type {Array<FrameworkAttributeInterface>}
     * @memberof CatalogDataProductInterface
     */
    'custom_attributes'?: Array<FrameworkAttributeInterface>;
}
/**
 * 
 * @export
 * @interface CatalogDataProductLinkAttributeInterface
 */
export interface CatalogDataProductLinkAttributeInterface {
    /**
     * Attribute code
     * @type {string}
     * @memberof CatalogDataProductLinkAttributeInterface
     */
    'code': string;
    /**
     * Attribute type
     * @type {string}
     * @memberof CatalogDataProductLinkAttributeInterface
     */
    'type': string;
    /**
     * ExtensionInterface class for @see \\Magento\\Catalog\\Api\\Data\\ProductLinkAttributeInterface
     * @type {object}
     * @memberof CatalogDataProductLinkAttributeInterface
     */
    'extension_attributes'?: object;
}
/**
 * ExtensionInterface class for @see \\Magento\\Catalog\\Api\\Data\\ProductLinkInterface
 * @export
 * @interface CatalogDataProductLinkExtensionInterface
 */
export interface CatalogDataProductLinkExtensionInterface {
    /**
     * 
     * @type {number}
     * @memberof CatalogDataProductLinkExtensionInterface
     */
    'qty'?: number;
}
/**
 * 
 * @export
 * @interface CatalogDataProductLinkInterface
 */
export interface CatalogDataProductLinkInterface {
    /**
     * SKU
     * @type {string}
     * @memberof CatalogDataProductLinkInterface
     */
    'sku': string;
    /**
     * Link type
     * @type {string}
     * @memberof CatalogDataProductLinkInterface
     */
    'link_type': string;
    /**
     * Linked product sku
     * @type {string}
     * @memberof CatalogDataProductLinkInterface
     */
    'linked_product_sku': string;
    /**
     * Linked product type (simple, virtual, etc)
     * @type {string}
     * @memberof CatalogDataProductLinkInterface
     */
    'linked_product_type': string;
    /**
     * Linked item position
     * @type {number}
     * @memberof CatalogDataProductLinkInterface
     */
    'position': number;
    /**
     * 
     * @type {CatalogDataProductLinkExtensionInterface}
     * @memberof CatalogDataProductLinkInterface
     */
    'extension_attributes'?: CatalogDataProductLinkExtensionInterface;
}
/**
 * 
 * @export
 * @interface CatalogDataProductLinkTypeInterface
 */
export interface CatalogDataProductLinkTypeInterface {
    /**
     * Link type code
     * @type {number}
     * @memberof CatalogDataProductLinkTypeInterface
     */
    'code': number;
    /**
     * Link type name
     * @type {string}
     * @memberof CatalogDataProductLinkTypeInterface
     */
    'name': string;
    /**
     * ExtensionInterface class for @see \\Magento\\Catalog\\Api\\Data\\ProductLinkTypeInterface
     * @type {object}
     * @memberof CatalogDataProductLinkTypeInterface
     */
    'extension_attributes'?: object;
}
/**
 * ExtensionInterface class for @see \\Magento\\Catalog\\Api\\Data\\ProductOptionInterface
 * @export
 * @interface CatalogDataProductOptionExtensionInterface
 */
export interface CatalogDataProductOptionExtensionInterface {
    /**
     * 
     * @type {Array<CatalogDataCustomOptionInterface>}
     * @memberof CatalogDataProductOptionExtensionInterface
     */
    'custom_options'?: Array<CatalogDataCustomOptionInterface>;
    /**
     * 
     * @type {Array<BundleDataBundleOptionInterface>}
     * @memberof CatalogDataProductOptionExtensionInterface
     */
    'bundle_options'?: Array<BundleDataBundleOptionInterface>;
    /**
     * 
     * @type {Array<ConfigurableProductDataConfigurableItemOptionValueInterface>}
     * @memberof CatalogDataProductOptionExtensionInterface
     */
    'configurable_item_options'?: Array<ConfigurableProductDataConfigurableItemOptionValueInterface>;
    /**
     * 
     * @type {DownloadableDataDownloadableOptionInterface}
     * @memberof CatalogDataProductOptionExtensionInterface
     */
    'downloadable_option'?: DownloadableDataDownloadableOptionInterface;
    /**
     * 
     * @type {GiftCardDataGiftCardOptionInterface}
     * @memberof CatalogDataProductOptionExtensionInterface
     */
    'giftcard_item_option'?: GiftCardDataGiftCardOptionInterface;
}
/**
 * Product option interface
 * @export
 * @interface CatalogDataProductOptionInterface
 */
export interface CatalogDataProductOptionInterface {
    /**
     * 
     * @type {CatalogDataProductOptionExtensionInterface}
     * @memberof CatalogDataProductOptionInterface
     */
    'extension_attributes'?: CatalogDataProductOptionExtensionInterface;
}
/**
 * Button interface. This interface represents all manner of product buttons: add to cart, add to compare, etc... The buttons describes by this interface should have interaction with backend
 * @export
 * @interface CatalogDataProductRenderButtonInterface
 */
export interface CatalogDataProductRenderButtonInterface {
    /**
     * Post data
     * @type {string}
     * @memberof CatalogDataProductRenderButtonInterface
     */
    'post_data': string;
    /**
     * Url, needed to add product to cart
     * @type {string}
     * @memberof CatalogDataProductRenderButtonInterface
     */
    'url': string;
    /**
     * Flag whether a product has options or not
     * @type {boolean}
     * @memberof CatalogDataProductRenderButtonInterface
     */
    'required_options': boolean;
    /**
     * ExtensionInterface class for @see \\Magento\\Catalog\\Api\\Data\\ProductRender\\ButtonInterface
     * @type {object}
     * @memberof CatalogDataProductRenderButtonInterface
     */
    'extension_attributes'?: object;
}
/**
 * ExtensionInterface class for @see \\Magento\\Catalog\\Api\\Data\\ProductRenderInterface
 * @export
 * @interface CatalogDataProductRenderExtensionInterface
 */
export interface CatalogDataProductRenderExtensionInterface {
    /**
     * 
     * @type {CatalogDataProductRenderButtonInterface}
     * @memberof CatalogDataProductRenderExtensionInterface
     */
    'wishlist_button'?: CatalogDataProductRenderButtonInterface;
    /**
     * 
     * @type {string}
     * @memberof CatalogDataProductRenderExtensionInterface
     */
    'review_html'?: string;
}
/**
 * Formatted Price interface. Aggregate formatted html with price representations. E.g.: <span class=\"price\">$9.00</span> Consider currency, rounding and html
 * @export
 * @interface CatalogDataProductRenderFormattedPriceInfoInterface
 */
export interface CatalogDataProductRenderFormattedPriceInfoInterface {
    /**
     * Html with final price
     * @type {string}
     * @memberof CatalogDataProductRenderFormattedPriceInfoInterface
     */
    'final_price': string;
    /**
     * Max price of a product
     * @type {string}
     * @memberof CatalogDataProductRenderFormattedPriceInfoInterface
     */
    'max_price': string;
    /**
     * The minimal price of the product or variation
     * @type {string}
     * @memberof CatalogDataProductRenderFormattedPriceInfoInterface
     */
    'minimal_price': string;
    /**
     * Max regular price
     * @type {string}
     * @memberof CatalogDataProductRenderFormattedPriceInfoInterface
     */
    'max_regular_price': string;
    /**
     * Minimal regular price
     * @type {string}
     * @memberof CatalogDataProductRenderFormattedPriceInfoInterface
     */
    'minimal_regular_price': string;
    /**
     * Special price
     * @type {string}
     * @memberof CatalogDataProductRenderFormattedPriceInfoInterface
     */
    'special_price': string;
    /**
     * Price - is price of product without discounts and special price with taxes and fixed product tax
     * @type {string}
     * @memberof CatalogDataProductRenderFormattedPriceInfoInterface
     */
    'regular_price': string;
    /**
     * ExtensionInterface class for @see \\Magento\\Catalog\\Api\\Data\\ProductRender\\FormattedPriceInfoInterface
     * @type {object}
     * @memberof CatalogDataProductRenderFormattedPriceInfoInterface
     */
    'extension_attributes'?: object;
}
/**
 * Product Render image interface. Represents physical characteristics of image, that can be used in product listing or product view
 * @export
 * @interface CatalogDataProductRenderImageInterface
 */
export interface CatalogDataProductRenderImageInterface {
    /**
     * Image url
     * @type {string}
     * @memberof CatalogDataProductRenderImageInterface
     */
    'url': string;
    /**
     * Image code
     * @type {string}
     * @memberof CatalogDataProductRenderImageInterface
     */
    'code': string;
    /**
     * Image height
     * @type {number}
     * @memberof CatalogDataProductRenderImageInterface
     */
    'height': number;
    /**
     * Image width in px
     * @type {number}
     * @memberof CatalogDataProductRenderImageInterface
     */
    'width': number;
    /**
     * Image label
     * @type {string}
     * @memberof CatalogDataProductRenderImageInterface
     */
    'label': string;
    /**
     * Resize width
     * @type {number}
     * @memberof CatalogDataProductRenderImageInterface
     */
    'resized_width': number;
    /**
     * Resize height
     * @type {number}
     * @memberof CatalogDataProductRenderImageInterface
     */
    'resized_height': number;
    /**
     * ExtensionInterface class for @see \\Magento\\Catalog\\Api\\Data\\ProductRender\\ImageInterface
     * @type {object}
     * @memberof CatalogDataProductRenderImageInterface
     */
    'extension_attributes'?: object;
}
/**
 * Represents Data Object which holds enough information to render product This information is put into part as Add To Cart or Add to Compare Data or Price Data
 * @export
 * @interface CatalogDataProductRenderInterface
 */
export interface CatalogDataProductRenderInterface {
    /**
     * 
     * @type {CatalogDataProductRenderButtonInterface}
     * @memberof CatalogDataProductRenderInterface
     */
    'add_to_cart_button': CatalogDataProductRenderButtonInterface;
    /**
     * 
     * @type {CatalogDataProductRenderButtonInterface}
     * @memberof CatalogDataProductRenderInterface
     */
    'add_to_compare_button': CatalogDataProductRenderButtonInterface;
    /**
     * 
     * @type {CatalogDataProductRenderPriceInfoInterface}
     * @memberof CatalogDataProductRenderInterface
     */
    'price_info': CatalogDataProductRenderPriceInfoInterface;
    /**
     * Enough information, that needed to render image on front
     * @type {Array<CatalogDataProductRenderImageInterface>}
     * @memberof CatalogDataProductRenderInterface
     */
    'images': Array<CatalogDataProductRenderImageInterface>;
    /**
     * Product url
     * @type {string}
     * @memberof CatalogDataProductRenderInterface
     */
    'url': string;
    /**
     * Product identifier
     * @type {number}
     * @memberof CatalogDataProductRenderInterface
     */
    'id': number;
    /**
     * Product name
     * @type {string}
     * @memberof CatalogDataProductRenderInterface
     */
    'name': string;
    /**
     * Product type. Such as bundle, grouped, simple, etc...
     * @type {string}
     * @memberof CatalogDataProductRenderInterface
     */
    'type': string;
    /**
     * Information about product saleability (In Stock)
     * @type {string}
     * @memberof CatalogDataProductRenderInterface
     */
    'is_salable': string;
    /**
     * Information about current store id or requested store id
     * @type {number}
     * @memberof CatalogDataProductRenderInterface
     */
    'store_id': number;
    /**
     * Current or desired currency code to product
     * @type {string}
     * @memberof CatalogDataProductRenderInterface
     */
    'currency_code': string;
    /**
     * 
     * @type {CatalogDataProductRenderExtensionInterface}
     * @memberof CatalogDataProductRenderInterface
     */
    'extension_attributes': CatalogDataProductRenderExtensionInterface;
}
/**
 * ExtensionInterface class for @see \\Magento\\Catalog\\Api\\Data\\ProductRender\\PriceInfoInterface
 * @export
 * @interface CatalogDataProductRenderPriceInfoExtensionInterface
 */
export interface CatalogDataProductRenderPriceInfoExtensionInterface {
    /**
     * 
     * @type {MsrpDataProductRenderMsrpPriceInfoInterface}
     * @memberof CatalogDataProductRenderPriceInfoExtensionInterface
     */
    'msrp'?: MsrpDataProductRenderMsrpPriceInfoInterface;
    /**
     * 
     * @type {CatalogDataProductRenderPriceInfoInterface}
     * @memberof CatalogDataProductRenderPriceInfoExtensionInterface
     */
    'tax_adjustments'?: CatalogDataProductRenderPriceInfoInterface;
    /**
     * 
     * @type {Array<WeeeDataProductRenderWeeeAdjustmentAttributeInterface>}
     * @memberof CatalogDataProductRenderPriceInfoExtensionInterface
     */
    'weee_attributes'?: Array<WeeeDataProductRenderWeeeAdjustmentAttributeInterface>;
    /**
     * 
     * @type {string}
     * @memberof CatalogDataProductRenderPriceInfoExtensionInterface
     */
    'weee_adjustment'?: string;
}
/**
 * Price interface.
 * @export
 * @interface CatalogDataProductRenderPriceInfoInterface
 */
export interface CatalogDataProductRenderPriceInfoInterface {
    /**
     * Final price
     * @type {number}
     * @memberof CatalogDataProductRenderPriceInfoInterface
     */
    'final_price': number;
    /**
     * Max price of a product
     * @type {number}
     * @memberof CatalogDataProductRenderPriceInfoInterface
     */
    'max_price': number;
    /**
     * Max regular price
     * @type {number}
     * @memberof CatalogDataProductRenderPriceInfoInterface
     */
    'max_regular_price': number;
    /**
     * Minimal regular price
     * @type {number}
     * @memberof CatalogDataProductRenderPriceInfoInterface
     */
    'minimal_regular_price': number;
    /**
     * Special price
     * @type {number}
     * @memberof CatalogDataProductRenderPriceInfoInterface
     */
    'special_price': number;
    /**
     * 
     * @type {number}
     * @memberof CatalogDataProductRenderPriceInfoInterface
     */
    'minimal_price': number;
    /**
     * Regular price
     * @type {number}
     * @memberof CatalogDataProductRenderPriceInfoInterface
     */
    'regular_price': number;
    /**
     * 
     * @type {CatalogDataProductRenderFormattedPriceInfoInterface}
     * @memberof CatalogDataProductRenderPriceInfoInterface
     */
    'formatted_prices': CatalogDataProductRenderFormattedPriceInfoInterface;
    /**
     * 
     * @type {CatalogDataProductRenderPriceInfoExtensionInterface}
     * @memberof CatalogDataProductRenderPriceInfoInterface
     */
    'extension_attributes'?: CatalogDataProductRenderPriceInfoExtensionInterface;
}
/**
 * Dto that holds render information about products
 * @export
 * @interface CatalogDataProductRenderSearchResultsInterface
 */
export interface CatalogDataProductRenderSearchResultsInterface {
    /**
     * List of products rendered information
     * @type {Array<CatalogDataProductRenderInterface>}
     * @memberof CatalogDataProductRenderSearchResultsInterface
     */
    'items': Array<CatalogDataProductRenderInterface>;
}
/**
 * 
 * @export
 * @interface CatalogDataProductSearchResultsInterface
 */
export interface CatalogDataProductSearchResultsInterface {
    /**
     * Attributes list.
     * @type {Array<CatalogDataProductInterface>}
     * @memberof CatalogDataProductSearchResultsInterface
     */
    'items': Array<CatalogDataProductInterface>;
    /**
     * 
     * @type {FrameworkSearchCriteriaInterface}
     * @memberof CatalogDataProductSearchResultsInterface
     */
    'search_criteria': FrameworkSearchCriteriaInterface;
    /**
     * Total count.
     * @type {number}
     * @memberof CatalogDataProductSearchResultsInterface
     */
    'total_count': number;
}
/**
 * ExtensionInterface class for @see \\Magento\\Catalog\\Api\\Data\\ProductTierPriceInterface
 * @export
 * @interface CatalogDataProductTierPriceExtensionInterface
 */
export interface CatalogDataProductTierPriceExtensionInterface {
    /**
     * 
     * @type {number}
     * @memberof CatalogDataProductTierPriceExtensionInterface
     */
    'percentage_value'?: number;
    /**
     * 
     * @type {number}
     * @memberof CatalogDataProductTierPriceExtensionInterface
     */
    'website_id'?: number;
}
/**
 * 
 * @export
 * @interface CatalogDataProductTierPriceInterface
 */
export interface CatalogDataProductTierPriceInterface {
    /**
     * Customer group id
     * @type {number}
     * @memberof CatalogDataProductTierPriceInterface
     */
    'customer_group_id': number;
    /**
     * Tier qty
     * @type {number}
     * @memberof CatalogDataProductTierPriceInterface
     */
    'qty': number;
    /**
     * Price value
     * @type {number}
     * @memberof CatalogDataProductTierPriceInterface
     */
    'value': number;
    /**
     * 
     * @type {CatalogDataProductTierPriceExtensionInterface}
     * @memberof CatalogDataProductTierPriceInterface
     */
    'extension_attributes'?: CatalogDataProductTierPriceExtensionInterface;
}
/**
 * Product type details
 * @export
 * @interface CatalogDataProductTypeInterface
 */
export interface CatalogDataProductTypeInterface {
    /**
     * Product type code
     * @type {string}
     * @memberof CatalogDataProductTypeInterface
     */
    'name': string;
    /**
     * Product type label
     * @type {string}
     * @memberof CatalogDataProductTypeInterface
     */
    'label': string;
    /**
     * ExtensionInterface class for @see \\Magento\\Catalog\\Api\\Data\\ProductTypeInterface
     * @type {object}
     * @memberof CatalogDataProductTypeInterface
     */
    'extension_attributes'?: object;
}
/**
 * 
 * @export
 * @interface CatalogDataProductWebsiteLinkInterface
 */
export interface CatalogDataProductWebsiteLinkInterface {
    /**
     * 
     * @type {string}
     * @memberof CatalogDataProductWebsiteLinkInterface
     */
    'sku': string;
    /**
     * Website ids
     * @type {number}
     * @memberof CatalogDataProductWebsiteLinkInterface
     */
    'website_id': number;
}
/**
 * Product Special Price Interface is used to encapsulate data that can be processed by efficient price API.
 * @export
 * @interface CatalogDataSpecialPriceInterface
 */
export interface CatalogDataSpecialPriceInterface {
    /**
     * Product special price value.
     * @type {number}
     * @memberof CatalogDataSpecialPriceInterface
     */
    'price': number;
    /**
     * ID of store, that contains special price value.
     * @type {number}
     * @memberof CatalogDataSpecialPriceInterface
     */
    'store_id': number;
    /**
     * SKU of product, that contains special price value.
     * @type {string}
     * @memberof CatalogDataSpecialPriceInterface
     */
    'sku': string;
    /**
     * Start date for special price in Y-m-d H:i:s format.
     * @type {string}
     * @memberof CatalogDataSpecialPriceInterface
     */
    'price_from': string;
    /**
     * End date for special price in Y-m-d H:i:s format.
     * @type {string}
     * @memberof CatalogDataSpecialPriceInterface
     */
    'price_to': string;
    /**
     * ExtensionInterface class for @see \\Magento\\Catalog\\Api\\Data\\SpecialPriceInterface
     * @type {object}
     * @memberof CatalogDataSpecialPriceInterface
     */
    'extension_attributes'?: object;
}
/**
 * Tier price interface.
 * @export
 * @interface CatalogDataTierPriceInterface
 */
export interface CatalogDataTierPriceInterface {
    /**
     * Tier price.
     * @type {number}
     * @memberof CatalogDataTierPriceInterface
     */
    'price': number;
    /**
     * Tier price type.
     * @type {string}
     * @memberof CatalogDataTierPriceInterface
     */
    'price_type': string;
    /**
     * Website id.
     * @type {number}
     * @memberof CatalogDataTierPriceInterface
     */
    'website_id': number;
    /**
     * SKU.
     * @type {string}
     * @memberof CatalogDataTierPriceInterface
     */
    'sku': string;
    /**
     * Customer group.
     * @type {string}
     * @memberof CatalogDataTierPriceInterface
     */
    'customer_group': string;
    /**
     * Quantity.
     * @type {number}
     * @memberof CatalogDataTierPriceInterface
     */
    'quantity': number;
    /**
     * ExtensionInterface class for @see \\Magento\\Catalog\\Api\\Data\\TierPriceInterface
     * @type {object}
     * @memberof CatalogDataTierPriceInterface
     */
    'extension_attributes'?: object;
}
/**
 * Interface StockItemCollectionInterface
 * @export
 * @interface CatalogInventoryDataStockItemCollectionInterface
 */
export interface CatalogInventoryDataStockItemCollectionInterface {
    /**
     * Items
     * @type {Array<CatalogInventoryDataStockItemInterface>}
     * @memberof CatalogInventoryDataStockItemCollectionInterface
     */
    'items': Array<CatalogInventoryDataStockItemInterface>;
    /**
     * 
     * @type {CatalogInventoryStockItemCriteriaInterface}
     * @memberof CatalogInventoryDataStockItemCollectionInterface
     */
    'search_criteria': CatalogInventoryStockItemCriteriaInterface;
    /**
     * Total count.
     * @type {number}
     * @memberof CatalogInventoryDataStockItemCollectionInterface
     */
    'total_count': number;
}
/**
 * Interface StockItem
 * @export
 * @interface CatalogInventoryDataStockItemInterface
 */
export interface CatalogInventoryDataStockItemInterface {
    /**
     * 
     * @type {number}
     * @memberof CatalogInventoryDataStockItemInterface
     */
    'item_id'?: number;
    /**
     * 
     * @type {number}
     * @memberof CatalogInventoryDataStockItemInterface
     */
    'product_id'?: number;
    /**
     * Stock identifier
     * @type {number}
     * @memberof CatalogInventoryDataStockItemInterface
     */
    'stock_id'?: number;
    /**
     * 
     * @type {number}
     * @memberof CatalogInventoryDataStockItemInterface
     */
    'qty': number;
    /**
     * Stock Availability
     * @type {boolean}
     * @memberof CatalogInventoryDataStockItemInterface
     */
    'is_in_stock': boolean;
    /**
     * 
     * @type {boolean}
     * @memberof CatalogInventoryDataStockItemInterface
     */
    'is_qty_decimal': boolean;
    /**
     * 
     * @type {boolean}
     * @memberof CatalogInventoryDataStockItemInterface
     */
    'show_default_notification_message': boolean;
    /**
     * 
     * @type {boolean}
     * @memberof CatalogInventoryDataStockItemInterface
     */
    'use_config_min_qty': boolean;
    /**
     * Minimal quantity available for item status in stock
     * @type {number}
     * @memberof CatalogInventoryDataStockItemInterface
     */
    'min_qty': number;
    /**
     * 
     * @type {number}
     * @memberof CatalogInventoryDataStockItemInterface
     */
    'use_config_min_sale_qty': number;
    /**
     * Minimum Qty Allowed in Shopping Cart or NULL when there is no limitation
     * @type {number}
     * @memberof CatalogInventoryDataStockItemInterface
     */
    'min_sale_qty': number;
    /**
     * 
     * @type {boolean}
     * @memberof CatalogInventoryDataStockItemInterface
     */
    'use_config_max_sale_qty': boolean;
    /**
     * Maximum Qty Allowed in Shopping Cart data wrapper
     * @type {number}
     * @memberof CatalogInventoryDataStockItemInterface
     */
    'max_sale_qty': number;
    /**
     * 
     * @type {boolean}
     * @memberof CatalogInventoryDataStockItemInterface
     */
    'use_config_backorders': boolean;
    /**
     * Backorders status
     * @type {number}
     * @memberof CatalogInventoryDataStockItemInterface
     */
    'backorders': number;
    /**
     * 
     * @type {boolean}
     * @memberof CatalogInventoryDataStockItemInterface
     */
    'use_config_notify_stock_qty': boolean;
    /**
     * Notify for Quantity Below data wrapper
     * @type {number}
     * @memberof CatalogInventoryDataStockItemInterface
     */
    'notify_stock_qty': number;
    /**
     * 
     * @type {boolean}
     * @memberof CatalogInventoryDataStockItemInterface
     */
    'use_config_qty_increments': boolean;
    /**
     * Quantity Increments data wrapper
     * @type {number}
     * @memberof CatalogInventoryDataStockItemInterface
     */
    'qty_increments': number;
    /**
     * 
     * @type {boolean}
     * @memberof CatalogInventoryDataStockItemInterface
     */
    'use_config_enable_qty_inc': boolean;
    /**
     * Whether Quantity Increments is enabled
     * @type {boolean}
     * @memberof CatalogInventoryDataStockItemInterface
     */
    'enable_qty_increments': boolean;
    /**
     * 
     * @type {boolean}
     * @memberof CatalogInventoryDataStockItemInterface
     */
    'use_config_manage_stock': boolean;
    /**
     * Can Manage Stock
     * @type {boolean}
     * @memberof CatalogInventoryDataStockItemInterface
     */
    'manage_stock': boolean;
    /**
     * 
     * @type {string}
     * @memberof CatalogInventoryDataStockItemInterface
     */
    'low_stock_date': string;
    /**
     * 
     * @type {boolean}
     * @memberof CatalogInventoryDataStockItemInterface
     */
    'is_decimal_divided': boolean;
    /**
     * 
     * @type {number}
     * @memberof CatalogInventoryDataStockItemInterface
     */
    'stock_status_changed_auto': number;
    /**
     * ExtensionInterface class for @see \\Magento\\CatalogInventory\\Api\\Data\\StockItemInterface
     * @type {object}
     * @memberof CatalogInventoryDataStockItemInterface
     */
    'extension_attributes'?: object;
}
/**
 * Interface StockStatusInterface
 * @export
 * @interface CatalogInventoryDataStockStatusInterface
 */
export interface CatalogInventoryDataStockStatusInterface {
    /**
     * 
     * @type {number}
     * @memberof CatalogInventoryDataStockStatusInterface
     */
    'product_id': number;
    /**
     * 
     * @type {number}
     * @memberof CatalogInventoryDataStockStatusInterface
     */
    'stock_id': number;
    /**
     * 
     * @type {number}
     * @memberof CatalogInventoryDataStockStatusInterface
     */
    'qty': number;
    /**
     * 
     * @type {number}
     * @memberof CatalogInventoryDataStockStatusInterface
     */
    'stock_status': number;
    /**
     * 
     * @type {CatalogInventoryDataStockItemInterface}
     * @memberof CatalogInventoryDataStockStatusInterface
     */
    'stock_item': CatalogInventoryDataStockItemInterface;
    /**
     * ExtensionInterface class for @see \\Magento\\CatalogInventory\\Api\\Data\\StockStatusInterface
     * @type {object}
     * @memberof CatalogInventoryDataStockStatusInterface
     */
    'extension_attributes'?: object;
}
/**
 * Interface StockItemCriteriaInterface
 * @export
 * @interface CatalogInventoryStockItemCriteriaInterface
 */
export interface CatalogInventoryStockItemCriteriaInterface {
    /**
     * Associated Mapper Interface name
     * @type {string}
     * @memberof CatalogInventoryStockItemCriteriaInterface
     */
    'mapper_interface_name': string;
    /**
     * Criteria objects added to current Composite Criteria
     * @type {Array<FrameworkCriteriaInterface>}
     * @memberof CatalogInventoryStockItemCriteriaInterface
     */
    'criteria_list': Array<FrameworkCriteriaInterface>;
    /**
     * List of filters
     * @type {Array<string>}
     * @memberof CatalogInventoryStockItemCriteriaInterface
     */
    'filters': Array<string>;
    /**
     * Ordering criteria
     * @type {Array<string>}
     * @memberof CatalogInventoryStockItemCriteriaInterface
     */
    'orders': Array<string>;
    /**
     * Limit
     * @type {Array<string>}
     * @memberof CatalogInventoryStockItemCriteriaInterface
     */
    'limit': Array<string>;
}
/**
 * 
 * @export
 * @interface CatalogInventoryStockRegistryV1UpdateStockItemBySkuPutRequest
 */
export interface CatalogInventoryStockRegistryV1UpdateStockItemBySkuPutRequest {
    /**
     * 
     * @type {CatalogInventoryDataStockItemInterface}
     * @memberof CatalogInventoryStockRegistryV1UpdateStockItemBySkuPutRequest
     */
    'stockItem': CatalogInventoryDataStockItemInterface;
}
/**
 * 
 * @export
 * @interface CatalogProductAttributeGroupRepositoryV1SavePostRequest
 */
export interface CatalogProductAttributeGroupRepositoryV1SavePostRequest {
    /**
     * 
     * @type {EavDataAttributeGroupInterface}
     * @memberof CatalogProductAttributeGroupRepositoryV1SavePostRequest
     */
    'group': EavDataAttributeGroupInterface;
}
/**
 * 
 * @export
 * @interface CatalogProductAttributeManagementV1AssignPostRequest
 */
export interface CatalogProductAttributeManagementV1AssignPostRequest {
    /**
     * 
     * @type {number}
     * @memberof CatalogProductAttributeManagementV1AssignPostRequest
     */
    'attributeSetId': number;
    /**
     * 
     * @type {number}
     * @memberof CatalogProductAttributeManagementV1AssignPostRequest
     */
    'attributeGroupId': number;
    /**
     * 
     * @type {string}
     * @memberof CatalogProductAttributeManagementV1AssignPostRequest
     */
    'attributeCode': string;
    /**
     * 
     * @type {number}
     * @memberof CatalogProductAttributeManagementV1AssignPostRequest
     */
    'sortOrder': number;
}
/**
 * 
 * @export
 * @interface CatalogProductAttributeMediaGalleryManagementV1CreatePostRequest
 */
export interface CatalogProductAttributeMediaGalleryManagementV1CreatePostRequest {
    /**
     * 
     * @type {CatalogDataProductAttributeMediaGalleryEntryInterface}
     * @memberof CatalogProductAttributeMediaGalleryManagementV1CreatePostRequest
     */
    'entry': CatalogDataProductAttributeMediaGalleryEntryInterface;
}
/**
 * 
 * @export
 * @interface CatalogProductAttributeOptionManagementV1AddPostRequest
 */
export interface CatalogProductAttributeOptionManagementV1AddPostRequest {
    /**
     * 
     * @type {EavDataAttributeOptionInterface}
     * @memberof CatalogProductAttributeOptionManagementV1AddPostRequest
     */
    'option': EavDataAttributeOptionInterface;
}
/**
 * 
 * @export
 * @interface CatalogProductAttributeRepositoryV1SavePostRequest
 */
export interface CatalogProductAttributeRepositoryV1SavePostRequest {
    /**
     * 
     * @type {CatalogDataProductAttributeInterface}
     * @memberof CatalogProductAttributeRepositoryV1SavePostRequest
     */
    'attribute': CatalogDataProductAttributeInterface;
}
/**
 * 
 * @export
 * @interface CatalogProductCustomOptionRepositoryV1SavePostRequest
 */
export interface CatalogProductCustomOptionRepositoryV1SavePostRequest {
    /**
     * 
     * @type {CatalogDataProductCustomOptionInterface}
     * @memberof CatalogProductCustomOptionRepositoryV1SavePostRequest
     */
    'option': CatalogDataProductCustomOptionInterface;
}
/**
 * 
 * @export
 * @interface CatalogProductLinkManagementV1SetProductLinksPostRequest
 */
export interface CatalogProductLinkManagementV1SetProductLinksPostRequest {
    /**
     * 
     * @type {Array<CatalogDataProductLinkInterface>}
     * @memberof CatalogProductLinkManagementV1SetProductLinksPostRequest
     */
    'items': Array<CatalogDataProductLinkInterface>;
}
/**
 * 
 * @export
 * @interface CatalogProductLinkRepositoryV1SavePutRequest
 */
export interface CatalogProductLinkRepositoryV1SavePutRequest {
    /**
     * 
     * @type {CatalogDataProductLinkInterface}
     * @memberof CatalogProductLinkRepositoryV1SavePutRequest
     */
    'entity': CatalogDataProductLinkInterface;
}
/**
 * 
 * @export
 * @interface CatalogProductRepositoryV1SavePostRequest
 */
export interface CatalogProductRepositoryV1SavePostRequest {
    /**
     * 
     * @type {CatalogDataProductInterface}
     * @memberof CatalogProductRepositoryV1SavePostRequest
     */
    'product': CatalogDataProductInterface;
    /**
     * 
     * @type {boolean}
     * @memberof CatalogProductRepositoryV1SavePostRequest
     */
    'saveOptions'?: boolean;
}
/**
 * 
 * @export
 * @interface CatalogProductWebsiteLinkRepositoryV1SavePutRequest
 */
export interface CatalogProductWebsiteLinkRepositoryV1SavePutRequest {
    /**
     * 
     * @type {CatalogDataProductWebsiteLinkInterface}
     * @memberof CatalogProductWebsiteLinkRepositoryV1SavePutRequest
     */
    'productWebsiteLink': CatalogDataProductWebsiteLinkInterface;
}
/**
 * 
 * @export
 * @interface CatalogSpecialPriceStorageV1UpdatePostRequest
 */
export interface CatalogSpecialPriceStorageV1UpdatePostRequest {
    /**
     * 
     * @type {Array<CatalogDataSpecialPriceInterface>}
     * @memberof CatalogSpecialPriceStorageV1UpdatePostRequest
     */
    'prices': Array<CatalogDataSpecialPriceInterface>;
}
/**
 * 
 * @export
 * @interface CatalogTierPriceStorageV1ReplacePutRequest
 */
export interface CatalogTierPriceStorageV1ReplacePutRequest {
    /**
     * 
     * @type {Array<CatalogDataTierPriceInterface>}
     * @memberof CatalogTierPriceStorageV1ReplacePutRequest
     */
    'prices': Array<CatalogDataTierPriceInterface>;
}
/**
 * Interface AgreementInterface
 * @export
 * @interface CheckoutAgreementsDataAgreementInterface
 */
export interface CheckoutAgreementsDataAgreementInterface {
    /**
     * Agreement ID.
     * @type {number}
     * @memberof CheckoutAgreementsDataAgreementInterface
     */
    'agreement_id': number;
    /**
     * Agreement name.
     * @type {string}
     * @memberof CheckoutAgreementsDataAgreementInterface
     */
    'name': string;
    /**
     * Agreement content.
     * @type {string}
     * @memberof CheckoutAgreementsDataAgreementInterface
     */
    'content': string;
    /**
     * Agreement content height. Otherwise, null.
     * @type {string}
     * @memberof CheckoutAgreementsDataAgreementInterface
     */
    'content_height'?: string;
    /**
     * Agreement checkbox text.
     * @type {string}
     * @memberof CheckoutAgreementsDataAgreementInterface
     */
    'checkbox_text': string;
    /**
     * Agreement status.
     * @type {boolean}
     * @memberof CheckoutAgreementsDataAgreementInterface
     */
    'is_active': boolean;
    /**
     * * true - HTML. * false - plain text.
     * @type {boolean}
     * @memberof CheckoutAgreementsDataAgreementInterface
     */
    'is_html': boolean;
    /**
     * The agreement applied mode.
     * @type {number}
     * @memberof CheckoutAgreementsDataAgreementInterface
     */
    'mode': number;
    /**
     * ExtensionInterface class for @see \\Magento\\CheckoutAgreements\\Api\\Data\\AgreementInterface
     * @type {object}
     * @memberof CheckoutAgreementsDataAgreementInterface
     */
    'extension_attributes'?: object;
}
/**
 * Interface PaymentDetailsInterface
 * @export
 * @interface CheckoutDataPaymentDetailsInterface
 */
export interface CheckoutDataPaymentDetailsInterface {
    /**
     * 
     * @type {Array<QuoteDataPaymentMethodInterface>}
     * @memberof CheckoutDataPaymentDetailsInterface
     */
    'payment_methods': Array<QuoteDataPaymentMethodInterface>;
    /**
     * 
     * @type {QuoteDataTotalsInterface}
     * @memberof CheckoutDataPaymentDetailsInterface
     */
    'totals': QuoteDataTotalsInterface;
    /**
     * ExtensionInterface class for @see \\Magento\\Checkout\\Api\\Data\\PaymentDetailsInterface
     * @type {object}
     * @memberof CheckoutDataPaymentDetailsInterface
     */
    'extension_attributes'?: object;
}
/**
 * Interface ShippingInformationInterface
 * @export
 * @interface CheckoutDataShippingInformationInterface
 */
export interface CheckoutDataShippingInformationInterface {
    /**
     * 
     * @type {QuoteDataAddressInterface}
     * @memberof CheckoutDataShippingInformationInterface
     */
    'shipping_address': QuoteDataAddressInterface;
    /**
     * 
     * @type {QuoteDataAddressInterface}
     * @memberof CheckoutDataShippingInformationInterface
     */
    'billing_address'?: QuoteDataAddressInterface;
    /**
     * Shipping method code
     * @type {string}
     * @memberof CheckoutDataShippingInformationInterface
     */
    'shipping_method_code': string;
    /**
     * Carrier code
     * @type {string}
     * @memberof CheckoutDataShippingInformationInterface
     */
    'shipping_carrier_code': string;
    /**
     * ExtensionInterface class for @see \\Magento\\Checkout\\Api\\Data\\ShippingInformationInterface
     * @type {object}
     * @memberof CheckoutDataShippingInformationInterface
     */
    'extension_attributes'?: object;
    /**
     * Custom attributes values.
     * @type {Array<FrameworkAttributeInterface>}
     * @memberof CheckoutDataShippingInformationInterface
     */
    'custom_attributes'?: Array<FrameworkAttributeInterface>;
}
/**
 * Interface TotalsInformationInterface
 * @export
 * @interface CheckoutDataTotalsInformationInterface
 */
export interface CheckoutDataTotalsInformationInterface {
    /**
     * 
     * @type {QuoteDataAddressInterface}
     * @memberof CheckoutDataTotalsInformationInterface
     */
    'address': QuoteDataAddressInterface;
    /**
     * Shipping method code
     * @type {string}
     * @memberof CheckoutDataTotalsInformationInterface
     */
    'shipping_method_code'?: string;
    /**
     * Carrier code
     * @type {string}
     * @memberof CheckoutDataTotalsInformationInterface
     */
    'shipping_carrier_code'?: string;
    /**
     * ExtensionInterface class for @see \\Magento\\Checkout\\Api\\Data\\TotalsInformationInterface
     * @type {object}
     * @memberof CheckoutDataTotalsInformationInterface
     */
    'extension_attributes'?: object;
    /**
     * Custom attributes values.
     * @type {Array<FrameworkAttributeInterface>}
     * @memberof CheckoutDataTotalsInformationInterface
     */
    'custom_attributes'?: Array<FrameworkAttributeInterface>;
}
/**
 * 
 * @export
 * @interface CheckoutGuestPaymentInformationManagementV1SavePaymentInformationAndPlaceOrderPostRequest
 */
export interface CheckoutGuestPaymentInformationManagementV1SavePaymentInformationAndPlaceOrderPostRequest {
    /**
     * 
     * @type {string}
     * @memberof CheckoutGuestPaymentInformationManagementV1SavePaymentInformationAndPlaceOrderPostRequest
     */
    'email': string;
    /**
     * 
     * @type {QuoteDataPaymentInterface}
     * @memberof CheckoutGuestPaymentInformationManagementV1SavePaymentInformationAndPlaceOrderPostRequest
     */
    'paymentMethod': QuoteDataPaymentInterface;
    /**
     * 
     * @type {QuoteDataAddressInterface}
     * @memberof CheckoutGuestPaymentInformationManagementV1SavePaymentInformationAndPlaceOrderPostRequest
     */
    'billingAddress'?: QuoteDataAddressInterface;
}
/**
 * 
 * @export
 * @interface CheckoutPaymentInformationManagementV1SavePaymentInformationAndPlaceOrderPostRequest
 */
export interface CheckoutPaymentInformationManagementV1SavePaymentInformationAndPlaceOrderPostRequest {
    /**
     * 
     * @type {QuoteDataPaymentInterface}
     * @memberof CheckoutPaymentInformationManagementV1SavePaymentInformationAndPlaceOrderPostRequest
     */
    'paymentMethod': QuoteDataPaymentInterface;
    /**
     * 
     * @type {QuoteDataAddressInterface}
     * @memberof CheckoutPaymentInformationManagementV1SavePaymentInformationAndPlaceOrderPostRequest
     */
    'billingAddress'?: QuoteDataAddressInterface;
}
/**
 * 
 * @export
 * @interface CheckoutShippingInformationManagementV1SaveAddressInformationPostRequest
 */
export interface CheckoutShippingInformationManagementV1SaveAddressInformationPostRequest {
    /**
     * 
     * @type {CheckoutDataShippingInformationInterface}
     * @memberof CheckoutShippingInformationManagementV1SaveAddressInformationPostRequest
     */
    'addressInformation': CheckoutDataShippingInformationInterface;
}
/**
 * 
 * @export
 * @interface CheckoutTotalsInformationManagementV1CalculatePostRequest
 */
export interface CheckoutTotalsInformationManagementV1CalculatePostRequest {
    /**
     * 
     * @type {CheckoutDataTotalsInformationInterface}
     * @memberof CheckoutTotalsInformationManagementV1CalculatePostRequest
     */
    'addressInformation': CheckoutDataTotalsInformationInterface;
}
/**
 * 
 * @export
 * @interface CmsBlockRepositoryV1SavePostRequest
 */
export interface CmsBlockRepositoryV1SavePostRequest {
    /**
     * 
     * @type {CmsDataBlockInterface}
     * @memberof CmsBlockRepositoryV1SavePostRequest
     */
    'block': CmsDataBlockInterface;
}
/**
 * CMS block interface.
 * @export
 * @interface CmsDataBlockInterface
 */
export interface CmsDataBlockInterface {
    /**
     * ID
     * @type {number}
     * @memberof CmsDataBlockInterface
     */
    'id'?: number;
    /**
     * Identifier
     * @type {string}
     * @memberof CmsDataBlockInterface
     */
    'identifier': string;
    /**
     * Title
     * @type {string}
     * @memberof CmsDataBlockInterface
     */
    'title'?: string;
    /**
     * Content
     * @type {string}
     * @memberof CmsDataBlockInterface
     */
    'content'?: string;
    /**
     * Creation time
     * @type {string}
     * @memberof CmsDataBlockInterface
     */
    'creation_time'?: string;
    /**
     * Update time
     * @type {string}
     * @memberof CmsDataBlockInterface
     */
    'update_time'?: string;
    /**
     * Active
     * @type {boolean}
     * @memberof CmsDataBlockInterface
     */
    'active'?: boolean;
}
/**
 * Interface for cms block search results.
 * @export
 * @interface CmsDataBlockSearchResultsInterface
 */
export interface CmsDataBlockSearchResultsInterface {
    /**
     * Blocks list.
     * @type {Array<CmsDataBlockInterface>}
     * @memberof CmsDataBlockSearchResultsInterface
     */
    'items': Array<CmsDataBlockInterface>;
    /**
     * 
     * @type {FrameworkSearchCriteriaInterface}
     * @memberof CmsDataBlockSearchResultsInterface
     */
    'search_criteria': FrameworkSearchCriteriaInterface;
    /**
     * Total count.
     * @type {number}
     * @memberof CmsDataBlockSearchResultsInterface
     */
    'total_count': number;
}
/**
 * CMS page interface.
 * @export
 * @interface CmsDataPageInterface
 */
export interface CmsDataPageInterface {
    /**
     * ID
     * @type {number}
     * @memberof CmsDataPageInterface
     */
    'id'?: number;
    /**
     * Identifier
     * @type {string}
     * @memberof CmsDataPageInterface
     */
    'identifier': string;
    /**
     * Title
     * @type {string}
     * @memberof CmsDataPageInterface
     */
    'title'?: string;
    /**
     * Page layout
     * @type {string}
     * @memberof CmsDataPageInterface
     */
    'page_layout'?: string;
    /**
     * Meta title
     * @type {string}
     * @memberof CmsDataPageInterface
     */
    'meta_title'?: string;
    /**
     * Meta keywords
     * @type {string}
     * @memberof CmsDataPageInterface
     */
    'meta_keywords'?: string;
    /**
     * Meta description
     * @type {string}
     * @memberof CmsDataPageInterface
     */
    'meta_description'?: string;
    /**
     * Content heading
     * @type {string}
     * @memberof CmsDataPageInterface
     */
    'content_heading'?: string;
    /**
     * Content
     * @type {string}
     * @memberof CmsDataPageInterface
     */
    'content'?: string;
    /**
     * Creation time
     * @type {string}
     * @memberof CmsDataPageInterface
     */
    'creation_time'?: string;
    /**
     * Update time
     * @type {string}
     * @memberof CmsDataPageInterface
     */
    'update_time'?: string;
    /**
     * Sort order
     * @type {string}
     * @memberof CmsDataPageInterface
     */
    'sort_order'?: string;
    /**
     * Layout update xml
     * @type {string}
     * @memberof CmsDataPageInterface
     */
    'layout_update_xml'?: string;
    /**
     * Custom theme
     * @type {string}
     * @memberof CmsDataPageInterface
     */
    'custom_theme'?: string;
    /**
     * Custom root template
     * @type {string}
     * @memberof CmsDataPageInterface
     */
    'custom_root_template'?: string;
    /**
     * Custom layout update xml
     * @type {string}
     * @memberof CmsDataPageInterface
     */
    'custom_layout_update_xml'?: string;
    /**
     * Custom theme from
     * @type {string}
     * @memberof CmsDataPageInterface
     */
    'custom_theme_from'?: string;
    /**
     * Custom theme to
     * @type {string}
     * @memberof CmsDataPageInterface
     */
    'custom_theme_to'?: string;
    /**
     * Active
     * @type {boolean}
     * @memberof CmsDataPageInterface
     */
    'active'?: boolean;
}
/**
 * Interface for cms page search results.
 * @export
 * @interface CmsDataPageSearchResultsInterface
 */
export interface CmsDataPageSearchResultsInterface {
    /**
     * Pages list.
     * @type {Array<CmsDataPageInterface>}
     * @memberof CmsDataPageSearchResultsInterface
     */
    'items': Array<CmsDataPageInterface>;
    /**
     * 
     * @type {FrameworkSearchCriteriaInterface}
     * @memberof CmsDataPageSearchResultsInterface
     */
    'search_criteria': FrameworkSearchCriteriaInterface;
    /**
     * Total count.
     * @type {number}
     * @memberof CmsDataPageSearchResultsInterface
     */
    'total_count': number;
}
/**
 * 
 * @export
 * @interface CmsPageRepositoryV1SavePostRequest
 */
export interface CmsPageRepositoryV1SavePostRequest {
    /**
     * 
     * @type {CmsDataPageInterface}
     * @memberof CmsPageRepositoryV1SavePostRequest
     */
    'page': CmsDataPageInterface;
}
/**
 * 
 * @export
 * @interface CompanyAclV1AssignRolesPutRequest
 */
export interface CompanyAclV1AssignRolesPutRequest {
    /**
     * 
     * @type {number}
     * @memberof CompanyAclV1AssignRolesPutRequest
     */
    'userId': number;
    /**
     * 
     * @type {Array<CompanyDataRoleInterface>}
     * @memberof CompanyAclV1AssignRolesPutRequest
     */
    'roles': Array<CompanyDataRoleInterface>;
}
/**
 * 
 * @export
 * @interface CompanyCompanyHierarchyV1MoveNodePutRequest
 */
export interface CompanyCompanyHierarchyV1MoveNodePutRequest {
    /**
     * 
     * @type {number}
     * @memberof CompanyCompanyHierarchyV1MoveNodePutRequest
     */
    'newParentId': number;
}
/**
 * 
 * @export
 * @interface CompanyCompanyRepositoryV1SavePostRequest
 */
export interface CompanyCompanyRepositoryV1SavePostRequest {
    /**
     * 
     * @type {CompanyDataCompanyInterface}
     * @memberof CompanyCompanyRepositoryV1SavePostRequest
     */
    'company': CompanyDataCompanyInterface;
}
/**
 * 
 * @export
 * @interface CompanyCreditCreditBalanceManagementV1DecreasePostRequest
 */
export interface CompanyCreditCreditBalanceManagementV1DecreasePostRequest {
    /**
     * 
     * @type {number}
     * @memberof CompanyCreditCreditBalanceManagementV1DecreasePostRequest
     */
    'value': number;
    /**
     * 
     * @type {string}
     * @memberof CompanyCreditCreditBalanceManagementV1DecreasePostRequest
     */
    'currency': string;
    /**
     * 
     * @type {number}
     * @memberof CompanyCreditCreditBalanceManagementV1DecreasePostRequest
     */
    'operationType': number;
    /**
     * [optional]
     * @type {string}
     * @memberof CompanyCreditCreditBalanceManagementV1DecreasePostRequest
     */
    'comment'?: string;
    /**
     * 
     * @type {CompanyCreditDataCreditBalanceOptionsInterface}
     * @memberof CompanyCreditCreditBalanceManagementV1DecreasePostRequest
     */
    'options'?: CompanyCreditDataCreditBalanceOptionsInterface;
}
/**
 * 
 * @export
 * @interface CompanyCreditCreditHistoryManagementV1UpdatePutRequest
 */
export interface CompanyCreditCreditHistoryManagementV1UpdatePutRequest {
    /**
     * [optional]
     * @type {string}
     * @memberof CompanyCreditCreditHistoryManagementV1UpdatePutRequest
     */
    'purchaseOrder'?: string;
    /**
     * [optional]
     * @type {string}
     * @memberof CompanyCreditCreditHistoryManagementV1UpdatePutRequest
     */
    'comment'?: string;
}
/**
 * 
 * @export
 * @interface CompanyCreditCreditLimitRepositoryV1SavePutRequest
 */
export interface CompanyCreditCreditLimitRepositoryV1SavePutRequest {
    /**
     * 
     * @type {CompanyCreditDataCreditLimitInterface}
     * @memberof CompanyCreditCreditLimitRepositoryV1SavePutRequest
     */
    'creditLimit': CompanyCreditDataCreditLimitInterface;
}
/**
 * Credit balance data transfer object interface.
 * @export
 * @interface CompanyCreditDataCreditBalanceOptionsInterface
 */
export interface CompanyCreditDataCreditBalanceOptionsInterface {
    /**
     * Purchase order number.
     * @type {string}
     * @memberof CompanyCreditDataCreditBalanceOptionsInterface
     */
    'purchase_order': string;
    /**
     * Order increment.
     * @type {string}
     * @memberof CompanyCreditDataCreditBalanceOptionsInterface
     */
    'order_increment': string;
    /**
     * Currency display.
     * @type {string}
     * @memberof CompanyCreditDataCreditBalanceOptionsInterface
     */
    'currency_display': string;
    /**
     * Currency base.
     * @type {string}
     * @memberof CompanyCreditDataCreditBalanceOptionsInterface
     */
    'currency_base': string;
}
/**
 * Credit Data interface.
 * @export
 * @interface CompanyCreditDataCreditDataInterface
 */
export interface CompanyCreditDataCreditDataInterface {
    /**
     * ID.
     * @type {number}
     * @memberof CompanyCreditDataCreditDataInterface
     */
    'id'?: number;
    /**
     * Company id.
     * @type {number}
     * @memberof CompanyCreditDataCreditDataInterface
     */
    'company_id'?: number;
    /**
     * Credit Limit.
     * @type {number}
     * @memberof CompanyCreditDataCreditDataInterface
     */
    'credit_limit'?: number;
    /**
     * Balance.
     * @type {number}
     * @memberof CompanyCreditDataCreditDataInterface
     */
    'balance'?: number;
    /**
     * Currency Code.
     * @type {string}
     * @memberof CompanyCreditDataCreditDataInterface
     */
    'currency_code'?: string;
    /**
     * Exceed Limit.
     * @type {boolean}
     * @memberof CompanyCreditDataCreditDataInterface
     */
    'exceed_limit': boolean;
    /**
     * Available Limit.
     * @type {number}
     * @memberof CompanyCreditDataCreditDataInterface
     */
    'available_limit'?: number;
}
/**
 * Credit Limit data transfer object interface.
 * @export
 * @interface CompanyCreditDataCreditLimitInterface
 */
export interface CompanyCreditDataCreditLimitInterface {
    /**
     * ID.
     * @type {number}
     * @memberof CompanyCreditDataCreditLimitInterface
     */
    'id'?: number;
    /**
     * Company id.
     * @type {number}
     * @memberof CompanyCreditDataCreditLimitInterface
     */
    'company_id'?: number;
    /**
     * Credit Limit.
     * @type {number}
     * @memberof CompanyCreditDataCreditLimitInterface
     */
    'credit_limit'?: number;
    /**
     * Balance.
     * @type {number}
     * @memberof CompanyCreditDataCreditLimitInterface
     */
    'balance'?: number;
    /**
     * Currency Code.
     * @type {string}
     * @memberof CompanyCreditDataCreditLimitInterface
     */
    'currency_code'?: string;
    /**
     * Exceed Limit.
     * @type {boolean}
     * @memberof CompanyCreditDataCreditLimitInterface
     */
    'exceed_limit': boolean;
    /**
     * Available Limit.
     * @type {number}
     * @memberof CompanyCreditDataCreditLimitInterface
     */
    'available_limit'?: number;
    /**
     * Credit comment for company credit history.
     * @type {string}
     * @memberof CompanyCreditDataCreditLimitInterface
     */
    'credit_comment'?: string;
    /**
     * ExtensionInterface class for @see \\Magento\\CompanyCredit\\Api\\Data\\CreditLimitInterface
     * @type {object}
     * @memberof CompanyCreditDataCreditLimitInterface
     */
    'extension_attributes'?: object;
}
/**
 * Interface for Credit Limit search results.
 * @export
 * @interface CompanyCreditDataCreditLimitSearchResultsInterface
 */
export interface CompanyCreditDataCreditLimitSearchResultsInterface {
    /**
     * Credit Limit list.
     * @type {Array<CompanyCreditDataCreditDataInterface>}
     * @memberof CompanyCreditDataCreditLimitSearchResultsInterface
     */
    'items': Array<CompanyCreditDataCreditDataInterface>;
    /**
     * 
     * @type {FrameworkSearchCriteriaInterface}
     * @memberof CompanyCreditDataCreditLimitSearchResultsInterface
     */
    'search_criteria': FrameworkSearchCriteriaInterface;
    /**
     * Total count.
     * @type {number}
     * @memberof CompanyCreditDataCreditLimitSearchResultsInterface
     */
    'total_count': number;
}
/**
 * History data transfer object interface.
 * @export
 * @interface CompanyCreditDataHistoryDataInterface
 */
export interface CompanyCreditDataHistoryDataInterface {
    /**
     * ID.
     * @type {number}
     * @memberof CompanyCreditDataHistoryDataInterface
     */
    'id'?: number;
    /**
     * Company credit id.
     * @type {number}
     * @memberof CompanyCreditDataHistoryDataInterface
     */
    'company_credit_id'?: number;
    /**
     * User Id.
     * @type {number}
     * @memberof CompanyCreditDataHistoryDataInterface
     */
    'user_id'?: number;
    /**
     * User type: integration, admin, customer.
     * @type {number}
     * @memberof CompanyCreditDataHistoryDataInterface
     */
    'user_type'?: number;
    /**
     * Currency code of credit.
     * @type {string}
     * @memberof CompanyCreditDataHistoryDataInterface
     */
    'currency_credit'?: string;
    /**
     * Currency code of operation.
     * @type {string}
     * @memberof CompanyCreditDataHistoryDataInterface
     */
    'currency_operation'?: string;
    /**
     * Currency rate between credit and operation currencies.
     * @type {number}
     * @memberof CompanyCreditDataHistoryDataInterface
     */
    'rate': number;
    /**
     * Rate between credit and base currencies.
     * @type {number}
     * @memberof CompanyCreditDataHistoryDataInterface
     */
    'rate_credit'?: number;
    /**
     * Amount.
     * @type {number}
     * @memberof CompanyCreditDataHistoryDataInterface
     */
    'amount': number;
    /**
     * Outstanding balance.
     * @type {number}
     * @memberof CompanyCreditDataHistoryDataInterface
     */
    'balance': number;
    /**
     * Credit limit.
     * @type {number}
     * @memberof CompanyCreditDataHistoryDataInterface
     */
    'credit_limit': number;
    /**
     * Available limit.
     * @type {number}
     * @memberof CompanyCreditDataHistoryDataInterface
     */
    'available_limit'?: number;
    /**
     * Type of operation.
     * @type {number}
     * @memberof CompanyCreditDataHistoryDataInterface
     */
    'type'?: number;
    /**
     * Operation datetime.
     * @type {string}
     * @memberof CompanyCreditDataHistoryDataInterface
     */
    'datetime'?: string;
    /**
     * Purchase Order number.
     * @type {string}
     * @memberof CompanyCreditDataHistoryDataInterface
     */
    'purchase_order'?: string;
    /**
     * Comment.
     * @type {string}
     * @memberof CompanyCreditDataHistoryDataInterface
     */
    'comment'?: string;
}
/**
 * Interface for History search results.
 * @export
 * @interface CompanyCreditDataHistorySearchResultsInterface
 */
export interface CompanyCreditDataHistorySearchResultsInterface {
    /**
     * History list.
     * @type {Array<CompanyCreditDataHistoryDataInterface>}
     * @memberof CompanyCreditDataHistorySearchResultsInterface
     */
    'items': Array<CompanyCreditDataHistoryDataInterface>;
    /**
     * 
     * @type {FrameworkSearchCriteriaInterface}
     * @memberof CompanyCreditDataHistorySearchResultsInterface
     */
    'search_criteria': FrameworkSearchCriteriaInterface;
    /**
     * Total count.
     * @type {number}
     * @memberof CompanyCreditDataHistorySearchResultsInterface
     */
    'total_count': number;
}
/**
 * Extended customer custom attributes interface.
 * @export
 * @interface CompanyDataCompanyCustomerInterface
 */
export interface CompanyDataCompanyCustomerInterface {
    /**
     * Customer ID.
     * @type {number}
     * @memberof CompanyDataCompanyCustomerInterface
     */
    'customer_id'?: number;
    /**
     * Company ID.
     * @type {number}
     * @memberof CompanyDataCompanyCustomerInterface
     */
    'company_id'?: number;
    /**
     * Get job title.
     * @type {string}
     * @memberof CompanyDataCompanyCustomerInterface
     */
    'job_title'?: string;
    /**
     * Customer status.
     * @type {number}
     * @memberof CompanyDataCompanyCustomerInterface
     */
    'status'?: number;
    /**
     * Get telephone.
     * @type {string}
     * @memberof CompanyDataCompanyCustomerInterface
     */
    'telephone'?: string;
    /**
     * ExtensionInterface class for @see \\Magento\\Company\\Api\\Data\\CompanyCustomerInterface
     * @type {object}
     * @memberof CompanyDataCompanyCustomerInterface
     */
    'extension_attributes'?: object;
}
/**
 * ExtensionInterface class for @see \\Magento\\Company\\Api\\Data\\CompanyInterface
 * @export
 * @interface CompanyDataCompanyExtensionInterface
 */
export interface CompanyDataCompanyExtensionInterface {
    /**
     * 
     * @type {number}
     * @memberof CompanyDataCompanyExtensionInterface
     */
    'applicable_payment_method'?: number;
    /**
     * 
     * @type {string}
     * @memberof CompanyDataCompanyExtensionInterface
     */
    'available_payment_methods'?: string;
    /**
     * 
     * @type {number}
     * @memberof CompanyDataCompanyExtensionInterface
     */
    'use_config_settings'?: number;
    /**
     * 
     * @type {NegotiableQuoteDataCompanyQuoteConfigInterface}
     * @memberof CompanyDataCompanyExtensionInterface
     */
    'quote_config'?: NegotiableQuoteDataCompanyQuoteConfigInterface;
}
/**
 * Interface for Company entity.
 * @export
 * @interface CompanyDataCompanyInterface
 */
export interface CompanyDataCompanyInterface {
    /**
     * Id.
     * @type {number}
     * @memberof CompanyDataCompanyInterface
     */
    'id'?: number;
    /**
     * Status.
     * @type {number}
     * @memberof CompanyDataCompanyInterface
     */
    'status'?: number;
    /**
     * Company name.
     * @type {string}
     * @memberof CompanyDataCompanyInterface
     */
    'company_name'?: string;
    /**
     * Legal name.
     * @type {string}
     * @memberof CompanyDataCompanyInterface
     */
    'legal_name'?: string;
    /**
     * Company email.
     * @type {string}
     * @memberof CompanyDataCompanyInterface
     */
    'company_email'?: string;
    /**
     * Vat tax id.
     * @type {string}
     * @memberof CompanyDataCompanyInterface
     */
    'vat_tax_id'?: string;
    /**
     * Reseller Id.
     * @type {string}
     * @memberof CompanyDataCompanyInterface
     */
    'reseller_id'?: string;
    /**
     * Comment.
     * @type {string}
     * @memberof CompanyDataCompanyInterface
     */
    'comment'?: string;
    /**
     * Street.
     * @type {Array<string>}
     * @memberof CompanyDataCompanyInterface
     */
    'street': Array<string>;
    /**
     * City.
     * @type {string}
     * @memberof CompanyDataCompanyInterface
     */
    'city'?: string;
    /**
     * Country.
     * @type {string}
     * @memberof CompanyDataCompanyInterface
     */
    'country_id'?: string;
    /**
     * Region.
     * @type {string}
     * @memberof CompanyDataCompanyInterface
     */
    'region'?: string;
    /**
     * Region Id.
     * @type {string}
     * @memberof CompanyDataCompanyInterface
     */
    'region_id'?: string;
    /**
     * Postcode.
     * @type {string}
     * @memberof CompanyDataCompanyInterface
     */
    'postcode'?: string;
    /**
     * Telephone.
     * @type {string}
     * @memberof CompanyDataCompanyInterface
     */
    'telephone'?: string;
    /**
     * Customer Group Id.
     * @type {number}
     * @memberof CompanyDataCompanyInterface
     */
    'customer_group_id': number;
    /**
     * Sales Representative Id.
     * @type {number}
     * @memberof CompanyDataCompanyInterface
     */
    'sales_representative_id': number;
    /**
     * Reject Reason.
     * @type {string}
     * @memberof CompanyDataCompanyInterface
     */
    'reject_reason': string;
    /**
     * Rejected at time.
     * @type {string}
     * @memberof CompanyDataCompanyInterface
     */
    'rejected_at': string;
    /**
     * Company admin customer id.
     * @type {number}
     * @memberof CompanyDataCompanyInterface
     */
    'super_user_id': number;
    /**
     * 
     * @type {CompanyDataCompanyExtensionInterface}
     * @memberof CompanyDataCompanyInterface
     */
    'extension_attributes'?: CompanyDataCompanyExtensionInterface;
}
/**
 * Order company extension attributes interface. Adds new company attributes to orders.
 * @export
 * @interface CompanyDataCompanyOrderInterface
 */
export interface CompanyDataCompanyOrderInterface {
    /**
     * Order ID.
     * @type {number}
     * @memberof CompanyDataCompanyOrderInterface
     */
    'order_id'?: number;
    /**
     * Company ID.
     * @type {number}
     * @memberof CompanyDataCompanyOrderInterface
     */
    'company_id'?: number;
    /**
     * Company name.
     * @type {string}
     * @memberof CompanyDataCompanyOrderInterface
     */
    'company_name'?: string;
    /**
     * ExtensionInterface class for @see \\Magento\\Company\\Api\\Data\\CompanyOrderInterface
     * @type {object}
     * @memberof CompanyDataCompanyOrderInterface
     */
    'extension_attributes'?: object;
}
/**
 * Interface for company search results
 * @export
 * @interface CompanyDataCompanySearchResultsInterface
 */
export interface CompanyDataCompanySearchResultsInterface {
    /**
     * Companies list
     * @type {Array<CompanyDataCompanyInterface>}
     * @memberof CompanyDataCompanySearchResultsInterface
     */
    'items': Array<CompanyDataCompanyInterface>;
    /**
     * 
     * @type {FrameworkSearchCriteriaInterface}
     * @memberof CompanyDataCompanySearchResultsInterface
     */
    'search_criteria': FrameworkSearchCriteriaInterface;
    /**
     * Total count.
     * @type {number}
     * @memberof CompanyDataCompanySearchResultsInterface
     */
    'total_count': number;
}
/**
 * Company hierarchy DTO interface for WebAPI.
 * @export
 * @interface CompanyDataHierarchyInterface
 */
export interface CompanyDataHierarchyInterface {
    /**
     * Structure ID.
     * @type {number}
     * @memberof CompanyDataHierarchyInterface
     */
    'structure_id'?: number;
    /**
     * Entity ID.
     * @type {number}
     * @memberof CompanyDataHierarchyInterface
     */
    'entity_id'?: number;
    /**
     * Entity type.
     * @type {string}
     * @memberof CompanyDataHierarchyInterface
     */
    'entity_type'?: string;
    /**
     * Structure parent ID.
     * @type {number}
     * @memberof CompanyDataHierarchyInterface
     */
    'structure_parent_id'?: number;
    /**
     * ExtensionInterface class for @see \\Magento\\Company\\Api\\Data\\HierarchyInterface
     * @type {object}
     * @memberof CompanyDataHierarchyInterface
     */
    'extension_attributes'?: object;
}
/**
 * Permission interface.
 * @export
 * @interface CompanyDataPermissionInterface
 */
export interface CompanyDataPermissionInterface {
    /**
     * Id.
     * @type {number}
     * @memberof CompanyDataPermissionInterface
     */
    'id'?: number;
    /**
     * Role id.
     * @type {number}
     * @memberof CompanyDataPermissionInterface
     */
    'role_id'?: number;
    /**
     * Resource id.
     * @type {string}
     * @memberof CompanyDataPermissionInterface
     */
    'resource_id': string;
    /**
     * Permission.
     * @type {string}
     * @memberof CompanyDataPermissionInterface
     */
    'permission': string;
}
/**
 * Role data transfer object interface.
 * @export
 * @interface CompanyDataRoleInterface
 */
export interface CompanyDataRoleInterface {
    /**
     * Role id.
     * @type {number}
     * @memberof CompanyDataRoleInterface
     */
    'id'?: number;
    /**
     * Role name.
     * @type {string}
     * @memberof CompanyDataRoleInterface
     */
    'role_name'?: string;
    /**
     * Permissions.
     * @type {Array<CompanyDataPermissionInterface>}
     * @memberof CompanyDataRoleInterface
     */
    'permissions': Array<CompanyDataPermissionInterface>;
    /**
     * Company id.
     * @type {number}
     * @memberof CompanyDataRoleInterface
     */
    'company_id'?: number;
    /**
     * ExtensionInterface class for @see \\Magento\\Company\\Api\\Data\\RoleInterface
     * @type {object}
     * @memberof CompanyDataRoleInterface
     */
    'extension_attributes'?: object;
}
/**
 * Interface for role search results.
 * @export
 * @interface CompanyDataRoleSearchResultsInterface
 */
export interface CompanyDataRoleSearchResultsInterface {
    /**
     * Roles list.
     * @type {Array<CompanyDataRoleInterface>}
     * @memberof CompanyDataRoleSearchResultsInterface
     */
    'items': Array<CompanyDataRoleInterface>;
    /**
     * 
     * @type {FrameworkSearchCriteriaInterface}
     * @memberof CompanyDataRoleSearchResultsInterface
     */
    'search_criteria': FrameworkSearchCriteriaInterface;
    /**
     * Total count.
     * @type {number}
     * @memberof CompanyDataRoleSearchResultsInterface
     */
    'total_count': number;
}
/**
 * Team interface
 * @export
 * @interface CompanyDataTeamInterface
 */
export interface CompanyDataTeamInterface {
    /**
     * ID
     * @type {number}
     * @memberof CompanyDataTeamInterface
     */
    'id'?: number;
    /**
     * Name
     * @type {string}
     * @memberof CompanyDataTeamInterface
     */
    'name'?: string;
    /**
     * Description
     * @type {string}
     * @memberof CompanyDataTeamInterface
     */
    'description'?: string;
    /**
     * ExtensionInterface class for @see \\Magento\\Company\\Api\\Data\\TeamInterface
     * @type {object}
     * @memberof CompanyDataTeamInterface
     */
    'extension_attributes'?: object;
    /**
     * Custom attributes values.
     * @type {Array<FrameworkAttributeInterface>}
     * @memberof CompanyDataTeamInterface
     */
    'custom_attributes'?: Array<FrameworkAttributeInterface>;
}
/**
 * Interface for company team search results
 * @export
 * @interface CompanyDataTeamSearchResultsInterface
 */
export interface CompanyDataTeamSearchResultsInterface {
    /**
     * Teams list
     * @type {Array<CompanyDataTeamInterface>}
     * @memberof CompanyDataTeamSearchResultsInterface
     */
    'items': Array<CompanyDataTeamInterface>;
    /**
     * 
     * @type {FrameworkSearchCriteriaInterface}
     * @memberof CompanyDataTeamSearchResultsInterface
     */
    'search_criteria': FrameworkSearchCriteriaInterface;
    /**
     * Total count.
     * @type {number}
     * @memberof CompanyDataTeamSearchResultsInterface
     */
    'total_count': number;
}
/**
 * 
 * @export
 * @interface CompanyRoleRepositoryV1SavePostRequest
 */
export interface CompanyRoleRepositoryV1SavePostRequest {
    /**
     * 
     * @type {CompanyDataRoleInterface}
     * @memberof CompanyRoleRepositoryV1SavePostRequest
     */
    'role': CompanyDataRoleInterface;
}
/**
 * 
 * @export
 * @interface CompanyTeamRepositoryV1CreatePostRequest
 */
export interface CompanyTeamRepositoryV1CreatePostRequest {
    /**
     * 
     * @type {CompanyDataTeamInterface}
     * @memberof CompanyTeamRepositoryV1CreatePostRequest
     */
    'team': CompanyDataTeamInterface;
}
/**
 * 
 * @export
 * @interface ConfigurableProductConfigurableProductManagementV1GenerateVariationPutRequest
 */
export interface ConfigurableProductConfigurableProductManagementV1GenerateVariationPutRequest {
    /**
     * 
     * @type {CatalogDataProductInterface}
     * @memberof ConfigurableProductConfigurableProductManagementV1GenerateVariationPutRequest
     */
    'product': CatalogDataProductInterface;
    /**
     * 
     * @type {Array<ConfigurableProductDataOptionInterface>}
     * @memberof ConfigurableProductConfigurableProductManagementV1GenerateVariationPutRequest
     */
    'options': Array<ConfigurableProductDataOptionInterface>;
}
/**
 * Interface ConfigurableItemOptionValueInterface
 * @export
 * @interface ConfigurableProductDataConfigurableItemOptionValueInterface
 */
export interface ConfigurableProductDataConfigurableItemOptionValueInterface {
    /**
     * Option SKU
     * @type {string}
     * @memberof ConfigurableProductDataConfigurableItemOptionValueInterface
     */
    'option_id': string;
    /**
     * Item id
     * @type {number}
     * @memberof ConfigurableProductDataConfigurableItemOptionValueInterface
     */
    'option_value'?: number;
    /**
     * ExtensionInterface class for @see \\Magento\\ConfigurableProduct\\Api\\Data\\ConfigurableItemOptionValueInterface
     * @type {object}
     * @memberof ConfigurableProductDataConfigurableItemOptionValueInterface
     */
    'extension_attributes'?: object;
}
/**
 * Interface OptionInterface
 * @export
 * @interface ConfigurableProductDataOptionInterface
 */
export interface ConfigurableProductDataOptionInterface {
    /**
     * 
     * @type {number}
     * @memberof ConfigurableProductDataOptionInterface
     */
    'id'?: number;
    /**
     * 
     * @type {string}
     * @memberof ConfigurableProductDataOptionInterface
     */
    'attribute_id'?: string;
    /**
     * 
     * @type {string}
     * @memberof ConfigurableProductDataOptionInterface
     */
    'label'?: string;
    /**
     * 
     * @type {number}
     * @memberof ConfigurableProductDataOptionInterface
     */
    'position'?: number;
    /**
     * 
     * @type {boolean}
     * @memberof ConfigurableProductDataOptionInterface
     */
    'is_use_default'?: boolean;
    /**
     * 
     * @type {Array<ConfigurableProductDataOptionValueInterface>}
     * @memberof ConfigurableProductDataOptionInterface
     */
    'values'?: Array<ConfigurableProductDataOptionValueInterface>;
    /**
     * ExtensionInterface class for @see \\Magento\\ConfigurableProduct\\Api\\Data\\OptionInterface
     * @type {object}
     * @memberof ConfigurableProductDataOptionInterface
     */
    'extension_attributes'?: object;
    /**
     * 
     * @type {number}
     * @memberof ConfigurableProductDataOptionInterface
     */
    'product_id'?: number;
}
/**
 * Interface OptionValueInterface
 * @export
 * @interface ConfigurableProductDataOptionValueInterface
 */
export interface ConfigurableProductDataOptionValueInterface {
    /**
     * 
     * @type {number}
     * @memberof ConfigurableProductDataOptionValueInterface
     */
    'value_index': number;
    /**
     * ExtensionInterface class for @see \\Magento\\ConfigurableProduct\\Api\\Data\\OptionValueInterface
     * @type {object}
     * @memberof ConfigurableProductDataOptionValueInterface
     */
    'extension_attributes'?: object;
}
/**
 * 
 * @export
 * @interface ConfigurableProductLinkManagementV1AddChildPostRequest
 */
export interface ConfigurableProductLinkManagementV1AddChildPostRequest {
    /**
     * 
     * @type {string}
     * @memberof ConfigurableProductLinkManagementV1AddChildPostRequest
     */
    'childSku': string;
}
/**
 * 
 * @export
 * @interface ConfigurableProductOptionRepositoryV1SavePostRequest
 */
export interface ConfigurableProductOptionRepositoryV1SavePostRequest {
    /**
     * 
     * @type {ConfigurableProductDataOptionInterface}
     * @memberof ConfigurableProductOptionRepositoryV1SavePostRequest
     */
    'option': ConfigurableProductDataOptionInterface;
}
/**
 * 
 * @export
 * @interface CustomerAccountManagementV1ActivateByIdPutRequest
 */
export interface CustomerAccountManagementV1ActivateByIdPutRequest {
    /**
     * 
     * @type {string}
     * @memberof CustomerAccountManagementV1ActivateByIdPutRequest
     */
    'confirmationKey': string;
}
/**
 * 
 * @export
 * @interface CustomerAccountManagementV1ChangePasswordByIdPutRequest
 */
export interface CustomerAccountManagementV1ChangePasswordByIdPutRequest {
    /**
     * 
     * @type {string}
     * @memberof CustomerAccountManagementV1ChangePasswordByIdPutRequest
     */
    'currentPassword': string;
    /**
     * 
     * @type {string}
     * @memberof CustomerAccountManagementV1ChangePasswordByIdPutRequest
     */
    'newPassword': string;
}
/**
 * 
 * @export
 * @interface CustomerAccountManagementV1CreateAccountPostRequest
 */
export interface CustomerAccountManagementV1CreateAccountPostRequest {
    /**
     * 
     * @type {CustomerDataCustomerInterface}
     * @memberof CustomerAccountManagementV1CreateAccountPostRequest
     */
    'customer': CustomerDataCustomerInterface;
    /**
     * 
     * @type {string}
     * @memberof CustomerAccountManagementV1CreateAccountPostRequest
     */
    'password'?: string;
    /**
     * 
     * @type {string}
     * @memberof CustomerAccountManagementV1CreateAccountPostRequest
     */
    'redirectUrl'?: string;
}
/**
 * 
 * @export
 * @interface CustomerAccountManagementV1InitiatePasswordResetPutRequest
 */
export interface CustomerAccountManagementV1InitiatePasswordResetPutRequest {
    /**
     * 
     * @type {string}
     * @memberof CustomerAccountManagementV1InitiatePasswordResetPutRequest
     */
    'email': string;
    /**
     * 
     * @type {string}
     * @memberof CustomerAccountManagementV1InitiatePasswordResetPutRequest
     */
    'template': string;
    /**
     * 
     * @type {number}
     * @memberof CustomerAccountManagementV1InitiatePasswordResetPutRequest
     */
    'websiteId'?: number;
}
/**
 * 
 * @export
 * @interface CustomerAccountManagementV1IsEmailAvailablePostRequest
 */
export interface CustomerAccountManagementV1IsEmailAvailablePostRequest {
    /**
     * 
     * @type {string}
     * @memberof CustomerAccountManagementV1IsEmailAvailablePostRequest
     */
    'customerEmail': string;
    /**
     * If not set, will use the current websiteId
     * @type {number}
     * @memberof CustomerAccountManagementV1IsEmailAvailablePostRequest
     */
    'websiteId'?: number;
}
/**
 * 
 * @export
 * @interface CustomerAccountManagementV1ResendConfirmationPostRequest
 */
export interface CustomerAccountManagementV1ResendConfirmationPostRequest {
    /**
     * 
     * @type {string}
     * @memberof CustomerAccountManagementV1ResendConfirmationPostRequest
     */
    'email': string;
    /**
     * 
     * @type {number}
     * @memberof CustomerAccountManagementV1ResendConfirmationPostRequest
     */
    'websiteId': number;
    /**
     * 
     * @type {string}
     * @memberof CustomerAccountManagementV1ResendConfirmationPostRequest
     */
    'redirectUrl'?: string;
}
/**
 * 
 * @export
 * @interface CustomerAccountManagementV1ResetPasswordPostRequest
 */
export interface CustomerAccountManagementV1ResetPasswordPostRequest {
    /**
     * If empty value given then the customer will be matched by the RP token.
     * @type {string}
     * @memberof CustomerAccountManagementV1ResetPasswordPostRequest
     */
    'email': string;
    /**
     * 
     * @type {string}
     * @memberof CustomerAccountManagementV1ResetPasswordPostRequest
     */
    'resetToken': string;
    /**
     * 
     * @type {string}
     * @memberof CustomerAccountManagementV1ResetPasswordPostRequest
     */
    'newPassword': string;
}
/**
 * 
 * @export
 * @interface CustomerAccountManagementV1ValidatePutRequest
 */
export interface CustomerAccountManagementV1ValidatePutRequest {
    /**
     * 
     * @type {CustomerDataCustomerInterface}
     * @memberof CustomerAccountManagementV1ValidatePutRequest
     */
    'customer': CustomerDataCustomerInterface;
}
/**
 * 
 * @export
 * @interface CustomerCustomerRepositoryV1SavePutRequest
 */
export interface CustomerCustomerRepositoryV1SavePutRequest {
    /**
     * 
     * @type {CustomerDataCustomerInterface}
     * @memberof CustomerCustomerRepositoryV1SavePutRequest
     */
    'customer': CustomerDataCustomerInterface;
    /**
     * 
     * @type {string}
     * @memberof CustomerCustomerRepositoryV1SavePutRequest
     */
    'passwordHash'?: string;
}
/**
 * Customer address interface.
 * @export
 * @interface CustomerDataAddressInterface
 */
export interface CustomerDataAddressInterface {
    /**
     * ID
     * @type {number}
     * @memberof CustomerDataAddressInterface
     */
    'id'?: number;
    /**
     * Customer ID
     * @type {number}
     * @memberof CustomerDataAddressInterface
     */
    'customer_id'?: number;
    /**
     * 
     * @type {CustomerDataRegionInterface}
     * @memberof CustomerDataAddressInterface
     */
    'region'?: CustomerDataRegionInterface;
    /**
     * Region ID
     * @type {number}
     * @memberof CustomerDataAddressInterface
     */
    'region_id'?: number;
    /**
     * Country code in ISO_3166-2 format
     * @type {string}
     * @memberof CustomerDataAddressInterface
     */
    'country_id'?: string;
    /**
     * Street
     * @type {Array<string>}
     * @memberof CustomerDataAddressInterface
     */
    'street'?: Array<string>;
    /**
     * Company
     * @type {string}
     * @memberof CustomerDataAddressInterface
     */
    'company'?: string;
    /**
     * Telephone number
     * @type {string}
     * @memberof CustomerDataAddressInterface
     */
    'telephone'?: string;
    /**
     * Fax number
     * @type {string}
     * @memberof CustomerDataAddressInterface
     */
    'fax'?: string;
    /**
     * Postcode
     * @type {string}
     * @memberof CustomerDataAddressInterface
     */
    'postcode'?: string;
    /**
     * City name
     * @type {string}
     * @memberof CustomerDataAddressInterface
     */
    'city'?: string;
    /**
     * First name
     * @type {string}
     * @memberof CustomerDataAddressInterface
     */
    'firstname'?: string;
    /**
     * Last name
     * @type {string}
     * @memberof CustomerDataAddressInterface
     */
    'lastname'?: string;
    /**
     * Middle name
     * @type {string}
     * @memberof CustomerDataAddressInterface
     */
    'middlename'?: string;
    /**
     * Prefix
     * @type {string}
     * @memberof CustomerDataAddressInterface
     */
    'prefix'?: string;
    /**
     * Suffix
     * @type {string}
     * @memberof CustomerDataAddressInterface
     */
    'suffix'?: string;
    /**
     * Vat id
     * @type {string}
     * @memberof CustomerDataAddressInterface
     */
    'vat_id'?: string;
    /**
     * If this address is default shipping address.
     * @type {boolean}
     * @memberof CustomerDataAddressInterface
     */
    'default_shipping'?: boolean;
    /**
     * If this address is default billing address
     * @type {boolean}
     * @memberof CustomerDataAddressInterface
     */
    'default_billing'?: boolean;
    /**
     * ExtensionInterface class for @see \\Magento\\Customer\\Api\\Data\\AddressInterface
     * @type {object}
     * @memberof CustomerDataAddressInterface
     */
    'extension_attributes'?: object;
    /**
     * Custom attributes values.
     * @type {Array<FrameworkAttributeInterface>}
     * @memberof CustomerDataAddressInterface
     */
    'custom_attributes'?: Array<FrameworkAttributeInterface>;
}
/**
 * Customer attribute metadata interface.
 * @export
 * @interface CustomerDataAttributeMetadataInterface
 */
export interface CustomerDataAttributeMetadataInterface {
    /**
     * HTML for input element.
     * @type {string}
     * @memberof CustomerDataAttributeMetadataInterface
     */
    'frontend_input': string;
    /**
     * Template used for input (e.g. \"date\")
     * @type {string}
     * @memberof CustomerDataAttributeMetadataInterface
     */
    'input_filter': string;
    /**
     * Label of the store.
     * @type {string}
     * @memberof CustomerDataAttributeMetadataInterface
     */
    'store_label': string;
    /**
     * Validation rules.
     * @type {Array<CustomerDataValidationRuleInterface>}
     * @memberof CustomerDataAttributeMetadataInterface
     */
    'validation_rules': Array<CustomerDataValidationRuleInterface>;
    /**
     * Of lines of the attribute value.
     * @type {number}
     * @memberof CustomerDataAttributeMetadataInterface
     */
    'multiline_count': number;
    /**
     * Attribute is visible on frontend.
     * @type {boolean}
     * @memberof CustomerDataAttributeMetadataInterface
     */
    'visible': boolean;
    /**
     * Attribute is required.
     * @type {boolean}
     * @memberof CustomerDataAttributeMetadataInterface
     */
    'required': boolean;
    /**
     * Data model for attribute.
     * @type {string}
     * @memberof CustomerDataAttributeMetadataInterface
     */
    'data_model': string;
    /**
     * Options of the attribute (key => value pairs for select)
     * @type {Array<CustomerDataOptionInterface>}
     * @memberof CustomerDataAttributeMetadataInterface
     */
    'options': Array<CustomerDataOptionInterface>;
    /**
     * Class which is used to display the attribute on frontend.
     * @type {string}
     * @memberof CustomerDataAttributeMetadataInterface
     */
    'frontend_class': string;
    /**
     * Current attribute has been defined by a user.
     * @type {boolean}
     * @memberof CustomerDataAttributeMetadataInterface
     */
    'user_defined': boolean;
    /**
     * Attributes sort order.
     * @type {number}
     * @memberof CustomerDataAttributeMetadataInterface
     */
    'sort_order': number;
    /**
     * Label which supposed to be displayed on frontend.
     * @type {string}
     * @memberof CustomerDataAttributeMetadataInterface
     */
    'frontend_label': string;
    /**
     * The note attribute for the element.
     * @type {string}
     * @memberof CustomerDataAttributeMetadataInterface
     */
    'note': string;
    /**
     * This is a system attribute.
     * @type {boolean}
     * @memberof CustomerDataAttributeMetadataInterface
     */
    'system': boolean;
    /**
     * Backend type.
     * @type {string}
     * @memberof CustomerDataAttributeMetadataInterface
     */
    'backend_type': string;
    /**
     * It is used in customer grid
     * @type {boolean}
     * @memberof CustomerDataAttributeMetadataInterface
     */
    'is_used_in_grid'?: boolean;
    /**
     * It is visible in customer grid
     * @type {boolean}
     * @memberof CustomerDataAttributeMetadataInterface
     */
    'is_visible_in_grid'?: boolean;
    /**
     * It is filterable in customer grid
     * @type {boolean}
     * @memberof CustomerDataAttributeMetadataInterface
     */
    'is_filterable_in_grid'?: boolean;
    /**
     * It is searchable in customer grid
     * @type {boolean}
     * @memberof CustomerDataAttributeMetadataInterface
     */
    'is_searchable_in_grid'?: boolean;
    /**
     * Code of the attribute.
     * @type {string}
     * @memberof CustomerDataAttributeMetadataInterface
     */
    'attribute_code': string;
}
/**
 * ExtensionInterface class for @see \\Magento\\Customer\\Api\\Data\\CustomerInterface
 * @export
 * @interface CustomerDataCustomerExtensionInterface
 */
export interface CustomerDataCustomerExtensionInterface {
    /**
     * 
     * @type {CompanyDataCompanyCustomerInterface}
     * @memberof CustomerDataCustomerExtensionInterface
     */
    'company_attributes'?: CompanyDataCompanyCustomerInterface;
    /**
     * 
     * @type {boolean}
     * @memberof CustomerDataCustomerExtensionInterface
     */
    'is_subscribed'?: boolean;
    /**
     * 
     * @type {string}
     * @memberof CustomerDataCustomerExtensionInterface
     */
    'amazon_id'?: string;
    /**
     * 
     * @type {string}
     * @memberof CustomerDataCustomerExtensionInterface
     */
    'vertex_customer_code'?: string;
}
/**
 * Customer interface.
 * @export
 * @interface CustomerDataCustomerInterface
 */
export interface CustomerDataCustomerInterface {
    /**
     * Customer id
     * @type {number}
     * @memberof CustomerDataCustomerInterface
     */
    'id'?: number;
    /**
     * Group id
     * @type {number}
     * @memberof CustomerDataCustomerInterface
     */
    'group_id'?: number;
    /**
     * Default billing address id
     * @type {string}
     * @memberof CustomerDataCustomerInterface
     */
    'default_billing'?: string;
    /**
     * Default shipping address id
     * @type {string}
     * @memberof CustomerDataCustomerInterface
     */
    'default_shipping'?: string;
    /**
     * Confirmation
     * @type {string}
     * @memberof CustomerDataCustomerInterface
     */
    'confirmation'?: string;
    /**
     * Created at time
     * @type {string}
     * @memberof CustomerDataCustomerInterface
     */
    'created_at'?: string;
    /**
     * Updated at time
     * @type {string}
     * @memberof CustomerDataCustomerInterface
     */
    'updated_at'?: string;
    /**
     * Created in area
     * @type {string}
     * @memberof CustomerDataCustomerInterface
     */
    'created_in'?: string;
    /**
     * Date of birth
     * @type {string}
     * @memberof CustomerDataCustomerInterface
     */
    'dob'?: string;
    /**
     * Email address
     * @type {string}
     * @memberof CustomerDataCustomerInterface
     */
    'email': string;
    /**
     * First name
     * @type {string}
     * @memberof CustomerDataCustomerInterface
     */
    'firstname': string;
    /**
     * Last name
     * @type {string}
     * @memberof CustomerDataCustomerInterface
     */
    'lastname': string;
    /**
     * Middle name
     * @type {string}
     * @memberof CustomerDataCustomerInterface
     */
    'middlename'?: string;
    /**
     * Prefix
     * @type {string}
     * @memberof CustomerDataCustomerInterface
     */
    'prefix'?: string;
    /**
     * Suffix
     * @type {string}
     * @memberof CustomerDataCustomerInterface
     */
    'suffix'?: string;
    /**
     * Gender
     * @type {number}
     * @memberof CustomerDataCustomerInterface
     */
    'gender'?: number;
    /**
     * Store id
     * @type {number}
     * @memberof CustomerDataCustomerInterface
     */
    'store_id'?: number;
    /**
     * Tax Vat
     * @type {string}
     * @memberof CustomerDataCustomerInterface
     */
    'taxvat'?: string;
    /**
     * Website id
     * @type {number}
     * @memberof CustomerDataCustomerInterface
     */
    'website_id'?: number;
    /**
     * Customer addresses.
     * @type {Array<CustomerDataAddressInterface>}
     * @memberof CustomerDataCustomerInterface
     */
    'addresses'?: Array<CustomerDataAddressInterface>;
    /**
     * Disable auto group change flag.
     * @type {number}
     * @memberof CustomerDataCustomerInterface
     */
    'disable_auto_group_change'?: number;
    /**
     * 
     * @type {CustomerDataCustomerExtensionInterface}
     * @memberof CustomerDataCustomerInterface
     */
    'extension_attributes'?: CustomerDataCustomerExtensionInterface;
    /**
     * Custom attributes values.
     * @type {Array<FrameworkAttributeInterface>}
     * @memberof CustomerDataCustomerInterface
     */
    'custom_attributes'?: Array<FrameworkAttributeInterface>;
}
/**
 * Interface for customer search results.
 * @export
 * @interface CustomerDataCustomerSearchResultsInterface
 */
export interface CustomerDataCustomerSearchResultsInterface {
    /**
     * Customers list.
     * @type {Array<CustomerDataCustomerInterface>}
     * @memberof CustomerDataCustomerSearchResultsInterface
     */
    'items': Array<CustomerDataCustomerInterface>;
    /**
     * 
     * @type {FrameworkSearchCriteriaInterface}
     * @memberof CustomerDataCustomerSearchResultsInterface
     */
    'search_criteria': FrameworkSearchCriteriaInterface;
    /**
     * Total count.
     * @type {number}
     * @memberof CustomerDataCustomerSearchResultsInterface
     */
    'total_count': number;
}
/**
 * Customer group interface.
 * @export
 * @interface CustomerDataGroupInterface
 */
export interface CustomerDataGroupInterface {
    /**
     * Id
     * @type {number}
     * @memberof CustomerDataGroupInterface
     */
    'id'?: number;
    /**
     * Code
     * @type {string}
     * @memberof CustomerDataGroupInterface
     */
    'code': string;
    /**
     * Tax class id
     * @type {number}
     * @memberof CustomerDataGroupInterface
     */
    'tax_class_id': number;
    /**
     * Tax class name
     * @type {string}
     * @memberof CustomerDataGroupInterface
     */
    'tax_class_name'?: string;
    /**
     * ExtensionInterface class for @see \\Magento\\Customer\\Api\\Data\\GroupInterface
     * @type {object}
     * @memberof CustomerDataGroupInterface
     */
    'extension_attributes'?: object;
}
/**
 * Interface for customer groups search results.
 * @export
 * @interface CustomerDataGroupSearchResultsInterface
 */
export interface CustomerDataGroupSearchResultsInterface {
    /**
     * Customer groups list.
     * @type {Array<CustomerDataGroupInterface>}
     * @memberof CustomerDataGroupSearchResultsInterface
     */
    'items': Array<CustomerDataGroupInterface>;
    /**
     * 
     * @type {FrameworkSearchCriteriaInterface}
     * @memberof CustomerDataGroupSearchResultsInterface
     */
    'search_criteria': FrameworkSearchCriteriaInterface;
    /**
     * Total count.
     * @type {number}
     * @memberof CustomerDataGroupSearchResultsInterface
     */
    'total_count': number;
}
/**
 * Option interface.
 * @export
 * @interface CustomerDataOptionInterface
 */
export interface CustomerDataOptionInterface {
    /**
     * Option label
     * @type {string}
     * @memberof CustomerDataOptionInterface
     */
    'label': string;
    /**
     * Option value
     * @type {string}
     * @memberof CustomerDataOptionInterface
     */
    'value'?: string;
    /**
     * Nested options
     * @type {Array<CustomerDataOptionInterface>}
     * @memberof CustomerDataOptionInterface
     */
    'options'?: Array<CustomerDataOptionInterface>;
}
/**
 * Customer address region interface.
 * @export
 * @interface CustomerDataRegionInterface
 */
export interface CustomerDataRegionInterface {
    /**
     * Region code
     * @type {string}
     * @memberof CustomerDataRegionInterface
     */
    'region_code': string;
    /**
     * Region
     * @type {string}
     * @memberof CustomerDataRegionInterface
     */
    'region': string;
    /**
     * Region id
     * @type {number}
     * @memberof CustomerDataRegionInterface
     */
    'region_id': number;
    /**
     * ExtensionInterface class for @see \\Magento\\Customer\\Api\\Data\\RegionInterface
     * @type {object}
     * @memberof CustomerDataRegionInterface
     */
    'extension_attributes'?: object;
}
/**
 * Validation results interface.
 * @export
 * @interface CustomerDataValidationResultsInterface
 */
export interface CustomerDataValidationResultsInterface {
    /**
     * If the provided data is valid.
     * @type {boolean}
     * @memberof CustomerDataValidationResultsInterface
     */
    'valid': boolean;
    /**
     * Error messages as array in case of validation failure, else return empty array.
     * @type {Array<string>}
     * @memberof CustomerDataValidationResultsInterface
     */
    'messages': Array<string>;
}
/**
 * Validation rule interface.
 * @export
 * @interface CustomerDataValidationRuleInterface
 */
export interface CustomerDataValidationRuleInterface {
    /**
     * Validation rule name
     * @type {string}
     * @memberof CustomerDataValidationRuleInterface
     */
    'name': string;
    /**
     * Validation rule value
     * @type {string}
     * @memberof CustomerDataValidationRuleInterface
     */
    'value': string;
}
/**
 * 
 * @export
 * @interface CustomerGroupRepositoryV1SavePostRequest
 */
export interface CustomerGroupRepositoryV1SavePostRequest {
    /**
     * 
     * @type {CustomerDataGroupInterface}
     * @memberof CustomerGroupRepositoryV1SavePostRequest
     */
    'group': CustomerDataGroupInterface;
}
/**
 * Country Information interface.
 * @export
 * @interface DirectoryDataCountryInformationInterface
 */
export interface DirectoryDataCountryInformationInterface {
    /**
     * The country id for the store.
     * @type {string}
     * @memberof DirectoryDataCountryInformationInterface
     */
    'id': string;
    /**
     * The country 2 letter abbreviation for the store.
     * @type {string}
     * @memberof DirectoryDataCountryInformationInterface
     */
    'two_letter_abbreviation': string;
    /**
     * The country 3 letter abbreviation for the store.
     * @type {string}
     * @memberof DirectoryDataCountryInformationInterface
     */
    'three_letter_abbreviation': string;
    /**
     * The country full name (in store locale) for the store.
     * @type {string}
     * @memberof DirectoryDataCountryInformationInterface
     */
    'full_name_locale': string;
    /**
     * The country full name (in English) for the store.
     * @type {string}
     * @memberof DirectoryDataCountryInformationInterface
     */
    'full_name_english': string;
    /**
     * The available regions for the store.
     * @type {Array<DirectoryDataRegionInformationInterface>}
     * @memberof DirectoryDataCountryInformationInterface
     */
    'available_regions'?: Array<DirectoryDataRegionInformationInterface>;
    /**
     * ExtensionInterface class for @see \\Magento\\Directory\\Api\\Data\\CountryInformationInterface
     * @type {object}
     * @memberof DirectoryDataCountryInformationInterface
     */
    'extension_attributes'?: object;
}
/**
 * Currency Information interface.
 * @export
 * @interface DirectoryDataCurrencyInformationInterface
 */
export interface DirectoryDataCurrencyInformationInterface {
    /**
     * The base currency code for the store.
     * @type {string}
     * @memberof DirectoryDataCurrencyInformationInterface
     */
    'base_currency_code': string;
    /**
     * The currency symbol of the base currency for the store.
     * @type {string}
     * @memberof DirectoryDataCurrencyInformationInterface
     */
    'base_currency_symbol': string;
    /**
     * The default display currency code for the store.
     * @type {string}
     * @memberof DirectoryDataCurrencyInformationInterface
     */
    'default_display_currency_code': string;
    /**
     * The currency symbol of the default display currency for the store.
     * @type {string}
     * @memberof DirectoryDataCurrencyInformationInterface
     */
    'default_display_currency_symbol': string;
    /**
     * The list of allowed currency codes for the store.
     * @type {Array<string>}
     * @memberof DirectoryDataCurrencyInformationInterface
     */
    'available_currency_codes': Array<string>;
    /**
     * The list of exchange rate information for the store.
     * @type {Array<DirectoryDataExchangeRateInterface>}
     * @memberof DirectoryDataCurrencyInformationInterface
     */
    'exchange_rates': Array<DirectoryDataExchangeRateInterface>;
    /**
     * ExtensionInterface class for @see \\Magento\\Directory\\Api\\Data\\CurrencyInformationInterface
     * @type {object}
     * @memberof DirectoryDataCurrencyInformationInterface
     */
    'extension_attributes'?: object;
}
/**
 * Exchange Rate interface.
 * @export
 * @interface DirectoryDataExchangeRateInterface
 */
export interface DirectoryDataExchangeRateInterface {
    /**
     * The currency code associated with the exchange rate.
     * @type {string}
     * @memberof DirectoryDataExchangeRateInterface
     */
    'currency_to': string;
    /**
     * The exchange rate for the associated currency and the store\'s base currency.
     * @type {number}
     * @memberof DirectoryDataExchangeRateInterface
     */
    'rate': number;
    /**
     * ExtensionInterface class for @see \\Magento\\Directory\\Api\\Data\\ExchangeRateInterface
     * @type {object}
     * @memberof DirectoryDataExchangeRateInterface
     */
    'extension_attributes'?: object;
}
/**
 * Region Information interface.
 * @export
 * @interface DirectoryDataRegionInformationInterface
 */
export interface DirectoryDataRegionInformationInterface {
    /**
     * Region id
     * @type {string}
     * @memberof DirectoryDataRegionInformationInterface
     */
    'id': string;
    /**
     * Region code
     * @type {string}
     * @memberof DirectoryDataRegionInformationInterface
     */
    'code': string;
    /**
     * Region name
     * @type {string}
     * @memberof DirectoryDataRegionInformationInterface
     */
    'name': string;
    /**
     * ExtensionInterface class for @see \\Magento\\Directory\\Api\\Data\\RegionInformationInterface
     * @type {object}
     * @memberof DirectoryDataRegionInformationInterface
     */
    'extension_attributes'?: object;
}
/**
 * Downloadable Option
 * @export
 * @interface DownloadableDataDownloadableOptionInterface
 */
export interface DownloadableDataDownloadableOptionInterface {
    /**
     * The list of downloadable links
     * @type {Array<number>}
     * @memberof DownloadableDataDownloadableOptionInterface
     */
    'downloadable_links': Array<number>;
}
/**
 * 
 * @export
 * @interface DownloadableDataFileContentInterface
 */
export interface DownloadableDataFileContentInterface {
    /**
     * Data (base64 encoded content)
     * @type {string}
     * @memberof DownloadableDataFileContentInterface
     */
    'file_data': string;
    /**
     * File name
     * @type {string}
     * @memberof DownloadableDataFileContentInterface
     */
    'name': string;
    /**
     * ExtensionInterface class for @see \\Magento\\Downloadable\\Api\\Data\\File\\ContentInterface
     * @type {object}
     * @memberof DownloadableDataFileContentInterface
     */
    'extension_attributes'?: object;
}
/**
 * 
 * @export
 * @interface DownloadableDataLinkInterface
 */
export interface DownloadableDataLinkInterface {
    /**
     * Sample(or link) id
     * @type {number}
     * @memberof DownloadableDataLinkInterface
     */
    'id'?: number;
    /**
     * 
     * @type {string}
     * @memberof DownloadableDataLinkInterface
     */
    'title'?: string;
    /**
     * 
     * @type {number}
     * @memberof DownloadableDataLinkInterface
     */
    'sort_order': number;
    /**
     * Shareable status
     * @type {number}
     * @memberof DownloadableDataLinkInterface
     */
    'is_shareable': number;
    /**
     * Price
     * @type {number}
     * @memberof DownloadableDataLinkInterface
     */
    'price': number;
    /**
     * Of downloads per user
     * @type {number}
     * @memberof DownloadableDataLinkInterface
     */
    'number_of_downloads'?: number;
    /**
     * 
     * @type {string}
     * @memberof DownloadableDataLinkInterface
     */
    'link_type': string;
    /**
     * relative file path
     * @type {string}
     * @memberof DownloadableDataLinkInterface
     */
    'link_file'?: string;
    /**
     * 
     * @type {DownloadableDataFileContentInterface}
     * @memberof DownloadableDataLinkInterface
     */
    'link_file_content'?: DownloadableDataFileContentInterface;
    /**
     * Link url or null when type is \'file\'
     * @type {string}
     * @memberof DownloadableDataLinkInterface
     */
    'link_url'?: string;
    /**
     * 
     * @type {string}
     * @memberof DownloadableDataLinkInterface
     */
    'sample_type': string;
    /**
     * relative file path
     * @type {string}
     * @memberof DownloadableDataLinkInterface
     */
    'sample_file'?: string;
    /**
     * 
     * @type {DownloadableDataFileContentInterface}
     * @memberof DownloadableDataLinkInterface
     */
    'sample_file_content'?: DownloadableDataFileContentInterface;
    /**
     * file URL
     * @type {string}
     * @memberof DownloadableDataLinkInterface
     */
    'sample_url'?: string;
    /**
     * ExtensionInterface class for @see \\Magento\\Downloadable\\Api\\Data\\LinkInterface
     * @type {object}
     * @memberof DownloadableDataLinkInterface
     */
    'extension_attributes'?: object;
}
/**
 * 
 * @export
 * @interface DownloadableDataSampleInterface
 */
export interface DownloadableDataSampleInterface {
    /**
     * Sample(or link) id
     * @type {number}
     * @memberof DownloadableDataSampleInterface
     */
    'id'?: number;
    /**
     * Title
     * @type {string}
     * @memberof DownloadableDataSampleInterface
     */
    'title': string;
    /**
     * Order index for sample
     * @type {number}
     * @memberof DownloadableDataSampleInterface
     */
    'sort_order': number;
    /**
     * 
     * @type {string}
     * @memberof DownloadableDataSampleInterface
     */
    'sample_type': string;
    /**
     * relative file path
     * @type {string}
     * @memberof DownloadableDataSampleInterface
     */
    'sample_file'?: string;
    /**
     * 
     * @type {DownloadableDataFileContentInterface}
     * @memberof DownloadableDataSampleInterface
     */
    'sample_file_content'?: DownloadableDataFileContentInterface;
    /**
     * file URL
     * @type {string}
     * @memberof DownloadableDataSampleInterface
     */
    'sample_url'?: string;
    /**
     * ExtensionInterface class for @see \\Magento\\Downloadable\\Api\\Data\\SampleInterface
     * @type {object}
     * @memberof DownloadableDataSampleInterface
     */
    'extension_attributes'?: object;
}
/**
 * 
 * @export
 * @interface DownloadableLinkRepositoryV1SavePostRequest
 */
export interface DownloadableLinkRepositoryV1SavePostRequest {
    /**
     * 
     * @type {DownloadableDataLinkInterface}
     * @memberof DownloadableLinkRepositoryV1SavePostRequest
     */
    'link': DownloadableDataLinkInterface;
    /**
     * 
     * @type {boolean}
     * @memberof DownloadableLinkRepositoryV1SavePostRequest
     */
    'isGlobalScopeContent'?: boolean;
}
/**
 * 
 * @export
 * @interface DownloadableSampleRepositoryV1SavePostRequest
 */
export interface DownloadableSampleRepositoryV1SavePostRequest {
    /**
     * 
     * @type {DownloadableDataSampleInterface}
     * @memberof DownloadableSampleRepositoryV1SavePostRequest
     */
    'sample': DownloadableDataSampleInterface;
    /**
     * 
     * @type {boolean}
     * @memberof DownloadableSampleRepositoryV1SavePostRequest
     */
    'isGlobalScopeContent'?: boolean;
}
/**
 * 
 * @export
 * @interface EavAttributeSetManagementV1CreatePostRequest
 */
export interface EavAttributeSetManagementV1CreatePostRequest {
    /**
     * 
     * @type {string}
     * @memberof EavAttributeSetManagementV1CreatePostRequest
     */
    'entityTypeCode': string;
    /**
     * 
     * @type {EavDataAttributeSetInterface}
     * @memberof EavAttributeSetManagementV1CreatePostRequest
     */
    'attributeSet': EavDataAttributeSetInterface;
    /**
     * 
     * @type {number}
     * @memberof EavAttributeSetManagementV1CreatePostRequest
     */
    'skeletonId': number;
}
/**
 * 
 * @export
 * @interface EavAttributeSetRepositoryV1SavePutRequest
 */
export interface EavAttributeSetRepositoryV1SavePutRequest {
    /**
     * 
     * @type {EavDataAttributeSetInterface}
     * @memberof EavAttributeSetRepositoryV1SavePutRequest
     */
    'attributeSet': EavDataAttributeSetInterface;
}
/**
 * Interface AttributeFrontendLabelInterface
 * @export
 * @interface EavDataAttributeFrontendLabelInterface
 */
export interface EavDataAttributeFrontendLabelInterface {
    /**
     * Store id
     * @type {number}
     * @memberof EavDataAttributeFrontendLabelInterface
     */
    'store_id'?: number;
    /**
     * Option label
     * @type {string}
     * @memberof EavDataAttributeFrontendLabelInterface
     */
    'label'?: string;
}
/**
 * ExtensionInterface class for @see \\Magento\\Eav\\Api\\Data\\AttributeGroupInterface
 * @export
 * @interface EavDataAttributeGroupExtensionInterface
 */
export interface EavDataAttributeGroupExtensionInterface {
    /**
     * 
     * @type {string}
     * @memberof EavDataAttributeGroupExtensionInterface
     */
    'attribute_group_code'?: string;
    /**
     * 
     * @type {string}
     * @memberof EavDataAttributeGroupExtensionInterface
     */
    'sort_order'?: string;
}
/**
 * Interface AttributeGroupInterface
 * @export
 * @interface EavDataAttributeGroupInterface
 */
export interface EavDataAttributeGroupInterface {
    /**
     * Id
     * @type {string}
     * @memberof EavDataAttributeGroupInterface
     */
    'attribute_group_id'?: string;
    /**
     * Name
     * @type {string}
     * @memberof EavDataAttributeGroupInterface
     */
    'attribute_group_name'?: string;
    /**
     * Attribute set id
     * @type {number}
     * @memberof EavDataAttributeGroupInterface
     */
    'attribute_set_id'?: number;
    /**
     * 
     * @type {EavDataAttributeGroupExtensionInterface}
     * @memberof EavDataAttributeGroupInterface
     */
    'extension_attributes'?: EavDataAttributeGroupExtensionInterface;
}
/**
 * Interface AttributeGroupSearchResultsInterface
 * @export
 * @interface EavDataAttributeGroupSearchResultsInterface
 */
export interface EavDataAttributeGroupSearchResultsInterface {
    /**
     * Attribute sets list.
     * @type {Array<EavDataAttributeGroupInterface>}
     * @memberof EavDataAttributeGroupSearchResultsInterface
     */
    'items': Array<EavDataAttributeGroupInterface>;
    /**
     * 
     * @type {FrameworkSearchCriteriaInterface}
     * @memberof EavDataAttributeGroupSearchResultsInterface
     */
    'search_criteria': FrameworkSearchCriteriaInterface;
    /**
     * Total count.
     * @type {number}
     * @memberof EavDataAttributeGroupSearchResultsInterface
     */
    'total_count': number;
}
/**
 * Created from:
 * @export
 * @interface EavDataAttributeOptionInterface
 */
export interface EavDataAttributeOptionInterface {
    /**
     * Option label
     * @type {string}
     * @memberof EavDataAttributeOptionInterface
     */
    'label': string;
    /**
     * Option value
     * @type {string}
     * @memberof EavDataAttributeOptionInterface
     */
    'value': string;
    /**
     * Option order
     * @type {number}
     * @memberof EavDataAttributeOptionInterface
     */
    'sort_order'?: number;
    /**
     * Default
     * @type {boolean}
     * @memberof EavDataAttributeOptionInterface
     */
    'is_default'?: boolean;
    /**
     * Option label for store scopes
     * @type {Array<EavDataAttributeOptionLabelInterface>}
     * @memberof EavDataAttributeOptionInterface
     */
    'store_labels'?: Array<EavDataAttributeOptionLabelInterface>;
}
/**
 * Interface AttributeOptionLabelInterface
 * @export
 * @interface EavDataAttributeOptionLabelInterface
 */
export interface EavDataAttributeOptionLabelInterface {
    /**
     * Store id
     * @type {number}
     * @memberof EavDataAttributeOptionLabelInterface
     */
    'store_id'?: number;
    /**
     * Option label
     * @type {string}
     * @memberof EavDataAttributeOptionLabelInterface
     */
    'label'?: string;
}
/**
 * Interface AttributeSetInterface
 * @export
 * @interface EavDataAttributeSetInterface
 */
export interface EavDataAttributeSetInterface {
    /**
     * Attribute set ID
     * @type {number}
     * @memberof EavDataAttributeSetInterface
     */
    'attribute_set_id'?: number;
    /**
     * Attribute set name
     * @type {string}
     * @memberof EavDataAttributeSetInterface
     */
    'attribute_set_name': string;
    /**
     * Attribute set sort order index
     * @type {number}
     * @memberof EavDataAttributeSetInterface
     */
    'sort_order': number;
    /**
     * Attribute set entity type id
     * @type {number}
     * @memberof EavDataAttributeSetInterface
     */
    'entity_type_id'?: number;
    /**
     * ExtensionInterface class for @see \\Magento\\Eav\\Api\\Data\\AttributeSetInterface
     * @type {object}
     * @memberof EavDataAttributeSetInterface
     */
    'extension_attributes'?: object;
}
/**
 * Interface AttributeSetSearchResultsInterface
 * @export
 * @interface EavDataAttributeSetSearchResultsInterface
 */
export interface EavDataAttributeSetSearchResultsInterface {
    /**
     * Attribute sets list.
     * @type {Array<EavDataAttributeSetInterface>}
     * @memberof EavDataAttributeSetSearchResultsInterface
     */
    'items': Array<EavDataAttributeSetInterface>;
    /**
     * 
     * @type {FrameworkSearchCriteriaInterface}
     * @memberof EavDataAttributeSetSearchResultsInterface
     */
    'search_criteria': FrameworkSearchCriteriaInterface;
    /**
     * Total count.
     * @type {number}
     * @memberof EavDataAttributeSetSearchResultsInterface
     */
    'total_count': number;
}
/**
 * Interface AttributeValidationRuleInterface
 * @export
 * @interface EavDataAttributeValidationRuleInterface
 */
export interface EavDataAttributeValidationRuleInterface {
    /**
     * Object key
     * @type {string}
     * @memberof EavDataAttributeValidationRuleInterface
     */
    'key': string;
    /**
     * Object value
     * @type {string}
     * @memberof EavDataAttributeValidationRuleInterface
     */
    'value': string;
}
/**
 * Error details
 * @export
 * @interface ErrorErrorsItem
 */
export interface ErrorErrorsItem {
    /**
     * Error message
     * @type {string}
     * @memberof ErrorErrorsItem
     */
    'message'?: string;
    /**
     * Error parameters list
     * @type {Array<ErrorParametersItem>}
     * @memberof ErrorErrorsItem
     */
    'parameters'?: Array<ErrorParametersItem>;
}
/**
 * Error parameters item
 * @export
 * @interface ErrorParametersItem
 */
export interface ErrorParametersItem {
    /**
     * ACL resource
     * @type {string}
     * @memberof ErrorParametersItem
     */
    'resources'?: string;
    /**
     * Missing or invalid field name
     * @type {string}
     * @memberof ErrorParametersItem
     */
    'fieldName'?: string;
    /**
     * Incorrect field value
     * @type {string}
     * @memberof ErrorParametersItem
     */
    'fieldValue'?: string;
}
/**
 * 
 * @export
 * @interface ErrorResponse
 */
export interface ErrorResponse {
    /**
     * Error message
     * @type {string}
     * @memberof ErrorResponse
     */
    'message': string;
    /**
     * Errors list
     * @type {Array<ErrorErrorsItem>}
     * @memberof ErrorResponse
     */
    'errors'?: Array<ErrorErrorsItem>;
    /**
     * Error code
     * @type {number}
     * @memberof ErrorResponse
     */
    'code'?: number;
    /**
     * Error parameters list
     * @type {Array<ErrorParametersItem>}
     * @memberof ErrorResponse
     */
    'parameters'?: Array<ErrorParametersItem>;
    /**
     * Stack trace
     * @type {string}
     * @memberof ErrorResponse
     */
    'trace'?: string;
}
/**
 * Interface for custom attribute value.
 * @export
 * @interface FrameworkAttributeInterface
 */
export interface FrameworkAttributeInterface {
    /**
     * Attribute code
     * @type {string}
     * @memberof FrameworkAttributeInterface
     */
    'attribute_code': string;
    /**
     * Attribute value
     * @type {string}
     * @memberof FrameworkAttributeInterface
     */
    'value': string;
}
/**
 * Interface CriteriaInterface
 * @export
 * @interface FrameworkCriteriaInterface
 */
export interface FrameworkCriteriaInterface {
    /**
     * Associated Mapper Interface name
     * @type {string}
     * @memberof FrameworkCriteriaInterface
     */
    'mapper_interface_name': string;
    /**
     * Criteria objects added to current Composite Criteria
     * @type {Array<FrameworkCriteriaInterface>}
     * @memberof FrameworkCriteriaInterface
     */
    'criteria_list': Array<FrameworkCriteriaInterface>;
    /**
     * List of filters
     * @type {Array<string>}
     * @memberof FrameworkCriteriaInterface
     */
    'filters': Array<string>;
    /**
     * Ordering criteria
     * @type {Array<string>}
     * @memberof FrameworkCriteriaInterface
     */
    'orders': Array<string>;
    /**
     * Limit
     * @type {Array<string>}
     * @memberof FrameworkCriteriaInterface
     */
    'limit': Array<string>;
}
/**
 * Image Content data interface
 * @export
 * @interface FrameworkDataImageContentInterface
 */
export interface FrameworkDataImageContentInterface {
    /**
     * Media data (base64 encoded content)
     * @type {string}
     * @memberof FrameworkDataImageContentInterface
     */
    'base64_encoded_data': string;
    /**
     * MIME type
     * @type {string}
     * @memberof FrameworkDataImageContentInterface
     */
    'type': string;
    /**
     * Image name
     * @type {string}
     * @memberof FrameworkDataImageContentInterface
     */
    'name': string;
}
/**
 * Video Content data interface
 * @export
 * @interface FrameworkDataVideoContentInterface
 */
export interface FrameworkDataVideoContentInterface {
    /**
     * MIME type
     * @type {string}
     * @memberof FrameworkDataVideoContentInterface
     */
    'media_type': string;
    /**
     * Provider
     * @type {string}
     * @memberof FrameworkDataVideoContentInterface
     */
    'video_provider': string;
    /**
     * Video URL
     * @type {string}
     * @memberof FrameworkDataVideoContentInterface
     */
    'video_url': string;
    /**
     * Title
     * @type {string}
     * @memberof FrameworkDataVideoContentInterface
     */
    'video_title': string;
    /**
     * Video Description
     * @type {string}
     * @memberof FrameworkDataVideoContentInterface
     */
    'video_description': string;
    /**
     * Metadata
     * @type {string}
     * @memberof FrameworkDataVideoContentInterface
     */
    'video_metadata': string;
}
/**
 * Filter which can be used by any methods from service layer.
 * @export
 * @interface FrameworkFilter
 */
export interface FrameworkFilter {
    /**
     * Field
     * @type {string}
     * @memberof FrameworkFilter
     */
    'field': string;
    /**
     * Value
     * @type {string}
     * @memberof FrameworkFilter
     */
    'value': string;
    /**
     * Condition type
     * @type {string}
     * @memberof FrameworkFilter
     */
    'condition_type'?: string;
}
/**
 * Provides metadata about an attribute.
 * @export
 * @interface FrameworkMetadataObjectInterface
 */
export interface FrameworkMetadataObjectInterface {
    /**
     * Code of the attribute.
     * @type {string}
     * @memberof FrameworkMetadataObjectInterface
     */
    'attribute_code': string;
}
/**
 * Faceted data
 * @export
 * @interface FrameworkSearchAggregationInterface
 */
export interface FrameworkSearchAggregationInterface {
    /**
     * All Document fields
     * @type {Array<FrameworkSearchBucketInterface>}
     * @memberof FrameworkSearchAggregationInterface
     */
    'buckets': Array<FrameworkSearchBucketInterface>;
    /**
     * Document field names
     * @type {Array<string>}
     * @memberof FrameworkSearchAggregationInterface
     */
    'bucket_names': Array<string>;
}
/**
 * Interface \\Magento\\Framework\\Api\\Search\\AggregationValueInterface
 * @export
 * @interface FrameworkSearchAggregationValueInterface
 */
export interface FrameworkSearchAggregationValueInterface {
    /**
     * Aggregation
     * @type {string}
     * @memberof FrameworkSearchAggregationValueInterface
     */
    'value': string;
    /**
     * Metrics
     * @type {Array<string>}
     * @memberof FrameworkSearchAggregationValueInterface
     */
    'metrics': Array<string>;
}
/**
 * Facet Bucket
 * @export
 * @interface FrameworkSearchBucketInterface
 */
export interface FrameworkSearchBucketInterface {
    /**
     * Field name
     * @type {string}
     * @memberof FrameworkSearchBucketInterface
     */
    'name': string;
    /**
     * Field values
     * @type {Array<FrameworkSearchAggregationValueInterface>}
     * @memberof FrameworkSearchBucketInterface
     */
    'values': Array<FrameworkSearchAggregationValueInterface>;
}
/**
 * Search criteria interface.
 * @export
 * @interface FrameworkSearchCriteriaInterface
 */
export interface FrameworkSearchCriteriaInterface {
    /**
     * A list of filter groups.
     * @type {Array<FrameworkSearchFilterGroup>}
     * @memberof FrameworkSearchCriteriaInterface
     */
    'filter_groups': Array<FrameworkSearchFilterGroup>;
    /**
     * Sort order.
     * @type {Array<FrameworkSortOrder>}
     * @memberof FrameworkSearchCriteriaInterface
     */
    'sort_orders'?: Array<FrameworkSortOrder>;
    /**
     * Page size.
     * @type {number}
     * @memberof FrameworkSearchCriteriaInterface
     */
    'page_size'?: number;
    /**
     * Current page.
     * @type {number}
     * @memberof FrameworkSearchCriteriaInterface
     */
    'current_page'?: number;
}
/**
 * Interface \\Magento\\Framework\\Api\\Search\\DocumentInterface
 * @export
 * @interface FrameworkSearchDocumentInterface
 */
export interface FrameworkSearchDocumentInterface {
    /**
     * 
     * @type {number}
     * @memberof FrameworkSearchDocumentInterface
     */
    'id': number;
    /**
     * Custom attributes values.
     * @type {Array<FrameworkAttributeInterface>}
     * @memberof FrameworkSearchDocumentInterface
     */
    'custom_attributes'?: Array<FrameworkAttributeInterface>;
}
/**
 * Groups two or more filters together using a logical OR
 * @export
 * @interface FrameworkSearchFilterGroup
 */
export interface FrameworkSearchFilterGroup {
    /**
     * A list of filters in this group
     * @type {Array<FrameworkFilter>}
     * @memberof FrameworkSearchFilterGroup
     */
    'filters'?: Array<FrameworkFilter>;
}
/**
 * Interface SearchCriteriaInterface
 * @export
 * @interface FrameworkSearchSearchCriteriaInterface
 */
export interface FrameworkSearchSearchCriteriaInterface {
    /**
     * 
     * @type {string}
     * @memberof FrameworkSearchSearchCriteriaInterface
     */
    'request_name': string;
    /**
     * A list of filter groups.
     * @type {Array<FrameworkSearchFilterGroup>}
     * @memberof FrameworkSearchSearchCriteriaInterface
     */
    'filter_groups': Array<FrameworkSearchFilterGroup>;
    /**
     * Sort order.
     * @type {Array<FrameworkSortOrder>}
     * @memberof FrameworkSearchSearchCriteriaInterface
     */
    'sort_orders'?: Array<FrameworkSortOrder>;
    /**
     * Page size.
     * @type {number}
     * @memberof FrameworkSearchSearchCriteriaInterface
     */
    'page_size'?: number;
    /**
     * Current page.
     * @type {number}
     * @memberof FrameworkSearchSearchCriteriaInterface
     */
    'current_page'?: number;
}
/**
 * Interface SearchResultInterface
 * @export
 * @interface FrameworkSearchSearchResultInterface
 */
export interface FrameworkSearchSearchResultInterface {
    /**
     * 
     * @type {Array<FrameworkSearchDocumentInterface>}
     * @memberof FrameworkSearchSearchResultInterface
     */
    'items': Array<FrameworkSearchDocumentInterface>;
    /**
     * 
     * @type {FrameworkSearchAggregationInterface}
     * @memberof FrameworkSearchSearchResultInterface
     */
    'aggregations': FrameworkSearchAggregationInterface;
    /**
     * 
     * @type {FrameworkSearchSearchCriteriaInterface}
     * @memberof FrameworkSearchSearchResultInterface
     */
    'search_criteria': FrameworkSearchSearchCriteriaInterface;
    /**
     * Total count.
     * @type {number}
     * @memberof FrameworkSearchSearchResultInterface
     */
    'total_count': number;
}
/**
 * Data object for sort order.
 * @export
 * @interface FrameworkSortOrder
 */
export interface FrameworkSortOrder {
    /**
     * Sorting field.
     * @type {string}
     * @memberof FrameworkSortOrder
     */
    'field': string;
    /**
     * Sorting direction.
     * @type {string}
     * @memberof FrameworkSortOrder
     */
    'direction': string;
}
/**
 * Gift Card Account data
 * @export
 * @interface GiftCardAccountDataGiftCardAccountInterface
 */
export interface GiftCardAccountDataGiftCardAccountInterface {
    /**
     * Cards codes
     * @type {Array<string>}
     * @memberof GiftCardAccountDataGiftCardAccountInterface
     */
    'gift_cards': Array<string>;
    /**
     * Cards amount in quote currency
     * @type {number}
     * @memberof GiftCardAccountDataGiftCardAccountInterface
     */
    'gift_cards_amount': number;
    /**
     * Cards amount in base currency
     * @type {number}
     * @memberof GiftCardAccountDataGiftCardAccountInterface
     */
    'base_gift_cards_amount': number;
    /**
     * Cards amount used in quote currency
     * @type {number}
     * @memberof GiftCardAccountDataGiftCardAccountInterface
     */
    'gift_cards_amount_used': number;
    /**
     * Cards amount used in base currency
     * @type {number}
     * @memberof GiftCardAccountDataGiftCardAccountInterface
     */
    'base_gift_cards_amount_used': number;
    /**
     * ExtensionInterface class for @see \\Magento\\GiftCardAccount\\Api\\Data\\GiftCardAccountInterface
     * @type {object}
     * @memberof GiftCardAccountDataGiftCardAccountInterface
     */
    'extension_attributes'?: object;
}
/**
 * Gift Card data
 * @export
 * @interface GiftCardAccountDataGiftCardInterface
 */
export interface GiftCardAccountDataGiftCardInterface {
    /**
     * Id
     * @type {number}
     * @memberof GiftCardAccountDataGiftCardInterface
     */
    'id': number;
    /**
     * Code
     * @type {string}
     * @memberof GiftCardAccountDataGiftCardInterface
     */
    'code': string;
    /**
     * Amount
     * @type {number}
     * @memberof GiftCardAccountDataGiftCardInterface
     */
    'amount': number;
    /**
     * Base Amount
     * @type {number}
     * @memberof GiftCardAccountDataGiftCardInterface
     */
    'base_amount': number;
}
/**
 * 
 * @export
 * @interface GiftCardAccountGuestGiftCardAccountManagementV1AddGiftCardPostRequest
 */
export interface GiftCardAccountGuestGiftCardAccountManagementV1AddGiftCardPostRequest {
    /**
     * 
     * @type {GiftCardAccountDataGiftCardAccountInterface}
     * @memberof GiftCardAccountGuestGiftCardAccountManagementV1AddGiftCardPostRequest
     */
    'giftCardAccountData': GiftCardAccountDataGiftCardAccountInterface;
}
/**
 * Interface GiftCardOptionInterface
 * @export
 * @interface GiftCardDataGiftCardOptionInterface
 */
export interface GiftCardDataGiftCardOptionInterface {
    /**
     * Gift card amount.
     * @type {string}
     * @memberof GiftCardDataGiftCardOptionInterface
     */
    'giftcard_amount': string;
    /**
     * Gift card open amount value.
     * @type {number}
     * @memberof GiftCardDataGiftCardOptionInterface
     */
    'custom_giftcard_amount'?: number;
    /**
     * Gift card sender name.
     * @type {string}
     * @memberof GiftCardDataGiftCardOptionInterface
     */
    'giftcard_sender_name': string;
    /**
     * Gift card recipient name.
     * @type {string}
     * @memberof GiftCardDataGiftCardOptionInterface
     */
    'giftcard_recipient_name': string;
    /**
     * Gift card sender email.
     * @type {string}
     * @memberof GiftCardDataGiftCardOptionInterface
     */
    'giftcard_sender_email': string;
    /**
     * Gift card recipient email.
     * @type {string}
     * @memberof GiftCardDataGiftCardOptionInterface
     */
    'giftcard_recipient_email': string;
    /**
     * Giftcard message.
     * @type {string}
     * @memberof GiftCardDataGiftCardOptionInterface
     */
    'giftcard_message'?: string;
    /**
     * ExtensionInterface class for @see \\Magento\\GiftCard\\Api\\Data\\GiftCardOptionInterface
     * @type {object}
     * @memberof GiftCardDataGiftCardOptionInterface
     */
    'extension_attributes'?: object;
}
/**
 * Interface GiftcardAmountInterface: this interface is used to serialize and deserialize EAV attribute giftcard_amounts
 * @export
 * @interface GiftCardDataGiftcardAmountInterface
 */
export interface GiftCardDataGiftcardAmountInterface {
    /**
     * 
     * @type {number}
     * @memberof GiftCardDataGiftcardAmountInterface
     */
    'attribute_id': number;
    /**
     * 
     * @type {number}
     * @memberof GiftCardDataGiftcardAmountInterface
     */
    'website_id': number;
    /**
     * 
     * @type {number}
     * @memberof GiftCardDataGiftcardAmountInterface
     */
    'value': number;
    /**
     * 
     * @type {number}
     * @memberof GiftCardDataGiftcardAmountInterface
     */
    'website_value': number;
    /**
     * ExtensionInterface class for @see \\Magento\\GiftCard\\Api\\Data\\GiftcardAmountInterface
     * @type {object}
     * @memberof GiftCardDataGiftcardAmountInterface
     */
    'extension_attributes'?: object;
}
/**
 * 
 * @export
 * @interface GiftMessageCartRepositoryV1SavePostRequest
 */
export interface GiftMessageCartRepositoryV1SavePostRequest {
    /**
     * 
     * @type {GiftMessageDataMessageInterface}
     * @memberof GiftMessageCartRepositoryV1SavePostRequest
     */
    'giftMessage': GiftMessageDataMessageInterface;
}
/**
 * ExtensionInterface class for @see \\Magento\\GiftMessage\\Api\\Data\\MessageInterface
 * @export
 * @interface GiftMessageDataMessageExtensionInterface
 */
export interface GiftMessageDataMessageExtensionInterface {
    /**
     * 
     * @type {string}
     * @memberof GiftMessageDataMessageExtensionInterface
     */
    'entity_id'?: string;
    /**
     * 
     * @type {string}
     * @memberof GiftMessageDataMessageExtensionInterface
     */
    'entity_type'?: string;
    /**
     * 
     * @type {number}
     * @memberof GiftMessageDataMessageExtensionInterface
     */
    'wrapping_id'?: number;
    /**
     * 
     * @type {boolean}
     * @memberof GiftMessageDataMessageExtensionInterface
     */
    'wrapping_allow_gift_receipt'?: boolean;
    /**
     * 
     * @type {boolean}
     * @memberof GiftMessageDataMessageExtensionInterface
     */
    'wrapping_add_printed_card'?: boolean;
}
/**
 * Interface MessageInterface
 * @export
 * @interface GiftMessageDataMessageInterface
 */
export interface GiftMessageDataMessageInterface {
    /**
     * Gift message ID. Otherwise, null.
     * @type {number}
     * @memberof GiftMessageDataMessageInterface
     */
    'gift_message_id'?: number;
    /**
     * Customer ID. Otherwise, null.
     * @type {number}
     * @memberof GiftMessageDataMessageInterface
     */
    'customer_id'?: number;
    /**
     * Sender name.
     * @type {string}
     * @memberof GiftMessageDataMessageInterface
     */
    'sender': string;
    /**
     * Recipient name.
     * @type {string}
     * @memberof GiftMessageDataMessageInterface
     */
    'recipient': string;
    /**
     * Message text.
     * @type {string}
     * @memberof GiftMessageDataMessageInterface
     */
    'message': string;
    /**
     * 
     * @type {GiftMessageDataMessageExtensionInterface}
     * @memberof GiftMessageDataMessageInterface
     */
    'extension_attributes'?: GiftMessageDataMessageExtensionInterface;
}
/**
 * 
 * @export
 * @interface GiftRegistryShippingMethodManagementV1EstimateByRegistryIdPostRequest
 */
export interface GiftRegistryShippingMethodManagementV1EstimateByRegistryIdPostRequest {
    /**
     * The estimate registry id
     * @type {number}
     * @memberof GiftRegistryShippingMethodManagementV1EstimateByRegistryIdPostRequest
     */
    'registryId': number;
}
/**
 * Interface WrappingInterface
 * @export
 * @interface GiftWrappingDataWrappingInterface
 */
export interface GiftWrappingDataWrappingInterface {
    /**
     * 
     * @type {number}
     * @memberof GiftWrappingDataWrappingInterface
     */
    'wrapping_id'?: number;
    /**
     * 
     * @type {string}
     * @memberof GiftWrappingDataWrappingInterface
     */
    'design': string;
    /**
     * 
     * @type {number}
     * @memberof GiftWrappingDataWrappingInterface
     */
    'status': number;
    /**
     * 
     * @type {number}
     * @memberof GiftWrappingDataWrappingInterface
     */
    'base_price': number;
    /**
     * 
     * @type {string}
     * @memberof GiftWrappingDataWrappingInterface
     */
    'image_name'?: string;
    /**
     * 
     * @type {string}
     * @memberof GiftWrappingDataWrappingInterface
     */
    'image_base64_content'?: string;
    /**
     * 
     * @type {string}
     * @memberof GiftWrappingDataWrappingInterface
     */
    'base_currency_code'?: string;
    /**
     * 
     * @type {Array<number>}
     * @memberof GiftWrappingDataWrappingInterface
     */
    'website_ids'?: Array<number>;
    /**
     * Wrapping image URL.
     * @type {string}
     * @memberof GiftWrappingDataWrappingInterface
     */
    'image_url'?: string;
    /**
     * ExtensionInterface class for @see \\Magento\\GiftWrapping\\Api\\Data\\WrappingInterface
     * @type {object}
     * @memberof GiftWrappingDataWrappingInterface
     */
    'extension_attributes'?: object;
}
/**
 * Interface WrappingSearchResultsInterface
 * @export
 * @interface GiftWrappingDataWrappingSearchResultsInterface
 */
export interface GiftWrappingDataWrappingSearchResultsInterface {
    /**
     * Items
     * @type {Array<GiftWrappingDataWrappingInterface>}
     * @memberof GiftWrappingDataWrappingSearchResultsInterface
     */
    'items': Array<GiftWrappingDataWrappingInterface>;
    /**
     * 
     * @type {FrameworkSearchCriteriaInterface}
     * @memberof GiftWrappingDataWrappingSearchResultsInterface
     */
    'search_criteria': FrameworkSearchCriteriaInterface;
    /**
     * Total count.
     * @type {number}
     * @memberof GiftWrappingDataWrappingSearchResultsInterface
     */
    'total_count': number;
}
/**
 * 
 * @export
 * @interface GiftWrappingWrappingRepositoryV1SavePostRequest
 */
export interface GiftWrappingWrappingRepositoryV1SavePostRequest {
    /**
     * 
     * @type {GiftWrappingDataWrappingInterface}
     * @memberof GiftWrappingWrappingRepositoryV1SavePostRequest
     */
    'data': GiftWrappingDataWrappingInterface;
    /**
     * 
     * @type {number}
     * @memberof GiftWrappingWrappingRepositoryV1SavePostRequest
     */
    'storeId'?: number;
}
/**
 * 
 * @export
 * @interface IntegrationAdminTokenServiceV1CreateAdminAccessTokenPostRequest
 */
export interface IntegrationAdminTokenServiceV1CreateAdminAccessTokenPostRequest {
    /**
     * 
     * @type {string}
     * @memberof IntegrationAdminTokenServiceV1CreateAdminAccessTokenPostRequest
     */
    'username': string;
    /**
     * 
     * @type {string}
     * @memberof IntegrationAdminTokenServiceV1CreateAdminAccessTokenPostRequest
     */
    'password': string;
}
/**
 * Price interface.
 * @export
 * @interface MsrpDataProductRenderMsrpPriceInfoInterface
 */
export interface MsrpDataProductRenderMsrpPriceInfoInterface {
    /**
     * 
     * @type {string}
     * @memberof MsrpDataProductRenderMsrpPriceInfoInterface
     */
    'msrp_price': string;
    /**
     * 
     * @type {string}
     * @memberof MsrpDataProductRenderMsrpPriceInfoInterface
     */
    'is_applicable': string;
    /**
     * 
     * @type {string}
     * @memberof MsrpDataProductRenderMsrpPriceInfoInterface
     */
    'is_shown_price_on_gesture': string;
    /**
     * 
     * @type {string}
     * @memberof MsrpDataProductRenderMsrpPriceInfoInterface
     */
    'msrp_message': string;
    /**
     * 
     * @type {string}
     * @memberof MsrpDataProductRenderMsrpPriceInfoInterface
     */
    'explanation_message': string;
    /**
     * ExtensionInterface class for @see \\Magento\\Msrp\\Api\\Data\\ProductRender\\MsrpPriceInfoInterface
     * @type {object}
     * @memberof MsrpDataProductRenderMsrpPriceInfoInterface
     */
    'extension_attributes'?: object;
}
/**
 * Attachment files content interface.
 * @export
 * @interface NegotiableQuoteDataAttachmentContentInterface
 */
export interface NegotiableQuoteDataAttachmentContentInterface {
    /**
     * Media data (base64 encoded content).
     * @type {string}
     * @memberof NegotiableQuoteDataAttachmentContentInterface
     */
    'base64_encoded_data': string;
    /**
     * MIME type.
     * @type {string}
     * @memberof NegotiableQuoteDataAttachmentContentInterface
     */
    'type': string;
    /**
     * File name.
     * @type {string}
     * @memberof NegotiableQuoteDataAttachmentContentInterface
     */
    'name': string;
    /**
     * ExtensionInterface class for @see \\Magento\\NegotiableQuote\\Api\\Data\\AttachmentContentInterface
     * @type {object}
     * @memberof NegotiableQuoteDataAttachmentContentInterface
     */
    'extension_attributes'?: object;
}
/**
 * Interface for quote comment attachment.
 * @export
 * @interface NegotiableQuoteDataCommentAttachmentInterface
 */
export interface NegotiableQuoteDataCommentAttachmentInterface {
    /**
     * Attachment ID.
     * @type {number}
     * @memberof NegotiableQuoteDataCommentAttachmentInterface
     */
    'attachment_id': number;
    /**
     * Comment ID.
     * @type {number}
     * @memberof NegotiableQuoteDataCommentAttachmentInterface
     */
    'comment_id': number;
    /**
     * File name.
     * @type {string}
     * @memberof NegotiableQuoteDataCommentAttachmentInterface
     */
    'file_name': string;
    /**
     * File path.
     * @type {string}
     * @memberof NegotiableQuoteDataCommentAttachmentInterface
     */
    'file_path': string;
    /**
     * File type.
     * @type {string}
     * @memberof NegotiableQuoteDataCommentAttachmentInterface
     */
    'file_type': string;
    /**
     * ExtensionInterface class for @see \\Magento\\NegotiableQuote\\Api\\Data\\CommentAttachmentInterface
     * @type {object}
     * @memberof NegotiableQuoteDataCommentAttachmentInterface
     */
    'extension_attributes'?: object;
}
/**
 * Interface CommentInterface
 * @export
 * @interface NegotiableQuoteDataCommentInterface
 */
export interface NegotiableQuoteDataCommentInterface {
    /**
     * Comment ID.
     * @type {number}
     * @memberof NegotiableQuoteDataCommentInterface
     */
    'entity_id': number;
    /**
     * Negotiable quote ID, that this comment belongs to.
     * @type {number}
     * @memberof NegotiableQuoteDataCommentInterface
     */
    'parent_id': number;
    /**
     * The comment creator type.
     * @type {number}
     * @memberof NegotiableQuoteDataCommentInterface
     */
    'creator_type': number;
    /**
     * Is quote was declined by seller.
     * @type {number}
     * @memberof NegotiableQuoteDataCommentInterface
     */
    'is_decline': number;
    /**
     * Is quote draft flag.
     * @type {number}
     * @memberof NegotiableQuoteDataCommentInterface
     */
    'is_draft': number;
    /**
     * Comment creator ID.
     * @type {number}
     * @memberof NegotiableQuoteDataCommentInterface
     */
    'creator_id': number;
    /**
     * Comment.
     * @type {string}
     * @memberof NegotiableQuoteDataCommentInterface
     */
    'comment': string;
    /**
     * Comment created at.
     * @type {string}
     * @memberof NegotiableQuoteDataCommentInterface
     */
    'created_at': string;
    /**
     * ExtensionInterface class for @see \\Magento\\NegotiableQuote\\Api\\Data\\CommentInterface
     * @type {object}
     * @memberof NegotiableQuoteDataCommentInterface
     */
    'extension_attributes'?: object;
    /**
     * Existing attachments.
     * @type {Array<NegotiableQuoteDataCommentAttachmentInterface>}
     * @memberof NegotiableQuoteDataCommentInterface
     */
    'attachments': Array<NegotiableQuoteDataCommentAttachmentInterface>;
}
/**
 * Interface CompanyQuoteConfigInterface
 * @export
 * @interface NegotiableQuoteDataCompanyQuoteConfigInterface
 */
export interface NegotiableQuoteDataCompanyQuoteConfigInterface {
    /**
     * Company id
     * @type {string}
     * @memberof NegotiableQuoteDataCompanyQuoteConfigInterface
     */
    'company_id'?: string;
    /**
     * Quote enabled for company
     * @type {boolean}
     * @memberof NegotiableQuoteDataCompanyQuoteConfigInterface
     */
    'is_quote_enabled': boolean;
    /**
     * ExtensionInterface class for @see \\Magento\\NegotiableQuote\\Api\\Data\\CompanyQuoteConfigInterface
     * @type {object}
     * @memberof NegotiableQuoteDataCompanyQuoteConfigInterface
     */
    'extension_attributes'?: object;
}
/**
 * Interface NegotiableQuoteInterface
 * @export
 * @interface NegotiableQuoteDataNegotiableQuoteInterface
 */
export interface NegotiableQuoteDataNegotiableQuoteInterface {
    /**
     * Negotiable quote ID.
     * @type {number}
     * @memberof NegotiableQuoteDataNegotiableQuoteInterface
     */
    'quote_id': number;
    /**
     * Is regular quote.
     * @type {boolean}
     * @memberof NegotiableQuoteDataNegotiableQuoteInterface
     */
    'is_regular_quote': boolean;
    /**
     * Negotiable quote status.
     * @type {string}
     * @memberof NegotiableQuoteDataNegotiableQuoteInterface
     */
    'status': string;
    /**
     * Negotiated price type.
     * @type {number}
     * @memberof NegotiableQuoteDataNegotiableQuoteInterface
     */
    'negotiated_price_type': number;
    /**
     * Negotiated price value.
     * @type {number}
     * @memberof NegotiableQuoteDataNegotiableQuoteInterface
     */
    'negotiated_price_value': number;
    /**
     * Proposed shipping price.
     * @type {number}
     * @memberof NegotiableQuoteDataNegotiableQuoteInterface
     */
    'shipping_price': number;
    /**
     * Negotiable quote name.
     * @type {string}
     * @memberof NegotiableQuoteDataNegotiableQuoteInterface
     */
    'quote_name': string;
    /**
     * Expiration period.
     * @type {string}
     * @memberof NegotiableQuoteDataNegotiableQuoteInterface
     */
    'expiration_period': string;
    /**
     * Email notification status.
     * @type {number}
     * @memberof NegotiableQuoteDataNegotiableQuoteInterface
     */
    'email_notification_status': number;
    /**
     * Has unconfirmed changes.
     * @type {boolean}
     * @memberof NegotiableQuoteDataNegotiableQuoteInterface
     */
    'has_unconfirmed_changes': boolean;
    /**
     * Shipping tax changes.
     * @type {boolean}
     * @memberof NegotiableQuoteDataNegotiableQuoteInterface
     */
    'is_shipping_tax_changed': boolean;
    /**
     * Customer price changes.
     * @type {boolean}
     * @memberof NegotiableQuoteDataNegotiableQuoteInterface
     */
    'is_customer_price_changed': boolean;
    /**
     * Quote notifications.
     * @type {number}
     * @memberof NegotiableQuoteDataNegotiableQuoteInterface
     */
    'notifications': number;
    /**
     * Quote rules.
     * @type {string}
     * @memberof NegotiableQuoteDataNegotiableQuoteInterface
     */
    'applied_rule_ids': string;
    /**
     * Is address draft.
     * @type {boolean}
     * @memberof NegotiableQuoteDataNegotiableQuoteInterface
     */
    'is_address_draft': boolean;
    /**
     * Deleted products sku.
     * @type {string}
     * @memberof NegotiableQuoteDataNegotiableQuoteInterface
     */
    'deleted_sku': string;
    /**
     * Quote creator id.
     * @type {number}
     * @memberof NegotiableQuoteDataNegotiableQuoteInterface
     */
    'creator_id': number;
    /**
     * Quote creator type.
     * @type {number}
     * @memberof NegotiableQuoteDataNegotiableQuoteInterface
     */
    'creator_type': number;
    /**
     * Quote original total price.
     * @type {number}
     * @memberof NegotiableQuoteDataNegotiableQuoteInterface
     */
    'original_total_price'?: number;
    /**
     * Quote original total price in base currency.
     * @type {number}
     * @memberof NegotiableQuoteDataNegotiableQuoteInterface
     */
    'base_original_total_price'?: number;
    /**
     * Quote negotiated total price.
     * @type {number}
     * @memberof NegotiableQuoteDataNegotiableQuoteInterface
     */
    'negotiated_total_price'?: number;
    /**
     * Quote negotiated total price in base currency.
     * @type {number}
     * @memberof NegotiableQuoteDataNegotiableQuoteInterface
     */
    'base_negotiated_total_price'?: number;
    /**
     * ExtensionInterface class for @see \\Magento\\NegotiableQuote\\Api\\Data\\NegotiableQuoteInterface
     * @type {object}
     * @memberof NegotiableQuoteDataNegotiableQuoteInterface
     */
    'extension_attributes'?: object;
}
/**
 * Interface CompanyQuoteConfigInterface
 * @export
 * @interface NegotiableQuoteDataNegotiableQuoteItemInterface
 */
export interface NegotiableQuoteDataNegotiableQuoteItemInterface {
    /**
     * Quote item id
     * @type {number}
     * @memberof NegotiableQuoteDataNegotiableQuoteItemInterface
     */
    'item_id': number;
    /**
     * Quote item original price
     * @type {number}
     * @memberof NegotiableQuoteDataNegotiableQuoteItemInterface
     */
    'original_price': number;
    /**
     * Quote item original tax amount
     * @type {number}
     * @memberof NegotiableQuoteDataNegotiableQuoteItemInterface
     */
    'original_tax_amount': number;
    /**
     * Quote item original discount amount
     * @type {number}
     * @memberof NegotiableQuoteDataNegotiableQuoteItemInterface
     */
    'original_discount_amount': number;
    /**
     * ExtensionInterface class for @see \\Magento\\NegotiableQuote\\Api\\Data\\NegotiableQuoteItemInterface
     * @type {object}
     * @memberof NegotiableQuoteDataNegotiableQuoteItemInterface
     */
    'extension_attributes'?: object;
}
/**
 * Extension attribute for quote item totals model.
 * @export
 * @interface NegotiableQuoteDataNegotiableQuoteItemTotalsInterface
 */
export interface NegotiableQuoteDataNegotiableQuoteItemTotalsInterface {
    /**
     * Cost for quote item.
     * @type {number}
     * @memberof NegotiableQuoteDataNegotiableQuoteItemTotalsInterface
     */
    'cost': number;
    /**
     * Catalog price for quote item.
     * @type {number}
     * @memberof NegotiableQuoteDataNegotiableQuoteItemTotalsInterface
     */
    'catalog_price': number;
    /**
     * Catalog price for quote item in base currency.
     * @type {number}
     * @memberof NegotiableQuoteDataNegotiableQuoteItemTotalsInterface
     */
    'base_catalog_price': number;
    /**
     * Catalog price with included tax for quote item.
     * @type {number}
     * @memberof NegotiableQuoteDataNegotiableQuoteItemTotalsInterface
     */
    'catalog_price_incl_tax': number;
    /**
     * Catalog price with included tax for quote item in base currency.
     * @type {number}
     * @memberof NegotiableQuoteDataNegotiableQuoteItemTotalsInterface
     */
    'base_catalog_price_incl_tax': number;
    /**
     * Cart price for quote item.
     * @type {number}
     * @memberof NegotiableQuoteDataNegotiableQuoteItemTotalsInterface
     */
    'cart_price': number;
    /**
     * Cart price for quote item in base currency.
     * @type {number}
     * @memberof NegotiableQuoteDataNegotiableQuoteItemTotalsInterface
     */
    'base_cart_price': number;
    /**
     * Tax from catalog price for quote item.
     * @type {number}
     * @memberof NegotiableQuoteDataNegotiableQuoteItemTotalsInterface
     */
    'cart_tax': number;
    /**
     * Tax from catalog price for quote item in base currency.
     * @type {number}
     * @memberof NegotiableQuoteDataNegotiableQuoteItemTotalsInterface
     */
    'base_cart_tax': number;
    /**
     * Cart price with included tax for quote item.
     * @type {number}
     * @memberof NegotiableQuoteDataNegotiableQuoteItemTotalsInterface
     */
    'cart_price_incl_tax': number;
    /**
     * Cart price with included tax for quote item in base currency.
     * @type {number}
     * @memberof NegotiableQuoteDataNegotiableQuoteItemTotalsInterface
     */
    'base_cart_price_incl_tax': number;
    /**
     * ExtensionInterface class for @see \\Magento\\NegotiableQuote\\Api\\Data\\NegotiableQuoteItemTotalsInterface
     * @type {object}
     * @memberof NegotiableQuoteDataNegotiableQuoteItemTotalsInterface
     */
    'extension_attributes'?: object;
}
/**
 * Extension attribute for quote totals model.
 * @export
 * @interface NegotiableQuoteDataNegotiableQuoteTotalsInterface
 */
export interface NegotiableQuoteDataNegotiableQuoteTotalsInterface {
    /**
     * The number of different items or products in the cart.
     * @type {number}
     * @memberof NegotiableQuoteDataNegotiableQuoteTotalsInterface
     */
    'items_count': number;
    /**
     * Negotiable quote status.
     * @type {string}
     * @memberof NegotiableQuoteDataNegotiableQuoteTotalsInterface
     */
    'quote_status': string;
    /**
     * The cart creation date and time.
     * @type {string}
     * @memberof NegotiableQuoteDataNegotiableQuoteTotalsInterface
     */
    'created_at': string;
    /**
     * The cart last update date and time.
     * @type {string}
     * @memberof NegotiableQuoteDataNegotiableQuoteTotalsInterface
     */
    'updated_at': string;
    /**
     * Customer group id.
     * @type {number}
     * @memberof NegotiableQuoteDataNegotiableQuoteTotalsInterface
     */
    'customer_group': number;
    /**
     * Base currency to quote currency rate.
     * @type {number}
     * @memberof NegotiableQuoteDataNegotiableQuoteTotalsInterface
     */
    'base_to_quote_rate': number;
    /**
     * Total cost for quote.
     * @type {number}
     * @memberof NegotiableQuoteDataNegotiableQuoteTotalsInterface
     */
    'cost_total': number;
    /**
     * Total cost for quote in base currency.
     * @type {number}
     * @memberof NegotiableQuoteDataNegotiableQuoteTotalsInterface
     */
    'base_cost_total': number;
    /**
     * Original quote total.
     * @type {number}
     * @memberof NegotiableQuoteDataNegotiableQuoteTotalsInterface
     */
    'original_total': number;
    /**
     * Original quote total in base currency.
     * @type {number}
     * @memberof NegotiableQuoteDataNegotiableQuoteTotalsInterface
     */
    'base_original_total': number;
    /**
     * Original tax amount for quote.
     * @type {number}
     * @memberof NegotiableQuoteDataNegotiableQuoteTotalsInterface
     */
    'original_tax': number;
    /**
     * Original tax amount for quote in base currency.
     * @type {number}
     * @memberof NegotiableQuoteDataNegotiableQuoteTotalsInterface
     */
    'base_original_tax': number;
    /**
     * Original price with included tax for quote.
     * @type {number}
     * @memberof NegotiableQuoteDataNegotiableQuoteTotalsInterface
     */
    'original_price_incl_tax': number;
    /**
     * Original price with included tax for quote in base currency.
     * @type {number}
     * @memberof NegotiableQuoteDataNegotiableQuoteTotalsInterface
     */
    'base_original_price_incl_tax': number;
    /**
     * Negotiable quote type.
     * @type {number}
     * @memberof NegotiableQuoteDataNegotiableQuoteTotalsInterface
     */
    'negotiated_price_type': number;
    /**
     * Negotiable price value for quote.
     * @type {number}
     * @memberof NegotiableQuoteDataNegotiableQuoteTotalsInterface
     */
    'negotiated_price_value': number;
}
/**
 * 
 * @export
 * @interface NegotiableQuoteNegotiableQuoteManagementV1AdminSendPostRequest
 */
export interface NegotiableQuoteNegotiableQuoteManagementV1AdminSendPostRequest {
    /**
     * 
     * @type {number}
     * @memberof NegotiableQuoteNegotiableQuoteManagementV1AdminSendPostRequest
     */
    'quoteId': number;
    /**
     * 
     * @type {string}
     * @memberof NegotiableQuoteNegotiableQuoteManagementV1AdminSendPostRequest
     */
    'comment'?: string;
    /**
     * 
     * @type {Array<NegotiableQuoteDataAttachmentContentInterface>}
     * @memberof NegotiableQuoteNegotiableQuoteManagementV1AdminSendPostRequest
     */
    'files'?: Array<NegotiableQuoteDataAttachmentContentInterface>;
}
/**
 * 
 * @export
 * @interface NegotiableQuoteNegotiableQuoteManagementV1CreatePostRequest
 */
export interface NegotiableQuoteNegotiableQuoteManagementV1CreatePostRequest {
    /**
     * 
     * @type {number}
     * @memberof NegotiableQuoteNegotiableQuoteManagementV1CreatePostRequest
     */
    'quoteId': number;
    /**
     * 
     * @type {string}
     * @memberof NegotiableQuoteNegotiableQuoteManagementV1CreatePostRequest
     */
    'quoteName': string;
    /**
     * 
     * @type {string}
     * @memberof NegotiableQuoteNegotiableQuoteManagementV1CreatePostRequest
     */
    'comment'?: string;
    /**
     * 
     * @type {Array<NegotiableQuoteDataAttachmentContentInterface>}
     * @memberof NegotiableQuoteNegotiableQuoteManagementV1CreatePostRequest
     */
    'files'?: Array<NegotiableQuoteDataAttachmentContentInterface>;
}
/**
 * 
 * @export
 * @interface NegotiableQuoteNegotiableQuoteManagementV1DeclinePostRequest
 */
export interface NegotiableQuoteNegotiableQuoteManagementV1DeclinePostRequest {
    /**
     * 
     * @type {number}
     * @memberof NegotiableQuoteNegotiableQuoteManagementV1DeclinePostRequest
     */
    'quoteId': number;
    /**
     * 
     * @type {string}
     * @memberof NegotiableQuoteNegotiableQuoteManagementV1DeclinePostRequest
     */
    'reason': string;
}
/**
 * 
 * @export
 * @interface NegotiableQuoteNegotiableQuotePriceManagementV1PricesUpdatedPostRequest
 */
export interface NegotiableQuoteNegotiableQuotePriceManagementV1PricesUpdatedPostRequest {
    /**
     * 
     * @type {Array<number>}
     * @memberof NegotiableQuoteNegotiableQuotePriceManagementV1PricesUpdatedPostRequest
     */
    'quoteIds': Array<number>;
}
/**
 * 
 * @export
 * @interface NegotiableQuoteNegotiableQuoteShippingManagementV1SetShippingMethodPutRequest
 */
export interface NegotiableQuoteNegotiableQuoteShippingManagementV1SetShippingMethodPutRequest {
    /**
     * The shipping method code.
     * @type {string}
     * @memberof NegotiableQuoteNegotiableQuoteShippingManagementV1SetShippingMethodPutRequest
     */
    'shippingMethod': string;
}
/**
 * Payment additional info interface.
 * @export
 * @interface PaymentDataPaymentAdditionalInfoInterface
 */
export interface PaymentDataPaymentAdditionalInfoInterface {
    /**
     * Object key
     * @type {string}
     * @memberof PaymentDataPaymentAdditionalInfoInterface
     */
    'key': string;
    /**
     * Object value
     * @type {string}
     * @memberof PaymentDataPaymentAdditionalInfoInterface
     */
    'value': string;
}
/**
 * 
 * @export
 * @interface QuoteBillingAddressManagementV1AssignPostRequest
 */
export interface QuoteBillingAddressManagementV1AssignPostRequest {
    /**
     * 
     * @type {QuoteDataAddressInterface}
     * @memberof QuoteBillingAddressManagementV1AssignPostRequest
     */
    'address': QuoteDataAddressInterface;
    /**
     * 
     * @type {boolean}
     * @memberof QuoteBillingAddressManagementV1AssignPostRequest
     */
    'useForShipping'?: boolean;
}
/**
 * 
 * @export
 * @interface QuoteCartItemRepositoryV1SavePostRequest
 */
export interface QuoteCartItemRepositoryV1SavePostRequest {
    /**
     * 
     * @type {QuoteDataCartItemInterface}
     * @memberof QuoteCartItemRepositoryV1SavePostRequest
     */
    'cartItem': QuoteDataCartItemInterface;
}
/**
 * 
 * @export
 * @interface QuoteCartManagementV1AssignCustomerPutRequest
 */
export interface QuoteCartManagementV1AssignCustomerPutRequest {
    /**
     * The customer ID.
     * @type {number}
     * @memberof QuoteCartManagementV1AssignCustomerPutRequest
     */
    'customerId': number;
    /**
     * 
     * @type {number}
     * @memberof QuoteCartManagementV1AssignCustomerPutRequest
     */
    'storeId': number;
}
/**
 * 
 * @export
 * @interface QuoteCartManagementV1PlaceOrderPutRequest
 */
export interface QuoteCartManagementV1PlaceOrderPutRequest {
    /**
     * 
     * @type {QuoteDataPaymentInterface}
     * @memberof QuoteCartManagementV1PlaceOrderPutRequest
     */
    'paymentMethod'?: QuoteDataPaymentInterface;
}
/**
 * 
 * @export
 * @interface QuoteCartRepositoryV1SavePutRequest
 */
export interface QuoteCartRepositoryV1SavePutRequest {
    /**
     * 
     * @type {QuoteDataCartInterface}
     * @memberof QuoteCartRepositoryV1SavePutRequest
     */
    'quote': QuoteDataCartInterface;
}
/**
 * 
 * @export
 * @interface QuoteCartTotalManagementV1CollectTotalsPutRequest
 */
export interface QuoteCartTotalManagementV1CollectTotalsPutRequest {
    /**
     * 
     * @type {QuoteDataPaymentInterface}
     * @memberof QuoteCartTotalManagementV1CollectTotalsPutRequest
     */
    'paymentMethod': QuoteDataPaymentInterface;
    /**
     * The carrier code.
     * @type {string}
     * @memberof QuoteCartTotalManagementV1CollectTotalsPutRequest
     */
    'shippingCarrierCode'?: string;
    /**
     * The shipping method code.
     * @type {string}
     * @memberof QuoteCartTotalManagementV1CollectTotalsPutRequest
     */
    'shippingMethodCode'?: string;
    /**
     * 
     * @type {QuoteDataTotalsAdditionalDataInterface}
     * @memberof QuoteCartTotalManagementV1CollectTotalsPutRequest
     */
    'additionalData'?: QuoteDataTotalsAdditionalDataInterface;
}
/**
 * ExtensionInterface class for @see \\Magento\\Quote\\Api\\Data\\AddressInterface
 * @export
 * @interface QuoteDataAddressExtensionInterface
 */
export interface QuoteDataAddressExtensionInterface {
    /**
     * 
     * @type {number}
     * @memberof QuoteDataAddressExtensionInterface
     */
    'gift_registry_id'?: number;
    /**
     * 
     * @type {Array<FrameworkAttributeInterface>}
     * @memberof QuoteDataAddressExtensionInterface
     */
    'checkout_fields'?: Array<FrameworkAttributeInterface>;
}
/**
 * Interface AddressInterface
 * @export
 * @interface QuoteDataAddressInterface
 */
export interface QuoteDataAddressInterface {
    /**
     * Id
     * @type {number}
     * @memberof QuoteDataAddressInterface
     */
    'id'?: number;
    /**
     * Region name
     * @type {string}
     * @memberof QuoteDataAddressInterface
     */
    'region': string;
    /**
     * Region id
     * @type {number}
     * @memberof QuoteDataAddressInterface
     */
    'region_id': number;
    /**
     * Region code
     * @type {string}
     * @memberof QuoteDataAddressInterface
     */
    'region_code': string;
    /**
     * Country id
     * @type {string}
     * @memberof QuoteDataAddressInterface
     */
    'country_id': string;
    /**
     * Street
     * @type {Array<string>}
     * @memberof QuoteDataAddressInterface
     */
    'street': Array<string>;
    /**
     * Company
     * @type {string}
     * @memberof QuoteDataAddressInterface
     */
    'company'?: string;
    /**
     * Telephone number
     * @type {string}
     * @memberof QuoteDataAddressInterface
     */
    'telephone': string;
    /**
     * Fax number
     * @type {string}
     * @memberof QuoteDataAddressInterface
     */
    'fax'?: string;
    /**
     * Postcode
     * @type {string}
     * @memberof QuoteDataAddressInterface
     */
    'postcode': string;
    /**
     * City name
     * @type {string}
     * @memberof QuoteDataAddressInterface
     */
    'city': string;
    /**
     * First name
     * @type {string}
     * @memberof QuoteDataAddressInterface
     */
    'firstname': string;
    /**
     * Last name
     * @type {string}
     * @memberof QuoteDataAddressInterface
     */
    'lastname': string;
    /**
     * Middle name
     * @type {string}
     * @memberof QuoteDataAddressInterface
     */
    'middlename'?: string;
    /**
     * Prefix
     * @type {string}
     * @memberof QuoteDataAddressInterface
     */
    'prefix'?: string;
    /**
     * Suffix
     * @type {string}
     * @memberof QuoteDataAddressInterface
     */
    'suffix'?: string;
    /**
     * Vat id
     * @type {string}
     * @memberof QuoteDataAddressInterface
     */
    'vat_id'?: string;
    /**
     * Customer id
     * @type {number}
     * @memberof QuoteDataAddressInterface
     */
    'customer_id'?: number;
    /**
     * Billing/shipping email
     * @type {string}
     * @memberof QuoteDataAddressInterface
     */
    'email': string;
    /**
     * Same as billing flag
     * @type {number}
     * @memberof QuoteDataAddressInterface
     */
    'same_as_billing'?: number;
    /**
     * Customer address id
     * @type {number}
     * @memberof QuoteDataAddressInterface
     */
    'customer_address_id'?: number;
    /**
     * Save in address book flag
     * @type {number}
     * @memberof QuoteDataAddressInterface
     */
    'save_in_address_book'?: number;
    /**
     * 
     * @type {QuoteDataAddressExtensionInterface}
     * @memberof QuoteDataAddressInterface
     */
    'extension_attributes'?: QuoteDataAddressExtensionInterface;
    /**
     * Custom attributes values.
     * @type {Array<FrameworkAttributeInterface>}
     * @memberof QuoteDataAddressInterface
     */
    'custom_attributes'?: Array<FrameworkAttributeInterface>;
}
/**
 * ExtensionInterface class for @see \\Magento\\Quote\\Api\\Data\\CartInterface
 * @export
 * @interface QuoteDataCartExtensionInterface
 */
export interface QuoteDataCartExtensionInterface {
    /**
     * 
     * @type {Array<QuoteDataShippingAssignmentInterface>}
     * @memberof QuoteDataCartExtensionInterface
     */
    'shipping_assignments'?: Array<QuoteDataShippingAssignmentInterface>;
    /**
     * 
     * @type {NegotiableQuoteDataNegotiableQuoteInterface}
     * @memberof QuoteDataCartExtensionInterface
     */
    'negotiable_quote'?: NegotiableQuoteDataNegotiableQuoteInterface;
    /**
     * 
     * @type {string}
     * @memberof QuoteDataCartExtensionInterface
     */
    'amazon_order_reference_id'?: string;
}
/**
 * Interface CartInterface
 * @export
 * @interface QuoteDataCartInterface
 */
export interface QuoteDataCartInterface {
    /**
     * Cart/quote ID.
     * @type {number}
     * @memberof QuoteDataCartInterface
     */
    'id': number;
    /**
     * Cart creation date and time. Otherwise, null.
     * @type {string}
     * @memberof QuoteDataCartInterface
     */
    'created_at'?: string;
    /**
     * Cart last update date and time. Otherwise, null.
     * @type {string}
     * @memberof QuoteDataCartInterface
     */
    'updated_at'?: string;
    /**
     * Cart conversion date and time. Otherwise, null.
     * @type {string}
     * @memberof QuoteDataCartInterface
     */
    'converted_at'?: string;
    /**
     * Active status flag value. Otherwise, null.
     * @type {boolean}
     * @memberof QuoteDataCartInterface
     */
    'is_active'?: boolean;
    /**
     * Virtual flag value. Otherwise, null.
     * @type {boolean}
     * @memberof QuoteDataCartInterface
     */
    'is_virtual'?: boolean;
    /**
     * Array of items. Otherwise, null.
     * @type {Array<QuoteDataCartItemInterface>}
     * @memberof QuoteDataCartInterface
     */
    'items'?: Array<QuoteDataCartItemInterface>;
    /**
     * Number of different items or products in the cart. Otherwise, null.
     * @type {number}
     * @memberof QuoteDataCartInterface
     */
    'items_count'?: number;
    /**
     * Total quantity of all cart items. Otherwise, null.
     * @type {number}
     * @memberof QuoteDataCartInterface
     */
    'items_qty'?: number;
    /**
     * 
     * @type {CustomerDataCustomerInterface}
     * @memberof QuoteDataCartInterface
     */
    'customer': CustomerDataCustomerInterface;
    /**
     * 
     * @type {QuoteDataAddressInterface}
     * @memberof QuoteDataCartInterface
     */
    'billing_address'?: QuoteDataAddressInterface;
    /**
     * Reserved order ID. Otherwise, null.
     * @type {string}
     * @memberof QuoteDataCartInterface
     */
    'reserved_order_id'?: string;
    /**
     * Original order ID. Otherwise, null.
     * @type {number}
     * @memberof QuoteDataCartInterface
     */
    'orig_order_id'?: number;
    /**
     * 
     * @type {QuoteDataCurrencyInterface}
     * @memberof QuoteDataCartInterface
     */
    'currency'?: QuoteDataCurrencyInterface;
    /**
     * For guest customers, false for logged in customers
     * @type {boolean}
     * @memberof QuoteDataCartInterface
     */
    'customer_is_guest'?: boolean;
    /**
     * Notice text
     * @type {string}
     * @memberof QuoteDataCartInterface
     */
    'customer_note'?: string;
    /**
     * Customer notification flag
     * @type {boolean}
     * @memberof QuoteDataCartInterface
     */
    'customer_note_notify'?: boolean;
    /**
     * Customer tax class ID.
     * @type {number}
     * @memberof QuoteDataCartInterface
     */
    'customer_tax_class_id'?: number;
    /**
     * Store identifier
     * @type {number}
     * @memberof QuoteDataCartInterface
     */
    'store_id': number;
    /**
     * 
     * @type {QuoteDataCartExtensionInterface}
     * @memberof QuoteDataCartInterface
     */
    'extension_attributes'?: QuoteDataCartExtensionInterface;
}
/**
 * ExtensionInterface class for @see \\Magento\\Quote\\Api\\Data\\CartItemInterface
 * @export
 * @interface QuoteDataCartItemExtensionInterface
 */
export interface QuoteDataCartItemExtensionInterface {
    /**
     * 
     * @type {NegotiableQuoteDataNegotiableQuoteItemInterface}
     * @memberof QuoteDataCartItemExtensionInterface
     */
    'negotiable_quote_item'?: NegotiableQuoteDataNegotiableQuoteItemInterface;
}
/**
 * Interface CartItemInterface
 * @export
 * @interface QuoteDataCartItemInterface
 */
export interface QuoteDataCartItemInterface {
    /**
     * Item ID. Otherwise, null.
     * @type {number}
     * @memberof QuoteDataCartItemInterface
     */
    'item_id'?: number;
    /**
     * Product SKU. Otherwise, null.
     * @type {string}
     * @memberof QuoteDataCartItemInterface
     */
    'sku'?: string;
    /**
     * Product quantity.
     * @type {number}
     * @memberof QuoteDataCartItemInterface
     */
    'qty': number;
    /**
     * Product name. Otherwise, null.
     * @type {string}
     * @memberof QuoteDataCartItemInterface
     */
    'name'?: string;
    /**
     * Product price. Otherwise, null.
     * @type {number}
     * @memberof QuoteDataCartItemInterface
     */
    'price'?: number;
    /**
     * Product type. Otherwise, null.
     * @type {string}
     * @memberof QuoteDataCartItemInterface
     */
    'product_type'?: string;
    /**
     * Quote id.
     * @type {string}
     * @memberof QuoteDataCartItemInterface
     */
    'quote_id': string;
    /**
     * 
     * @type {QuoteDataProductOptionInterface}
     * @memberof QuoteDataCartItemInterface
     */
    'product_option'?: QuoteDataProductOptionInterface;
    /**
     * 
     * @type {QuoteDataCartItemExtensionInterface}
     * @memberof QuoteDataCartItemInterface
     */
    'extension_attributes'?: QuoteDataCartItemExtensionInterface;
}
/**
 * Interface CartSearchResultsInterface
 * @export
 * @interface QuoteDataCartSearchResultsInterface
 */
export interface QuoteDataCartSearchResultsInterface {
    /**
     * Carts list.
     * @type {Array<QuoteDataCartInterface>}
     * @memberof QuoteDataCartSearchResultsInterface
     */
    'items': Array<QuoteDataCartInterface>;
    /**
     * 
     * @type {FrameworkSearchCriteriaInterface}
     * @memberof QuoteDataCartSearchResultsInterface
     */
    'search_criteria': FrameworkSearchCriteriaInterface;
    /**
     * Total count.
     * @type {number}
     * @memberof QuoteDataCartSearchResultsInterface
     */
    'total_count': number;
}
/**
 * Interface CurrencyInterface
 * @export
 * @interface QuoteDataCurrencyInterface
 */
export interface QuoteDataCurrencyInterface {
    /**
     * Global currency code
     * @type {string}
     * @memberof QuoteDataCurrencyInterface
     */
    'global_currency_code'?: string;
    /**
     * Base currency code
     * @type {string}
     * @memberof QuoteDataCurrencyInterface
     */
    'base_currency_code'?: string;
    /**
     * Store currency code
     * @type {string}
     * @memberof QuoteDataCurrencyInterface
     */
    'store_currency_code'?: string;
    /**
     * Quote currency code
     * @type {string}
     * @memberof QuoteDataCurrencyInterface
     */
    'quote_currency_code'?: string;
    /**
     * Store currency to base currency rate
     * @type {number}
     * @memberof QuoteDataCurrencyInterface
     */
    'store_to_base_rate'?: number;
    /**
     * Store currency to quote currency rate
     * @type {number}
     * @memberof QuoteDataCurrencyInterface
     */
    'store_to_quote_rate'?: number;
    /**
     * Base currency to global currency rate
     * @type {number}
     * @memberof QuoteDataCurrencyInterface
     */
    'base_to_global_rate'?: number;
    /**
     * Base currency to quote currency rate
     * @type {number}
     * @memberof QuoteDataCurrencyInterface
     */
    'base_to_quote_rate'?: number;
    /**
     * ExtensionInterface class for @see \\Magento\\Quote\\Api\\Data\\CurrencyInterface
     * @type {object}
     * @memberof QuoteDataCurrencyInterface
     */
    'extension_attributes'?: object;
}
/**
 * ExtensionInterface class for @see \\Magento\\Quote\\Api\\Data\\PaymentInterface
 * @export
 * @interface QuoteDataPaymentExtensionInterface
 */
export interface QuoteDataPaymentExtensionInterface {
    /**
     * 
     * @type {Array<string>}
     * @memberof QuoteDataPaymentExtensionInterface
     */
    'agreement_ids'?: Array<string>;
}
/**
 * Interface PaymentInterface
 * @export
 * @interface QuoteDataPaymentInterface
 */
export interface QuoteDataPaymentInterface {
    /**
     * Purchase order number
     * @type {string}
     * @memberof QuoteDataPaymentInterface
     */
    'po_number'?: string;
    /**
     * Payment method code
     * @type {string}
     * @memberof QuoteDataPaymentInterface
     */
    'method': string;
    /**
     * Payment additional details
     * @type {Array<string>}
     * @memberof QuoteDataPaymentInterface
     */
    'additional_data'?: Array<string>;
    /**
     * 
     * @type {QuoteDataPaymentExtensionInterface}
     * @memberof QuoteDataPaymentInterface
     */
    'extension_attributes'?: QuoteDataPaymentExtensionInterface;
}
/**
 * Interface PaymentMethodInterface
 * @export
 * @interface QuoteDataPaymentMethodInterface
 */
export interface QuoteDataPaymentMethodInterface {
    /**
     * Payment method code
     * @type {string}
     * @memberof QuoteDataPaymentMethodInterface
     */
    'code': string;
    /**
     * Payment method title
     * @type {string}
     * @memberof QuoteDataPaymentMethodInterface
     */
    'title': string;
}
/**
 * ExtensionInterface class for @see \\Magento\\Quote\\Api\\Data\\ProductOptionInterface
 * @export
 * @interface QuoteDataProductOptionExtensionInterface
 */
export interface QuoteDataProductOptionExtensionInterface {
    /**
     * 
     * @type {Array<CatalogDataCustomOptionInterface>}
     * @memberof QuoteDataProductOptionExtensionInterface
     */
    'custom_options'?: Array<CatalogDataCustomOptionInterface>;
    /**
     * 
     * @type {Array<BundleDataBundleOptionInterface>}
     * @memberof QuoteDataProductOptionExtensionInterface
     */
    'bundle_options'?: Array<BundleDataBundleOptionInterface>;
    /**
     * 
     * @type {Array<ConfigurableProductDataConfigurableItemOptionValueInterface>}
     * @memberof QuoteDataProductOptionExtensionInterface
     */
    'configurable_item_options'?: Array<ConfigurableProductDataConfigurableItemOptionValueInterface>;
    /**
     * 
     * @type {DownloadableDataDownloadableOptionInterface}
     * @memberof QuoteDataProductOptionExtensionInterface
     */
    'downloadable_option'?: DownloadableDataDownloadableOptionInterface;
    /**
     * 
     * @type {GiftCardDataGiftCardOptionInterface}
     * @memberof QuoteDataProductOptionExtensionInterface
     */
    'giftcard_item_option'?: GiftCardDataGiftCardOptionInterface;
}
/**
 * Product option interface
 * @export
 * @interface QuoteDataProductOptionInterface
 */
export interface QuoteDataProductOptionInterface {
    /**
     * 
     * @type {QuoteDataProductOptionExtensionInterface}
     * @memberof QuoteDataProductOptionInterface
     */
    'extension_attributes'?: QuoteDataProductOptionExtensionInterface;
}
/**
 * Interface ShippingAssignmentInterface
 * @export
 * @interface QuoteDataShippingAssignmentInterface
 */
export interface QuoteDataShippingAssignmentInterface {
    /**
     * 
     * @type {QuoteDataShippingInterface}
     * @memberof QuoteDataShippingAssignmentInterface
     */
    'shipping': QuoteDataShippingInterface;
    /**
     * 
     * @type {Array<QuoteDataCartItemInterface>}
     * @memberof QuoteDataShippingAssignmentInterface
     */
    'items': Array<QuoteDataCartItemInterface>;
    /**
     * ExtensionInterface class for @see \\Magento\\Quote\\Api\\Data\\ShippingAssignmentInterface
     * @type {object}
     * @memberof QuoteDataShippingAssignmentInterface
     */
    'extension_attributes'?: object;
}
/**
 * Interface ShippingInterface
 * @export
 * @interface QuoteDataShippingInterface
 */
export interface QuoteDataShippingInterface {
    /**
     * 
     * @type {QuoteDataAddressInterface}
     * @memberof QuoteDataShippingInterface
     */
    'address': QuoteDataAddressInterface;
    /**
     * Shipping method
     * @type {string}
     * @memberof QuoteDataShippingInterface
     */
    'method': string;
    /**
     * ExtensionInterface class for @see \\Magento\\Quote\\Api\\Data\\ShippingInterface
     * @type {object}
     * @memberof QuoteDataShippingInterface
     */
    'extension_attributes'?: object;
}
/**
 * Interface ShippingMethodInterface
 * @export
 * @interface QuoteDataShippingMethodInterface
 */
export interface QuoteDataShippingMethodInterface {
    /**
     * Shipping carrier code.
     * @type {string}
     * @memberof QuoteDataShippingMethodInterface
     */
    'carrier_code': string;
    /**
     * Shipping method code.
     * @type {string}
     * @memberof QuoteDataShippingMethodInterface
     */
    'method_code': string;
    /**
     * Shipping carrier title. Otherwise, null.
     * @type {string}
     * @memberof QuoteDataShippingMethodInterface
     */
    'carrier_title'?: string;
    /**
     * Shipping method title. Otherwise, null.
     * @type {string}
     * @memberof QuoteDataShippingMethodInterface
     */
    'method_title'?: string;
    /**
     * Shipping amount in store currency.
     * @type {number}
     * @memberof QuoteDataShippingMethodInterface
     */
    'amount': number;
    /**
     * Shipping amount in base currency.
     * @type {number}
     * @memberof QuoteDataShippingMethodInterface
     */
    'base_amount': number;
    /**
     * The value of the availability flag for the current shipping method.
     * @type {boolean}
     * @memberof QuoteDataShippingMethodInterface
     */
    'available': boolean;
    /**
     * ExtensionInterface class for @see \\Magento\\Quote\\Api\\Data\\ShippingMethodInterface
     * @type {object}
     * @memberof QuoteDataShippingMethodInterface
     */
    'extension_attributes'?: object;
    /**
     * Shipping Error message.
     * @type {string}
     * @memberof QuoteDataShippingMethodInterface
     */
    'error_message': string;
    /**
     * Shipping price excl tax.
     * @type {number}
     * @memberof QuoteDataShippingMethodInterface
     */
    'price_excl_tax': number;
    /**
     * Shipping price incl tax.
     * @type {number}
     * @memberof QuoteDataShippingMethodInterface
     */
    'price_incl_tax': number;
}
/**
 * ExtensionInterface class for @see \\Magento\\Quote\\Api\\Data\\TotalSegmentInterface
 * @export
 * @interface QuoteDataTotalSegmentExtensionInterface
 */
export interface QuoteDataTotalSegmentExtensionInterface {
    /**
     * 
     * @type {Array<TaxDataGrandTotalDetailsInterface>}
     * @memberof QuoteDataTotalSegmentExtensionInterface
     */
    'tax_grandtotal_details'?: Array<TaxDataGrandTotalDetailsInterface>;
    /**
     * 
     * @type {string}
     * @memberof QuoteDataTotalSegmentExtensionInterface
     */
    'gift_cards'?: string;
    /**
     * 
     * @type {string}
     * @memberof QuoteDataTotalSegmentExtensionInterface
     */
    'gw_order_id'?: string;
    /**
     * 
     * @type {Array<string>}
     * @memberof QuoteDataTotalSegmentExtensionInterface
     */
    'gw_item_ids'?: Array<string>;
    /**
     * 
     * @type {string}
     * @memberof QuoteDataTotalSegmentExtensionInterface
     */
    'gw_allow_gift_receipt'?: string;
    /**
     * 
     * @type {string}
     * @memberof QuoteDataTotalSegmentExtensionInterface
     */
    'gw_add_card'?: string;
    /**
     * 
     * @type {string}
     * @memberof QuoteDataTotalSegmentExtensionInterface
     */
    'gw_price'?: string;
    /**
     * 
     * @type {string}
     * @memberof QuoteDataTotalSegmentExtensionInterface
     */
    'gw_base_price'?: string;
    /**
     * 
     * @type {string}
     * @memberof QuoteDataTotalSegmentExtensionInterface
     */
    'gw_items_price'?: string;
    /**
     * 
     * @type {string}
     * @memberof QuoteDataTotalSegmentExtensionInterface
     */
    'gw_items_base_price'?: string;
    /**
     * 
     * @type {string}
     * @memberof QuoteDataTotalSegmentExtensionInterface
     */
    'gw_card_price'?: string;
    /**
     * 
     * @type {string}
     * @memberof QuoteDataTotalSegmentExtensionInterface
     */
    'gw_card_base_price'?: string;
    /**
     * 
     * @type {string}
     * @memberof QuoteDataTotalSegmentExtensionInterface
     */
    'gw_base_tax_amount'?: string;
    /**
     * 
     * @type {string}
     * @memberof QuoteDataTotalSegmentExtensionInterface
     */
    'gw_tax_amount'?: string;
    /**
     * 
     * @type {string}
     * @memberof QuoteDataTotalSegmentExtensionInterface
     */
    'gw_items_base_tax_amount'?: string;
    /**
     * 
     * @type {string}
     * @memberof QuoteDataTotalSegmentExtensionInterface
     */
    'gw_items_tax_amount'?: string;
    /**
     * 
     * @type {string}
     * @memberof QuoteDataTotalSegmentExtensionInterface
     */
    'gw_card_base_tax_amount'?: string;
    /**
     * 
     * @type {string}
     * @memberof QuoteDataTotalSegmentExtensionInterface
     */
    'gw_card_tax_amount'?: string;
    /**
     * 
     * @type {string}
     * @memberof QuoteDataTotalSegmentExtensionInterface
     */
    'gw_price_incl_tax'?: string;
    /**
     * 
     * @type {string}
     * @memberof QuoteDataTotalSegmentExtensionInterface
     */
    'gw_base_price_incl_tax'?: string;
    /**
     * 
     * @type {string}
     * @memberof QuoteDataTotalSegmentExtensionInterface
     */
    'gw_card_price_incl_tax'?: string;
    /**
     * 
     * @type {string}
     * @memberof QuoteDataTotalSegmentExtensionInterface
     */
    'gw_card_base_price_incl_tax'?: string;
    /**
     * 
     * @type {string}
     * @memberof QuoteDataTotalSegmentExtensionInterface
     */
    'gw_items_price_incl_tax'?: string;
    /**
     * 
     * @type {string}
     * @memberof QuoteDataTotalSegmentExtensionInterface
     */
    'gw_items_base_price_incl_tax'?: string;
    /**
     * 
     * @type {Array<string>}
     * @memberof QuoteDataTotalSegmentExtensionInterface
     */
    'vertex_tax_calculation_messages'?: Array<string>;
}
/**
 * Interface TotalsInterface
 * @export
 * @interface QuoteDataTotalSegmentInterface
 */
export interface QuoteDataTotalSegmentInterface {
    /**
     * Code
     * @type {string}
     * @memberof QuoteDataTotalSegmentInterface
     */
    'code': string;
    /**
     * Total title
     * @type {string}
     * @memberof QuoteDataTotalSegmentInterface
     */
    'title'?: string;
    /**
     * Total value
     * @type {number}
     * @memberof QuoteDataTotalSegmentInterface
     */
    'value': number;
    /**
     * Display area code.
     * @type {string}
     * @memberof QuoteDataTotalSegmentInterface
     */
    'area'?: string;
    /**
     * 
     * @type {QuoteDataTotalSegmentExtensionInterface}
     * @memberof QuoteDataTotalSegmentInterface
     */
    'extension_attributes'?: QuoteDataTotalSegmentExtensionInterface;
}
/**
 * ExtensionInterface class for @see \\Magento\\Quote\\Api\\Data\\TotalsAdditionalDataInterface
 * @export
 * @interface QuoteDataTotalsAdditionalDataExtensionInterface
 */
export interface QuoteDataTotalsAdditionalDataExtensionInterface {
    /**
     * 
     * @type {Array<GiftMessageDataMessageInterface>}
     * @memberof QuoteDataTotalsAdditionalDataExtensionInterface
     */
    'gift_messages'?: Array<GiftMessageDataMessageInterface>;
}
/**
 * Additional data for totals collection.
 * @export
 * @interface QuoteDataTotalsAdditionalDataInterface
 */
export interface QuoteDataTotalsAdditionalDataInterface {
    /**
     * 
     * @type {QuoteDataTotalsAdditionalDataExtensionInterface}
     * @memberof QuoteDataTotalsAdditionalDataInterface
     */
    'extension_attributes'?: QuoteDataTotalsAdditionalDataExtensionInterface;
    /**
     * Custom attributes values.
     * @type {Array<FrameworkAttributeInterface>}
     * @memberof QuoteDataTotalsAdditionalDataInterface
     */
    'custom_attributes'?: Array<FrameworkAttributeInterface>;
}
/**
 * ExtensionInterface class for @see \\Magento\\Quote\\Api\\Data\\TotalsInterface
 * @export
 * @interface QuoteDataTotalsExtensionInterface
 */
export interface QuoteDataTotalsExtensionInterface {
    /**
     * 
     * @type {string}
     * @memberof QuoteDataTotalsExtensionInterface
     */
    'coupon_label'?: string;
    /**
     * 
     * @type {number}
     * @memberof QuoteDataTotalsExtensionInterface
     */
    'base_customer_balance_amount'?: number;
    /**
     * 
     * @type {number}
     * @memberof QuoteDataTotalsExtensionInterface
     */
    'customer_balance_amount'?: number;
    /**
     * 
     * @type {NegotiableQuoteDataNegotiableQuoteTotalsInterface}
     * @memberof QuoteDataTotalsExtensionInterface
     */
    'negotiable_quote_totals'?: NegotiableQuoteDataNegotiableQuoteTotalsInterface;
    /**
     * 
     * @type {number}
     * @memberof QuoteDataTotalsExtensionInterface
     */
    'reward_points_balance'?: number;
    /**
     * 
     * @type {number}
     * @memberof QuoteDataTotalsExtensionInterface
     */
    'reward_currency_amount'?: number;
    /**
     * 
     * @type {number}
     * @memberof QuoteDataTotalsExtensionInterface
     */
    'base_reward_currency_amount'?: number;
}
/**
 * Interface TotalsInterface
 * @export
 * @interface QuoteDataTotalsInterface
 */
export interface QuoteDataTotalsInterface {
    /**
     * Grand total in quote currency
     * @type {number}
     * @memberof QuoteDataTotalsInterface
     */
    'grand_total'?: number;
    /**
     * Grand total in base currency
     * @type {number}
     * @memberof QuoteDataTotalsInterface
     */
    'base_grand_total'?: number;
    /**
     * Subtotal in quote currency
     * @type {number}
     * @memberof QuoteDataTotalsInterface
     */
    'subtotal'?: number;
    /**
     * Subtotal in base currency
     * @type {number}
     * @memberof QuoteDataTotalsInterface
     */
    'base_subtotal'?: number;
    /**
     * Discount amount in quote currency
     * @type {number}
     * @memberof QuoteDataTotalsInterface
     */
    'discount_amount'?: number;
    /**
     * Discount amount in base currency
     * @type {number}
     * @memberof QuoteDataTotalsInterface
     */
    'base_discount_amount'?: number;
    /**
     * Subtotal in quote currency with applied discount
     * @type {number}
     * @memberof QuoteDataTotalsInterface
     */
    'subtotal_with_discount'?: number;
    /**
     * Subtotal in base currency with applied discount
     * @type {number}
     * @memberof QuoteDataTotalsInterface
     */
    'base_subtotal_with_discount'?: number;
    /**
     * Shipping amount in quote currency
     * @type {number}
     * @memberof QuoteDataTotalsInterface
     */
    'shipping_amount'?: number;
    /**
     * Shipping amount in base currency
     * @type {number}
     * @memberof QuoteDataTotalsInterface
     */
    'base_shipping_amount'?: number;
    /**
     * Shipping discount amount in quote currency
     * @type {number}
     * @memberof QuoteDataTotalsInterface
     */
    'shipping_discount_amount'?: number;
    /**
     * Shipping discount amount in base currency
     * @type {number}
     * @memberof QuoteDataTotalsInterface
     */
    'base_shipping_discount_amount'?: number;
    /**
     * Tax amount in quote currency
     * @type {number}
     * @memberof QuoteDataTotalsInterface
     */
    'tax_amount'?: number;
    /**
     * Tax amount in base currency
     * @type {number}
     * @memberof QuoteDataTotalsInterface
     */
    'base_tax_amount'?: number;
    /**
     * Item weee tax applied amount in quote currency.
     * @type {number}
     * @memberof QuoteDataTotalsInterface
     */
    'weee_tax_applied_amount': number;
    /**
     * Shipping tax amount in quote currency
     * @type {number}
     * @memberof QuoteDataTotalsInterface
     */
    'shipping_tax_amount'?: number;
    /**
     * Shipping tax amount in base currency
     * @type {number}
     * @memberof QuoteDataTotalsInterface
     */
    'base_shipping_tax_amount'?: number;
    /**
     * Subtotal including tax in quote currency
     * @type {number}
     * @memberof QuoteDataTotalsInterface
     */
    'subtotal_incl_tax'?: number;
    /**
     * Subtotal including tax in base currency
     * @type {number}
     * @memberof QuoteDataTotalsInterface
     */
    'base_subtotal_incl_tax'?: number;
    /**
     * Shipping including tax in quote currency
     * @type {number}
     * @memberof QuoteDataTotalsInterface
     */
    'shipping_incl_tax'?: number;
    /**
     * Shipping including tax in base currency
     * @type {number}
     * @memberof QuoteDataTotalsInterface
     */
    'base_shipping_incl_tax'?: number;
    /**
     * Base currency code
     * @type {string}
     * @memberof QuoteDataTotalsInterface
     */
    'base_currency_code'?: string;
    /**
     * Quote currency code
     * @type {string}
     * @memberof QuoteDataTotalsInterface
     */
    'quote_currency_code'?: string;
    /**
     * Applied coupon code
     * @type {string}
     * @memberof QuoteDataTotalsInterface
     */
    'coupon_code'?: string;
    /**
     * Items qty
     * @type {number}
     * @memberof QuoteDataTotalsInterface
     */
    'items_qty'?: number;
    /**
     * Totals by items
     * @type {Array<QuoteDataTotalsItemInterface>}
     * @memberof QuoteDataTotalsInterface
     */
    'items'?: Array<QuoteDataTotalsItemInterface>;
    /**
     * Dynamically calculated totals
     * @type {Array<QuoteDataTotalSegmentInterface>}
     * @memberof QuoteDataTotalsInterface
     */
    'total_segments': Array<QuoteDataTotalSegmentInterface>;
    /**
     * 
     * @type {QuoteDataTotalsExtensionInterface}
     * @memberof QuoteDataTotalsInterface
     */
    'extension_attributes'?: QuoteDataTotalsExtensionInterface;
}
/**
 * ExtensionInterface class for @see \\Magento\\Quote\\Api\\Data\\TotalsItemInterface
 * @export
 * @interface QuoteDataTotalsItemExtensionInterface
 */
export interface QuoteDataTotalsItemExtensionInterface {
    /**
     * 
     * @type {NegotiableQuoteDataNegotiableQuoteItemTotalsInterface}
     * @memberof QuoteDataTotalsItemExtensionInterface
     */
    'negotiable_quote_item_totals'?: NegotiableQuoteDataNegotiableQuoteItemTotalsInterface;
}
/**
 * Interface TotalsItemInterface
 * @export
 * @interface QuoteDataTotalsItemInterface
 */
export interface QuoteDataTotalsItemInterface {
    /**
     * Item id
     * @type {number}
     * @memberof QuoteDataTotalsItemInterface
     */
    'item_id': number;
    /**
     * Item price in quote currency.
     * @type {number}
     * @memberof QuoteDataTotalsItemInterface
     */
    'price': number;
    /**
     * Item price in base currency.
     * @type {number}
     * @memberof QuoteDataTotalsItemInterface
     */
    'base_price': number;
    /**
     * Item quantity.
     * @type {number}
     * @memberof QuoteDataTotalsItemInterface
     */
    'qty': number;
    /**
     * Row total in quote currency.
     * @type {number}
     * @memberof QuoteDataTotalsItemInterface
     */
    'row_total': number;
    /**
     * Row total in base currency.
     * @type {number}
     * @memberof QuoteDataTotalsItemInterface
     */
    'base_row_total': number;
    /**
     * Row total with discount in quote currency. Otherwise, null.
     * @type {number}
     * @memberof QuoteDataTotalsItemInterface
     */
    'row_total_with_discount'?: number;
    /**
     * Tax amount in quote currency. Otherwise, null.
     * @type {number}
     * @memberof QuoteDataTotalsItemInterface
     */
    'tax_amount'?: number;
    /**
     * Tax amount in base currency. Otherwise, null.
     * @type {number}
     * @memberof QuoteDataTotalsItemInterface
     */
    'base_tax_amount'?: number;
    /**
     * Tax percent. Otherwise, null.
     * @type {number}
     * @memberof QuoteDataTotalsItemInterface
     */
    'tax_percent'?: number;
    /**
     * Discount amount in quote currency. Otherwise, null.
     * @type {number}
     * @memberof QuoteDataTotalsItemInterface
     */
    'discount_amount'?: number;
    /**
     * Discount amount in base currency. Otherwise, null.
     * @type {number}
     * @memberof QuoteDataTotalsItemInterface
     */
    'base_discount_amount'?: number;
    /**
     * Discount percent. Otherwise, null.
     * @type {number}
     * @memberof QuoteDataTotalsItemInterface
     */
    'discount_percent'?: number;
    /**
     * Price including tax in quote currency. Otherwise, null.
     * @type {number}
     * @memberof QuoteDataTotalsItemInterface
     */
    'price_incl_tax'?: number;
    /**
     * Price including tax in base currency. Otherwise, null.
     * @type {number}
     * @memberof QuoteDataTotalsItemInterface
     */
    'base_price_incl_tax'?: number;
    /**
     * Row total including tax in quote currency. Otherwise, null.
     * @type {number}
     * @memberof QuoteDataTotalsItemInterface
     */
    'row_total_incl_tax'?: number;
    /**
     * Row total including tax in base currency. Otherwise, null.
     * @type {number}
     * @memberof QuoteDataTotalsItemInterface
     */
    'base_row_total_incl_tax'?: number;
    /**
     * Item price in quote currency.
     * @type {string}
     * @memberof QuoteDataTotalsItemInterface
     */
    'options': string;
    /**
     * Item weee tax applied amount in quote currency.
     * @type {number}
     * @memberof QuoteDataTotalsItemInterface
     */
    'weee_tax_applied_amount': number;
    /**
     * Item weee tax applied in quote currency.
     * @type {string}
     * @memberof QuoteDataTotalsItemInterface
     */
    'weee_tax_applied': string;
    /**
     * 
     * @type {QuoteDataTotalsItemExtensionInterface}
     * @memberof QuoteDataTotalsItemInterface
     */
    'extension_attributes'?: QuoteDataTotalsItemExtensionInterface;
    /**
     * Product name. Otherwise, null.
     * @type {string}
     * @memberof QuoteDataTotalsItemInterface
     */
    'name'?: string;
}
/**
 * 
 * @export
 * @interface QuotePaymentMethodManagementV1SetPutRequest
 */
export interface QuotePaymentMethodManagementV1SetPutRequest {
    /**
     * 
     * @type {QuoteDataPaymentInterface}
     * @memberof QuotePaymentMethodManagementV1SetPutRequest
     */
    'method': QuoteDataPaymentInterface;
}
/**
 * 
 * @export
 * @interface QuoteShipmentEstimationV1EstimateByExtendedAddressPostRequest
 */
export interface QuoteShipmentEstimationV1EstimateByExtendedAddressPostRequest {
    /**
     * 
     * @type {QuoteDataAddressInterface}
     * @memberof QuoteShipmentEstimationV1EstimateByExtendedAddressPostRequest
     */
    'address': QuoteDataAddressInterface;
}
/**
 * 
 * @export
 * @interface QuoteShippingMethodManagementV1EstimateByAddressIdPostRequest
 */
export interface QuoteShippingMethodManagementV1EstimateByAddressIdPostRequest {
    /**
     * The estimate address id
     * @type {number}
     * @memberof QuoteShippingMethodManagementV1EstimateByAddressIdPostRequest
     */
    'addressId': number;
}
/**
 * Interface RequisitionListInterface
 * @export
 * @interface RequisitionListDataRequisitionListInterface
 */
export interface RequisitionListDataRequisitionListInterface {
    /**
     * Requisition List ID
     * @type {number}
     * @memberof RequisitionListDataRequisitionListInterface
     */
    'id': number;
    /**
     * Customer ID
     * @type {number}
     * @memberof RequisitionListDataRequisitionListInterface
     */
    'customer_id': number;
    /**
     * Requisition List Name
     * @type {string}
     * @memberof RequisitionListDataRequisitionListInterface
     */
    'name': string;
    /**
     * Requisition List Update Time
     * @type {string}
     * @memberof RequisitionListDataRequisitionListInterface
     */
    'updated_at': string;
    /**
     * Requisition List Description
     * @type {string}
     * @memberof RequisitionListDataRequisitionListInterface
     */
    'description': string;
    /**
     * Requisition List Items
     * @type {Array<RequisitionListDataRequisitionListItemInterface>}
     * @memberof RequisitionListDataRequisitionListInterface
     */
    'items': Array<RequisitionListDataRequisitionListItemInterface>;
    /**
     * ExtensionInterface class for @see \\Magento\\RequisitionList\\Api\\Data\\RequisitionListInterface
     * @type {object}
     * @memberof RequisitionListDataRequisitionListInterface
     */
    'extension_attributes'?: object;
}
/**
 * Interface RequisitionListItemInterface
 * @export
 * @interface RequisitionListDataRequisitionListItemInterface
 */
export interface RequisitionListDataRequisitionListItemInterface {
    /**
     * Requisition List ID.
     * @type {number}
     * @memberof RequisitionListDataRequisitionListItemInterface
     */
    'id': number;
    /**
     * Product SKU.
     * @type {string}
     * @memberof RequisitionListDataRequisitionListItemInterface
     */
    'sku': string;
    /**
     * Requisition List ID.
     * @type {number}
     * @memberof RequisitionListDataRequisitionListItemInterface
     */
    'requisition_list_id': number;
    /**
     * Product Qty.
     * @type {number}
     * @memberof RequisitionListDataRequisitionListItemInterface
     */
    'qty': number;
    /**
     * Requisition list item options.
     * @type {Array<string>}
     * @memberof RequisitionListDataRequisitionListItemInterface
     */
    'options': Array<string>;
    /**
     * Store ID.
     * @type {number}
     * @memberof RequisitionListDataRequisitionListItemInterface
     */
    'store_id': number;
    /**
     * Added_at value.
     * @type {string}
     * @memberof RequisitionListDataRequisitionListItemInterface
     */
    'added_at': string;
    /**
     * ExtensionInterface class for @see \\Magento\\RequisitionList\\Api\\Data\\RequisitionListItemInterface
     * @type {object}
     * @memberof RequisitionListDataRequisitionListItemInterface
     */
    'extension_attributes'?: object;
}
/**
 * 
 * @export
 * @interface RequisitionListRequisitionListRepositoryV1SavePostRequest
 */
export interface RequisitionListRequisitionListRepositoryV1SavePostRequest {
    /**
     * 
     * @type {RequisitionListDataRequisitionListInterface}
     * @memberof RequisitionListRequisitionListRepositoryV1SavePostRequest
     */
    'requisitionList': RequisitionListDataRequisitionListInterface;
}
/**
 * 
 * @export
 * @interface RmaCommentManagementV1AddCommentPostRequest
 */
export interface RmaCommentManagementV1AddCommentPostRequest {
    /**
     * 
     * @type {RmaDataCommentInterface}
     * @memberof RmaCommentManagementV1AddCommentPostRequest
     */
    'data': RmaDataCommentInterface;
}
/**
 * Interface CommentInterface
 * @export
 * @interface RmaDataCommentInterface
 */
export interface RmaDataCommentInterface {
    /**
     * Comment
     * @type {string}
     * @memberof RmaDataCommentInterface
     */
    'comment': string;
    /**
     * Rma Id
     * @type {number}
     * @memberof RmaDataCommentInterface
     */
    'rma_entity_id': number;
    /**
     * Created_at
     * @type {string}
     * @memberof RmaDataCommentInterface
     */
    'created_at': string;
    /**
     * Entity_id
     * @type {number}
     * @memberof RmaDataCommentInterface
     */
    'entity_id': number;
    /**
     * Is_customer_notified
     * @type {boolean}
     * @memberof RmaDataCommentInterface
     */
    'customer_notified': boolean;
    /**
     * Is_visible_on_front
     * @type {boolean}
     * @memberof RmaDataCommentInterface
     */
    'visible_on_front': boolean;
    /**
     * Status
     * @type {string}
     * @memberof RmaDataCommentInterface
     */
    'status': string;
    /**
     * Is_admin
     * @type {boolean}
     * @memberof RmaDataCommentInterface
     */
    'admin': boolean;
    /**
     * ExtensionInterface class for @see \\Magento\\Rma\\Api\\Data\\CommentInterface
     * @type {object}
     * @memberof RmaDataCommentInterface
     */
    'extension_attributes'?: object;
    /**
     * Custom attributes values.
     * @type {Array<FrameworkAttributeInterface>}
     * @memberof RmaDataCommentInterface
     */
    'custom_attributes'?: Array<FrameworkAttributeInterface>;
}
/**
 * Interface CommentSearchResultInterface
 * @export
 * @interface RmaDataCommentSearchResultInterface
 */
export interface RmaDataCommentSearchResultInterface {
    /**
     * Rma Status History list
     * @type {Array<RmaDataCommentInterface>}
     * @memberof RmaDataCommentSearchResultInterface
     */
    'items': Array<RmaDataCommentInterface>;
    /**
     * 
     * @type {FrameworkSearchCriteriaInterface}
     * @memberof RmaDataCommentSearchResultInterface
     */
    'search_criteria': FrameworkSearchCriteriaInterface;
    /**
     * Total count.
     * @type {number}
     * @memberof RmaDataCommentSearchResultInterface
     */
    'total_count': number;
}
/**
 * Interface CategoryInterface
 * @export
 * @interface RmaDataItemInterface
 */
export interface RmaDataItemInterface {
    /**
     * Id
     * @type {number}
     * @memberof RmaDataItemInterface
     */
    'entity_id': number;
    /**
     * RMA id
     * @type {number}
     * @memberof RmaDataItemInterface
     */
    'rma_entity_id': number;
    /**
     * Order_item_id
     * @type {number}
     * @memberof RmaDataItemInterface
     */
    'order_item_id': number;
    /**
     * Qty_requested
     * @type {number}
     * @memberof RmaDataItemInterface
     */
    'qty_requested': number;
    /**
     * Qty_authorized
     * @type {number}
     * @memberof RmaDataItemInterface
     */
    'qty_authorized': number;
    /**
     * Qty_approved
     * @type {number}
     * @memberof RmaDataItemInterface
     */
    'qty_approved': number;
    /**
     * Qty_returned
     * @type {number}
     * @memberof RmaDataItemInterface
     */
    'qty_returned': number;
    /**
     * Reason
     * @type {string}
     * @memberof RmaDataItemInterface
     */
    'reason': string;
    /**
     * Condition
     * @type {string}
     * @memberof RmaDataItemInterface
     */
    'condition': string;
    /**
     * Resolution
     * @type {string}
     * @memberof RmaDataItemInterface
     */
    'resolution': string;
    /**
     * Status
     * @type {string}
     * @memberof RmaDataItemInterface
     */
    'status': string;
    /**
     * ExtensionInterface class for @see \\Magento\\Rma\\Api\\Data\\ItemInterface
     * @type {object}
     * @memberof RmaDataItemInterface
     */
    'extension_attributes'?: object;
}
/**
 * Interface RmaInterface
 * @export
 * @interface RmaDataRmaInterface
 */
export interface RmaDataRmaInterface {
    /**
     * Entity_id
     * @type {string}
     * @memberof RmaDataRmaInterface
     */
    'increment_id': string;
    /**
     * Entity_id
     * @type {number}
     * @memberof RmaDataRmaInterface
     */
    'entity_id': number;
    /**
     * Order_id
     * @type {number}
     * @memberof RmaDataRmaInterface
     */
    'order_id': number;
    /**
     * Order_increment_id
     * @type {string}
     * @memberof RmaDataRmaInterface
     */
    'order_increment_id': string;
    /**
     * Store_id
     * @type {number}
     * @memberof RmaDataRmaInterface
     */
    'store_id': number;
    /**
     * Customer_id
     * @type {number}
     * @memberof RmaDataRmaInterface
     */
    'customer_id': number;
    /**
     * Date_requested
     * @type {string}
     * @memberof RmaDataRmaInterface
     */
    'date_requested': string;
    /**
     * Customer_custom_email
     * @type {string}
     * @memberof RmaDataRmaInterface
     */
    'customer_custom_email': string;
    /**
     * Items
     * @type {Array<RmaDataItemInterface>}
     * @memberof RmaDataRmaInterface
     */
    'items': Array<RmaDataItemInterface>;
    /**
     * Status
     * @type {string}
     * @memberof RmaDataRmaInterface
     */
    'status': string;
    /**
     * Comments list
     * @type {Array<RmaDataCommentInterface>}
     * @memberof RmaDataRmaInterface
     */
    'comments': Array<RmaDataCommentInterface>;
    /**
     * Tracks list
     * @type {Array<RmaDataTrackInterface>}
     * @memberof RmaDataRmaInterface
     */
    'tracks': Array<RmaDataTrackInterface>;
    /**
     * ExtensionInterface class for @see \\Magento\\Rma\\Api\\Data\\RmaInterface
     * @type {object}
     * @memberof RmaDataRmaInterface
     */
    'extension_attributes'?: object;
    /**
     * Custom attributes values.
     * @type {Array<FrameworkAttributeInterface>}
     * @memberof RmaDataRmaInterface
     */
    'custom_attributes'?: Array<FrameworkAttributeInterface>;
}
/**
 * Interface RmaSearchResultInterface
 * @export
 * @interface RmaDataRmaSearchResultInterface
 */
export interface RmaDataRmaSearchResultInterface {
    /**
     * Rma list
     * @type {Array<RmaDataRmaInterface>}
     * @memberof RmaDataRmaSearchResultInterface
     */
    'items': Array<RmaDataRmaInterface>;
    /**
     * 
     * @type {FrameworkSearchCriteriaInterface}
     * @memberof RmaDataRmaSearchResultInterface
     */
    'search_criteria': FrameworkSearchCriteriaInterface;
    /**
     * Total count.
     * @type {number}
     * @memberof RmaDataRmaSearchResultInterface
     */
    'total_count': number;
}
/**
 * Interface TrackInterface
 * @export
 * @interface RmaDataTrackInterface
 */
export interface RmaDataTrackInterface {
    /**
     * Entity id
     * @type {number}
     * @memberof RmaDataTrackInterface
     */
    'entity_id': number;
    /**
     * Rma entity id
     * @type {number}
     * @memberof RmaDataTrackInterface
     */
    'rma_entity_id': number;
    /**
     * Track number
     * @type {string}
     * @memberof RmaDataTrackInterface
     */
    'track_number': string;
    /**
     * Carrier title
     * @type {string}
     * @memberof RmaDataTrackInterface
     */
    'carrier_title': string;
    /**
     * Carrier code
     * @type {string}
     * @memberof RmaDataTrackInterface
     */
    'carrier_code': string;
    /**
     * ExtensionInterface class for @see \\Magento\\Rma\\Api\\Data\\TrackInterface
     * @type {object}
     * @memberof RmaDataTrackInterface
     */
    'extension_attributes'?: object;
}
/**
 * Interface TrackSearchResultInterface
 * @export
 * @interface RmaDataTrackSearchResultInterface
 */
export interface RmaDataTrackSearchResultInterface {
    /**
     * Rma list
     * @type {Array<RmaDataTrackInterface>}
     * @memberof RmaDataTrackSearchResultInterface
     */
    'items': Array<RmaDataTrackInterface>;
    /**
     * 
     * @type {FrameworkSearchCriteriaInterface}
     * @memberof RmaDataTrackSearchResultInterface
     */
    'search_criteria': FrameworkSearchCriteriaInterface;
    /**
     * Total count.
     * @type {number}
     * @memberof RmaDataTrackSearchResultInterface
     */
    'total_count': number;
}
/**
 * 
 * @export
 * @interface RmaRmaManagementV1SaveRmaPostRequest
 */
export interface RmaRmaManagementV1SaveRmaPostRequest {
    /**
     * 
     * @type {RmaDataRmaInterface}
     * @memberof RmaRmaManagementV1SaveRmaPostRequest
     */
    'rmaDataObject': RmaDataRmaInterface;
}
/**
 * 
 * @export
 * @interface RmaTrackManagementV1AddTrackPostRequest
 */
export interface RmaTrackManagementV1AddTrackPostRequest {
    /**
     * 
     * @type {RmaDataTrackInterface}
     * @memberof RmaTrackManagementV1AddTrackPostRequest
     */
    'track': RmaDataTrackInterface;
}
/**
 * 
 * @export
 * @interface SalesCreditmemoCommentRepositoryV1SavePostRequest
 */
export interface SalesCreditmemoCommentRepositoryV1SavePostRequest {
    /**
     * 
     * @type {SalesDataCreditmemoCommentInterface}
     * @memberof SalesCreditmemoCommentRepositoryV1SavePostRequest
     */
    'entity': SalesDataCreditmemoCommentInterface;
}
/**
 * 
 * @export
 * @interface SalesCreditmemoManagementV1RefundPostRequest
 */
export interface SalesCreditmemoManagementV1RefundPostRequest {
    /**
     * 
     * @type {SalesDataCreditmemoInterface}
     * @memberof SalesCreditmemoManagementV1RefundPostRequest
     */
    'creditmemo': SalesDataCreditmemoInterface;
    /**
     * 
     * @type {boolean}
     * @memberof SalesCreditmemoManagementV1RefundPostRequest
     */
    'offlineRequested'?: boolean;
}
/**
 * 
 * @export
 * @interface SalesCreditmemoRepositoryV1SavePostRequest
 */
export interface SalesCreditmemoRepositoryV1SavePostRequest {
    /**
     * 
     * @type {SalesDataCreditmemoInterface}
     * @memberof SalesCreditmemoRepositoryV1SavePostRequest
     */
    'entity': SalesDataCreditmemoInterface;
}
/**
 * Interface CreditmemoCommentCreationInterface
 * @export
 * @interface SalesDataCreditmemoCommentCreationInterface
 */
export interface SalesDataCreditmemoCommentCreationInterface {
    /**
     * ExtensionInterface class for @see \\Magento\\Sales\\Api\\Data\\CreditmemoCommentCreationInterface
     * @type {object}
     * @memberof SalesDataCreditmemoCommentCreationInterface
     */
    'extension_attributes'?: object;
    /**
     * Comment.
     * @type {string}
     * @memberof SalesDataCreditmemoCommentCreationInterface
     */
    'comment': string;
    /**
     * Is-visible-on-storefront flag value.
     * @type {number}
     * @memberof SalesDataCreditmemoCommentCreationInterface
     */
    'is_visible_on_front': number;
}
/**
 * Credit memo comment interface. After a customer places and pays for an order and an invoice has been issued, the merchant can create a credit memo to refund all or part of the amount paid for any returned or undelivered items. The memo restores funds to the customer account so that the customer can make future purchases. A credit memo usually includes comments that detail why the credit memo amount was credited to the customer.
 * @export
 * @interface SalesDataCreditmemoCommentInterface
 */
export interface SalesDataCreditmemoCommentInterface {
    /**
     * Comment.
     * @type {string}
     * @memberof SalesDataCreditmemoCommentInterface
     */
    'comment': string;
    /**
     * Created-at timestamp.
     * @type {string}
     * @memberof SalesDataCreditmemoCommentInterface
     */
    'created_at'?: string;
    /**
     * Credit memo ID.
     * @type {number}
     * @memberof SalesDataCreditmemoCommentInterface
     */
    'entity_id'?: number;
    /**
     * Is-customer-notified flag value.
     * @type {number}
     * @memberof SalesDataCreditmemoCommentInterface
     */
    'is_customer_notified': number;
    /**
     * Is-visible-on-storefront flag value.
     * @type {number}
     * @memberof SalesDataCreditmemoCommentInterface
     */
    'is_visible_on_front': number;
    /**
     * Parent ID.
     * @type {number}
     * @memberof SalesDataCreditmemoCommentInterface
     */
    'parent_id': number;
    /**
     * ExtensionInterface class for @see \\Magento\\Sales\\Api\\Data\\CreditmemoCommentInterface
     * @type {object}
     * @memberof SalesDataCreditmemoCommentInterface
     */
    'extension_attributes'?: object;
}
/**
 * Credit memo comment search result interface. After a customer places and pays for an order and an invoice has been issued, the merchant can create a credit memo to refund all or part of the amount paid for any returned or undelivered items. The memo restores funds to the customer account so that the customer can make future purchases. A credit memo usually includes comments that detail why the credit memo amount was credited to the customer.
 * @export
 * @interface SalesDataCreditmemoCommentSearchResultInterface
 */
export interface SalesDataCreditmemoCommentSearchResultInterface {
    /**
     * Array of collection items.
     * @type {Array<SalesDataCreditmemoCommentInterface>}
     * @memberof SalesDataCreditmemoCommentSearchResultInterface
     */
    'items': Array<SalesDataCreditmemoCommentInterface>;
    /**
     * 
     * @type {FrameworkSearchCriteriaInterface}
     * @memberof SalesDataCreditmemoCommentSearchResultInterface
     */
    'search_criteria': FrameworkSearchCriteriaInterface;
    /**
     * Total count.
     * @type {number}
     * @memberof SalesDataCreditmemoCommentSearchResultInterface
     */
    'total_count': number;
}
/**
 * ExtensionInterface class for @see \\Magento\\Sales\\Api\\Data\\CreditmemoCreationArgumentsInterface
 * @export
 * @interface SalesDataCreditmemoCreationArgumentsExtensionInterface
 */
export interface SalesDataCreditmemoCreationArgumentsExtensionInterface {
    /**
     * 
     * @type {Array<number>}
     * @memberof SalesDataCreditmemoCreationArgumentsExtensionInterface
     */
    'return_to_stock_items'?: Array<number>;
}
/**
 * Interface CreditmemoCreationArgumentsInterface
 * @export
 * @interface SalesDataCreditmemoCreationArgumentsInterface
 */
export interface SalesDataCreditmemoCreationArgumentsInterface {
    /**
     * Credit memo shipping amount.
     * @type {number}
     * @memberof SalesDataCreditmemoCreationArgumentsInterface
     */
    'shipping_amount'?: number;
    /**
     * Credit memo positive adjustment.
     * @type {number}
     * @memberof SalesDataCreditmemoCreationArgumentsInterface
     */
    'adjustment_positive'?: number;
    /**
     * Credit memo negative adjustment.
     * @type {number}
     * @memberof SalesDataCreditmemoCreationArgumentsInterface
     */
    'adjustment_negative'?: number;
    /**
     * 
     * @type {SalesDataCreditmemoCreationArgumentsExtensionInterface}
     * @memberof SalesDataCreditmemoCreationArgumentsInterface
     */
    'extension_attributes'?: SalesDataCreditmemoCreationArgumentsExtensionInterface;
}
/**
 * ExtensionInterface class for @see \\Magento\\Sales\\Api\\Data\\CreditmemoInterface
 * @export
 * @interface SalesDataCreditmemoExtensionInterface
 */
export interface SalesDataCreditmemoExtensionInterface {
    /**
     * 
     * @type {number}
     * @memberof SalesDataCreditmemoExtensionInterface
     */
    'base_customer_balance_amount'?: number;
    /**
     * 
     * @type {number}
     * @memberof SalesDataCreditmemoExtensionInterface
     */
    'customer_balance_amount'?: number;
    /**
     * 
     * @type {number}
     * @memberof SalesDataCreditmemoExtensionInterface
     */
    'base_gift_cards_amount'?: number;
    /**
     * 
     * @type {number}
     * @memberof SalesDataCreditmemoExtensionInterface
     */
    'gift_cards_amount'?: number;
    /**
     * 
     * @type {string}
     * @memberof SalesDataCreditmemoExtensionInterface
     */
    'gw_base_price'?: string;
    /**
     * 
     * @type {string}
     * @memberof SalesDataCreditmemoExtensionInterface
     */
    'gw_price'?: string;
    /**
     * 
     * @type {string}
     * @memberof SalesDataCreditmemoExtensionInterface
     */
    'gw_items_base_price'?: string;
    /**
     * 
     * @type {string}
     * @memberof SalesDataCreditmemoExtensionInterface
     */
    'gw_items_price'?: string;
    /**
     * 
     * @type {string}
     * @memberof SalesDataCreditmemoExtensionInterface
     */
    'gw_card_base_price'?: string;
    /**
     * 
     * @type {string}
     * @memberof SalesDataCreditmemoExtensionInterface
     */
    'gw_card_price'?: string;
    /**
     * 
     * @type {string}
     * @memberof SalesDataCreditmemoExtensionInterface
     */
    'gw_base_tax_amount'?: string;
    /**
     * 
     * @type {string}
     * @memberof SalesDataCreditmemoExtensionInterface
     */
    'gw_tax_amount'?: string;
    /**
     * 
     * @type {string}
     * @memberof SalesDataCreditmemoExtensionInterface
     */
    'gw_items_base_tax_amount'?: string;
    /**
     * 
     * @type {string}
     * @memberof SalesDataCreditmemoExtensionInterface
     */
    'gw_items_tax_amount'?: string;
    /**
     * 
     * @type {string}
     * @memberof SalesDataCreditmemoExtensionInterface
     */
    'gw_card_base_tax_amount'?: string;
    /**
     * 
     * @type {string}
     * @memberof SalesDataCreditmemoExtensionInterface
     */
    'gw_card_tax_amount'?: string;
}
/**
 * Credit memo interface. After a customer places and pays for an order and an invoice has been issued, the merchant can create a credit memo to refund all or part of the amount paid for any returned or undelivered items. The memo restores funds to the customer account so that the customer can make future purchases.
 * @export
 * @interface SalesDataCreditmemoInterface
 */
export interface SalesDataCreditmemoInterface {
    /**
     * Credit memo adjustment.
     * @type {number}
     * @memberof SalesDataCreditmemoInterface
     */
    'adjustment'?: number;
    /**
     * Credit memo negative adjustment.
     * @type {number}
     * @memberof SalesDataCreditmemoInterface
     */
    'adjustment_negative'?: number;
    /**
     * Credit memo positive adjustment.
     * @type {number}
     * @memberof SalesDataCreditmemoInterface
     */
    'adjustment_positive'?: number;
    /**
     * Credit memo base adjustment.
     * @type {number}
     * @memberof SalesDataCreditmemoInterface
     */
    'base_adjustment'?: number;
    /**
     * Credit memo negative base adjustment.
     * @type {number}
     * @memberof SalesDataCreditmemoInterface
     */
    'base_adjustment_negative'?: number;
    /**
     * Credit memo positive base adjustment.
     * @type {number}
     * @memberof SalesDataCreditmemoInterface
     */
    'base_adjustment_positive'?: number;
    /**
     * Credit memo base currency code.
     * @type {string}
     * @memberof SalesDataCreditmemoInterface
     */
    'base_currency_code'?: string;
    /**
     * Credit memo base discount amount.
     * @type {number}
     * @memberof SalesDataCreditmemoInterface
     */
    'base_discount_amount'?: number;
    /**
     * Credit memo base grand total.
     * @type {number}
     * @memberof SalesDataCreditmemoInterface
     */
    'base_grand_total'?: number;
    /**
     * Credit memo base discount tax compensation amount.
     * @type {number}
     * @memberof SalesDataCreditmemoInterface
     */
    'base_discount_tax_compensation_amount'?: number;
    /**
     * Credit memo base shipping amount.
     * @type {number}
     * @memberof SalesDataCreditmemoInterface
     */
    'base_shipping_amount'?: number;
    /**
     * Credit memo base shipping discount tax compensation amount.
     * @type {number}
     * @memberof SalesDataCreditmemoInterface
     */
    'base_shipping_discount_tax_compensation_amnt'?: number;
    /**
     * Credit memo base shipping including tax.
     * @type {number}
     * @memberof SalesDataCreditmemoInterface
     */
    'base_shipping_incl_tax'?: number;
    /**
     * Credit memo base shipping tax amount.
     * @type {number}
     * @memberof SalesDataCreditmemoInterface
     */
    'base_shipping_tax_amount'?: number;
    /**
     * Credit memo base subtotal.
     * @type {number}
     * @memberof SalesDataCreditmemoInterface
     */
    'base_subtotal'?: number;
    /**
     * Credit memo base subtotal including tax.
     * @type {number}
     * @memberof SalesDataCreditmemoInterface
     */
    'base_subtotal_incl_tax'?: number;
    /**
     * Credit memo base tax amount.
     * @type {number}
     * @memberof SalesDataCreditmemoInterface
     */
    'base_tax_amount'?: number;
    /**
     * Credit memo base-to-global rate.
     * @type {number}
     * @memberof SalesDataCreditmemoInterface
     */
    'base_to_global_rate'?: number;
    /**
     * Credit memo base-to-order rate.
     * @type {number}
     * @memberof SalesDataCreditmemoInterface
     */
    'base_to_order_rate'?: number;
    /**
     * Credit memo billing address ID.
     * @type {number}
     * @memberof SalesDataCreditmemoInterface
     */
    'billing_address_id'?: number;
    /**
     * Credit memo created-at timestamp.
     * @type {string}
     * @memberof SalesDataCreditmemoInterface
     */
    'created_at'?: string;
    /**
     * Credit memo status.
     * @type {number}
     * @memberof SalesDataCreditmemoInterface
     */
    'creditmemo_status'?: number;
    /**
     * Credit memo discount amount.
     * @type {number}
     * @memberof SalesDataCreditmemoInterface
     */
    'discount_amount'?: number;
    /**
     * Credit memo discount description.
     * @type {string}
     * @memberof SalesDataCreditmemoInterface
     */
    'discount_description'?: string;
    /**
     * Credit memo email sent flag value.
     * @type {number}
     * @memberof SalesDataCreditmemoInterface
     */
    'email_sent'?: number;
    /**
     * Credit memo ID.
     * @type {number}
     * @memberof SalesDataCreditmemoInterface
     */
    'entity_id'?: number;
    /**
     * Credit memo global currency code.
     * @type {string}
     * @memberof SalesDataCreditmemoInterface
     */
    'global_currency_code'?: string;
    /**
     * Credit memo grand total.
     * @type {number}
     * @memberof SalesDataCreditmemoInterface
     */
    'grand_total'?: number;
    /**
     * Credit memo discount tax compensation amount.
     * @type {number}
     * @memberof SalesDataCreditmemoInterface
     */
    'discount_tax_compensation_amount'?: number;
    /**
     * Credit memo increment ID.
     * @type {string}
     * @memberof SalesDataCreditmemoInterface
     */
    'increment_id'?: string;
    /**
     * Credit memo invoice ID.
     * @type {number}
     * @memberof SalesDataCreditmemoInterface
     */
    'invoice_id'?: number;
    /**
     * Credit memo order currency code.
     * @type {string}
     * @memberof SalesDataCreditmemoInterface
     */
    'order_currency_code'?: string;
    /**
     * Credit memo order ID.
     * @type {number}
     * @memberof SalesDataCreditmemoInterface
     */
    'order_id': number;
    /**
     * Credit memo shipping address ID.
     * @type {number}
     * @memberof SalesDataCreditmemoInterface
     */
    'shipping_address_id'?: number;
    /**
     * Credit memo shipping amount.
     * @type {number}
     * @memberof SalesDataCreditmemoInterface
     */
    'shipping_amount'?: number;
    /**
     * Credit memo shipping discount tax compensation amount.
     * @type {number}
     * @memberof SalesDataCreditmemoInterface
     */
    'shipping_discount_tax_compensation_amount'?: number;
    /**
     * Credit memo shipping including tax.
     * @type {number}
     * @memberof SalesDataCreditmemoInterface
     */
    'shipping_incl_tax'?: number;
    /**
     * Credit memo shipping tax amount.
     * @type {number}
     * @memberof SalesDataCreditmemoInterface
     */
    'shipping_tax_amount'?: number;
    /**
     * Credit memo state.
     * @type {number}
     * @memberof SalesDataCreditmemoInterface
     */
    'state'?: number;
    /**
     * Credit memo store currency code.
     * @type {string}
     * @memberof SalesDataCreditmemoInterface
     */
    'store_currency_code'?: string;
    /**
     * Credit memo store ID.
     * @type {number}
     * @memberof SalesDataCreditmemoInterface
     */
    'store_id'?: number;
    /**
     * Credit memo store-to-base rate.
     * @type {number}
     * @memberof SalesDataCreditmemoInterface
     */
    'store_to_base_rate'?: number;
    /**
     * Credit memo store-to-order rate.
     * @type {number}
     * @memberof SalesDataCreditmemoInterface
     */
    'store_to_order_rate'?: number;
    /**
     * Credit memo subtotal.
     * @type {number}
     * @memberof SalesDataCreditmemoInterface
     */
    'subtotal'?: number;
    /**
     * Credit memo subtotal including tax.
     * @type {number}
     * @memberof SalesDataCreditmemoInterface
     */
    'subtotal_incl_tax'?: number;
    /**
     * Credit memo tax amount.
     * @type {number}
     * @memberof SalesDataCreditmemoInterface
     */
    'tax_amount'?: number;
    /**
     * Credit memo transaction ID.
     * @type {string}
     * @memberof SalesDataCreditmemoInterface
     */
    'transaction_id'?: string;
    /**
     * Credit memo updated-at timestamp.
     * @type {string}
     * @memberof SalesDataCreditmemoInterface
     */
    'updated_at'?: string;
    /**
     * Array of credit memo items.
     * @type {Array<SalesDataCreditmemoItemInterface>}
     * @memberof SalesDataCreditmemoInterface
     */
    'items': Array<SalesDataCreditmemoItemInterface>;
    /**
     * Array of any credit memo comments. Otherwise, null.
     * @type {Array<SalesDataCreditmemoCommentInterface>}
     * @memberof SalesDataCreditmemoInterface
     */
    'comments'?: Array<SalesDataCreditmemoCommentInterface>;
    /**
     * 
     * @type {SalesDataCreditmemoExtensionInterface}
     * @memberof SalesDataCreditmemoInterface
     */
    'extension_attributes'?: SalesDataCreditmemoExtensionInterface;
}
/**
 * Interface CreditmemoItemCreationInterface
 * @export
 * @interface SalesDataCreditmemoItemCreationInterface
 */
export interface SalesDataCreditmemoItemCreationInterface {
    /**
     * ExtensionInterface class for @see \\Magento\\Sales\\Api\\Data\\CreditmemoItemCreationInterface
     * @type {object}
     * @memberof SalesDataCreditmemoItemCreationInterface
     */
    'extension_attributes'?: object;
    /**
     * Order item ID.
     * @type {number}
     * @memberof SalesDataCreditmemoItemCreationInterface
     */
    'order_item_id': number;
    /**
     * Quantity.
     * @type {number}
     * @memberof SalesDataCreditmemoItemCreationInterface
     */
    'qty': number;
}
/**
 * ExtensionInterface class for @see \\Magento\\Sales\\Api\\Data\\CreditmemoItemInterface
 * @export
 * @interface SalesDataCreditmemoItemExtensionInterface
 */
export interface SalesDataCreditmemoItemExtensionInterface {
    /**
     * 
     * @type {Array<string>}
     * @memberof SalesDataCreditmemoItemExtensionInterface
     */
    'vertex_tax_codes'?: Array<string>;
    /**
     * 
     * @type {Array<string>}
     * @memberof SalesDataCreditmemoItemExtensionInterface
     */
    'invoice_text_codes'?: Array<string>;
    /**
     * 
     * @type {Array<string>}
     * @memberof SalesDataCreditmemoItemExtensionInterface
     */
    'tax_codes'?: Array<string>;
}
/**
 * Credit memo item interface. After a customer places and pays for an order and an invoice has been issued, the merchant can create a credit memo to refund all or part of the amount paid for any returned or undelivered items. The memo restores funds to the customer account so that the customer can make future purchases. A credit memo item is an invoiced item for which a merchant creates a credit memo.
 * @export
 * @interface SalesDataCreditmemoItemInterface
 */
export interface SalesDataCreditmemoItemInterface {
    /**
     * Additional data.
     * @type {string}
     * @memberof SalesDataCreditmemoItemInterface
     */
    'additional_data'?: string;
    /**
     * The base cost for a credit memo item.
     * @type {number}
     * @memberof SalesDataCreditmemoItemInterface
     */
    'base_cost': number;
    /**
     * The base discount amount for a credit memo item.
     * @type {number}
     * @memberof SalesDataCreditmemoItemInterface
     */
    'base_discount_amount'?: number;
    /**
     * The base discount tax compensation amount for a credit memo item.
     * @type {number}
     * @memberof SalesDataCreditmemoItemInterface
     */
    'base_discount_tax_compensation_amount'?: number;
    /**
     * The base price for a credit memo item.
     * @type {number}
     * @memberof SalesDataCreditmemoItemInterface
     */
    'base_price': number;
    /**
     * Base price including tax.
     * @type {number}
     * @memberof SalesDataCreditmemoItemInterface
     */
    'base_price_incl_tax'?: number;
    /**
     * Base row total.
     * @type {number}
     * @memberof SalesDataCreditmemoItemInterface
     */
    'base_row_total'?: number;
    /**
     * Base row total including tax.
     * @type {number}
     * @memberof SalesDataCreditmemoItemInterface
     */
    'base_row_total_incl_tax'?: number;
    /**
     * Base tax amount.
     * @type {number}
     * @memberof SalesDataCreditmemoItemInterface
     */
    'base_tax_amount'?: number;
    /**
     * Base WEEE tax applied amount.
     * @type {number}
     * @memberof SalesDataCreditmemoItemInterface
     */
    'base_weee_tax_applied_amount'?: number;
    /**
     * Base WEEE tax applied row amount.
     * @type {number}
     * @memberof SalesDataCreditmemoItemInterface
     */
    'base_weee_tax_applied_row_amnt'?: number;
    /**
     * Base WEEE tax disposition.
     * @type {number}
     * @memberof SalesDataCreditmemoItemInterface
     */
    'base_weee_tax_disposition'?: number;
    /**
     * Base WEEE tax row disposition.
     * @type {number}
     * @memberof SalesDataCreditmemoItemInterface
     */
    'base_weee_tax_row_disposition'?: number;
    /**
     * Description.
     * @type {string}
     * @memberof SalesDataCreditmemoItemInterface
     */
    'description'?: string;
    /**
     * Discount amount.
     * @type {number}
     * @memberof SalesDataCreditmemoItemInterface
     */
    'discount_amount'?: number;
    /**
     * Credit memo item ID.
     * @type {number}
     * @memberof SalesDataCreditmemoItemInterface
     */
    'entity_id': number;
    /**
     * Discount tax compensation amount.
     * @type {number}
     * @memberof SalesDataCreditmemoItemInterface
     */
    'discount_tax_compensation_amount'?: number;
    /**
     * Name.
     * @type {string}
     * @memberof SalesDataCreditmemoItemInterface
     */
    'name'?: string;
    /**
     * Order item ID.
     * @type {number}
     * @memberof SalesDataCreditmemoItemInterface
     */
    'order_item_id': number;
    /**
     * Parent ID.
     * @type {number}
     * @memberof SalesDataCreditmemoItemInterface
     */
    'parent_id'?: number;
    /**
     * Price.
     * @type {number}
     * @memberof SalesDataCreditmemoItemInterface
     */
    'price'?: number;
    /**
     * Price including tax.
     * @type {number}
     * @memberof SalesDataCreditmemoItemInterface
     */
    'price_incl_tax'?: number;
    /**
     * Product ID.
     * @type {number}
     * @memberof SalesDataCreditmemoItemInterface
     */
    'product_id'?: number;
    /**
     * Quantity.
     * @type {number}
     * @memberof SalesDataCreditmemoItemInterface
     */
    'qty': number;
    /**
     * Row total.
     * @type {number}
     * @memberof SalesDataCreditmemoItemInterface
     */
    'row_total'?: number;
    /**
     * Row total including tax.
     * @type {number}
     * @memberof SalesDataCreditmemoItemInterface
     */
    'row_total_incl_tax'?: number;
    /**
     * SKU.
     * @type {string}
     * @memberof SalesDataCreditmemoItemInterface
     */
    'sku'?: string;
    /**
     * Tax amount.
     * @type {number}
     * @memberof SalesDataCreditmemoItemInterface
     */
    'tax_amount'?: number;
    /**
     * WEEE tax applied.
     * @type {string}
     * @memberof SalesDataCreditmemoItemInterface
     */
    'weee_tax_applied'?: string;
    /**
     * WEEE tax applied amount.
     * @type {number}
     * @memberof SalesDataCreditmemoItemInterface
     */
    'weee_tax_applied_amount'?: number;
    /**
     * WEEE tax applied row amount.
     * @type {number}
     * @memberof SalesDataCreditmemoItemInterface
     */
    'weee_tax_applied_row_amount'?: number;
    /**
     * WEEE tax disposition.
     * @type {number}
     * @memberof SalesDataCreditmemoItemInterface
     */
    'weee_tax_disposition'?: number;
    /**
     * WEEE tax row disposition.
     * @type {number}
     * @memberof SalesDataCreditmemoItemInterface
     */
    'weee_tax_row_disposition'?: number;
    /**
     * 
     * @type {SalesDataCreditmemoItemExtensionInterface}
     * @memberof SalesDataCreditmemoItemInterface
     */
    'extension_attributes'?: SalesDataCreditmemoItemExtensionInterface;
}
/**
 * Credit memo search result interface. After a customer places and pays for an order and an invoice has been issued, the merchant can create a credit memo to refund all or part of the amount paid for any returned or undelivered items. The memo restores funds to the customer account so that the customer can make future purchases.
 * @export
 * @interface SalesDataCreditmemoSearchResultInterface
 */
export interface SalesDataCreditmemoSearchResultInterface {
    /**
     * Array of collection items.
     * @type {Array<SalesDataCreditmemoInterface>}
     * @memberof SalesDataCreditmemoSearchResultInterface
     */
    'items': Array<SalesDataCreditmemoInterface>;
    /**
     * 
     * @type {FrameworkSearchCriteriaInterface}
     * @memberof SalesDataCreditmemoSearchResultInterface
     */
    'search_criteria': FrameworkSearchCriteriaInterface;
    /**
     * Total count.
     * @type {number}
     * @memberof SalesDataCreditmemoSearchResultInterface
     */
    'total_count': number;
}
/**
 * Interface InvoiceCommentCreationInterface
 * @export
 * @interface SalesDataInvoiceCommentCreationInterface
 */
export interface SalesDataInvoiceCommentCreationInterface {
    /**
     * ExtensionInterface class for @see \\Magento\\Sales\\Api\\Data\\InvoiceCommentCreationInterface
     * @type {object}
     * @memberof SalesDataInvoiceCommentCreationInterface
     */
    'extension_attributes'?: object;
    /**
     * Comment.
     * @type {string}
     * @memberof SalesDataInvoiceCommentCreationInterface
     */
    'comment': string;
    /**
     * Is-visible-on-storefront flag value.
     * @type {number}
     * @memberof SalesDataInvoiceCommentCreationInterface
     */
    'is_visible_on_front': number;
}
/**
 * Invoice comment interface. An invoice is a record of the receipt of payment for an order. An invoice can include comments that detail the invoice history.
 * @export
 * @interface SalesDataInvoiceCommentInterface
 */
export interface SalesDataInvoiceCommentInterface {
    /**
     * Is-customer-notified flag value.
     * @type {number}
     * @memberof SalesDataInvoiceCommentInterface
     */
    'is_customer_notified': number;
    /**
     * Parent ID.
     * @type {number}
     * @memberof SalesDataInvoiceCommentInterface
     */
    'parent_id': number;
    /**
     * ExtensionInterface class for @see \\Magento\\Sales\\Api\\Data\\InvoiceCommentInterface
     * @type {object}
     * @memberof SalesDataInvoiceCommentInterface
     */
    'extension_attributes'?: object;
    /**
     * Comment.
     * @type {string}
     * @memberof SalesDataInvoiceCommentInterface
     */
    'comment': string;
    /**
     * Is-visible-on-storefront flag value.
     * @type {number}
     * @memberof SalesDataInvoiceCommentInterface
     */
    'is_visible_on_front': number;
    /**
     * Created-at timestamp.
     * @type {string}
     * @memberof SalesDataInvoiceCommentInterface
     */
    'created_at'?: string;
    /**
     * Invoice ID.
     * @type {number}
     * @memberof SalesDataInvoiceCommentInterface
     */
    'entity_id'?: number;
}
/**
 * Invoice comment search result interface. An invoice is a record of the receipt of payment for an order. An invoice can include comments that detail the invoice history.
 * @export
 * @interface SalesDataInvoiceCommentSearchResultInterface
 */
export interface SalesDataInvoiceCommentSearchResultInterface {
    /**
     * Array of collection items.
     * @type {Array<SalesDataInvoiceCommentInterface>}
     * @memberof SalesDataInvoiceCommentSearchResultInterface
     */
    'items': Array<SalesDataInvoiceCommentInterface>;
    /**
     * 
     * @type {FrameworkSearchCriteriaInterface}
     * @memberof SalesDataInvoiceCommentSearchResultInterface
     */
    'search_criteria': FrameworkSearchCriteriaInterface;
    /**
     * Total count.
     * @type {number}
     * @memberof SalesDataInvoiceCommentSearchResultInterface
     */
    'total_count': number;
}
/**
 * Interface for creation arguments for Invoice.
 * @export
 * @interface SalesDataInvoiceCreationArgumentsInterface
 */
export interface SalesDataInvoiceCreationArgumentsInterface {
    /**
     * ExtensionInterface class for @see \\Magento\\Sales\\Api\\Data\\InvoiceCreationArgumentsInterface
     * @type {object}
     * @memberof SalesDataInvoiceCreationArgumentsInterface
     */
    'extension_attributes'?: object;
}
/**
 * ExtensionInterface class for @see \\Magento\\Sales\\Api\\Data\\InvoiceInterface
 * @export
 * @interface SalesDataInvoiceExtensionInterface
 */
export interface SalesDataInvoiceExtensionInterface {
    /**
     * 
     * @type {number}
     * @memberof SalesDataInvoiceExtensionInterface
     */
    'base_customer_balance_amount'?: number;
    /**
     * 
     * @type {number}
     * @memberof SalesDataInvoiceExtensionInterface
     */
    'customer_balance_amount'?: number;
    /**
     * 
     * @type {number}
     * @memberof SalesDataInvoiceExtensionInterface
     */
    'base_gift_cards_amount'?: number;
    /**
     * 
     * @type {number}
     * @memberof SalesDataInvoiceExtensionInterface
     */
    'gift_cards_amount'?: number;
    /**
     * 
     * @type {string}
     * @memberof SalesDataInvoiceExtensionInterface
     */
    'gw_base_price'?: string;
    /**
     * 
     * @type {string}
     * @memberof SalesDataInvoiceExtensionInterface
     */
    'gw_price'?: string;
    /**
     * 
     * @type {string}
     * @memberof SalesDataInvoiceExtensionInterface
     */
    'gw_items_base_price'?: string;
    /**
     * 
     * @type {string}
     * @memberof SalesDataInvoiceExtensionInterface
     */
    'gw_items_price'?: string;
    /**
     * 
     * @type {string}
     * @memberof SalesDataInvoiceExtensionInterface
     */
    'gw_card_base_price'?: string;
    /**
     * 
     * @type {string}
     * @memberof SalesDataInvoiceExtensionInterface
     */
    'gw_card_price'?: string;
    /**
     * 
     * @type {string}
     * @memberof SalesDataInvoiceExtensionInterface
     */
    'gw_base_tax_amount'?: string;
    /**
     * 
     * @type {string}
     * @memberof SalesDataInvoiceExtensionInterface
     */
    'gw_tax_amount'?: string;
    /**
     * 
     * @type {string}
     * @memberof SalesDataInvoiceExtensionInterface
     */
    'gw_items_base_tax_amount'?: string;
    /**
     * 
     * @type {string}
     * @memberof SalesDataInvoiceExtensionInterface
     */
    'gw_items_tax_amount'?: string;
    /**
     * 
     * @type {string}
     * @memberof SalesDataInvoiceExtensionInterface
     */
    'gw_card_base_tax_amount'?: string;
    /**
     * 
     * @type {string}
     * @memberof SalesDataInvoiceExtensionInterface
     */
    'gw_card_tax_amount'?: string;
    /**
     * 
     * @type {SalesDataOrderAddressInterface}
     * @memberof SalesDataInvoiceExtensionInterface
     */
    'vertex_tax_calculation_shipping_address'?: SalesDataOrderAddressInterface;
    /**
     * 
     * @type {SalesDataOrderAddressInterface}
     * @memberof SalesDataInvoiceExtensionInterface
     */
    'vertex_tax_calculation_billing_address'?: SalesDataOrderAddressInterface;
    /**
     * 
     * @type {SalesDataOrderInterface}
     * @memberof SalesDataInvoiceExtensionInterface
     */
    'vertex_tax_calculation_order'?: SalesDataOrderInterface;
}
/**
 * Invoice interface. An invoice is a record of the receipt of payment for an order.
 * @export
 * @interface SalesDataInvoiceInterface
 */
export interface SalesDataInvoiceInterface {
    /**
     * Base currency code.
     * @type {string}
     * @memberof SalesDataInvoiceInterface
     */
    'base_currency_code'?: string;
    /**
     * Base discount amount.
     * @type {number}
     * @memberof SalesDataInvoiceInterface
     */
    'base_discount_amount'?: number;
    /**
     * Base grand total.
     * @type {number}
     * @memberof SalesDataInvoiceInterface
     */
    'base_grand_total'?: number;
    /**
     * Base discount tax compensation amount.
     * @type {number}
     * @memberof SalesDataInvoiceInterface
     */
    'base_discount_tax_compensation_amount'?: number;
    /**
     * Base shipping amount.
     * @type {number}
     * @memberof SalesDataInvoiceInterface
     */
    'base_shipping_amount'?: number;
    /**
     * Base shipping discount tax compensation amount.
     * @type {number}
     * @memberof SalesDataInvoiceInterface
     */
    'base_shipping_discount_tax_compensation_amnt'?: number;
    /**
     * Base shipping including tax.
     * @type {number}
     * @memberof SalesDataInvoiceInterface
     */
    'base_shipping_incl_tax'?: number;
    /**
     * Base shipping tax amount.
     * @type {number}
     * @memberof SalesDataInvoiceInterface
     */
    'base_shipping_tax_amount'?: number;
    /**
     * Base subtotal.
     * @type {number}
     * @memberof SalesDataInvoiceInterface
     */
    'base_subtotal'?: number;
    /**
     * Base subtotal including tax.
     * @type {number}
     * @memberof SalesDataInvoiceInterface
     */
    'base_subtotal_incl_tax'?: number;
    /**
     * Base tax amount.
     * @type {number}
     * @memberof SalesDataInvoiceInterface
     */
    'base_tax_amount'?: number;
    /**
     * Base total refunded.
     * @type {number}
     * @memberof SalesDataInvoiceInterface
     */
    'base_total_refunded'?: number;
    /**
     * Base-to-global rate.
     * @type {number}
     * @memberof SalesDataInvoiceInterface
     */
    'base_to_global_rate'?: number;
    /**
     * Base-to-order rate.
     * @type {number}
     * @memberof SalesDataInvoiceInterface
     */
    'base_to_order_rate'?: number;
    /**
     * Billing address ID.
     * @type {number}
     * @memberof SalesDataInvoiceInterface
     */
    'billing_address_id'?: number;
    /**
     * Can void flag value.
     * @type {number}
     * @memberof SalesDataInvoiceInterface
     */
    'can_void_flag'?: number;
    /**
     * Created-at timestamp.
     * @type {string}
     * @memberof SalesDataInvoiceInterface
     */
    'created_at'?: string;
    /**
     * Discount amount.
     * @type {number}
     * @memberof SalesDataInvoiceInterface
     */
    'discount_amount'?: number;
    /**
     * Discount description.
     * @type {string}
     * @memberof SalesDataInvoiceInterface
     */
    'discount_description'?: string;
    /**
     * Email-sent flag value.
     * @type {number}
     * @memberof SalesDataInvoiceInterface
     */
    'email_sent'?: number;
    /**
     * Invoice ID.
     * @type {number}
     * @memberof SalesDataInvoiceInterface
     */
    'entity_id'?: number;
    /**
     * Global currency code.
     * @type {string}
     * @memberof SalesDataInvoiceInterface
     */
    'global_currency_code'?: string;
    /**
     * Grand total.
     * @type {number}
     * @memberof SalesDataInvoiceInterface
     */
    'grand_total'?: number;
    /**
     * Discount tax compensation amount.
     * @type {number}
     * @memberof SalesDataInvoiceInterface
     */
    'discount_tax_compensation_amount'?: number;
    /**
     * Increment ID.
     * @type {string}
     * @memberof SalesDataInvoiceInterface
     */
    'increment_id'?: string;
    /**
     * Is-used-for-refund flag value.
     * @type {number}
     * @memberof SalesDataInvoiceInterface
     */
    'is_used_for_refund'?: number;
    /**
     * Order currency code.
     * @type {string}
     * @memberof SalesDataInvoiceInterface
     */
    'order_currency_code'?: string;
    /**
     * Order ID.
     * @type {number}
     * @memberof SalesDataInvoiceInterface
     */
    'order_id': number;
    /**
     * Shipping address ID.
     * @type {number}
     * @memberof SalesDataInvoiceInterface
     */
    'shipping_address_id'?: number;
    /**
     * Shipping amount.
     * @type {number}
     * @memberof SalesDataInvoiceInterface
     */
    'shipping_amount'?: number;
    /**
     * Shipping discount tax compensation amount.
     * @type {number}
     * @memberof SalesDataInvoiceInterface
     */
    'shipping_discount_tax_compensation_amount'?: number;
    /**
     * Shipping including tax.
     * @type {number}
     * @memberof SalesDataInvoiceInterface
     */
    'shipping_incl_tax'?: number;
    /**
     * Shipping tax amount.
     * @type {number}
     * @memberof SalesDataInvoiceInterface
     */
    'shipping_tax_amount'?: number;
    /**
     * State.
     * @type {number}
     * @memberof SalesDataInvoiceInterface
     */
    'state'?: number;
    /**
     * Store currency code.
     * @type {string}
     * @memberof SalesDataInvoiceInterface
     */
    'store_currency_code'?: string;
    /**
     * Store ID.
     * @type {number}
     * @memberof SalesDataInvoiceInterface
     */
    'store_id'?: number;
    /**
     * Store-to-base rate.
     * @type {number}
     * @memberof SalesDataInvoiceInterface
     */
    'store_to_base_rate'?: number;
    /**
     * Store-to-order rate.
     * @type {number}
     * @memberof SalesDataInvoiceInterface
     */
    'store_to_order_rate'?: number;
    /**
     * Subtotal.
     * @type {number}
     * @memberof SalesDataInvoiceInterface
     */
    'subtotal'?: number;
    /**
     * Subtotal including tax.
     * @type {number}
     * @memberof SalesDataInvoiceInterface
     */
    'subtotal_incl_tax'?: number;
    /**
     * Tax amount.
     * @type {number}
     * @memberof SalesDataInvoiceInterface
     */
    'tax_amount'?: number;
    /**
     * Total quantity.
     * @type {number}
     * @memberof SalesDataInvoiceInterface
     */
    'total_qty': number;
    /**
     * Transaction ID.
     * @type {string}
     * @memberof SalesDataInvoiceInterface
     */
    'transaction_id'?: string;
    /**
     * Updated-at timestamp.
     * @type {string}
     * @memberof SalesDataInvoiceInterface
     */
    'updated_at'?: string;
    /**
     * Array of invoice items.
     * @type {Array<SalesDataInvoiceItemInterface>}
     * @memberof SalesDataInvoiceInterface
     */
    'items': Array<SalesDataInvoiceItemInterface>;
    /**
     * Array of any invoice comments. Otherwise, null.
     * @type {Array<SalesDataInvoiceCommentInterface>}
     * @memberof SalesDataInvoiceInterface
     */
    'comments'?: Array<SalesDataInvoiceCommentInterface>;
    /**
     * 
     * @type {SalesDataInvoiceExtensionInterface}
     * @memberof SalesDataInvoiceInterface
     */
    'extension_attributes'?: SalesDataInvoiceExtensionInterface;
}
/**
 * Input argument for invoice creation Interface InvoiceItemCreationInterface
 * @export
 * @interface SalesDataInvoiceItemCreationInterface
 */
export interface SalesDataInvoiceItemCreationInterface {
    /**
     * ExtensionInterface class for @see \\Magento\\Sales\\Api\\Data\\InvoiceItemCreationInterface
     * @type {object}
     * @memberof SalesDataInvoiceItemCreationInterface
     */
    'extension_attributes'?: object;
    /**
     * Order item ID.
     * @type {number}
     * @memberof SalesDataInvoiceItemCreationInterface
     */
    'order_item_id': number;
    /**
     * Quantity.
     * @type {number}
     * @memberof SalesDataInvoiceItemCreationInterface
     */
    'qty': number;
}
/**
 * ExtensionInterface class for @see \\Magento\\Sales\\Api\\Data\\InvoiceItemInterface
 * @export
 * @interface SalesDataInvoiceItemExtensionInterface
 */
export interface SalesDataInvoiceItemExtensionInterface {
    /**
     * 
     * @type {Array<string>}
     * @memberof SalesDataInvoiceItemExtensionInterface
     */
    'vertex_tax_codes'?: Array<string>;
    /**
     * 
     * @type {Array<string>}
     * @memberof SalesDataInvoiceItemExtensionInterface
     */
    'invoice_text_codes'?: Array<string>;
    /**
     * 
     * @type {Array<string>}
     * @memberof SalesDataInvoiceItemExtensionInterface
     */
    'tax_codes'?: Array<string>;
}
/**
 * Invoice item interface. An invoice is a record of the receipt of payment for an order. An invoice item is a purchased item in an invoice.
 * @export
 * @interface SalesDataInvoiceItemInterface
 */
export interface SalesDataInvoiceItemInterface {
    /**
     * Additional data.
     * @type {string}
     * @memberof SalesDataInvoiceItemInterface
     */
    'additional_data'?: string;
    /**
     * Base cost.
     * @type {number}
     * @memberof SalesDataInvoiceItemInterface
     */
    'base_cost'?: number;
    /**
     * Base discount amount.
     * @type {number}
     * @memberof SalesDataInvoiceItemInterface
     */
    'base_discount_amount'?: number;
    /**
     * Base discount tax compensation amount.
     * @type {number}
     * @memberof SalesDataInvoiceItemInterface
     */
    'base_discount_tax_compensation_amount'?: number;
    /**
     * Base price.
     * @type {number}
     * @memberof SalesDataInvoiceItemInterface
     */
    'base_price'?: number;
    /**
     * Base price including tax.
     * @type {number}
     * @memberof SalesDataInvoiceItemInterface
     */
    'base_price_incl_tax'?: number;
    /**
     * Base row total.
     * @type {number}
     * @memberof SalesDataInvoiceItemInterface
     */
    'base_row_total'?: number;
    /**
     * Base row total including tax.
     * @type {number}
     * @memberof SalesDataInvoiceItemInterface
     */
    'base_row_total_incl_tax'?: number;
    /**
     * Base tax amount.
     * @type {number}
     * @memberof SalesDataInvoiceItemInterface
     */
    'base_tax_amount'?: number;
    /**
     * Description.
     * @type {string}
     * @memberof SalesDataInvoiceItemInterface
     */
    'description'?: string;
    /**
     * Discount amount.
     * @type {number}
     * @memberof SalesDataInvoiceItemInterface
     */
    'discount_amount'?: number;
    /**
     * Invoice item ID.
     * @type {number}
     * @memberof SalesDataInvoiceItemInterface
     */
    'entity_id'?: number;
    /**
     * Discount tax compensation amount.
     * @type {number}
     * @memberof SalesDataInvoiceItemInterface
     */
    'discount_tax_compensation_amount'?: number;
    /**
     * Name.
     * @type {string}
     * @memberof SalesDataInvoiceItemInterface
     */
    'name'?: string;
    /**
     * Parent ID.
     * @type {number}
     * @memberof SalesDataInvoiceItemInterface
     */
    'parent_id'?: number;
    /**
     * Price.
     * @type {number}
     * @memberof SalesDataInvoiceItemInterface
     */
    'price'?: number;
    /**
     * Price including tax.
     * @type {number}
     * @memberof SalesDataInvoiceItemInterface
     */
    'price_incl_tax'?: number;
    /**
     * Product ID.
     * @type {number}
     * @memberof SalesDataInvoiceItemInterface
     */
    'product_id'?: number;
    /**
     * Row total.
     * @type {number}
     * @memberof SalesDataInvoiceItemInterface
     */
    'row_total'?: number;
    /**
     * Row total including tax.
     * @type {number}
     * @memberof SalesDataInvoiceItemInterface
     */
    'row_total_incl_tax'?: number;
    /**
     * SKU.
     * @type {string}
     * @memberof SalesDataInvoiceItemInterface
     */
    'sku': string;
    /**
     * Tax amount.
     * @type {number}
     * @memberof SalesDataInvoiceItemInterface
     */
    'tax_amount'?: number;
    /**
     * 
     * @type {SalesDataInvoiceItemExtensionInterface}
     * @memberof SalesDataInvoiceItemInterface
     */
    'extension_attributes'?: SalesDataInvoiceItemExtensionInterface;
    /**
     * Order item ID.
     * @type {number}
     * @memberof SalesDataInvoiceItemInterface
     */
    'order_item_id': number;
    /**
     * Quantity.
     * @type {number}
     * @memberof SalesDataInvoiceItemInterface
     */
    'qty': number;
}
/**
 * Invoice search result interface. An invoice is a record of the receipt of payment for an order.
 * @export
 * @interface SalesDataInvoiceSearchResultInterface
 */
export interface SalesDataInvoiceSearchResultInterface {
    /**
     * Array of collection items.
     * @type {Array<SalesDataInvoiceInterface>}
     * @memberof SalesDataInvoiceSearchResultInterface
     */
    'items': Array<SalesDataInvoiceInterface>;
    /**
     * 
     * @type {FrameworkSearchCriteriaInterface}
     * @memberof SalesDataInvoiceSearchResultInterface
     */
    'search_criteria': FrameworkSearchCriteriaInterface;
    /**
     * Total count.
     * @type {number}
     * @memberof SalesDataInvoiceSearchResultInterface
     */
    'total_count': number;
}
/**
 * ExtensionInterface class for @see \\Magento\\Sales\\Api\\Data\\OrderAddressInterface
 * @export
 * @interface SalesDataOrderAddressExtensionInterface
 */
export interface SalesDataOrderAddressExtensionInterface {
    /**
     * 
     * @type {Array<FrameworkAttributeInterface>}
     * @memberof SalesDataOrderAddressExtensionInterface
     */
    'checkout_fields'?: Array<FrameworkAttributeInterface>;
}
/**
 * Order address interface. An order is a document that a web store issues to a customer. Magento generates a sales order that lists the product items, billing and shipping addresses, and shipping and payment methods. A corresponding external document, known as a purchase order, is emailed to the customer.
 * @export
 * @interface SalesDataOrderAddressInterface
 */
export interface SalesDataOrderAddressInterface {
    /**
     * Address type.
     * @type {string}
     * @memberof SalesDataOrderAddressInterface
     */
    'address_type': string;
    /**
     * City.
     * @type {string}
     * @memberof SalesDataOrderAddressInterface
     */
    'city': string;
    /**
     * Company.
     * @type {string}
     * @memberof SalesDataOrderAddressInterface
     */
    'company'?: string;
    /**
     * Country ID.
     * @type {string}
     * @memberof SalesDataOrderAddressInterface
     */
    'country_id': string;
    /**
     * Country address ID.
     * @type {number}
     * @memberof SalesDataOrderAddressInterface
     */
    'customer_address_id'?: number;
    /**
     * Customer ID.
     * @type {number}
     * @memberof SalesDataOrderAddressInterface
     */
    'customer_id'?: number;
    /**
     * Email address.
     * @type {string}
     * @memberof SalesDataOrderAddressInterface
     */
    'email'?: string;
    /**
     * Order address ID.
     * @type {number}
     * @memberof SalesDataOrderAddressInterface
     */
    'entity_id'?: number;
    /**
     * Fax number.
     * @type {string}
     * @memberof SalesDataOrderAddressInterface
     */
    'fax'?: string;
    /**
     * First name.
     * @type {string}
     * @memberof SalesDataOrderAddressInterface
     */
    'firstname': string;
    /**
     * Last name.
     * @type {string}
     * @memberof SalesDataOrderAddressInterface
     */
    'lastname': string;
    /**
     * Middle name.
     * @type {string}
     * @memberof SalesDataOrderAddressInterface
     */
    'middlename'?: string;
    /**
     * Parent ID.
     * @type {number}
     * @memberof SalesDataOrderAddressInterface
     */
    'parent_id'?: number;
    /**
     * Postal code.
     * @type {string}
     * @memberof SalesDataOrderAddressInterface
     */
    'postcode': string;
    /**
     * Prefix.
     * @type {string}
     * @memberof SalesDataOrderAddressInterface
     */
    'prefix'?: string;
    /**
     * Region.
     * @type {string}
     * @memberof SalesDataOrderAddressInterface
     */
    'region'?: string;
    /**
     * Region code.
     * @type {string}
     * @memberof SalesDataOrderAddressInterface
     */
    'region_code'?: string;
    /**
     * Region ID.
     * @type {number}
     * @memberof SalesDataOrderAddressInterface
     */
    'region_id'?: number;
    /**
     * Array of any street values. Otherwise, null.
     * @type {Array<string>}
     * @memberof SalesDataOrderAddressInterface
     */
    'street'?: Array<string>;
    /**
     * Suffix.
     * @type {string}
     * @memberof SalesDataOrderAddressInterface
     */
    'suffix'?: string;
    /**
     * Telephone number.
     * @type {string}
     * @memberof SalesDataOrderAddressInterface
     */
    'telephone': string;
    /**
     * VAT ID.
     * @type {string}
     * @memberof SalesDataOrderAddressInterface
     */
    'vat_id'?: string;
    /**
     * VAT-is-valid flag value.
     * @type {number}
     * @memberof SalesDataOrderAddressInterface
     */
    'vat_is_valid'?: number;
    /**
     * VAT request date.
     * @type {string}
     * @memberof SalesDataOrderAddressInterface
     */
    'vat_request_date'?: string;
    /**
     * VAT request ID.
     * @type {string}
     * @memberof SalesDataOrderAddressInterface
     */
    'vat_request_id'?: string;
    /**
     * VAT-request-success flag value.
     * @type {number}
     * @memberof SalesDataOrderAddressInterface
     */
    'vat_request_success'?: number;
    /**
     * 
     * @type {SalesDataOrderAddressExtensionInterface}
     * @memberof SalesDataOrderAddressInterface
     */
    'extension_attributes'?: SalesDataOrderAddressExtensionInterface;
}
/**
 * ExtensionInterface class for @see \\Magento\\Sales\\Api\\Data\\OrderInterface
 * @export
 * @interface SalesDataOrderExtensionInterface
 */
export interface SalesDataOrderExtensionInterface {
    /**
     * 
     * @type {Array<SalesDataShippingAssignmentInterface>}
     * @memberof SalesDataOrderExtensionInterface
     */
    'shipping_assignments'?: Array<SalesDataShippingAssignmentInterface>;
    /**
     * 
     * @type {Array<PaymentDataPaymentAdditionalInfoInterface>}
     * @memberof SalesDataOrderExtensionInterface
     */
    'payment_additional_info'?: Array<PaymentDataPaymentAdditionalInfoInterface>;
    /**
     * 
     * @type {Array<TaxDataOrderTaxDetailsAppliedTaxInterface>}
     * @memberof SalesDataOrderExtensionInterface
     */
    'applied_taxes'?: Array<TaxDataOrderTaxDetailsAppliedTaxInterface>;
    /**
     * 
     * @type {Array<TaxDataOrderTaxDetailsItemInterface>}
     * @memberof SalesDataOrderExtensionInterface
     */
    'item_applied_taxes'?: Array<TaxDataOrderTaxDetailsItemInterface>;
    /**
     * 
     * @type {boolean}
     * @memberof SalesDataOrderExtensionInterface
     */
    'converting_from_quote'?: boolean;
    /**
     * 
     * @type {CompanyDataCompanyOrderInterface}
     * @memberof SalesDataOrderExtensionInterface
     */
    'company_order_attributes'?: CompanyDataCompanyOrderInterface;
    /**
     * 
     * @type {number}
     * @memberof SalesDataOrderExtensionInterface
     */
    'base_customer_balance_amount'?: number;
    /**
     * 
     * @type {number}
     * @memberof SalesDataOrderExtensionInterface
     */
    'customer_balance_amount'?: number;
    /**
     * 
     * @type {number}
     * @memberof SalesDataOrderExtensionInterface
     */
    'base_customer_balance_invoiced'?: number;
    /**
     * 
     * @type {number}
     * @memberof SalesDataOrderExtensionInterface
     */
    'customer_balance_invoiced'?: number;
    /**
     * 
     * @type {number}
     * @memberof SalesDataOrderExtensionInterface
     */
    'base_customer_balance_refunded'?: number;
    /**
     * 
     * @type {number}
     * @memberof SalesDataOrderExtensionInterface
     */
    'customer_balance_refunded'?: number;
    /**
     * 
     * @type {number}
     * @memberof SalesDataOrderExtensionInterface
     */
    'base_customer_balance_total_refunded'?: number;
    /**
     * 
     * @type {number}
     * @memberof SalesDataOrderExtensionInterface
     */
    'customer_balance_total_refunded'?: number;
    /**
     * 
     * @type {Array<GiftCardAccountDataGiftCardInterface>}
     * @memberof SalesDataOrderExtensionInterface
     */
    'gift_cards'?: Array<GiftCardAccountDataGiftCardInterface>;
    /**
     * 
     * @type {number}
     * @memberof SalesDataOrderExtensionInterface
     */
    'base_gift_cards_amount'?: number;
    /**
     * 
     * @type {number}
     * @memberof SalesDataOrderExtensionInterface
     */
    'gift_cards_amount'?: number;
    /**
     * 
     * @type {number}
     * @memberof SalesDataOrderExtensionInterface
     */
    'base_gift_cards_invoiced'?: number;
    /**
     * 
     * @type {number}
     * @memberof SalesDataOrderExtensionInterface
     */
    'gift_cards_invoiced'?: number;
    /**
     * 
     * @type {number}
     * @memberof SalesDataOrderExtensionInterface
     */
    'base_gift_cards_refunded'?: number;
    /**
     * 
     * @type {number}
     * @memberof SalesDataOrderExtensionInterface
     */
    'gift_cards_refunded'?: number;
    /**
     * 
     * @type {GiftMessageDataMessageInterface}
     * @memberof SalesDataOrderExtensionInterface
     */
    'gift_message'?: GiftMessageDataMessageInterface;
    /**
     * 
     * @type {string}
     * @memberof SalesDataOrderExtensionInterface
     */
    'gw_id'?: string;
    /**
     * 
     * @type {string}
     * @memberof SalesDataOrderExtensionInterface
     */
    'gw_allow_gift_receipt'?: string;
    /**
     * 
     * @type {string}
     * @memberof SalesDataOrderExtensionInterface
     */
    'gw_add_card'?: string;
    /**
     * 
     * @type {string}
     * @memberof SalesDataOrderExtensionInterface
     */
    'gw_base_price'?: string;
    /**
     * 
     * @type {string}
     * @memberof SalesDataOrderExtensionInterface
     */
    'gw_price'?: string;
    /**
     * 
     * @type {string}
     * @memberof SalesDataOrderExtensionInterface
     */
    'gw_items_base_price'?: string;
    /**
     * 
     * @type {string}
     * @memberof SalesDataOrderExtensionInterface
     */
    'gw_items_price'?: string;
    /**
     * 
     * @type {string}
     * @memberof SalesDataOrderExtensionInterface
     */
    'gw_card_base_price'?: string;
    /**
     * 
     * @type {string}
     * @memberof SalesDataOrderExtensionInterface
     */
    'gw_card_price'?: string;
    /**
     * 
     * @type {string}
     * @memberof SalesDataOrderExtensionInterface
     */
    'gw_base_tax_amount'?: string;
    /**
     * 
     * @type {string}
     * @memberof SalesDataOrderExtensionInterface
     */
    'gw_tax_amount'?: string;
    /**
     * 
     * @type {string}
     * @memberof SalesDataOrderExtensionInterface
     */
    'gw_items_base_tax_amount'?: string;
    /**
     * 
     * @type {string}
     * @memberof SalesDataOrderExtensionInterface
     */
    'gw_items_tax_amount'?: string;
    /**
     * 
     * @type {string}
     * @memberof SalesDataOrderExtensionInterface
     */
    'gw_card_base_tax_amount'?: string;
    /**
     * 
     * @type {string}
     * @memberof SalesDataOrderExtensionInterface
     */
    'gw_card_tax_amount'?: string;
    /**
     * 
     * @type {string}
     * @memberof SalesDataOrderExtensionInterface
     */
    'gw_base_price_incl_tax'?: string;
    /**
     * 
     * @type {string}
     * @memberof SalesDataOrderExtensionInterface
     */
    'gw_price_incl_tax'?: string;
    /**
     * 
     * @type {string}
     * @memberof SalesDataOrderExtensionInterface
     */
    'gw_items_base_price_incl_tax'?: string;
    /**
     * 
     * @type {string}
     * @memberof SalesDataOrderExtensionInterface
     */
    'gw_items_price_incl_tax'?: string;
    /**
     * 
     * @type {string}
     * @memberof SalesDataOrderExtensionInterface
     */
    'gw_card_base_price_incl_tax'?: string;
    /**
     * 
     * @type {string}
     * @memberof SalesDataOrderExtensionInterface
     */
    'gw_card_price_incl_tax'?: string;
    /**
     * 
     * @type {string}
     * @memberof SalesDataOrderExtensionInterface
     */
    'gw_base_price_invoiced'?: string;
    /**
     * 
     * @type {string}
     * @memberof SalesDataOrderExtensionInterface
     */
    'gw_price_invoiced'?: string;
    /**
     * 
     * @type {string}
     * @memberof SalesDataOrderExtensionInterface
     */
    'gw_items_base_price_invoiced'?: string;
    /**
     * 
     * @type {string}
     * @memberof SalesDataOrderExtensionInterface
     */
    'gw_items_price_invoiced'?: string;
    /**
     * 
     * @type {string}
     * @memberof SalesDataOrderExtensionInterface
     */
    'gw_card_base_price_invoiced'?: string;
    /**
     * 
     * @type {string}
     * @memberof SalesDataOrderExtensionInterface
     */
    'gw_card_price_invoiced'?: string;
    /**
     * 
     * @type {string}
     * @memberof SalesDataOrderExtensionInterface
     */
    'gw_base_tax_amount_invoiced'?: string;
    /**
     * 
     * @type {string}
     * @memberof SalesDataOrderExtensionInterface
     */
    'gw_tax_amount_invoiced'?: string;
    /**
     * 
     * @type {string}
     * @memberof SalesDataOrderExtensionInterface
     */
    'gw_items_base_tax_invoiced'?: string;
    /**
     * 
     * @type {string}
     * @memberof SalesDataOrderExtensionInterface
     */
    'gw_items_tax_invoiced'?: string;
    /**
     * 
     * @type {string}
     * @memberof SalesDataOrderExtensionInterface
     */
    'gw_card_base_tax_invoiced'?: string;
    /**
     * 
     * @type {string}
     * @memberof SalesDataOrderExtensionInterface
     */
    'gw_card_tax_invoiced'?: string;
    /**
     * 
     * @type {string}
     * @memberof SalesDataOrderExtensionInterface
     */
    'gw_base_price_refunded'?: string;
    /**
     * 
     * @type {string}
     * @memberof SalesDataOrderExtensionInterface
     */
    'gw_price_refunded'?: string;
    /**
     * 
     * @type {string}
     * @memberof SalesDataOrderExtensionInterface
     */
    'gw_items_base_price_refunded'?: string;
    /**
     * 
     * @type {string}
     * @memberof SalesDataOrderExtensionInterface
     */
    'gw_items_price_refunded'?: string;
    /**
     * 
     * @type {string}
     * @memberof SalesDataOrderExtensionInterface
     */
    'gw_card_base_price_refunded'?: string;
    /**
     * 
     * @type {string}
     * @memberof SalesDataOrderExtensionInterface
     */
    'gw_card_price_refunded'?: string;
    /**
     * 
     * @type {string}
     * @memberof SalesDataOrderExtensionInterface
     */
    'gw_base_tax_amount_refunded'?: string;
    /**
     * 
     * @type {string}
     * @memberof SalesDataOrderExtensionInterface
     */
    'gw_tax_amount_refunded'?: string;
    /**
     * 
     * @type {string}
     * @memberof SalesDataOrderExtensionInterface
     */
    'gw_items_base_tax_refunded'?: string;
    /**
     * 
     * @type {string}
     * @memberof SalesDataOrderExtensionInterface
     */
    'gw_items_tax_refunded'?: string;
    /**
     * 
     * @type {string}
     * @memberof SalesDataOrderExtensionInterface
     */
    'gw_card_base_tax_refunded'?: string;
    /**
     * 
     * @type {string}
     * @memberof SalesDataOrderExtensionInterface
     */
    'gw_card_tax_refunded'?: string;
    /**
     * 
     * @type {number}
     * @memberof SalesDataOrderExtensionInterface
     */
    'reward_points_balance'?: number;
    /**
     * 
     * @type {number}
     * @memberof SalesDataOrderExtensionInterface
     */
    'reward_currency_amount'?: number;
    /**
     * 
     * @type {number}
     * @memberof SalesDataOrderExtensionInterface
     */
    'base_reward_currency_amount'?: number;
    /**
     * 
     * @type {string}
     * @memberof SalesDataOrderExtensionInterface
     */
    'amazon_order_reference_id'?: string;
}
/**
 * Order interface. An order is a document that a web store issues to a customer. Magento generates a sales order that lists the product items, billing and shipping addresses, and shipping and payment methods. A corresponding external document, known as a purchase order, is emailed to the customer.
 * @export
 * @interface SalesDataOrderInterface
 */
export interface SalesDataOrderInterface {
    /**
     * Negative adjustment value.
     * @type {number}
     * @memberof SalesDataOrderInterface
     */
    'adjustment_negative'?: number;
    /**
     * Positive adjustment value.
     * @type {number}
     * @memberof SalesDataOrderInterface
     */
    'adjustment_positive'?: number;
    /**
     * Applied rule IDs.
     * @type {string}
     * @memberof SalesDataOrderInterface
     */
    'applied_rule_ids'?: string;
    /**
     * Base negative adjustment value.
     * @type {number}
     * @memberof SalesDataOrderInterface
     */
    'base_adjustment_negative'?: number;
    /**
     * Base positive adjustment value.
     * @type {number}
     * @memberof SalesDataOrderInterface
     */
    'base_adjustment_positive'?: number;
    /**
     * Base currency code.
     * @type {string}
     * @memberof SalesDataOrderInterface
     */
    'base_currency_code'?: string;
    /**
     * Base discount amount.
     * @type {number}
     * @memberof SalesDataOrderInterface
     */
    'base_discount_amount'?: number;
    /**
     * Base discount canceled.
     * @type {number}
     * @memberof SalesDataOrderInterface
     */
    'base_discount_canceled'?: number;
    /**
     * Base discount invoiced.
     * @type {number}
     * @memberof SalesDataOrderInterface
     */
    'base_discount_invoiced'?: number;
    /**
     * Base discount refunded.
     * @type {number}
     * @memberof SalesDataOrderInterface
     */
    'base_discount_refunded'?: number;
    /**
     * Base grand total.
     * @type {number}
     * @memberof SalesDataOrderInterface
     */
    'base_grand_total': number;
    /**
     * Base discount tax compensation amount.
     * @type {number}
     * @memberof SalesDataOrderInterface
     */
    'base_discount_tax_compensation_amount'?: number;
    /**
     * Base discount tax compensation invoiced.
     * @type {number}
     * @memberof SalesDataOrderInterface
     */
    'base_discount_tax_compensation_invoiced'?: number;
    /**
     * Base discount tax compensation refunded.
     * @type {number}
     * @memberof SalesDataOrderInterface
     */
    'base_discount_tax_compensation_refunded'?: number;
    /**
     * Base shipping amount.
     * @type {number}
     * @memberof SalesDataOrderInterface
     */
    'base_shipping_amount'?: number;
    /**
     * Base shipping canceled.
     * @type {number}
     * @memberof SalesDataOrderInterface
     */
    'base_shipping_canceled'?: number;
    /**
     * Base shipping discount amount.
     * @type {number}
     * @memberof SalesDataOrderInterface
     */
    'base_shipping_discount_amount'?: number;
    /**
     * Base shipping discount tax compensation amount.
     * @type {number}
     * @memberof SalesDataOrderInterface
     */
    'base_shipping_discount_tax_compensation_amnt'?: number;
    /**
     * Base shipping including tax.
     * @type {number}
     * @memberof SalesDataOrderInterface
     */
    'base_shipping_incl_tax'?: number;
    /**
     * Base shipping invoiced.
     * @type {number}
     * @memberof SalesDataOrderInterface
     */
    'base_shipping_invoiced'?: number;
    /**
     * Base shipping refunded.
     * @type {number}
     * @memberof SalesDataOrderInterface
     */
    'base_shipping_refunded'?: number;
    /**
     * Base shipping tax amount.
     * @type {number}
     * @memberof SalesDataOrderInterface
     */
    'base_shipping_tax_amount'?: number;
    /**
     * Base shipping tax refunded.
     * @type {number}
     * @memberof SalesDataOrderInterface
     */
    'base_shipping_tax_refunded'?: number;
    /**
     * Base subtotal.
     * @type {number}
     * @memberof SalesDataOrderInterface
     */
    'base_subtotal'?: number;
    /**
     * Base subtotal canceled.
     * @type {number}
     * @memberof SalesDataOrderInterface
     */
    'base_subtotal_canceled'?: number;
    /**
     * Base subtotal including tax.
     * @type {number}
     * @memberof SalesDataOrderInterface
     */
    'base_subtotal_incl_tax'?: number;
    /**
     * Base subtotal invoiced.
     * @type {number}
     * @memberof SalesDataOrderInterface
     */
    'base_subtotal_invoiced'?: number;
    /**
     * Base subtotal refunded.
     * @type {number}
     * @memberof SalesDataOrderInterface
     */
    'base_subtotal_refunded'?: number;
    /**
     * Base tax amount.
     * @type {number}
     * @memberof SalesDataOrderInterface
     */
    'base_tax_amount'?: number;
    /**
     * Base tax canceled.
     * @type {number}
     * @memberof SalesDataOrderInterface
     */
    'base_tax_canceled'?: number;
    /**
     * Base tax invoiced.
     * @type {number}
     * @memberof SalesDataOrderInterface
     */
    'base_tax_invoiced'?: number;
    /**
     * Base tax refunded.
     * @type {number}
     * @memberof SalesDataOrderInterface
     */
    'base_tax_refunded'?: number;
    /**
     * Base total canceled.
     * @type {number}
     * @memberof SalesDataOrderInterface
     */
    'base_total_canceled'?: number;
    /**
     * Base total due.
     * @type {number}
     * @memberof SalesDataOrderInterface
     */
    'base_total_due'?: number;
    /**
     * Base total invoiced.
     * @type {number}
     * @memberof SalesDataOrderInterface
     */
    'base_total_invoiced'?: number;
    /**
     * Base total invoiced cost.
     * @type {number}
     * @memberof SalesDataOrderInterface
     */
    'base_total_invoiced_cost'?: number;
    /**
     * Base total offline refunded.
     * @type {number}
     * @memberof SalesDataOrderInterface
     */
    'base_total_offline_refunded'?: number;
    /**
     * Base total online refunded.
     * @type {number}
     * @memberof SalesDataOrderInterface
     */
    'base_total_online_refunded'?: number;
    /**
     * Base total paid.
     * @type {number}
     * @memberof SalesDataOrderInterface
     */
    'base_total_paid'?: number;
    /**
     * Base total quantity ordered.
     * @type {number}
     * @memberof SalesDataOrderInterface
     */
    'base_total_qty_ordered'?: number;
    /**
     * Base total refunded.
     * @type {number}
     * @memberof SalesDataOrderInterface
     */
    'base_total_refunded'?: number;
    /**
     * Base-to-global rate.
     * @type {number}
     * @memberof SalesDataOrderInterface
     */
    'base_to_global_rate'?: number;
    /**
     * Base-to-order rate.
     * @type {number}
     * @memberof SalesDataOrderInterface
     */
    'base_to_order_rate'?: number;
    /**
     * Billing address ID.
     * @type {number}
     * @memberof SalesDataOrderInterface
     */
    'billing_address_id'?: number;
    /**
     * Can-ship-partially flag value.
     * @type {number}
     * @memberof SalesDataOrderInterface
     */
    'can_ship_partially'?: number;
    /**
     * Can-ship-partially-item flag value.
     * @type {number}
     * @memberof SalesDataOrderInterface
     */
    'can_ship_partially_item'?: number;
    /**
     * Coupon code.
     * @type {string}
     * @memberof SalesDataOrderInterface
     */
    'coupon_code'?: string;
    /**
     * Created-at timestamp.
     * @type {string}
     * @memberof SalesDataOrderInterface
     */
    'created_at'?: string;
    /**
     * Customer date-of-birth (DOB).
     * @type {string}
     * @memberof SalesDataOrderInterface
     */
    'customer_dob'?: string;
    /**
     * Customer email address.
     * @type {string}
     * @memberof SalesDataOrderInterface
     */
    'customer_email': string;
    /**
     * Customer first name.
     * @type {string}
     * @memberof SalesDataOrderInterface
     */
    'customer_firstname'?: string;
    /**
     * Customer gender.
     * @type {number}
     * @memberof SalesDataOrderInterface
     */
    'customer_gender'?: number;
    /**
     * Customer group ID.
     * @type {number}
     * @memberof SalesDataOrderInterface
     */
    'customer_group_id'?: number;
    /**
     * Customer ID.
     * @type {number}
     * @memberof SalesDataOrderInterface
     */
    'customer_id'?: number;
    /**
     * Customer-is-guest flag value.
     * @type {number}
     * @memberof SalesDataOrderInterface
     */
    'customer_is_guest'?: number;
    /**
     * Customer last name.
     * @type {string}
     * @memberof SalesDataOrderInterface
     */
    'customer_lastname'?: string;
    /**
     * Customer middle name.
     * @type {string}
     * @memberof SalesDataOrderInterface
     */
    'customer_middlename'?: string;
    /**
     * Customer note.
     * @type {string}
     * @memberof SalesDataOrderInterface
     */
    'customer_note'?: string;
    /**
     * Customer-note-notify flag value.
     * @type {number}
     * @memberof SalesDataOrderInterface
     */
    'customer_note_notify'?: number;
    /**
     * Customer prefix.
     * @type {string}
     * @memberof SalesDataOrderInterface
     */
    'customer_prefix'?: string;
    /**
     * Customer suffix.
     * @type {string}
     * @memberof SalesDataOrderInterface
     */
    'customer_suffix'?: string;
    /**
     * Customer value-added tax (VAT).
     * @type {string}
     * @memberof SalesDataOrderInterface
     */
    'customer_taxvat'?: string;
    /**
     * Discount amount.
     * @type {number}
     * @memberof SalesDataOrderInterface
     */
    'discount_amount'?: number;
    /**
     * Discount canceled.
     * @type {number}
     * @memberof SalesDataOrderInterface
     */
    'discount_canceled'?: number;
    /**
     * Discount description.
     * @type {string}
     * @memberof SalesDataOrderInterface
     */
    'discount_description'?: string;
    /**
     * Discount invoiced.
     * @type {number}
     * @memberof SalesDataOrderInterface
     */
    'discount_invoiced'?: number;
    /**
     * Discount refunded amount.
     * @type {number}
     * @memberof SalesDataOrderInterface
     */
    'discount_refunded'?: number;
    /**
     * Edit increment value.
     * @type {number}
     * @memberof SalesDataOrderInterface
     */
    'edit_increment'?: number;
    /**
     * Email-sent flag value.
     * @type {number}
     * @memberof SalesDataOrderInterface
     */
    'email_sent'?: number;
    /**
     * Order ID.
     * @type {number}
     * @memberof SalesDataOrderInterface
     */
    'entity_id'?: number;
    /**
     * External customer ID.
     * @type {string}
     * @memberof SalesDataOrderInterface
     */
    'ext_customer_id'?: string;
    /**
     * External order ID.
     * @type {string}
     * @memberof SalesDataOrderInterface
     */
    'ext_order_id'?: string;
    /**
     * Forced-shipment-with-invoice flag value.
     * @type {number}
     * @memberof SalesDataOrderInterface
     */
    'forced_shipment_with_invoice'?: number;
    /**
     * Global currency code.
     * @type {string}
     * @memberof SalesDataOrderInterface
     */
    'global_currency_code'?: string;
    /**
     * Grand total.
     * @type {number}
     * @memberof SalesDataOrderInterface
     */
    'grand_total': number;
    /**
     * Discount tax compensation amount.
     * @type {number}
     * @memberof SalesDataOrderInterface
     */
    'discount_tax_compensation_amount'?: number;
    /**
     * Discount tax compensation invoiced amount.
     * @type {number}
     * @memberof SalesDataOrderInterface
     */
    'discount_tax_compensation_invoiced'?: number;
    /**
     * Discount tax compensation refunded amount.
     * @type {number}
     * @memberof SalesDataOrderInterface
     */
    'discount_tax_compensation_refunded'?: number;
    /**
     * Hold before state.
     * @type {string}
     * @memberof SalesDataOrderInterface
     */
    'hold_before_state'?: string;
    /**
     * Hold before status.
     * @type {string}
     * @memberof SalesDataOrderInterface
     */
    'hold_before_status'?: string;
    /**
     * Increment ID.
     * @type {string}
     * @memberof SalesDataOrderInterface
     */
    'increment_id'?: string;
    /**
     * Is-virtual flag value.
     * @type {number}
     * @memberof SalesDataOrderInterface
     */
    'is_virtual'?: number;
    /**
     * Order currency code.
     * @type {string}
     * @memberof SalesDataOrderInterface
     */
    'order_currency_code'?: string;
    /**
     * Original increment ID.
     * @type {string}
     * @memberof SalesDataOrderInterface
     */
    'original_increment_id'?: string;
    /**
     * Payment authorization amount.
     * @type {number}
     * @memberof SalesDataOrderInterface
     */
    'payment_authorization_amount'?: number;
    /**
     * Payment authorization expiration date.
     * @type {number}
     * @memberof SalesDataOrderInterface
     */
    'payment_auth_expiration'?: number;
    /**
     * Protect code.
     * @type {string}
     * @memberof SalesDataOrderInterface
     */
    'protect_code'?: string;
    /**
     * Quote address ID.
     * @type {number}
     * @memberof SalesDataOrderInterface
     */
    'quote_address_id'?: number;
    /**
     * Quote ID.
     * @type {number}
     * @memberof SalesDataOrderInterface
     */
    'quote_id'?: number;
    /**
     * Relation child ID.
     * @type {string}
     * @memberof SalesDataOrderInterface
     */
    'relation_child_id'?: string;
    /**
     * Relation child real ID.
     * @type {string}
     * @memberof SalesDataOrderInterface
     */
    'relation_child_real_id'?: string;
    /**
     * Relation parent ID.
     * @type {string}
     * @memberof SalesDataOrderInterface
     */
    'relation_parent_id'?: string;
    /**
     * Relation parent real ID.
     * @type {string}
     * @memberof SalesDataOrderInterface
     */
    'relation_parent_real_id'?: string;
    /**
     * Remote IP address.
     * @type {string}
     * @memberof SalesDataOrderInterface
     */
    'remote_ip'?: string;
    /**
     * Shipping amount.
     * @type {number}
     * @memberof SalesDataOrderInterface
     */
    'shipping_amount'?: number;
    /**
     * Shipping canceled amount.
     * @type {number}
     * @memberof SalesDataOrderInterface
     */
    'shipping_canceled'?: number;
    /**
     * Shipping description.
     * @type {string}
     * @memberof SalesDataOrderInterface
     */
    'shipping_description'?: string;
    /**
     * Shipping discount amount.
     * @type {number}
     * @memberof SalesDataOrderInterface
     */
    'shipping_discount_amount'?: number;
    /**
     * Shipping discount tax compensation amount.
     * @type {number}
     * @memberof SalesDataOrderInterface
     */
    'shipping_discount_tax_compensation_amount'?: number;
    /**
     * Shipping including tax amount.
     * @type {number}
     * @memberof SalesDataOrderInterface
     */
    'shipping_incl_tax'?: number;
    /**
     * Shipping invoiced amount.
     * @type {number}
     * @memberof SalesDataOrderInterface
     */
    'shipping_invoiced'?: number;
    /**
     * Shipping refunded amount.
     * @type {number}
     * @memberof SalesDataOrderInterface
     */
    'shipping_refunded'?: number;
    /**
     * Shipping tax amount.
     * @type {number}
     * @memberof SalesDataOrderInterface
     */
    'shipping_tax_amount'?: number;
    /**
     * Shipping tax refunded amount.
     * @type {number}
     * @memberof SalesDataOrderInterface
     */
    'shipping_tax_refunded'?: number;
    /**
     * State.
     * @type {string}
     * @memberof SalesDataOrderInterface
     */
    'state'?: string;
    /**
     * Status.
     * @type {string}
     * @memberof SalesDataOrderInterface
     */
    'status'?: string;
    /**
     * Store currency code.
     * @type {string}
     * @memberof SalesDataOrderInterface
     */
    'store_currency_code'?: string;
    /**
     * Store ID.
     * @type {number}
     * @memberof SalesDataOrderInterface
     */
    'store_id'?: number;
    /**
     * Store name.
     * @type {string}
     * @memberof SalesDataOrderInterface
     */
    'store_name'?: string;
    /**
     * Store-to-base rate.
     * @type {number}
     * @memberof SalesDataOrderInterface
     */
    'store_to_base_rate'?: number;
    /**
     * Store-to-order rate.
     * @type {number}
     * @memberof SalesDataOrderInterface
     */
    'store_to_order_rate'?: number;
    /**
     * Subtotal.
     * @type {number}
     * @memberof SalesDataOrderInterface
     */
    'subtotal'?: number;
    /**
     * Subtotal canceled amount.
     * @type {number}
     * @memberof SalesDataOrderInterface
     */
    'subtotal_canceled'?: number;
    /**
     * Subtotal including tax amount.
     * @type {number}
     * @memberof SalesDataOrderInterface
     */
    'subtotal_incl_tax'?: number;
    /**
     * Subtotal invoiced amount.
     * @type {number}
     * @memberof SalesDataOrderInterface
     */
    'subtotal_invoiced'?: number;
    /**
     * Subtotal refunded amount.
     * @type {number}
     * @memberof SalesDataOrderInterface
     */
    'subtotal_refunded'?: number;
    /**
     * Tax amount.
     * @type {number}
     * @memberof SalesDataOrderInterface
     */
    'tax_amount'?: number;
    /**
     * Tax canceled amount.
     * @type {number}
     * @memberof SalesDataOrderInterface
     */
    'tax_canceled'?: number;
    /**
     * Tax invoiced amount.
     * @type {number}
     * @memberof SalesDataOrderInterface
     */
    'tax_invoiced'?: number;
    /**
     * Tax refunded amount.
     * @type {number}
     * @memberof SalesDataOrderInterface
     */
    'tax_refunded'?: number;
    /**
     * Total canceled.
     * @type {number}
     * @memberof SalesDataOrderInterface
     */
    'total_canceled'?: number;
    /**
     * Total due.
     * @type {number}
     * @memberof SalesDataOrderInterface
     */
    'total_due'?: number;
    /**
     * Total invoiced amount.
     * @type {number}
     * @memberof SalesDataOrderInterface
     */
    'total_invoiced'?: number;
    /**
     * Total item count.
     * @type {number}
     * @memberof SalesDataOrderInterface
     */
    'total_item_count'?: number;
    /**
     * Total offline refunded amount.
     * @type {number}
     * @memberof SalesDataOrderInterface
     */
    'total_offline_refunded'?: number;
    /**
     * Total online refunded amount.
     * @type {number}
     * @memberof SalesDataOrderInterface
     */
    'total_online_refunded'?: number;
    /**
     * Total paid.
     * @type {number}
     * @memberof SalesDataOrderInterface
     */
    'total_paid'?: number;
    /**
     * Total quantity ordered.
     * @type {number}
     * @memberof SalesDataOrderInterface
     */
    'total_qty_ordered'?: number;
    /**
     * Total amount refunded.
     * @type {number}
     * @memberof SalesDataOrderInterface
     */
    'total_refunded'?: number;
    /**
     * Updated-at timestamp.
     * @type {string}
     * @memberof SalesDataOrderInterface
     */
    'updated_at'?: string;
    /**
     * Weight.
     * @type {number}
     * @memberof SalesDataOrderInterface
     */
    'weight'?: number;
    /**
     * X-Forwarded-For field value.
     * @type {string}
     * @memberof SalesDataOrderInterface
     */
    'x_forwarded_for'?: string;
    /**
     * Array of items.
     * @type {Array<SalesDataOrderItemInterface>}
     * @memberof SalesDataOrderInterface
     */
    'items': Array<SalesDataOrderItemInterface>;
    /**
     * 
     * @type {SalesDataOrderAddressInterface}
     * @memberof SalesDataOrderInterface
     */
    'billing_address'?: SalesDataOrderAddressInterface;
    /**
     * 
     * @type {SalesDataOrderPaymentInterface}
     * @memberof SalesDataOrderInterface
     */
    'payment'?: SalesDataOrderPaymentInterface;
    /**
     * Array of status histories.
     * @type {Array<SalesDataOrderStatusHistoryInterface>}
     * @memberof SalesDataOrderInterface
     */
    'status_histories'?: Array<SalesDataOrderStatusHistoryInterface>;
    /**
     * 
     * @type {SalesDataOrderExtensionInterface}
     * @memberof SalesDataOrderInterface
     */
    'extension_attributes'?: SalesDataOrderExtensionInterface;
}
/**
 * ExtensionInterface class for @see \\Magento\\Sales\\Api\\Data\\OrderItemInterface
 * @export
 * @interface SalesDataOrderItemExtensionInterface
 */
export interface SalesDataOrderItemExtensionInterface {
    /**
     * 
     * @type {GiftMessageDataMessageInterface}
     * @memberof SalesDataOrderItemExtensionInterface
     */
    'gift_message'?: GiftMessageDataMessageInterface;
    /**
     * 
     * @type {string}
     * @memberof SalesDataOrderItemExtensionInterface
     */
    'gw_id'?: string;
    /**
     * 
     * @type {string}
     * @memberof SalesDataOrderItemExtensionInterface
     */
    'gw_base_price'?: string;
    /**
     * 
     * @type {string}
     * @memberof SalesDataOrderItemExtensionInterface
     */
    'gw_price'?: string;
    /**
     * 
     * @type {string}
     * @memberof SalesDataOrderItemExtensionInterface
     */
    'gw_base_tax_amount'?: string;
    /**
     * 
     * @type {string}
     * @memberof SalesDataOrderItemExtensionInterface
     */
    'gw_tax_amount'?: string;
    /**
     * 
     * @type {string}
     * @memberof SalesDataOrderItemExtensionInterface
     */
    'gw_base_price_invoiced'?: string;
    /**
     * 
     * @type {string}
     * @memberof SalesDataOrderItemExtensionInterface
     */
    'gw_price_invoiced'?: string;
    /**
     * 
     * @type {string}
     * @memberof SalesDataOrderItemExtensionInterface
     */
    'gw_base_tax_amount_invoiced'?: string;
    /**
     * 
     * @type {string}
     * @memberof SalesDataOrderItemExtensionInterface
     */
    'gw_tax_amount_invoiced'?: string;
    /**
     * 
     * @type {string}
     * @memberof SalesDataOrderItemExtensionInterface
     */
    'gw_base_price_refunded'?: string;
    /**
     * 
     * @type {string}
     * @memberof SalesDataOrderItemExtensionInterface
     */
    'gw_price_refunded'?: string;
    /**
     * 
     * @type {string}
     * @memberof SalesDataOrderItemExtensionInterface
     */
    'gw_base_tax_amount_refunded'?: string;
    /**
     * 
     * @type {string}
     * @memberof SalesDataOrderItemExtensionInterface
     */
    'gw_tax_amount_refunded'?: string;
    /**
     * 
     * @type {Array<string>}
     * @memberof SalesDataOrderItemExtensionInterface
     */
    'vertex_tax_codes'?: Array<string>;
    /**
     * 
     * @type {Array<string>}
     * @memberof SalesDataOrderItemExtensionInterface
     */
    'invoice_text_codes'?: Array<string>;
    /**
     * 
     * @type {Array<string>}
     * @memberof SalesDataOrderItemExtensionInterface
     */
    'tax_codes'?: Array<string>;
}
/**
 * Order item interface. An order is a document that a web store issues to a customer. Magento generates a sales order that lists the product items, billing and shipping addresses, and shipping and payment methods. A corresponding external document, known as a purchase order, is emailed to the customer.
 * @export
 * @interface SalesDataOrderItemInterface
 */
export interface SalesDataOrderItemInterface {
    /**
     * Additional data.
     * @type {string}
     * @memberof SalesDataOrderItemInterface
     */
    'additional_data'?: string;
    /**
     * Amount refunded.
     * @type {number}
     * @memberof SalesDataOrderItemInterface
     */
    'amount_refunded'?: number;
    /**
     * Applied rule IDs.
     * @type {string}
     * @memberof SalesDataOrderItemInterface
     */
    'applied_rule_ids'?: string;
    /**
     * Base amount refunded.
     * @type {number}
     * @memberof SalesDataOrderItemInterface
     */
    'base_amount_refunded'?: number;
    /**
     * Base cost.
     * @type {number}
     * @memberof SalesDataOrderItemInterface
     */
    'base_cost'?: number;
    /**
     * Base discount amount.
     * @type {number}
     * @memberof SalesDataOrderItemInterface
     */
    'base_discount_amount'?: number;
    /**
     * Base discount invoiced.
     * @type {number}
     * @memberof SalesDataOrderItemInterface
     */
    'base_discount_invoiced'?: number;
    /**
     * Base discount refunded.
     * @type {number}
     * @memberof SalesDataOrderItemInterface
     */
    'base_discount_refunded'?: number;
    /**
     * Base discount tax compensation amount.
     * @type {number}
     * @memberof SalesDataOrderItemInterface
     */
    'base_discount_tax_compensation_amount'?: number;
    /**
     * Base discount tax compensation invoiced.
     * @type {number}
     * @memberof SalesDataOrderItemInterface
     */
    'base_discount_tax_compensation_invoiced'?: number;
    /**
     * Base discount tax compensation refunded.
     * @type {number}
     * @memberof SalesDataOrderItemInterface
     */
    'base_discount_tax_compensation_refunded'?: number;
    /**
     * Base original price.
     * @type {number}
     * @memberof SalesDataOrderItemInterface
     */
    'base_original_price'?: number;
    /**
     * Base price.
     * @type {number}
     * @memberof SalesDataOrderItemInterface
     */
    'base_price'?: number;
    /**
     * Base price including tax.
     * @type {number}
     * @memberof SalesDataOrderItemInterface
     */
    'base_price_incl_tax'?: number;
    /**
     * Base row invoiced.
     * @type {number}
     * @memberof SalesDataOrderItemInterface
     */
    'base_row_invoiced'?: number;
    /**
     * Base row total.
     * @type {number}
     * @memberof SalesDataOrderItemInterface
     */
    'base_row_total'?: number;
    /**
     * Base row total including tax.
     * @type {number}
     * @memberof SalesDataOrderItemInterface
     */
    'base_row_total_incl_tax'?: number;
    /**
     * Base tax amount.
     * @type {number}
     * @memberof SalesDataOrderItemInterface
     */
    'base_tax_amount'?: number;
    /**
     * Base tax before discount.
     * @type {number}
     * @memberof SalesDataOrderItemInterface
     */
    'base_tax_before_discount'?: number;
    /**
     * Base tax invoiced.
     * @type {number}
     * @memberof SalesDataOrderItemInterface
     */
    'base_tax_invoiced'?: number;
    /**
     * Base tax refunded.
     * @type {number}
     * @memberof SalesDataOrderItemInterface
     */
    'base_tax_refunded'?: number;
    /**
     * Base WEEE tax applied amount.
     * @type {number}
     * @memberof SalesDataOrderItemInterface
     */
    'base_weee_tax_applied_amount'?: number;
    /**
     * Base WEEE tax applied row amount.
     * @type {number}
     * @memberof SalesDataOrderItemInterface
     */
    'base_weee_tax_applied_row_amnt'?: number;
    /**
     * Base WEEE tax disposition.
     * @type {number}
     * @memberof SalesDataOrderItemInterface
     */
    'base_weee_tax_disposition'?: number;
    /**
     * Base WEEE tax row disposition.
     * @type {number}
     * @memberof SalesDataOrderItemInterface
     */
    'base_weee_tax_row_disposition'?: number;
    /**
     * Created-at timestamp.
     * @type {string}
     * @memberof SalesDataOrderItemInterface
     */
    'created_at'?: string;
    /**
     * Description.
     * @type {string}
     * @memberof SalesDataOrderItemInterface
     */
    'description'?: string;
    /**
     * Discount amount.
     * @type {number}
     * @memberof SalesDataOrderItemInterface
     */
    'discount_amount'?: number;
    /**
     * Discount invoiced.
     * @type {number}
     * @memberof SalesDataOrderItemInterface
     */
    'discount_invoiced'?: number;
    /**
     * Discount percent.
     * @type {number}
     * @memberof SalesDataOrderItemInterface
     */
    'discount_percent'?: number;
    /**
     * Discount refunded.
     * @type {number}
     * @memberof SalesDataOrderItemInterface
     */
    'discount_refunded'?: number;
    /**
     * Event ID.
     * @type {number}
     * @memberof SalesDataOrderItemInterface
     */
    'event_id'?: number;
    /**
     * External order item ID.
     * @type {string}
     * @memberof SalesDataOrderItemInterface
     */
    'ext_order_item_id'?: string;
    /**
     * Free-shipping flag value.
     * @type {number}
     * @memberof SalesDataOrderItemInterface
     */
    'free_shipping'?: number;
    /**
     * GW base price.
     * @type {number}
     * @memberof SalesDataOrderItemInterface
     */
    'gw_base_price'?: number;
    /**
     * GW base price invoiced.
     * @type {number}
     * @memberof SalesDataOrderItemInterface
     */
    'gw_base_price_invoiced'?: number;
    /**
     * GW base price refunded.
     * @type {number}
     * @memberof SalesDataOrderItemInterface
     */
    'gw_base_price_refunded'?: number;
    /**
     * GW base tax amount.
     * @type {number}
     * @memberof SalesDataOrderItemInterface
     */
    'gw_base_tax_amount'?: number;
    /**
     * GW base tax amount invoiced.
     * @type {number}
     * @memberof SalesDataOrderItemInterface
     */
    'gw_base_tax_amount_invoiced'?: number;
    /**
     * GW base tax amount refunded.
     * @type {number}
     * @memberof SalesDataOrderItemInterface
     */
    'gw_base_tax_amount_refunded'?: number;
    /**
     * GW ID.
     * @type {number}
     * @memberof SalesDataOrderItemInterface
     */
    'gw_id'?: number;
    /**
     * GW price.
     * @type {number}
     * @memberof SalesDataOrderItemInterface
     */
    'gw_price'?: number;
    /**
     * GW price invoiced.
     * @type {number}
     * @memberof SalesDataOrderItemInterface
     */
    'gw_price_invoiced'?: number;
    /**
     * GW price refunded.
     * @type {number}
     * @memberof SalesDataOrderItemInterface
     */
    'gw_price_refunded'?: number;
    /**
     * GW tax amount.
     * @type {number}
     * @memberof SalesDataOrderItemInterface
     */
    'gw_tax_amount'?: number;
    /**
     * GW tax amount invoiced.
     * @type {number}
     * @memberof SalesDataOrderItemInterface
     */
    'gw_tax_amount_invoiced'?: number;
    /**
     * GW tax amount refunded.
     * @type {number}
     * @memberof SalesDataOrderItemInterface
     */
    'gw_tax_amount_refunded'?: number;
    /**
     * Discount tax compensation amount.
     * @type {number}
     * @memberof SalesDataOrderItemInterface
     */
    'discount_tax_compensation_amount'?: number;
    /**
     * Discount tax compensation canceled.
     * @type {number}
     * @memberof SalesDataOrderItemInterface
     */
    'discount_tax_compensation_canceled'?: number;
    /**
     * Discount tax compensation invoiced.
     * @type {number}
     * @memberof SalesDataOrderItemInterface
     */
    'discount_tax_compensation_invoiced'?: number;
    /**
     * Discount tax compensation refunded.
     * @type {number}
     * @memberof SalesDataOrderItemInterface
     */
    'discount_tax_compensation_refunded'?: number;
    /**
     * Is-quantity-decimal flag value.
     * @type {number}
     * @memberof SalesDataOrderItemInterface
     */
    'is_qty_decimal'?: number;
    /**
     * Is-virtual flag value.
     * @type {number}
     * @memberof SalesDataOrderItemInterface
     */
    'is_virtual'?: number;
    /**
     * Item ID.
     * @type {number}
     * @memberof SalesDataOrderItemInterface
     */
    'item_id'?: number;
    /**
     * Locked DO invoice flag value.
     * @type {number}
     * @memberof SalesDataOrderItemInterface
     */
    'locked_do_invoice'?: number;
    /**
     * Locked DO ship flag value.
     * @type {number}
     * @memberof SalesDataOrderItemInterface
     */
    'locked_do_ship'?: number;
    /**
     * Name.
     * @type {string}
     * @memberof SalesDataOrderItemInterface
     */
    'name'?: string;
    /**
     * No-discount flag value.
     * @type {number}
     * @memberof SalesDataOrderItemInterface
     */
    'no_discount'?: number;
    /**
     * Order ID.
     * @type {number}
     * @memberof SalesDataOrderItemInterface
     */
    'order_id'?: number;
    /**
     * Original price.
     * @type {number}
     * @memberof SalesDataOrderItemInterface
     */
    'original_price'?: number;
    /**
     * Parent item ID.
     * @type {number}
     * @memberof SalesDataOrderItemInterface
     */
    'parent_item_id'?: number;
    /**
     * Price.
     * @type {number}
     * @memberof SalesDataOrderItemInterface
     */
    'price'?: number;
    /**
     * Price including tax.
     * @type {number}
     * @memberof SalesDataOrderItemInterface
     */
    'price_incl_tax'?: number;
    /**
     * Product ID.
     * @type {number}
     * @memberof SalesDataOrderItemInterface
     */
    'product_id'?: number;
    /**
     * Product type.
     * @type {string}
     * @memberof SalesDataOrderItemInterface
     */
    'product_type'?: string;
    /**
     * Quantity backordered.
     * @type {number}
     * @memberof SalesDataOrderItemInterface
     */
    'qty_backordered'?: number;
    /**
     * Quantity canceled.
     * @type {number}
     * @memberof SalesDataOrderItemInterface
     */
    'qty_canceled'?: number;
    /**
     * Quantity invoiced.
     * @type {number}
     * @memberof SalesDataOrderItemInterface
     */
    'qty_invoiced'?: number;
    /**
     * Quantity ordered.
     * @type {number}
     * @memberof SalesDataOrderItemInterface
     */
    'qty_ordered'?: number;
    /**
     * Quantity refunded.
     * @type {number}
     * @memberof SalesDataOrderItemInterface
     */
    'qty_refunded'?: number;
    /**
     * Quantity returned.
     * @type {number}
     * @memberof SalesDataOrderItemInterface
     */
    'qty_returned'?: number;
    /**
     * Quantity shipped.
     * @type {number}
     * @memberof SalesDataOrderItemInterface
     */
    'qty_shipped'?: number;
    /**
     * Quote item ID.
     * @type {number}
     * @memberof SalesDataOrderItemInterface
     */
    'quote_item_id'?: number;
    /**
     * Row invoiced.
     * @type {number}
     * @memberof SalesDataOrderItemInterface
     */
    'row_invoiced'?: number;
    /**
     * Row total.
     * @type {number}
     * @memberof SalesDataOrderItemInterface
     */
    'row_total'?: number;
    /**
     * Row total including tax.
     * @type {number}
     * @memberof SalesDataOrderItemInterface
     */
    'row_total_incl_tax'?: number;
    /**
     * Row weight.
     * @type {number}
     * @memberof SalesDataOrderItemInterface
     */
    'row_weight'?: number;
    /**
     * SKU.
     * @type {string}
     * @memberof SalesDataOrderItemInterface
     */
    'sku': string;
    /**
     * Store ID.
     * @type {number}
     * @memberof SalesDataOrderItemInterface
     */
    'store_id'?: number;
    /**
     * Tax amount.
     * @type {number}
     * @memberof SalesDataOrderItemInterface
     */
    'tax_amount'?: number;
    /**
     * Tax before discount.
     * @type {number}
     * @memberof SalesDataOrderItemInterface
     */
    'tax_before_discount'?: number;
    /**
     * Tax canceled.
     * @type {number}
     * @memberof SalesDataOrderItemInterface
     */
    'tax_canceled'?: number;
    /**
     * Tax invoiced.
     * @type {number}
     * @memberof SalesDataOrderItemInterface
     */
    'tax_invoiced'?: number;
    /**
     * Tax percent.
     * @type {number}
     * @memberof SalesDataOrderItemInterface
     */
    'tax_percent'?: number;
    /**
     * Tax refunded.
     * @type {number}
     * @memberof SalesDataOrderItemInterface
     */
    'tax_refunded'?: number;
    /**
     * Updated-at timestamp.
     * @type {string}
     * @memberof SalesDataOrderItemInterface
     */
    'updated_at'?: string;
    /**
     * WEEE tax applied.
     * @type {string}
     * @memberof SalesDataOrderItemInterface
     */
    'weee_tax_applied'?: string;
    /**
     * WEEE tax applied amount.
     * @type {number}
     * @memberof SalesDataOrderItemInterface
     */
    'weee_tax_applied_amount'?: number;
    /**
     * WEEE tax applied row amount.
     * @type {number}
     * @memberof SalesDataOrderItemInterface
     */
    'weee_tax_applied_row_amount'?: number;
    /**
     * WEEE tax disposition.
     * @type {number}
     * @memberof SalesDataOrderItemInterface
     */
    'weee_tax_disposition'?: number;
    /**
     * WEEE tax row disposition.
     * @type {number}
     * @memberof SalesDataOrderItemInterface
     */
    'weee_tax_row_disposition'?: number;
    /**
     * Weight.
     * @type {number}
     * @memberof SalesDataOrderItemInterface
     */
    'weight'?: number;
    /**
     * 
     * @type {SalesDataOrderItemInterface}
     * @memberof SalesDataOrderItemInterface
     */
    'parent_item'?: SalesDataOrderItemInterface;
    /**
     * 
     * @type {CatalogDataProductOptionInterface}
     * @memberof SalesDataOrderItemInterface
     */
    'product_option'?: CatalogDataProductOptionInterface;
    /**
     * 
     * @type {SalesDataOrderItemExtensionInterface}
     * @memberof SalesDataOrderItemInterface
     */
    'extension_attributes'?: SalesDataOrderItemExtensionInterface;
}
/**
 * Order item search result interface. An order is a document that a web store issues to a customer. Magento generates a sales order that lists the product items, billing and shipping addresses, and shipping and payment methods. A corresponding external document, known as a purchase order, is emailed to the customer.
 * @export
 * @interface SalesDataOrderItemSearchResultInterface
 */
export interface SalesDataOrderItemSearchResultInterface {
    /**
     * Array of collection items.
     * @type {Array<SalesDataOrderItemInterface>}
     * @memberof SalesDataOrderItemSearchResultInterface
     */
    'items': Array<SalesDataOrderItemInterface>;
    /**
     * 
     * @type {FrameworkSearchCriteriaInterface}
     * @memberof SalesDataOrderItemSearchResultInterface
     */
    'search_criteria': FrameworkSearchCriteriaInterface;
    /**
     * Total count.
     * @type {number}
     * @memberof SalesDataOrderItemSearchResultInterface
     */
    'total_count': number;
}
/**
 * ExtensionInterface class for @see \\Magento\\Sales\\Api\\Data\\OrderPaymentInterface
 * @export
 * @interface SalesDataOrderPaymentExtensionInterface
 */
export interface SalesDataOrderPaymentExtensionInterface {
    /**
     * 
     * @type {VaultDataPaymentTokenInterface}
     * @memberof SalesDataOrderPaymentExtensionInterface
     */
    'vault_payment_token'?: VaultDataPaymentTokenInterface;
}
/**
 * Order payment interface. An order is a document that a web store issues to a customer. Magento generates a sales order that lists the product items, billing and shipping addresses, and shipping and payment methods. A corresponding external document, known as a purchase order, is emailed to the customer.
 * @export
 * @interface SalesDataOrderPaymentInterface
 */
export interface SalesDataOrderPaymentInterface {
    /**
     * Account status.
     * @type {string}
     * @memberof SalesDataOrderPaymentInterface
     */
    'account_status': string;
    /**
     * Additional data.
     * @type {string}
     * @memberof SalesDataOrderPaymentInterface
     */
    'additional_data'?: string;
    /**
     * Array of additional information.
     * @type {Array<string>}
     * @memberof SalesDataOrderPaymentInterface
     */
    'additional_information': Array<string>;
    /**
     * Address status.
     * @type {string}
     * @memberof SalesDataOrderPaymentInterface
     */
    'address_status'?: string;
    /**
     * Amount authorized.
     * @type {number}
     * @memberof SalesDataOrderPaymentInterface
     */
    'amount_authorized'?: number;
    /**
     * Amount canceled.
     * @type {number}
     * @memberof SalesDataOrderPaymentInterface
     */
    'amount_canceled'?: number;
    /**
     * Amount ordered.
     * @type {number}
     * @memberof SalesDataOrderPaymentInterface
     */
    'amount_ordered'?: number;
    /**
     * Amount paid.
     * @type {number}
     * @memberof SalesDataOrderPaymentInterface
     */
    'amount_paid'?: number;
    /**
     * Amount refunded.
     * @type {number}
     * @memberof SalesDataOrderPaymentInterface
     */
    'amount_refunded'?: number;
    /**
     * Anet transaction method.
     * @type {string}
     * @memberof SalesDataOrderPaymentInterface
     */
    'anet_trans_method'?: string;
    /**
     * Base amount authorized.
     * @type {number}
     * @memberof SalesDataOrderPaymentInterface
     */
    'base_amount_authorized'?: number;
    /**
     * Base amount canceled.
     * @type {number}
     * @memberof SalesDataOrderPaymentInterface
     */
    'base_amount_canceled'?: number;
    /**
     * Base amount ordered.
     * @type {number}
     * @memberof SalesDataOrderPaymentInterface
     */
    'base_amount_ordered'?: number;
    /**
     * Base amount paid.
     * @type {number}
     * @memberof SalesDataOrderPaymentInterface
     */
    'base_amount_paid'?: number;
    /**
     * Base amount paid online.
     * @type {number}
     * @memberof SalesDataOrderPaymentInterface
     */
    'base_amount_paid_online'?: number;
    /**
     * Base amount refunded.
     * @type {number}
     * @memberof SalesDataOrderPaymentInterface
     */
    'base_amount_refunded'?: number;
    /**
     * Base amount refunded online.
     * @type {number}
     * @memberof SalesDataOrderPaymentInterface
     */
    'base_amount_refunded_online'?: number;
    /**
     * Base shipping amount.
     * @type {number}
     * @memberof SalesDataOrderPaymentInterface
     */
    'base_shipping_amount'?: number;
    /**
     * Base shipping captured amount.
     * @type {number}
     * @memberof SalesDataOrderPaymentInterface
     */
    'base_shipping_captured'?: number;
    /**
     * Base shipping refunded amount.
     * @type {number}
     * @memberof SalesDataOrderPaymentInterface
     */
    'base_shipping_refunded'?: number;
    /**
     * Credit card approval.
     * @type {string}
     * @memberof SalesDataOrderPaymentInterface
     */
    'cc_approval'?: string;
    /**
     * Credit card avs status.
     * @type {string}
     * @memberof SalesDataOrderPaymentInterface
     */
    'cc_avs_status'?: string;
    /**
     * Credit card CID status.
     * @type {string}
     * @memberof SalesDataOrderPaymentInterface
     */
    'cc_cid_status'?: string;
    /**
     * Credit card debug request body.
     * @type {string}
     * @memberof SalesDataOrderPaymentInterface
     */
    'cc_debug_request_body'?: string;
    /**
     * Credit card debug response body.
     * @type {string}
     * @memberof SalesDataOrderPaymentInterface
     */
    'cc_debug_response_body'?: string;
    /**
     * Credit card debug response serialized.
     * @type {string}
     * @memberof SalesDataOrderPaymentInterface
     */
    'cc_debug_response_serialized'?: string;
    /**
     * Credit card expiration month.
     * @type {string}
     * @memberof SalesDataOrderPaymentInterface
     */
    'cc_exp_month'?: string;
    /**
     * Credit card expiration year.
     * @type {string}
     * @memberof SalesDataOrderPaymentInterface
     */
    'cc_exp_year'?: string;
    /**
     * Last four digits of the credit card.
     * @type {string}
     * @memberof SalesDataOrderPaymentInterface
     */
    'cc_last4': string;
    /**
     * Encrypted credit card number.
     * @type {string}
     * @memberof SalesDataOrderPaymentInterface
     */
    'cc_number_enc'?: string;
    /**
     * Credit card number.
     * @type {string}
     * @memberof SalesDataOrderPaymentInterface
     */
    'cc_owner'?: string;
    /**
     * Credit card secure verify.
     * @type {string}
     * @memberof SalesDataOrderPaymentInterface
     */
    'cc_secure_verify'?: string;
    /**
     * Credit card SS issue.
     * @type {string}
     * @memberof SalesDataOrderPaymentInterface
     */
    'cc_ss_issue'?: string;
    /**
     * Credit card SS start month.
     * @type {string}
     * @memberof SalesDataOrderPaymentInterface
     */
    'cc_ss_start_month'?: string;
    /**
     * Credit card SS start year.
     * @type {string}
     * @memberof SalesDataOrderPaymentInterface
     */
    'cc_ss_start_year'?: string;
    /**
     * Credit card status.
     * @type {string}
     * @memberof SalesDataOrderPaymentInterface
     */
    'cc_status'?: string;
    /**
     * Credit card status description.
     * @type {string}
     * @memberof SalesDataOrderPaymentInterface
     */
    'cc_status_description'?: string;
    /**
     * Credit card transaction ID.
     * @type {string}
     * @memberof SalesDataOrderPaymentInterface
     */
    'cc_trans_id'?: string;
    /**
     * Credit card type.
     * @type {string}
     * @memberof SalesDataOrderPaymentInterface
     */
    'cc_type'?: string;
    /**
     * eCheck account name.
     * @type {string}
     * @memberof SalesDataOrderPaymentInterface
     */
    'echeck_account_name'?: string;
    /**
     * eCheck account type.
     * @type {string}
     * @memberof SalesDataOrderPaymentInterface
     */
    'echeck_account_type'?: string;
    /**
     * eCheck bank name.
     * @type {string}
     * @memberof SalesDataOrderPaymentInterface
     */
    'echeck_bank_name'?: string;
    /**
     * eCheck routing number.
     * @type {string}
     * @memberof SalesDataOrderPaymentInterface
     */
    'echeck_routing_number'?: string;
    /**
     * eCheck type.
     * @type {string}
     * @memberof SalesDataOrderPaymentInterface
     */
    'echeck_type'?: string;
    /**
     * Entity ID.
     * @type {number}
     * @memberof SalesDataOrderPaymentInterface
     */
    'entity_id'?: number;
    /**
     * Last transaction ID.
     * @type {string}
     * @memberof SalesDataOrderPaymentInterface
     */
    'last_trans_id'?: string;
    /**
     * Method.
     * @type {string}
     * @memberof SalesDataOrderPaymentInterface
     */
    'method': string;
    /**
     * Parent ID.
     * @type {number}
     * @memberof SalesDataOrderPaymentInterface
     */
    'parent_id'?: number;
    /**
     * PO number.
     * @type {string}
     * @memberof SalesDataOrderPaymentInterface
     */
    'po_number'?: string;
    /**
     * Protection eligibility.
     * @type {string}
     * @memberof SalesDataOrderPaymentInterface
     */
    'protection_eligibility'?: string;
    /**
     * Quote payment ID.
     * @type {number}
     * @memberof SalesDataOrderPaymentInterface
     */
    'quote_payment_id'?: number;
    /**
     * Shipping amount.
     * @type {number}
     * @memberof SalesDataOrderPaymentInterface
     */
    'shipping_amount'?: number;
    /**
     * Shipping captured.
     * @type {number}
     * @memberof SalesDataOrderPaymentInterface
     */
    'shipping_captured'?: number;
    /**
     * Shipping refunded.
     * @type {number}
     * @memberof SalesDataOrderPaymentInterface
     */
    'shipping_refunded'?: number;
    /**
     * 
     * @type {SalesDataOrderPaymentExtensionInterface}
     * @memberof SalesDataOrderPaymentInterface
     */
    'extension_attributes'?: SalesDataOrderPaymentExtensionInterface;
}
/**
 * Order search result interface. An order is a document that a web store issues to a customer. Magento generates a sales order that lists the product items, billing and shipping addresses, and shipping and payment methods. A corresponding external document, known as a purchase order, is emailed to the customer.
 * @export
 * @interface SalesDataOrderSearchResultInterface
 */
export interface SalesDataOrderSearchResultInterface {
    /**
     * Array of collection items.
     * @type {Array<SalesDataOrderInterface>}
     * @memberof SalesDataOrderSearchResultInterface
     */
    'items': Array<SalesDataOrderInterface>;
    /**
     * 
     * @type {FrameworkSearchCriteriaInterface}
     * @memberof SalesDataOrderSearchResultInterface
     */
    'search_criteria': FrameworkSearchCriteriaInterface;
    /**
     * Total count.
     * @type {number}
     * @memberof SalesDataOrderSearchResultInterface
     */
    'total_count': number;
}
/**
 * Order status history interface. An order is a document that a web store issues to a customer. Magento generates a sales order that lists the product items, billing and shipping addresses, and shipping and payment methods. A corresponding external document, known as a purchase order, is emailed to the customer.
 * @export
 * @interface SalesDataOrderStatusHistoryInterface
 */
export interface SalesDataOrderStatusHistoryInterface {
    /**
     * Comment.
     * @type {string}
     * @memberof SalesDataOrderStatusHistoryInterface
     */
    'comment': string;
    /**
     * Created-at timestamp.
     * @type {string}
     * @memberof SalesDataOrderStatusHistoryInterface
     */
    'created_at'?: string;
    /**
     * Order status history ID.
     * @type {number}
     * @memberof SalesDataOrderStatusHistoryInterface
     */
    'entity_id'?: number;
    /**
     * Entity name.
     * @type {string}
     * @memberof SalesDataOrderStatusHistoryInterface
     */
    'entity_name'?: string;
    /**
     * Is-customer-notified flag value.
     * @type {number}
     * @memberof SalesDataOrderStatusHistoryInterface
     */
    'is_customer_notified': number;
    /**
     * Is-visible-on-storefront flag value.
     * @type {number}
     * @memberof SalesDataOrderStatusHistoryInterface
     */
    'is_visible_on_front': number;
    /**
     * Parent ID.
     * @type {number}
     * @memberof SalesDataOrderStatusHistoryInterface
     */
    'parent_id': number;
    /**
     * Status.
     * @type {string}
     * @memberof SalesDataOrderStatusHistoryInterface
     */
    'status'?: string;
    /**
     * ExtensionInterface class for @see \\Magento\\Sales\\Api\\Data\\OrderStatusHistoryInterface
     * @type {object}
     * @memberof SalesDataOrderStatusHistoryInterface
     */
    'extension_attributes'?: object;
}
/**
 * Order status history search result interface. An order is a document that a web store issues to a customer. Magento generates a sales order that lists the product items, billing and shipping addresses, and shipping and payment methods. A corresponding external document, known as a purchase order, is emailed to the customer.
 * @export
 * @interface SalesDataOrderStatusHistorySearchResultInterface
 */
export interface SalesDataOrderStatusHistorySearchResultInterface {
    /**
     * Array of collection items.
     * @type {Array<SalesDataOrderStatusHistoryInterface>}
     * @memberof SalesDataOrderStatusHistorySearchResultInterface
     */
    'items': Array<SalesDataOrderStatusHistoryInterface>;
    /**
     * 
     * @type {FrameworkSearchCriteriaInterface}
     * @memberof SalesDataOrderStatusHistorySearchResultInterface
     */
    'search_criteria': FrameworkSearchCriteriaInterface;
    /**
     * Total count.
     * @type {number}
     * @memberof SalesDataOrderStatusHistorySearchResultInterface
     */
    'total_count': number;
}
/**
 * Interface ShipmentCommentCreationInterface
 * @export
 * @interface SalesDataShipmentCommentCreationInterface
 */
export interface SalesDataShipmentCommentCreationInterface {
    /**
     * ExtensionInterface class for @see \\Magento\\Sales\\Api\\Data\\ShipmentCommentCreationInterface
     * @type {object}
     * @memberof SalesDataShipmentCommentCreationInterface
     */
    'extension_attributes'?: object;
    /**
     * Comment.
     * @type {string}
     * @memberof SalesDataShipmentCommentCreationInterface
     */
    'comment': string;
    /**
     * Is-visible-on-storefront flag value.
     * @type {number}
     * @memberof SalesDataShipmentCommentCreationInterface
     */
    'is_visible_on_front': number;
}
/**
 * Shipment comment interface. A shipment is a delivery package that contains products. A shipment document accompanies the shipment. This document lists the products and their quantities in the delivery package. A shipment document can contain comments.
 * @export
 * @interface SalesDataShipmentCommentInterface
 */
export interface SalesDataShipmentCommentInterface {
    /**
     * Is-customer-notified flag value.
     * @type {number}
     * @memberof SalesDataShipmentCommentInterface
     */
    'is_customer_notified': number;
    /**
     * Parent ID.
     * @type {number}
     * @memberof SalesDataShipmentCommentInterface
     */
    'parent_id': number;
    /**
     * ExtensionInterface class for @see \\Magento\\Sales\\Api\\Data\\ShipmentCommentInterface
     * @type {object}
     * @memberof SalesDataShipmentCommentInterface
     */
    'extension_attributes'?: object;
    /**
     * Comment.
     * @type {string}
     * @memberof SalesDataShipmentCommentInterface
     */
    'comment': string;
    /**
     * Is-visible-on-storefront flag value.
     * @type {number}
     * @memberof SalesDataShipmentCommentInterface
     */
    'is_visible_on_front': number;
    /**
     * Created-at timestamp.
     * @type {string}
     * @memberof SalesDataShipmentCommentInterface
     */
    'created_at'?: string;
    /**
     * Invoice ID.
     * @type {number}
     * @memberof SalesDataShipmentCommentInterface
     */
    'entity_id'?: number;
}
/**
 * Shipment comment search result interface. A shipment is a delivery package that contains products. A shipment document accompanies the shipment. This document lists the products and their quantities in the delivery package. A shipment document can contain comments.
 * @export
 * @interface SalesDataShipmentCommentSearchResultInterface
 */
export interface SalesDataShipmentCommentSearchResultInterface {
    /**
     * Array of collection items.
     * @type {Array<SalesDataShipmentCommentInterface>}
     * @memberof SalesDataShipmentCommentSearchResultInterface
     */
    'items': Array<SalesDataShipmentCommentInterface>;
    /**
     * 
     * @type {FrameworkSearchCriteriaInterface}
     * @memberof SalesDataShipmentCommentSearchResultInterface
     */
    'search_criteria': FrameworkSearchCriteriaInterface;
    /**
     * Total count.
     * @type {number}
     * @memberof SalesDataShipmentCommentSearchResultInterface
     */
    'total_count': number;
}
/**
 * ExtensionInterface class for @see \\Magento\\Sales\\Api\\Data\\ShipmentCreationArgumentsInterface
 * @export
 * @interface SalesDataShipmentCreationArgumentsExtensionInterface
 */
export interface SalesDataShipmentCreationArgumentsExtensionInterface {
    /**
     * 
     * @type {string}
     * @memberof SalesDataShipmentCreationArgumentsExtensionInterface
     */
    'shipping_label'?: string;
    /**
     * 
     * @type {string}
     * @memberof SalesDataShipmentCreationArgumentsExtensionInterface
     */
    'ext_shipment_id'?: string;
    /**
     * 
     * @type {string}
     * @memberof SalesDataShipmentCreationArgumentsExtensionInterface
     */
    'ext_return_shipment_id'?: string;
    /**
     * 
     * @type {string}
     * @memberof SalesDataShipmentCreationArgumentsExtensionInterface
     */
    'ext_location_id'?: string;
    /**
     * 
     * @type {string}
     * @memberof SalesDataShipmentCreationArgumentsExtensionInterface
     */
    'ext_tracking_url'?: string;
    /**
     * 
     * @type {string}
     * @memberof SalesDataShipmentCreationArgumentsExtensionInterface
     */
    'ext_tracking_reference'?: string;
}
/**
 * Interface for creation arguments for Shipment.
 * @export
 * @interface SalesDataShipmentCreationArgumentsInterface
 */
export interface SalesDataShipmentCreationArgumentsInterface {
    /**
     * 
     * @type {SalesDataShipmentCreationArgumentsExtensionInterface}
     * @memberof SalesDataShipmentCreationArgumentsInterface
     */
    'extension_attributes'?: SalesDataShipmentCreationArgumentsExtensionInterface;
}
/**
 * ExtensionInterface class for @see \\Magento\\Sales\\Api\\Data\\ShipmentInterface
 * @export
 * @interface SalesDataShipmentExtensionInterface
 */
export interface SalesDataShipmentExtensionInterface {
    /**
     * 
     * @type {string}
     * @memberof SalesDataShipmentExtensionInterface
     */
    'ext_shipment_id'?: string;
    /**
     * 
     * @type {string}
     * @memberof SalesDataShipmentExtensionInterface
     */
    'ext_return_shipment_id'?: string;
    /**
     * 
     * @type {string}
     * @memberof SalesDataShipmentExtensionInterface
     */
    'ext_location_id'?: string;
    /**
     * 
     * @type {string}
     * @memberof SalesDataShipmentExtensionInterface
     */
    'ext_tracking_url'?: string;
    /**
     * 
     * @type {string}
     * @memberof SalesDataShipmentExtensionInterface
     */
    'ext_tracking_reference'?: string;
}
/**
 * Shipment interface. A shipment is a delivery package that contains products. A shipment document accompanies the shipment. This document lists the products and their quantities in the delivery package.
 * @export
 * @interface SalesDataShipmentInterface
 */
export interface SalesDataShipmentInterface {
    /**
     * Billing address ID.
     * @type {number}
     * @memberof SalesDataShipmentInterface
     */
    'billing_address_id'?: number;
    /**
     * Created-at timestamp.
     * @type {string}
     * @memberof SalesDataShipmentInterface
     */
    'created_at'?: string;
    /**
     * Customer ID.
     * @type {number}
     * @memberof SalesDataShipmentInterface
     */
    'customer_id'?: number;
    /**
     * Email-sent flag value.
     * @type {number}
     * @memberof SalesDataShipmentInterface
     */
    'email_sent'?: number;
    /**
     * Shipment ID.
     * @type {number}
     * @memberof SalesDataShipmentInterface
     */
    'entity_id'?: number;
    /**
     * Increment ID.
     * @type {string}
     * @memberof SalesDataShipmentInterface
     */
    'increment_id'?: string;
    /**
     * Order ID.
     * @type {number}
     * @memberof SalesDataShipmentInterface
     */
    'order_id': number;
    /**
     * Array of packages, if any. Otherwise, null.
     * @type {Array<SalesDataShipmentPackageInterface>}
     * @memberof SalesDataShipmentInterface
     */
    'packages'?: Array<SalesDataShipmentPackageInterface>;
    /**
     * Shipment status.
     * @type {number}
     * @memberof SalesDataShipmentInterface
     */
    'shipment_status'?: number;
    /**
     * Shipping address ID.
     * @type {number}
     * @memberof SalesDataShipmentInterface
     */
    'shipping_address_id'?: number;
    /**
     * Shipping label.
     * @type {string}
     * @memberof SalesDataShipmentInterface
     */
    'shipping_label'?: string;
    /**
     * Store ID.
     * @type {number}
     * @memberof SalesDataShipmentInterface
     */
    'store_id'?: number;
    /**
     * Total quantity.
     * @type {number}
     * @memberof SalesDataShipmentInterface
     */
    'total_qty'?: number;
    /**
     * Total weight.
     * @type {number}
     * @memberof SalesDataShipmentInterface
     */
    'total_weight'?: number;
    /**
     * Updated-at timestamp.
     * @type {string}
     * @memberof SalesDataShipmentInterface
     */
    'updated_at'?: string;
    /**
     * Array of items.
     * @type {Array<SalesDataShipmentItemInterface>}
     * @memberof SalesDataShipmentInterface
     */
    'items': Array<SalesDataShipmentItemInterface>;
    /**
     * Array of tracks.
     * @type {Array<SalesDataShipmentTrackInterface>}
     * @memberof SalesDataShipmentInterface
     */
    'tracks': Array<SalesDataShipmentTrackInterface>;
    /**
     * Array of comments.
     * @type {Array<SalesDataShipmentCommentInterface>}
     * @memberof SalesDataShipmentInterface
     */
    'comments': Array<SalesDataShipmentCommentInterface>;
    /**
     * 
     * @type {SalesDataShipmentExtensionInterface}
     * @memberof SalesDataShipmentInterface
     */
    'extension_attributes'?: SalesDataShipmentExtensionInterface;
}
/**
 * Input argument for shipment item creation Interface ShipmentItemCreationInterface
 * @export
 * @interface SalesDataShipmentItemCreationInterface
 */
export interface SalesDataShipmentItemCreationInterface {
    /**
     * ExtensionInterface class for @see \\Magento\\Sales\\Api\\Data\\ShipmentItemCreationInterface
     * @type {object}
     * @memberof SalesDataShipmentItemCreationInterface
     */
    'extension_attributes'?: object;
    /**
     * Order item ID.
     * @type {number}
     * @memberof SalesDataShipmentItemCreationInterface
     */
    'order_item_id': number;
    /**
     * Quantity.
     * @type {number}
     * @memberof SalesDataShipmentItemCreationInterface
     */
    'qty': number;
}
/**
 * Shipment item interface. A shipment is a delivery package that contains products. A shipment document accompanies the shipment. This document lists the products and their quantities in the delivery package. A product is an item in a shipment.
 * @export
 * @interface SalesDataShipmentItemInterface
 */
export interface SalesDataShipmentItemInterface {
    /**
     * Additional data.
     * @type {string}
     * @memberof SalesDataShipmentItemInterface
     */
    'additional_data'?: string;
    /**
     * Description.
     * @type {string}
     * @memberof SalesDataShipmentItemInterface
     */
    'description'?: string;
    /**
     * Shipment item ID.
     * @type {number}
     * @memberof SalesDataShipmentItemInterface
     */
    'entity_id'?: number;
    /**
     * Name.
     * @type {string}
     * @memberof SalesDataShipmentItemInterface
     */
    'name'?: string;
    /**
     * Parent ID.
     * @type {number}
     * @memberof SalesDataShipmentItemInterface
     */
    'parent_id'?: number;
    /**
     * Price.
     * @type {number}
     * @memberof SalesDataShipmentItemInterface
     */
    'price'?: number;
    /**
     * Product ID.
     * @type {number}
     * @memberof SalesDataShipmentItemInterface
     */
    'product_id'?: number;
    /**
     * Row total.
     * @type {number}
     * @memberof SalesDataShipmentItemInterface
     */
    'row_total'?: number;
    /**
     * SKU.
     * @type {string}
     * @memberof SalesDataShipmentItemInterface
     */
    'sku'?: string;
    /**
     * Weight.
     * @type {number}
     * @memberof SalesDataShipmentItemInterface
     */
    'weight'?: number;
    /**
     * ExtensionInterface class for @see \\Magento\\Sales\\Api\\Data\\ShipmentItemInterface
     * @type {object}
     * @memberof SalesDataShipmentItemInterface
     */
    'extension_attributes'?: object;
    /**
     * Order item ID.
     * @type {number}
     * @memberof SalesDataShipmentItemInterface
     */
    'order_item_id': number;
    /**
     * Quantity.
     * @type {number}
     * @memberof SalesDataShipmentItemInterface
     */
    'qty': number;
}
/**
 * Shipment package interface. A shipment is a delivery package that contains products. A shipment document accompanies the shipment. This document lists the products and their quantities in the delivery package.
 * @export
 * @interface SalesDataShipmentPackageCreationInterface
 */
export interface SalesDataShipmentPackageCreationInterface {
    /**
     * ExtensionInterface class for @see \\Magento\\Sales\\Api\\Data\\ShipmentPackageCreationInterface
     * @type {object}
     * @memberof SalesDataShipmentPackageCreationInterface
     */
    'extension_attributes'?: object;
}
/**
 * Shipment package interface. A shipment is a delivery package that contains products. A shipment document accompanies the shipment. This document lists the products and their quantities in the delivery package.
 * @export
 * @interface SalesDataShipmentPackageInterface
 */
export interface SalesDataShipmentPackageInterface {
    /**
     * ExtensionInterface class for @see \\Magento\\Sales\\Api\\Data\\ShipmentPackageInterface
     * @type {object}
     * @memberof SalesDataShipmentPackageInterface
     */
    'extension_attributes'?: object;
}
/**
 * Shipment search result interface. A shipment is a delivery package that contains products. A shipment document accompanies the shipment. This document lists the products and their quantities in the delivery package.
 * @export
 * @interface SalesDataShipmentSearchResultInterface
 */
export interface SalesDataShipmentSearchResultInterface {
    /**
     * Array of collection items.
     * @type {Array<SalesDataShipmentInterface>}
     * @memberof SalesDataShipmentSearchResultInterface
     */
    'items': Array<SalesDataShipmentInterface>;
    /**
     * 
     * @type {FrameworkSearchCriteriaInterface}
     * @memberof SalesDataShipmentSearchResultInterface
     */
    'search_criteria': FrameworkSearchCriteriaInterface;
    /**
     * Total count.
     * @type {number}
     * @memberof SalesDataShipmentSearchResultInterface
     */
    'total_count': number;
}
/**
 * Shipment Track Creation interface.
 * @export
 * @interface SalesDataShipmentTrackCreationInterface
 */
export interface SalesDataShipmentTrackCreationInterface {
    /**
     * ExtensionInterface class for @see \\Magento\\Sales\\Api\\Data\\ShipmentTrackCreationInterface
     * @type {object}
     * @memberof SalesDataShipmentTrackCreationInterface
     */
    'extension_attributes'?: object;
    /**
     * Track number.
     * @type {string}
     * @memberof SalesDataShipmentTrackCreationInterface
     */
    'track_number': string;
    /**
     * Title.
     * @type {string}
     * @memberof SalesDataShipmentTrackCreationInterface
     */
    'title': string;
    /**
     * Carrier code.
     * @type {string}
     * @memberof SalesDataShipmentTrackCreationInterface
     */
    'carrier_code': string;
}
/**
 * Shipment track interface. A shipment is a delivery package that contains products. A shipment document accompanies the shipment. This document lists the products and their quantities in the delivery package. Merchants and customers can track shipments.
 * @export
 * @interface SalesDataShipmentTrackInterface
 */
export interface SalesDataShipmentTrackInterface {
    /**
     * The order_id for the shipment package.
     * @type {number}
     * @memberof SalesDataShipmentTrackInterface
     */
    'order_id': number;
    /**
     * Created-at timestamp.
     * @type {string}
     * @memberof SalesDataShipmentTrackInterface
     */
    'created_at'?: string;
    /**
     * Shipment package ID.
     * @type {number}
     * @memberof SalesDataShipmentTrackInterface
     */
    'entity_id'?: number;
    /**
     * Parent ID.
     * @type {number}
     * @memberof SalesDataShipmentTrackInterface
     */
    'parent_id': number;
    /**
     * Updated-at timestamp.
     * @type {string}
     * @memberof SalesDataShipmentTrackInterface
     */
    'updated_at'?: string;
    /**
     * Weight.
     * @type {number}
     * @memberof SalesDataShipmentTrackInterface
     */
    'weight': number;
    /**
     * Quantity.
     * @type {number}
     * @memberof SalesDataShipmentTrackInterface
     */
    'qty': number;
    /**
     * Description.
     * @type {string}
     * @memberof SalesDataShipmentTrackInterface
     */
    'description': string;
    /**
     * ExtensionInterface class for @see \\Magento\\Sales\\Api\\Data\\ShipmentTrackInterface
     * @type {object}
     * @memberof SalesDataShipmentTrackInterface
     */
    'extension_attributes'?: object;
    /**
     * Track number.
     * @type {string}
     * @memberof SalesDataShipmentTrackInterface
     */
    'track_number': string;
    /**
     * Title.
     * @type {string}
     * @memberof SalesDataShipmentTrackInterface
     */
    'title': string;
    /**
     * Carrier code.
     * @type {string}
     * @memberof SalesDataShipmentTrackInterface
     */
    'carrier_code': string;
}
/**
 * Interface ShippingAssignmentInterface
 * @export
 * @interface SalesDataShippingAssignmentInterface
 */
export interface SalesDataShippingAssignmentInterface {
    /**
     * 
     * @type {SalesDataShippingInterface}
     * @memberof SalesDataShippingAssignmentInterface
     */
    'shipping': SalesDataShippingInterface;
    /**
     * Order items of shipping assignment
     * @type {Array<SalesDataOrderItemInterface>}
     * @memberof SalesDataShippingAssignmentInterface
     */
    'items': Array<SalesDataOrderItemInterface>;
    /**
     * Stock id
     * @type {number}
     * @memberof SalesDataShippingAssignmentInterface
     */
    'stock_id'?: number;
    /**
     * ExtensionInterface class for @see \\Magento\\Sales\\Api\\Data\\ShippingAssignmentInterface
     * @type {object}
     * @memberof SalesDataShippingAssignmentInterface
     */
    'extension_attributes'?: object;
}
/**
 * ExtensionInterface class for @see \\Magento\\Sales\\Api\\Data\\ShippingInterface
 * @export
 * @interface SalesDataShippingExtensionInterface
 */
export interface SalesDataShippingExtensionInterface {
    /**
     * 
     * @type {string}
     * @memberof SalesDataShippingExtensionInterface
     */
    'ext_order_id'?: string;
    /**
     * 
     * @type {TemandoShippingDataOrderShippingExperienceInterface}
     * @memberof SalesDataShippingExtensionInterface
     */
    'shipping_experience'?: TemandoShippingDataOrderShippingExperienceInterface;
    /**
     * 
     * @type {TemandoShippingDataCollectionPointOrderCollectionPointInterface}
     * @memberof SalesDataShippingExtensionInterface
     */
    'collection_point'?: TemandoShippingDataCollectionPointOrderCollectionPointInterface;
}
/**
 * Interface ShippingInterface
 * @export
 * @interface SalesDataShippingInterface
 */
export interface SalesDataShippingInterface {
    /**
     * 
     * @type {SalesDataOrderAddressInterface}
     * @memberof SalesDataShippingInterface
     */
    'address'?: SalesDataOrderAddressInterface;
    /**
     * Shipping method
     * @type {string}
     * @memberof SalesDataShippingInterface
     */
    'method'?: string;
    /**
     * 
     * @type {SalesDataTotalInterface}
     * @memberof SalesDataShippingInterface
     */
    'total'?: SalesDataTotalInterface;
    /**
     * 
     * @type {SalesDataShippingExtensionInterface}
     * @memberof SalesDataShippingInterface
     */
    'extension_attributes'?: SalesDataShippingExtensionInterface;
}
/**
 * Interface TotalInterface
 * @export
 * @interface SalesDataTotalInterface
 */
export interface SalesDataTotalInterface {
    /**
     * Base shipping amount.
     * @type {number}
     * @memberof SalesDataTotalInterface
     */
    'base_shipping_amount'?: number;
    /**
     * Base shipping canceled.
     * @type {number}
     * @memberof SalesDataTotalInterface
     */
    'base_shipping_canceled'?: number;
    /**
     * Base shipping discount amount.
     * @type {number}
     * @memberof SalesDataTotalInterface
     */
    'base_shipping_discount_amount'?: number;
    /**
     * Base shipping discount tax compensation amount.
     * @type {number}
     * @memberof SalesDataTotalInterface
     */
    'base_shipping_discount_tax_compensation_amnt'?: number;
    /**
     * Base shipping including tax.
     * @type {number}
     * @memberof SalesDataTotalInterface
     */
    'base_shipping_incl_tax'?: number;
    /**
     * Base shipping invoiced.
     * @type {number}
     * @memberof SalesDataTotalInterface
     */
    'base_shipping_invoiced'?: number;
    /**
     * Base shipping refunded.
     * @type {number}
     * @memberof SalesDataTotalInterface
     */
    'base_shipping_refunded'?: number;
    /**
     * Base shipping tax amount.
     * @type {number}
     * @memberof SalesDataTotalInterface
     */
    'base_shipping_tax_amount'?: number;
    /**
     * Base shipping tax refunded.
     * @type {number}
     * @memberof SalesDataTotalInterface
     */
    'base_shipping_tax_refunded'?: number;
    /**
     * Shipping amount.
     * @type {number}
     * @memberof SalesDataTotalInterface
     */
    'shipping_amount'?: number;
    /**
     * Shipping canceled amount.
     * @type {number}
     * @memberof SalesDataTotalInterface
     */
    'shipping_canceled'?: number;
    /**
     * Shipping discount amount.
     * @type {number}
     * @memberof SalesDataTotalInterface
     */
    'shipping_discount_amount'?: number;
    /**
     * Shipping discount tax compensation amount.
     * @type {number}
     * @memberof SalesDataTotalInterface
     */
    'shipping_discount_tax_compensation_amount'?: number;
    /**
     * Shipping including tax amount.
     * @type {number}
     * @memberof SalesDataTotalInterface
     */
    'shipping_incl_tax'?: number;
    /**
     * Shipping invoiced amount.
     * @type {number}
     * @memberof SalesDataTotalInterface
     */
    'shipping_invoiced'?: number;
    /**
     * Shipping refunded amount.
     * @type {number}
     * @memberof SalesDataTotalInterface
     */
    'shipping_refunded'?: number;
    /**
     * Shipping tax amount.
     * @type {number}
     * @memberof SalesDataTotalInterface
     */
    'shipping_tax_amount'?: number;
    /**
     * Shipping tax refunded amount.
     * @type {number}
     * @memberof SalesDataTotalInterface
     */
    'shipping_tax_refunded'?: number;
    /**
     * ExtensionInterface class for @see \\Magento\\Sales\\Api\\Data\\TotalInterface
     * @type {object}
     * @memberof SalesDataTotalInterface
     */
    'extension_attributes'?: object;
}
/**
 * Transaction interface. A transaction is an interaction between a merchant and a customer such as a purchase, a credit, a refund, and so on.
 * @export
 * @interface SalesDataTransactionInterface
 */
export interface SalesDataTransactionInterface {
    /**
     * Transaction ID.
     * @type {number}
     * @memberof SalesDataTransactionInterface
     */
    'transaction_id': number;
    /**
     * The parent ID for the transaction. Otherwise, null.
     * @type {number}
     * @memberof SalesDataTransactionInterface
     */
    'parent_id'?: number;
    /**
     * Order ID.
     * @type {number}
     * @memberof SalesDataTransactionInterface
     */
    'order_id': number;
    /**
     * Payment ID.
     * @type {number}
     * @memberof SalesDataTransactionInterface
     */
    'payment_id': number;
    /**
     * Transaction business ID.
     * @type {string}
     * @memberof SalesDataTransactionInterface
     */
    'txn_id': string;
    /**
     * Parent transaction business ID.
     * @type {string}
     * @memberof SalesDataTransactionInterface
     */
    'parent_txn_id': string;
    /**
     * Transaction type.
     * @type {string}
     * @memberof SalesDataTransactionInterface
     */
    'txn_type': string;
    /**
     * Is-closed flag value.
     * @type {number}
     * @memberof SalesDataTransactionInterface
     */
    'is_closed': number;
    /**
     * Array of additional information. Otherwise, null.
     * @type {Array<string>}
     * @memberof SalesDataTransactionInterface
     */
    'additional_information'?: Array<string>;
    /**
     * Created-at timestamp.
     * @type {string}
     * @memberof SalesDataTransactionInterface
     */
    'created_at': string;
    /**
     * Array of child transactions.
     * @type {Array<SalesDataTransactionInterface>}
     * @memberof SalesDataTransactionInterface
     */
    'child_transactions': Array<SalesDataTransactionInterface>;
    /**
     * ExtensionInterface class for @see \\Magento\\Sales\\Api\\Data\\TransactionInterface
     * @type {object}
     * @memberof SalesDataTransactionInterface
     */
    'extension_attributes'?: object;
}
/**
 * Transaction search result interface. A transaction is an interaction between a merchant and a customer such as a purchase, a credit, a refund, and so on.
 * @export
 * @interface SalesDataTransactionSearchResultInterface
 */
export interface SalesDataTransactionSearchResultInterface {
    /**
     * Array of collection items.
     * @type {Array<SalesDataTransactionInterface>}
     * @memberof SalesDataTransactionSearchResultInterface
     */
    'items': Array<SalesDataTransactionInterface>;
    /**
     * 
     * @type {FrameworkSearchCriteriaInterface}
     * @memberof SalesDataTransactionSearchResultInterface
     */
    'search_criteria': FrameworkSearchCriteriaInterface;
    /**
     * Total count.
     * @type {number}
     * @memberof SalesDataTransactionSearchResultInterface
     */
    'total_count': number;
}
/**
 * 
 * @export
 * @interface SalesInvoiceCommentRepositoryV1SavePostRequest
 */
export interface SalesInvoiceCommentRepositoryV1SavePostRequest {
    /**
     * 
     * @type {SalesDataInvoiceCommentInterface}
     * @memberof SalesInvoiceCommentRepositoryV1SavePostRequest
     */
    'entity': SalesDataInvoiceCommentInterface;
}
/**
 * 
 * @export
 * @interface SalesInvoiceOrderV1ExecutePostRequest
 */
export interface SalesInvoiceOrderV1ExecutePostRequest {
    /**
     * 
     * @type {boolean}
     * @memberof SalesInvoiceOrderV1ExecutePostRequest
     */
    'capture'?: boolean;
    /**
     * 
     * @type {Array<SalesDataInvoiceItemCreationInterface>}
     * @memberof SalesInvoiceOrderV1ExecutePostRequest
     */
    'items'?: Array<SalesDataInvoiceItemCreationInterface>;
    /**
     * 
     * @type {boolean}
     * @memberof SalesInvoiceOrderV1ExecutePostRequest
     */
    'notify'?: boolean;
    /**
     * 
     * @type {boolean}
     * @memberof SalesInvoiceOrderV1ExecutePostRequest
     */
    'appendComment'?: boolean;
    /**
     * 
     * @type {SalesDataInvoiceCommentCreationInterface}
     * @memberof SalesInvoiceOrderV1ExecutePostRequest
     */
    'comment'?: SalesDataInvoiceCommentCreationInterface;
    /**
     * 
     * @type {SalesDataInvoiceCreationArgumentsInterface}
     * @memberof SalesInvoiceOrderV1ExecutePostRequest
     */
    'arguments'?: SalesDataInvoiceCreationArgumentsInterface;
}
/**
 * 
 * @export
 * @interface SalesInvoiceRepositoryV1SavePostRequest
 */
export interface SalesInvoiceRepositoryV1SavePostRequest {
    /**
     * 
     * @type {SalesDataInvoiceInterface}
     * @memberof SalesInvoiceRepositoryV1SavePostRequest
     */
    'entity': SalesDataInvoiceInterface;
}
/**
 * 
 * @export
 * @interface SalesOrderAddressRepositoryV1SavePutRequest
 */
export interface SalesOrderAddressRepositoryV1SavePutRequest {
    /**
     * 
     * @type {SalesDataOrderAddressInterface}
     * @memberof SalesOrderAddressRepositoryV1SavePutRequest
     */
    'entity': SalesDataOrderAddressInterface;
}
/**
 * 
 * @export
 * @interface SalesOrderManagementV1AddCommentPostRequest
 */
export interface SalesOrderManagementV1AddCommentPostRequest {
    /**
     * 
     * @type {SalesDataOrderStatusHistoryInterface}
     * @memberof SalesOrderManagementV1AddCommentPostRequest
     */
    'statusHistory': SalesDataOrderStatusHistoryInterface;
}
/**
 * 
 * @export
 * @interface SalesOrderRepositoryV1SavePostRequest
 */
export interface SalesOrderRepositoryV1SavePostRequest {
    /**
     * 
     * @type {SalesDataOrderInterface}
     * @memberof SalesOrderRepositoryV1SavePostRequest
     */
    'entity': SalesDataOrderInterface;
}
/**
 * 
 * @export
 * @interface SalesRefundInvoiceV1ExecutePostRequest
 */
export interface SalesRefundInvoiceV1ExecutePostRequest {
    /**
     * 
     * @type {Array<SalesDataCreditmemoItemCreationInterface>}
     * @memberof SalesRefundInvoiceV1ExecutePostRequest
     */
    'items'?: Array<SalesDataCreditmemoItemCreationInterface>;
    /**
     * 
     * @type {boolean}
     * @memberof SalesRefundInvoiceV1ExecutePostRequest
     */
    'isOnline'?: boolean;
    /**
     * 
     * @type {boolean}
     * @memberof SalesRefundInvoiceV1ExecutePostRequest
     */
    'notify'?: boolean;
    /**
     * 
     * @type {boolean}
     * @memberof SalesRefundInvoiceV1ExecutePostRequest
     */
    'appendComment'?: boolean;
    /**
     * 
     * @type {SalesDataCreditmemoCommentCreationInterface}
     * @memberof SalesRefundInvoiceV1ExecutePostRequest
     */
    'comment'?: SalesDataCreditmemoCommentCreationInterface;
    /**
     * 
     * @type {SalesDataCreditmemoCreationArgumentsInterface}
     * @memberof SalesRefundInvoiceV1ExecutePostRequest
     */
    'arguments'?: SalesDataCreditmemoCreationArgumentsInterface;
}
/**
 * 
 * @export
 * @interface SalesRefundOrderV1ExecutePostRequest
 */
export interface SalesRefundOrderV1ExecutePostRequest {
    /**
     * 
     * @type {Array<SalesDataCreditmemoItemCreationInterface>}
     * @memberof SalesRefundOrderV1ExecutePostRequest
     */
    'items'?: Array<SalesDataCreditmemoItemCreationInterface>;
    /**
     * 
     * @type {boolean}
     * @memberof SalesRefundOrderV1ExecutePostRequest
     */
    'notify'?: boolean;
    /**
     * 
     * @type {boolean}
     * @memberof SalesRefundOrderV1ExecutePostRequest
     */
    'appendComment'?: boolean;
    /**
     * 
     * @type {SalesDataCreditmemoCommentCreationInterface}
     * @memberof SalesRefundOrderV1ExecutePostRequest
     */
    'comment'?: SalesDataCreditmemoCommentCreationInterface;
    /**
     * 
     * @type {SalesDataCreditmemoCreationArgumentsInterface}
     * @memberof SalesRefundOrderV1ExecutePostRequest
     */
    'arguments'?: SalesDataCreditmemoCreationArgumentsInterface;
}
/**
 * 
 * @export
 * @interface SalesRuleCouponManagementV1DeleteByCodesPostRequest
 */
export interface SalesRuleCouponManagementV1DeleteByCodesPostRequest {
    /**
     * 
     * @type {Array<string>}
     * @memberof SalesRuleCouponManagementV1DeleteByCodesPostRequest
     */
    'codes': Array<string>;
    /**
     * 
     * @type {boolean}
     * @memberof SalesRuleCouponManagementV1DeleteByCodesPostRequest
     */
    'ignoreInvalidCoupons'?: boolean;
}
/**
 * 
 * @export
 * @interface SalesRuleCouponManagementV1DeleteByIdsPostRequest
 */
export interface SalesRuleCouponManagementV1DeleteByIdsPostRequest {
    /**
     * 
     * @type {Array<number>}
     * @memberof SalesRuleCouponManagementV1DeleteByIdsPostRequest
     */
    'ids': Array<number>;
    /**
     * 
     * @type {boolean}
     * @memberof SalesRuleCouponManagementV1DeleteByIdsPostRequest
     */
    'ignoreInvalidCoupons'?: boolean;
}
/**
 * 
 * @export
 * @interface SalesRuleCouponManagementV1GeneratePostRequest
 */
export interface SalesRuleCouponManagementV1GeneratePostRequest {
    /**
     * 
     * @type {SalesRuleDataCouponGenerationSpecInterface}
     * @memberof SalesRuleCouponManagementV1GeneratePostRequest
     */
    'couponSpec': SalesRuleDataCouponGenerationSpecInterface;
}
/**
 * 
 * @export
 * @interface SalesRuleCouponRepositoryV1SavePostRequest
 */
export interface SalesRuleCouponRepositoryV1SavePostRequest {
    /**
     * 
     * @type {SalesRuleDataCouponInterface}
     * @memberof SalesRuleCouponRepositoryV1SavePostRequest
     */
    'coupon': SalesRuleDataCouponInterface;
}
/**
 * Interface ConditionInterface
 * @export
 * @interface SalesRuleDataConditionInterface
 */
export interface SalesRuleDataConditionInterface {
    /**
     * Condition type
     * @type {string}
     * @memberof SalesRuleDataConditionInterface
     */
    'condition_type': string;
    /**
     * List of conditions
     * @type {Array<SalesRuleDataConditionInterface>}
     * @memberof SalesRuleDataConditionInterface
     */
    'conditions'?: Array<SalesRuleDataConditionInterface>;
    /**
     * The aggregator type
     * @type {string}
     * @memberof SalesRuleDataConditionInterface
     */
    'aggregator_type'?: string;
    /**
     * The operator of the condition
     * @type {string}
     * @memberof SalesRuleDataConditionInterface
     */
    'operator': string;
    /**
     * The attribute name of the condition
     * @type {string}
     * @memberof SalesRuleDataConditionInterface
     */
    'attribute_name'?: string;
    /**
     * The value of the condition
     * @type {string}
     * @memberof SalesRuleDataConditionInterface
     */
    'value': string;
    /**
     * ExtensionInterface class for @see \\Magento\\SalesRule\\Api\\Data\\ConditionInterface
     * @type {object}
     * @memberof SalesRuleDataConditionInterface
     */
    'extension_attributes'?: object;
}
/**
 * CouponGenerationSpecInterface
 * @export
 * @interface SalesRuleDataCouponGenerationSpecInterface
 */
export interface SalesRuleDataCouponGenerationSpecInterface {
    /**
     * The id of the rule associated with the coupon
     * @type {number}
     * @memberof SalesRuleDataCouponGenerationSpecInterface
     */
    'rule_id': number;
    /**
     * Format of generated coupon code
     * @type {string}
     * @memberof SalesRuleDataCouponGenerationSpecInterface
     */
    'format': string;
    /**
     * Of coupons to generate
     * @type {number}
     * @memberof SalesRuleDataCouponGenerationSpecInterface
     */
    'quantity': number;
    /**
     * Length of coupon code
     * @type {number}
     * @memberof SalesRuleDataCouponGenerationSpecInterface
     */
    'length': number;
    /**
     * The prefix
     * @type {string}
     * @memberof SalesRuleDataCouponGenerationSpecInterface
     */
    'prefix'?: string;
    /**
     * The suffix
     * @type {string}
     * @memberof SalesRuleDataCouponGenerationSpecInterface
     */
    'suffix'?: string;
    /**
     * The spacing where the delimiter should exist
     * @type {number}
     * @memberof SalesRuleDataCouponGenerationSpecInterface
     */
    'delimiter_at_every'?: number;
    /**
     * The delimiter
     * @type {string}
     * @memberof SalesRuleDataCouponGenerationSpecInterface
     */
    'delimiter'?: string;
    /**
     * ExtensionInterface class for @see \\Magento\\SalesRule\\Api\\Data\\CouponGenerationSpecInterface
     * @type {object}
     * @memberof SalesRuleDataCouponGenerationSpecInterface
     */
    'extension_attributes'?: object;
}
/**
 * Interface CouponInterface
 * @export
 * @interface SalesRuleDataCouponInterface
 */
export interface SalesRuleDataCouponInterface {
    /**
     * Coupon id
     * @type {number}
     * @memberof SalesRuleDataCouponInterface
     */
    'coupon_id'?: number;
    /**
     * The id of the rule associated with the coupon
     * @type {number}
     * @memberof SalesRuleDataCouponInterface
     */
    'rule_id': number;
    /**
     * Coupon code
     * @type {string}
     * @memberof SalesRuleDataCouponInterface
     */
    'code'?: string;
    /**
     * Usage limit
     * @type {number}
     * @memberof SalesRuleDataCouponInterface
     */
    'usage_limit'?: number;
    /**
     * Usage limit per customer
     * @type {number}
     * @memberof SalesRuleDataCouponInterface
     */
    'usage_per_customer'?: number;
    /**
     * The number of times the coupon has been used
     * @type {number}
     * @memberof SalesRuleDataCouponInterface
     */
    'times_used': number;
    /**
     * Expiration date
     * @type {string}
     * @memberof SalesRuleDataCouponInterface
     */
    'expiration_date'?: string;
    /**
     * The coupon is primary coupon for the rule that it\'s associated with
     * @type {boolean}
     * @memberof SalesRuleDataCouponInterface
     */
    'is_primary': boolean;
    /**
     * When the coupon is created
     * @type {string}
     * @memberof SalesRuleDataCouponInterface
     */
    'created_at'?: string;
    /**
     * Of coupon
     * @type {number}
     * @memberof SalesRuleDataCouponInterface
     */
    'type'?: number;
    /**
     * ExtensionInterface class for @see \\Magento\\SalesRule\\Api\\Data\\CouponInterface
     * @type {object}
     * @memberof SalesRuleDataCouponInterface
     */
    'extension_attributes'?: object;
}
/**
 * Coupon mass delete results interface.
 * @export
 * @interface SalesRuleDataCouponMassDeleteResultInterface
 */
export interface SalesRuleDataCouponMassDeleteResultInterface {
    /**
     * List of failed items.
     * @type {Array<string>}
     * @memberof SalesRuleDataCouponMassDeleteResultInterface
     */
    'failed_items': Array<string>;
    /**
     * List of missing items.
     * @type {Array<string>}
     * @memberof SalesRuleDataCouponMassDeleteResultInterface
     */
    'missing_items': Array<string>;
}
/**
 * 
 * @export
 * @interface SalesRuleDataCouponSearchResultInterface
 */
export interface SalesRuleDataCouponSearchResultInterface {
    /**
     * Rules.
     * @type {Array<SalesRuleDataCouponInterface>}
     * @memberof SalesRuleDataCouponSearchResultInterface
     */
    'items': Array<SalesRuleDataCouponInterface>;
    /**
     * 
     * @type {FrameworkSearchCriteriaInterface}
     * @memberof SalesRuleDataCouponSearchResultInterface
     */
    'search_criteria': FrameworkSearchCriteriaInterface;
    /**
     * Total count.
     * @type {number}
     * @memberof SalesRuleDataCouponSearchResultInterface
     */
    'total_count': number;
}
/**
 * ExtensionInterface class for @see \\Magento\\SalesRule\\Api\\Data\\RuleInterface
 * @export
 * @interface SalesRuleDataRuleExtensionInterface
 */
export interface SalesRuleDataRuleExtensionInterface {
    /**
     * 
     * @type {number}
     * @memberof SalesRuleDataRuleExtensionInterface
     */
    'reward_points_delta'?: number;
}
/**
 * Interface RuleInterface
 * @export
 * @interface SalesRuleDataRuleInterface
 */
export interface SalesRuleDataRuleInterface {
    /**
     * Rule id
     * @type {number}
     * @memberof SalesRuleDataRuleInterface
     */
    'rule_id'?: number;
    /**
     * Rule name
     * @type {string}
     * @memberof SalesRuleDataRuleInterface
     */
    'name'?: string;
    /**
     * Display label
     * @type {Array<SalesRuleDataRuleLabelInterface>}
     * @memberof SalesRuleDataRuleInterface
     */
    'store_labels'?: Array<SalesRuleDataRuleLabelInterface>;
    /**
     * Description
     * @type {string}
     * @memberof SalesRuleDataRuleInterface
     */
    'description'?: string;
    /**
     * A list of websites the rule applies to
     * @type {Array<number>}
     * @memberof SalesRuleDataRuleInterface
     */
    'website_ids': Array<number>;
    /**
     * Ids of customer groups that the rule applies to
     * @type {Array<number>}
     * @memberof SalesRuleDataRuleInterface
     */
    'customer_group_ids': Array<number>;
    /**
     * The start date when the coupon is active
     * @type {string}
     * @memberof SalesRuleDataRuleInterface
     */
    'from_date'?: string;
    /**
     * The end date when the coupon is active
     * @type {string}
     * @memberof SalesRuleDataRuleInterface
     */
    'to_date'?: string;
    /**
     * Number of uses per customer
     * @type {number}
     * @memberof SalesRuleDataRuleInterface
     */
    'uses_per_customer': number;
    /**
     * The coupon is active
     * @type {boolean}
     * @memberof SalesRuleDataRuleInterface
     */
    'is_active': boolean;
    /**
     * 
     * @type {SalesRuleDataConditionInterface}
     * @memberof SalesRuleDataRuleInterface
     */
    'condition'?: SalesRuleDataConditionInterface;
    /**
     * 
     * @type {SalesRuleDataConditionInterface}
     * @memberof SalesRuleDataRuleInterface
     */
    'action_condition'?: SalesRuleDataConditionInterface;
    /**
     * To stop rule processing
     * @type {boolean}
     * @memberof SalesRuleDataRuleInterface
     */
    'stop_rules_processing': boolean;
    /**
     * Is this field needed
     * @type {boolean}
     * @memberof SalesRuleDataRuleInterface
     */
    'is_advanced': boolean;
    /**
     * Product ids
     * @type {Array<number>}
     * @memberof SalesRuleDataRuleInterface
     */
    'product_ids'?: Array<number>;
    /**
     * Sort order
     * @type {number}
     * @memberof SalesRuleDataRuleInterface
     */
    'sort_order': number;
    /**
     * Simple action of the rule
     * @type {string}
     * @memberof SalesRuleDataRuleInterface
     */
    'simple_action'?: string;
    /**
     * Discount amount
     * @type {number}
     * @memberof SalesRuleDataRuleInterface
     */
    'discount_amount': number;
    /**
     * Maximum qty discount is applied
     * @type {number}
     * @memberof SalesRuleDataRuleInterface
     */
    'discount_qty'?: number;
    /**
     * Discount step
     * @type {number}
     * @memberof SalesRuleDataRuleInterface
     */
    'discount_step': number;
    /**
     * The rule applies to shipping
     * @type {boolean}
     * @memberof SalesRuleDataRuleInterface
     */
    'apply_to_shipping': boolean;
    /**
     * How many times the rule has been used
     * @type {number}
     * @memberof SalesRuleDataRuleInterface
     */
    'times_used': number;
    /**
     * Whether the rule is in RSS
     * @type {boolean}
     * @memberof SalesRuleDataRuleInterface
     */
    'is_rss': boolean;
    /**
     * Coupon type
     * @type {string}
     * @memberof SalesRuleDataRuleInterface
     */
    'coupon_type': string;
    /**
     * To auto generate coupon
     * @type {boolean}
     * @memberof SalesRuleDataRuleInterface
     */
    'use_auto_generation': boolean;
    /**
     * Limit of uses per coupon
     * @type {number}
     * @memberof SalesRuleDataRuleInterface
     */
    'uses_per_coupon': number;
    /**
     * To grant free shipping
     * @type {string}
     * @memberof SalesRuleDataRuleInterface
     */
    'simple_free_shipping'?: string;
    /**
     * 
     * @type {SalesRuleDataRuleExtensionInterface}
     * @memberof SalesRuleDataRuleInterface
     */
    'extension_attributes'?: SalesRuleDataRuleExtensionInterface;
}
/**
 * Interface RuleLabelInterface
 * @export
 * @interface SalesRuleDataRuleLabelInterface
 */
export interface SalesRuleDataRuleLabelInterface {
    /**
     * StoreId
     * @type {number}
     * @memberof SalesRuleDataRuleLabelInterface
     */
    'store_id': number;
    /**
     * The label for the store
     * @type {string}
     * @memberof SalesRuleDataRuleLabelInterface
     */
    'store_label': string;
    /**
     * ExtensionInterface class for @see \\Magento\\SalesRule\\Api\\Data\\RuleLabelInterface
     * @type {object}
     * @memberof SalesRuleDataRuleLabelInterface
     */
    'extension_attributes'?: object;
}
/**
 * 
 * @export
 * @interface SalesRuleDataRuleSearchResultInterface
 */
export interface SalesRuleDataRuleSearchResultInterface {
    /**
     * Rules.
     * @type {Array<SalesRuleDataRuleInterface>}
     * @memberof SalesRuleDataRuleSearchResultInterface
     */
    'items': Array<SalesRuleDataRuleInterface>;
    /**
     * 
     * @type {FrameworkSearchCriteriaInterface}
     * @memberof SalesRuleDataRuleSearchResultInterface
     */
    'search_criteria': FrameworkSearchCriteriaInterface;
    /**
     * Total count.
     * @type {number}
     * @memberof SalesRuleDataRuleSearchResultInterface
     */
    'total_count': number;
}
/**
 * 
 * @export
 * @interface SalesRuleRuleRepositoryV1SavePostRequest
 */
export interface SalesRuleRuleRepositoryV1SavePostRequest {
    /**
     * 
     * @type {SalesRuleDataRuleInterface}
     * @memberof SalesRuleRuleRepositoryV1SavePostRequest
     */
    'rule': SalesRuleDataRuleInterface;
}
/**
 * 
 * @export
 * @interface SalesShipOrderV1ExecutePostRequest
 */
export interface SalesShipOrderV1ExecutePostRequest {
    /**
     * 
     * @type {Array<SalesDataShipmentItemCreationInterface>}
     * @memberof SalesShipOrderV1ExecutePostRequest
     */
    'items'?: Array<SalesDataShipmentItemCreationInterface>;
    /**
     * 
     * @type {boolean}
     * @memberof SalesShipOrderV1ExecutePostRequest
     */
    'notify'?: boolean;
    /**
     * 
     * @type {boolean}
     * @memberof SalesShipOrderV1ExecutePostRequest
     */
    'appendComment'?: boolean;
    /**
     * 
     * @type {SalesDataShipmentCommentCreationInterface}
     * @memberof SalesShipOrderV1ExecutePostRequest
     */
    'comment'?: SalesDataShipmentCommentCreationInterface;
    /**
     * 
     * @type {Array<SalesDataShipmentTrackCreationInterface>}
     * @memberof SalesShipOrderV1ExecutePostRequest
     */
    'tracks'?: Array<SalesDataShipmentTrackCreationInterface>;
    /**
     * 
     * @type {Array<SalesDataShipmentPackageCreationInterface>}
     * @memberof SalesShipOrderV1ExecutePostRequest
     */
    'packages'?: Array<SalesDataShipmentPackageCreationInterface>;
    /**
     * 
     * @type {SalesDataShipmentCreationArgumentsInterface}
     * @memberof SalesShipOrderV1ExecutePostRequest
     */
    'arguments'?: SalesDataShipmentCreationArgumentsInterface;
}
/**
 * 
 * @export
 * @interface SalesShipmentCommentRepositoryV1SavePostRequest
 */
export interface SalesShipmentCommentRepositoryV1SavePostRequest {
    /**
     * 
     * @type {SalesDataShipmentCommentInterface}
     * @memberof SalesShipmentCommentRepositoryV1SavePostRequest
     */
    'entity': SalesDataShipmentCommentInterface;
}
/**
 * 
 * @export
 * @interface SalesShipmentRepositoryV1SavePostRequest
 */
export interface SalesShipmentRepositoryV1SavePostRequest {
    /**
     * 
     * @type {SalesDataShipmentInterface}
     * @memberof SalesShipmentRepositoryV1SavePostRequest
     */
    'entity': SalesDataShipmentInterface;
}
/**
 * 
 * @export
 * @interface SalesShipmentTrackRepositoryV1SavePostRequest
 */
export interface SalesShipmentTrackRepositoryV1SavePostRequest {
    /**
     * 
     * @type {SalesDataShipmentTrackInterface}
     * @memberof SalesShipmentTrackRepositoryV1SavePostRequest
     */
    'entity': SalesDataShipmentTrackInterface;
}
/**
 * 
 * @export
 * @interface SharedCatalogCategoryManagementV1AssignCategoriesPostRequest
 */
export interface SharedCatalogCategoryManagementV1AssignCategoriesPostRequest {
    /**
     * 
     * @type {Array<CatalogDataCategoryInterface>}
     * @memberof SharedCatalogCategoryManagementV1AssignCategoriesPostRequest
     */
    'categories': Array<CatalogDataCategoryInterface>;
}
/**
 * 
 * @export
 * @interface SharedCatalogCompanyManagementV1AssignCompaniesPostRequest
 */
export interface SharedCatalogCompanyManagementV1AssignCompaniesPostRequest {
    /**
     * 
     * @type {Array<CompanyDataCompanyInterface>}
     * @memberof SharedCatalogCompanyManagementV1AssignCompaniesPostRequest
     */
    'companies': Array<CompanyDataCompanyInterface>;
}
/**
 * Interface for Shared Catalog search results.
 * @export
 * @interface SharedCatalogDataSearchResultsInterface
 */
export interface SharedCatalogDataSearchResultsInterface {
    /**
     * Shared Catalog list.
     * @type {Array<SharedCatalogDataSharedCatalogInterface>}
     * @memberof SharedCatalogDataSearchResultsInterface
     */
    'items': Array<SharedCatalogDataSharedCatalogInterface>;
    /**
     * 
     * @type {FrameworkSearchCriteriaInterface}
     * @memberof SharedCatalogDataSearchResultsInterface
     */
    'search_criteria': FrameworkSearchCriteriaInterface;
    /**
     * Total count.
     * @type {number}
     * @memberof SharedCatalogDataSearchResultsInterface
     */
    'total_count': number;
}
/**
 * SharedCatalogInterface interface.
 * @export
 * @interface SharedCatalogDataSharedCatalogInterface
 */
export interface SharedCatalogDataSharedCatalogInterface {
    /**
     * ID.
     * @type {number}
     * @memberof SharedCatalogDataSharedCatalogInterface
     */
    'id'?: number;
    /**
     * Shared Catalog name.
     * @type {string}
     * @memberof SharedCatalogDataSharedCatalogInterface
     */
    'name': string;
    /**
     * Shared Catalog description.
     * @type {string}
     * @memberof SharedCatalogDataSharedCatalogInterface
     */
    'description': string;
    /**
     * Customer Group Id.
     * @type {number}
     * @memberof SharedCatalogDataSharedCatalogInterface
     */
    'customer_group_id': number;
    /**
     * Shared Catalog type.
     * @type {number}
     * @memberof SharedCatalogDataSharedCatalogInterface
     */
    'type': number;
    /**
     * Created time for Shared Catalog.
     * @type {string}
     * @memberof SharedCatalogDataSharedCatalogInterface
     */
    'created_at': string;
    /**
     * Admin id for Shared Catalog.
     * @type {number}
     * @memberof SharedCatalogDataSharedCatalogInterface
     */
    'created_by': number;
    /**
     * Store id for Shared Catalog.
     * @type {number}
     * @memberof SharedCatalogDataSharedCatalogInterface
     */
    'store_id': number;
    /**
     * Tax class id.
     * @type {number}
     * @memberof SharedCatalogDataSharedCatalogInterface
     */
    'tax_class_id': number;
}
/**
 * 
 * @export
 * @interface SharedCatalogProductManagementV1AssignProductsPostRequest
 */
export interface SharedCatalogProductManagementV1AssignProductsPostRequest {
    /**
     * 
     * @type {Array<CatalogDataProductInterface>}
     * @memberof SharedCatalogProductManagementV1AssignProductsPostRequest
     */
    'products': Array<CatalogDataProductInterface>;
}
/**
 * 
 * @export
 * @interface SharedCatalogSharedCatalogRepositoryV1SavePostRequest
 */
export interface SharedCatalogSharedCatalogRepositoryV1SavePostRequest {
    /**
     * 
     * @type {SharedCatalogDataSharedCatalogInterface}
     * @memberof SharedCatalogSharedCatalogRepositoryV1SavePostRequest
     */
    'sharedCatalog': SharedCatalogDataSharedCatalogInterface;
}
/**
 * Group interface
 * @export
 * @interface StoreDataGroupInterface
 */
export interface StoreDataGroupInterface {
    /**
     * 
     * @type {number}
     * @memberof StoreDataGroupInterface
     */
    'id': number;
    /**
     * 
     * @type {number}
     * @memberof StoreDataGroupInterface
     */
    'website_id': number;
    /**
     * 
     * @type {number}
     * @memberof StoreDataGroupInterface
     */
    'root_category_id': number;
    /**
     * 
     * @type {number}
     * @memberof StoreDataGroupInterface
     */
    'default_store_id': number;
    /**
     * 
     * @type {string}
     * @memberof StoreDataGroupInterface
     */
    'name': string;
    /**
     * Group code.
     * @type {string}
     * @memberof StoreDataGroupInterface
     */
    'code': string;
    /**
     * ExtensionInterface class for @see \\Magento\\Store\\Api\\Data\\GroupInterface
     * @type {object}
     * @memberof StoreDataGroupInterface
     */
    'extension_attributes'?: object;
}
/**
 * StoreConfig interface
 * @export
 * @interface StoreDataStoreConfigInterface
 */
export interface StoreDataStoreConfigInterface {
    /**
     * Store id
     * @type {number}
     * @memberof StoreDataStoreConfigInterface
     */
    'id': number;
    /**
     * Store code
     * @type {string}
     * @memberof StoreDataStoreConfigInterface
     */
    'code': string;
    /**
     * Website id of the store
     * @type {number}
     * @memberof StoreDataStoreConfigInterface
     */
    'website_id': number;
    /**
     * Store locale
     * @type {string}
     * @memberof StoreDataStoreConfigInterface
     */
    'locale': string;
    /**
     * Base currency code
     * @type {string}
     * @memberof StoreDataStoreConfigInterface
     */
    'base_currency_code': string;
    /**
     * Default display currency code
     * @type {string}
     * @memberof StoreDataStoreConfigInterface
     */
    'default_display_currency_code': string;
    /**
     * Timezone of the store
     * @type {string}
     * @memberof StoreDataStoreConfigInterface
     */
    'timezone': string;
    /**
     * The unit of weight
     * @type {string}
     * @memberof StoreDataStoreConfigInterface
     */
    'weight_unit': string;
    /**
     * Base URL for the store
     * @type {string}
     * @memberof StoreDataStoreConfigInterface
     */
    'base_url': string;
    /**
     * Base link URL for the store
     * @type {string}
     * @memberof StoreDataStoreConfigInterface
     */
    'base_link_url': string;
    /**
     * Base static URL for the store
     * @type {string}
     * @memberof StoreDataStoreConfigInterface
     */
    'base_static_url': string;
    /**
     * Base media URL for the store
     * @type {string}
     * @memberof StoreDataStoreConfigInterface
     */
    'base_media_url': string;
    /**
     * Secure base URL for the store
     * @type {string}
     * @memberof StoreDataStoreConfigInterface
     */
    'secure_base_url': string;
    /**
     * Secure base link URL for the store
     * @type {string}
     * @memberof StoreDataStoreConfigInterface
     */
    'secure_base_link_url': string;
    /**
     * Secure base static URL for the store
     * @type {string}
     * @memberof StoreDataStoreConfigInterface
     */
    'secure_base_static_url': string;
    /**
     * Secure base media URL for the store
     * @type {string}
     * @memberof StoreDataStoreConfigInterface
     */
    'secure_base_media_url': string;
    /**
     * ExtensionInterface class for @see \\Magento\\Store\\Api\\Data\\StoreConfigInterface
     * @type {object}
     * @memberof StoreDataStoreConfigInterface
     */
    'extension_attributes'?: object;
}
/**
 * Store interface
 * @export
 * @interface StoreDataStoreInterface
 */
export interface StoreDataStoreInterface {
    /**
     * 
     * @type {number}
     * @memberof StoreDataStoreInterface
     */
    'id': number;
    /**
     * 
     * @type {string}
     * @memberof StoreDataStoreInterface
     */
    'code': string;
    /**
     * Store name
     * @type {string}
     * @memberof StoreDataStoreInterface
     */
    'name': string;
    /**
     * 
     * @type {number}
     * @memberof StoreDataStoreInterface
     */
    'website_id': number;
    /**
     * 
     * @type {number}
     * @memberof StoreDataStoreInterface
     */
    'store_group_id': number;
    /**
     * ExtensionInterface class for @see \\Magento\\Store\\Api\\Data\\StoreInterface
     * @type {object}
     * @memberof StoreDataStoreInterface
     */
    'extension_attributes'?: object;
}
/**
 * Website interface
 * @export
 * @interface StoreDataWebsiteInterface
 */
export interface StoreDataWebsiteInterface {
    /**
     * 
     * @type {number}
     * @memberof StoreDataWebsiteInterface
     */
    'id': number;
    /**
     * 
     * @type {string}
     * @memberof StoreDataWebsiteInterface
     */
    'code': string;
    /**
     * Website name
     * @type {string}
     * @memberof StoreDataWebsiteInterface
     */
    'name': string;
    /**
     * 
     * @type {number}
     * @memberof StoreDataWebsiteInterface
     */
    'default_group_id': number;
    /**
     * ExtensionInterface class for @see \\Magento\\Store\\Api\\Data\\WebsiteInterface
     * @type {object}
     * @memberof StoreDataWebsiteInterface
     */
    'extension_attributes'?: object;
}
/**
 * Applied tax rate interface.
 * @export
 * @interface TaxDataAppliedTaxRateInterface
 */
export interface TaxDataAppliedTaxRateInterface {
    /**
     * Code
     * @type {string}
     * @memberof TaxDataAppliedTaxRateInterface
     */
    'code'?: string;
    /**
     * Title
     * @type {string}
     * @memberof TaxDataAppliedTaxRateInterface
     */
    'title'?: string;
    /**
     * Tax Percent
     * @type {number}
     * @memberof TaxDataAppliedTaxRateInterface
     */
    'percent'?: number;
    /**
     * ExtensionInterface class for @see \\Magento\\Tax\\Api\\Data\\AppliedTaxRateInterface
     * @type {object}
     * @memberof TaxDataAppliedTaxRateInterface
     */
    'extension_attributes'?: object;
}
/**
 * Interface GrandTotalDetailsInterface
 * @export
 * @interface TaxDataGrandTotalDetailsInterface
 */
export interface TaxDataGrandTotalDetailsInterface {
    /**
     * Tax amount value
     * @type {number}
     * @memberof TaxDataGrandTotalDetailsInterface
     */
    'amount': number;
    /**
     * Tax rates info
     * @type {Array<TaxDataGrandTotalRatesInterface>}
     * @memberof TaxDataGrandTotalDetailsInterface
     */
    'rates': Array<TaxDataGrandTotalRatesInterface>;
    /**
     * Group identifier
     * @type {number}
     * @memberof TaxDataGrandTotalDetailsInterface
     */
    'group_id': number;
}
/**
 * Interface GrandTotalRatesInterface
 * @export
 * @interface TaxDataGrandTotalRatesInterface
 */
export interface TaxDataGrandTotalRatesInterface {
    /**
     * Tax percentage value
     * @type {string}
     * @memberof TaxDataGrandTotalRatesInterface
     */
    'percent': string;
    /**
     * Rate title
     * @type {string}
     * @memberof TaxDataGrandTotalRatesInterface
     */
    'title': string;
}
/**
 * ExtensionInterface class for @see \\Magento\\Tax\\Api\\Data\\OrderTaxDetailsAppliedTaxInterface
 * @export
 * @interface TaxDataOrderTaxDetailsAppliedTaxExtensionInterface
 */
export interface TaxDataOrderTaxDetailsAppliedTaxExtensionInterface {
    /**
     * 
     * @type {Array<TaxDataAppliedTaxRateInterface>}
     * @memberof TaxDataOrderTaxDetailsAppliedTaxExtensionInterface
     */
    'rates'?: Array<TaxDataAppliedTaxRateInterface>;
}
/**
 * Interface OrderTaxDetailsAppliedTaxInterface
 * @export
 * @interface TaxDataOrderTaxDetailsAppliedTaxInterface
 */
export interface TaxDataOrderTaxDetailsAppliedTaxInterface {
    /**
     * Code
     * @type {string}
     * @memberof TaxDataOrderTaxDetailsAppliedTaxInterface
     */
    'code'?: string;
    /**
     * Title
     * @type {string}
     * @memberof TaxDataOrderTaxDetailsAppliedTaxInterface
     */
    'title'?: string;
    /**
     * Tax Percent
     * @type {number}
     * @memberof TaxDataOrderTaxDetailsAppliedTaxInterface
     */
    'percent'?: number;
    /**
     * Tax amount
     * @type {number}
     * @memberof TaxDataOrderTaxDetailsAppliedTaxInterface
     */
    'amount': number;
    /**
     * Tax amount in base currency
     * @type {number}
     * @memberof TaxDataOrderTaxDetailsAppliedTaxInterface
     */
    'base_amount': number;
    /**
     * 
     * @type {TaxDataOrderTaxDetailsAppliedTaxExtensionInterface}
     * @memberof TaxDataOrderTaxDetailsAppliedTaxInterface
     */
    'extension_attributes'?: TaxDataOrderTaxDetailsAppliedTaxExtensionInterface;
}
/**
 * Interface OrderTaxDetailsItemInterface
 * @export
 * @interface TaxDataOrderTaxDetailsItemInterface
 */
export interface TaxDataOrderTaxDetailsItemInterface {
    /**
     * Type (shipping, product, weee, gift wrapping, etc)
     * @type {string}
     * @memberof TaxDataOrderTaxDetailsItemInterface
     */
    'type'?: string;
    /**
     * Item id if this item is a product
     * @type {number}
     * @memberof TaxDataOrderTaxDetailsItemInterface
     */
    'item_id'?: number;
    /**
     * Associated item id if this item is associated with another item, null otherwise
     * @type {number}
     * @memberof TaxDataOrderTaxDetailsItemInterface
     */
    'associated_item_id'?: number;
    /**
     * Applied taxes
     * @type {Array<TaxDataOrderTaxDetailsAppliedTaxInterface>}
     * @memberof TaxDataOrderTaxDetailsItemInterface
     */
    'applied_taxes'?: Array<TaxDataOrderTaxDetailsAppliedTaxInterface>;
    /**
     * ExtensionInterface class for @see \\Magento\\Tax\\Api\\Data\\OrderTaxDetailsItemInterface
     * @type {object}
     * @memberof TaxDataOrderTaxDetailsItemInterface
     */
    'extension_attributes'?: object;
}
/**
 * Tax class interface.
 * @export
 * @interface TaxDataTaxClassInterface
 */
export interface TaxDataTaxClassInterface {
    /**
     * Tax class ID.
     * @type {number}
     * @memberof TaxDataTaxClassInterface
     */
    'class_id'?: number;
    /**
     * Tax class name.
     * @type {string}
     * @memberof TaxDataTaxClassInterface
     */
    'class_name': string;
    /**
     * Tax class type.
     * @type {string}
     * @memberof TaxDataTaxClassInterface
     */
    'class_type': string;
    /**
     * ExtensionInterface class for @see \\Magento\\Tax\\Api\\Data\\TaxClassInterface
     * @type {object}
     * @memberof TaxDataTaxClassInterface
     */
    'extension_attributes'?: object;
}
/**
 * Interface for tax class search results.
 * @export
 * @interface TaxDataTaxClassSearchResultsInterface
 */
export interface TaxDataTaxClassSearchResultsInterface {
    /**
     * Items
     * @type {Array<TaxDataTaxClassInterface>}
     * @memberof TaxDataTaxClassSearchResultsInterface
     */
    'items': Array<TaxDataTaxClassInterface>;
    /**
     * 
     * @type {FrameworkSearchCriteriaInterface}
     * @memberof TaxDataTaxClassSearchResultsInterface
     */
    'search_criteria': FrameworkSearchCriteriaInterface;
    /**
     * Total count.
     * @type {number}
     * @memberof TaxDataTaxClassSearchResultsInterface
     */
    'total_count': number;
}
/**
 * Tax rate interface.
 * @export
 * @interface TaxDataTaxRateInterface
 */
export interface TaxDataTaxRateInterface {
    /**
     * Id
     * @type {number}
     * @memberof TaxDataTaxRateInterface
     */
    'id'?: number;
    /**
     * Country id
     * @type {string}
     * @memberof TaxDataTaxRateInterface
     */
    'tax_country_id': string;
    /**
     * Region id
     * @type {number}
     * @memberof TaxDataTaxRateInterface
     */
    'tax_region_id'?: number;
    /**
     * Region name
     * @type {string}
     * @memberof TaxDataTaxRateInterface
     */
    'region_name'?: string;
    /**
     * Postcode
     * @type {string}
     * @memberof TaxDataTaxRateInterface
     */
    'tax_postcode'?: string;
    /**
     * Zip is range
     * @type {number}
     * @memberof TaxDataTaxRateInterface
     */
    'zip_is_range'?: number;
    /**
     * Zip range from
     * @type {number}
     * @memberof TaxDataTaxRateInterface
     */
    'zip_from'?: number;
    /**
     * Zip range to
     * @type {number}
     * @memberof TaxDataTaxRateInterface
     */
    'zip_to'?: number;
    /**
     * Tax rate in percentage
     * @type {number}
     * @memberof TaxDataTaxRateInterface
     */
    'rate': number;
    /**
     * Tax rate code
     * @type {string}
     * @memberof TaxDataTaxRateInterface
     */
    'code': string;
    /**
     * Tax rate titles
     * @type {Array<TaxDataTaxRateTitleInterface>}
     * @memberof TaxDataTaxRateInterface
     */
    'titles'?: Array<TaxDataTaxRateTitleInterface>;
    /**
     * ExtensionInterface class for @see \\Magento\\Tax\\Api\\Data\\TaxRateInterface
     * @type {object}
     * @memberof TaxDataTaxRateInterface
     */
    'extension_attributes'?: object;
}
/**
 * Interface for tax rate search results.
 * @export
 * @interface TaxDataTaxRateSearchResultsInterface
 */
export interface TaxDataTaxRateSearchResultsInterface {
    /**
     * Items
     * @type {Array<TaxDataTaxRateInterface>}
     * @memberof TaxDataTaxRateSearchResultsInterface
     */
    'items': Array<TaxDataTaxRateInterface>;
    /**
     * 
     * @type {FrameworkSearchCriteriaInterface}
     * @memberof TaxDataTaxRateSearchResultsInterface
     */
    'search_criteria': FrameworkSearchCriteriaInterface;
    /**
     * Total count.
     * @type {number}
     * @memberof TaxDataTaxRateSearchResultsInterface
     */
    'total_count': number;
}
/**
 * Tax rate title interface.
 * @export
 * @interface TaxDataTaxRateTitleInterface
 */
export interface TaxDataTaxRateTitleInterface {
    /**
     * Store id
     * @type {string}
     * @memberof TaxDataTaxRateTitleInterface
     */
    'store_id': string;
    /**
     * Title value
     * @type {string}
     * @memberof TaxDataTaxRateTitleInterface
     */
    'value': string;
    /**
     * ExtensionInterface class for @see \\Magento\\Tax\\Api\\Data\\TaxRateTitleInterface
     * @type {object}
     * @memberof TaxDataTaxRateTitleInterface
     */
    'extension_attributes'?: object;
}
/**
 * Tax rule interface.
 * @export
 * @interface TaxDataTaxRuleInterface
 */
export interface TaxDataTaxRuleInterface {
    /**
     * Id
     * @type {number}
     * @memberof TaxDataTaxRuleInterface
     */
    'id'?: number;
    /**
     * Tax rule code
     * @type {string}
     * @memberof TaxDataTaxRuleInterface
     */
    'code': string;
    /**
     * Priority
     * @type {number}
     * @memberof TaxDataTaxRuleInterface
     */
    'priority': number;
    /**
     * Sort order.
     * @type {number}
     * @memberof TaxDataTaxRuleInterface
     */
    'position': number;
    /**
     * Customer tax class id
     * @type {Array<number>}
     * @memberof TaxDataTaxRuleInterface
     */
    'customer_tax_class_ids': Array<number>;
    /**
     * Product tax class id
     * @type {Array<number>}
     * @memberof TaxDataTaxRuleInterface
     */
    'product_tax_class_ids': Array<number>;
    /**
     * Tax rate ids
     * @type {Array<number>}
     * @memberof TaxDataTaxRuleInterface
     */
    'tax_rate_ids': Array<number>;
    /**
     * Calculate subtotal.
     * @type {boolean}
     * @memberof TaxDataTaxRuleInterface
     */
    'calculate_subtotal'?: boolean;
    /**
     * ExtensionInterface class for @see \\Magento\\Tax\\Api\\Data\\TaxRuleInterface
     * @type {object}
     * @memberof TaxDataTaxRuleInterface
     */
    'extension_attributes'?: object;
}
/**
 * Interface for tax rule search results.
 * @export
 * @interface TaxDataTaxRuleSearchResultsInterface
 */
export interface TaxDataTaxRuleSearchResultsInterface {
    /**
     * Items
     * @type {Array<TaxDataTaxRuleInterface>}
     * @memberof TaxDataTaxRuleSearchResultsInterface
     */
    'items': Array<TaxDataTaxRuleInterface>;
    /**
     * 
     * @type {FrameworkSearchCriteriaInterface}
     * @memberof TaxDataTaxRuleSearchResultsInterface
     */
    'search_criteria': FrameworkSearchCriteriaInterface;
    /**
     * Total count.
     * @type {number}
     * @memberof TaxDataTaxRuleSearchResultsInterface
     */
    'total_count': number;
}
/**
 * 
 * @export
 * @interface TaxTaxClassRepositoryV1SavePostRequest
 */
export interface TaxTaxClassRepositoryV1SavePostRequest {
    /**
     * 
     * @type {TaxDataTaxClassInterface}
     * @memberof TaxTaxClassRepositoryV1SavePostRequest
     */
    'taxClass': TaxDataTaxClassInterface;
}
/**
 * 
 * @export
 * @interface TaxTaxRateRepositoryV1SavePutRequest
 */
export interface TaxTaxRateRepositoryV1SavePutRequest {
    /**
     * 
     * @type {TaxDataTaxRateInterface}
     * @memberof TaxTaxRateRepositoryV1SavePutRequest
     */
    'taxRate': TaxDataTaxRateInterface;
}
/**
 * 
 * @export
 * @interface TaxTaxRuleRepositoryV1SavePutRequest
 */
export interface TaxTaxRuleRepositoryV1SavePutRequest {
    /**
     * 
     * @type {TaxDataTaxRuleInterface}
     * @memberof TaxTaxRuleRepositoryV1SavePutRequest
     */
    'rule': TaxDataTaxRuleInterface;
}
/**
 * 
 * @export
 * @interface TemandoShippingCollectionPointCartCollectionPointManagementV1SaveSearchRequestPutRequest
 */
export interface TemandoShippingCollectionPointCartCollectionPointManagementV1SaveSearchRequestPutRequest {
    /**
     * 
     * @type {string}
     * @memberof TemandoShippingCollectionPointCartCollectionPointManagementV1SaveSearchRequestPutRequest
     */
    'countryId': string;
    /**
     * 
     * @type {string}
     * @memberof TemandoShippingCollectionPointCartCollectionPointManagementV1SaveSearchRequestPutRequest
     */
    'postcode': string;
}
/**
 * 
 * @export
 * @interface TemandoShippingCollectionPointCartCollectionPointManagementV1SelectCollectionPointPostRequest
 */
export interface TemandoShippingCollectionPointCartCollectionPointManagementV1SelectCollectionPointPostRequest {
    /**
     * 
     * @type {number}
     * @memberof TemandoShippingCollectionPointCartCollectionPointManagementV1SelectCollectionPointPostRequest
     */
    'entityId': number;
}
/**
 * Temando Order Collection Point Interface – Order Details/Fulfillment
 * @export
 * @interface TemandoShippingDataCollectionPointOrderCollectionPointInterface
 */
export interface TemandoShippingDataCollectionPointOrderCollectionPointInterface {
    /**
     * 
     * @type {number}
     * @memberof TemandoShippingDataCollectionPointOrderCollectionPointInterface
     */
    'recipient_address_id': number;
    /**
     * 
     * @type {string}
     * @memberof TemandoShippingDataCollectionPointOrderCollectionPointInterface
     */
    'collection_point_id': string;
    /**
     * 
     * @type {string}
     * @memberof TemandoShippingDataCollectionPointOrderCollectionPointInterface
     */
    'name': string;
    /**
     * 
     * @type {string}
     * @memberof TemandoShippingDataCollectionPointOrderCollectionPointInterface
     */
    'country': string;
    /**
     * 
     * @type {string}
     * @memberof TemandoShippingDataCollectionPointOrderCollectionPointInterface
     */
    'region': string;
    /**
     * 
     * @type {string}
     * @memberof TemandoShippingDataCollectionPointOrderCollectionPointInterface
     */
    'postcode': string;
    /**
     * 
     * @type {string}
     * @memberof TemandoShippingDataCollectionPointOrderCollectionPointInterface
     */
    'city': string;
    /**
     * 
     * @type {Array<string>}
     * @memberof TemandoShippingDataCollectionPointOrderCollectionPointInterface
     */
    'street': Array<string>;
}
/**
 * Temando Quote Collection Point Interface – Checkout/Quoting
 * @export
 * @interface TemandoShippingDataCollectionPointQuoteCollectionPointInterface
 */
export interface TemandoShippingDataCollectionPointQuoteCollectionPointInterface {
    /**
     * 
     * @type {number}
     * @memberof TemandoShippingDataCollectionPointQuoteCollectionPointInterface
     */
    'entity_id': number;
    /**
     * 
     * @type {string}
     * @memberof TemandoShippingDataCollectionPointQuoteCollectionPointInterface
     */
    'collection_point_id': string;
    /**
     * 
     * @type {number}
     * @memberof TemandoShippingDataCollectionPointQuoteCollectionPointInterface
     */
    'recipient_address_id': number;
    /**
     * 
     * @type {string}
     * @memberof TemandoShippingDataCollectionPointQuoteCollectionPointInterface
     */
    'name': string;
    /**
     * 
     * @type {string}
     * @memberof TemandoShippingDataCollectionPointQuoteCollectionPointInterface
     */
    'country': string;
    /**
     * 
     * @type {string}
     * @memberof TemandoShippingDataCollectionPointQuoteCollectionPointInterface
     */
    'region': string;
    /**
     * 
     * @type {string}
     * @memberof TemandoShippingDataCollectionPointQuoteCollectionPointInterface
     */
    'postcode': string;
    /**
     * 
     * @type {string}
     * @memberof TemandoShippingDataCollectionPointQuoteCollectionPointInterface
     */
    'city': string;
    /**
     * 
     * @type {Array<string>}
     * @memberof TemandoShippingDataCollectionPointQuoteCollectionPointInterface
     */
    'street': Array<string>;
    /**
     * 
     * @type {Array<string>}
     * @memberof TemandoShippingDataCollectionPointQuoteCollectionPointInterface
     */
    'opening_hours': Array<string>;
    /**
     * 
     * @type {Array<string>}
     * @memberof TemandoShippingDataCollectionPointQuoteCollectionPointInterface
     */
    'shipping_experiences': Array<string>;
    /**
     * 
     * @type {boolean}
     * @memberof TemandoShippingDataCollectionPointQuoteCollectionPointInterface
     */
    'selected': boolean;
}
/**
 * Temando Collection Point Search Request Interface
 * @export
 * @interface TemandoShippingDataCollectionPointSearchRequestInterface
 */
export interface TemandoShippingDataCollectionPointSearchRequestInterface {
    /**
     * 
     * @type {number}
     * @memberof TemandoShippingDataCollectionPointSearchRequestInterface
     */
    'shipping_address_id': number;
    /**
     * 
     * @type {string}
     * @memberof TemandoShippingDataCollectionPointSearchRequestInterface
     */
    'country_id': string;
    /**
     * 
     * @type {string}
     * @memberof TemandoShippingDataCollectionPointSearchRequestInterface
     */
    'postcode': string;
    /**
     * 
     * @type {boolean}
     * @memberof TemandoShippingDataCollectionPointSearchRequestInterface
     */
    'pending': boolean;
}
/**
 * Temando Shipping Experience Interface Local representation of a shipping rate in checkout. A set of shipping experiences is the result of creating an order at the Temando platform. (!) Needs to reside in Api namespace because selected shipping experience is exposed to public as a ShippingInterface extension attribute.
 * @export
 * @interface TemandoShippingDataOrderShippingExperienceInterface
 */
export interface TemandoShippingDataOrderShippingExperienceInterface {
    /**
     * 
     * @type {string}
     * @memberof TemandoShippingDataOrderShippingExperienceInterface
     */
    'label': string;
    /**
     * 
     * @type {string}
     * @memberof TemandoShippingDataOrderShippingExperienceInterface
     */
    'code': string;
    /**
     * 
     * @type {number}
     * @memberof TemandoShippingDataOrderShippingExperienceInterface
     */
    'cost': number;
}
/**
 * 
 * @export
 * @interface TemandoShippingQuoteCartCheckoutFieldManagementV1SaveCheckoutFieldsPostRequest
 */
export interface TemandoShippingQuoteCartCheckoutFieldManagementV1SaveCheckoutFieldsPostRequest {
    /**
     * 
     * @type {Array<FrameworkAttributeInterface>}
     * @memberof TemandoShippingQuoteCartCheckoutFieldManagementV1SaveCheckoutFieldsPostRequest
     */
    'serviceSelection': Array<FrameworkAttributeInterface>;
}
/**
 * 
 * @export
 * @interface TemandoShippingQuoteCartDeliveryOptionManagementV1SavePostRequest
 */
export interface TemandoShippingQuoteCartDeliveryOptionManagementV1SavePostRequest {
    /**
     * 
     * @type {string}
     * @memberof TemandoShippingQuoteCartDeliveryOptionManagementV1SavePostRequest
     */
    'selectedOption': string;
}
/**
 * 
 * @export
 * @interface TemandoShippingRmaRmaShipmentManagementV1AssignShipmentIdsPutRequest
 */
export interface TemandoShippingRmaRmaShipmentManagementV1AssignShipmentIdsPutRequest {
    /**
     * 
     * @type {Array<string>}
     * @memberof TemandoShippingRmaRmaShipmentManagementV1AssignShipmentIdsPutRequest
     */
    'returnShipmentIds': Array<string>;
}
/**
 * Gateway vault payment token interface.
 * @export
 * @interface VaultDataPaymentTokenInterface
 */
export interface VaultDataPaymentTokenInterface {
    /**
     * Entity ID.
     * @type {number}
     * @memberof VaultDataPaymentTokenInterface
     */
    'entity_id'?: number;
    /**
     * Customer ID.
     * @type {number}
     * @memberof VaultDataPaymentTokenInterface
     */
    'customer_id'?: number;
    /**
     * Public hash
     * @type {string}
     * @memberof VaultDataPaymentTokenInterface
     */
    'public_hash': string;
    /**
     * Payment method code
     * @type {string}
     * @memberof VaultDataPaymentTokenInterface
     */
    'payment_method_code': string;
    /**
     * Type
     * @type {string}
     * @memberof VaultDataPaymentTokenInterface
     */
    'type': string;
    /**
     * Token creation timestamp
     * @type {string}
     * @memberof VaultDataPaymentTokenInterface
     */
    'created_at'?: string;
    /**
     * Token expiration timestamp
     * @type {string}
     * @memberof VaultDataPaymentTokenInterface
     */
    'expires_at'?: string;
    /**
     * Gateway token ID
     * @type {string}
     * @memberof VaultDataPaymentTokenInterface
     */
    'gateway_token': string;
    /**
     * Token details
     * @type {string}
     * @memberof VaultDataPaymentTokenInterface
     */
    'token_details': string;
    /**
     * Is active.
     * @type {boolean}
     * @memberof VaultDataPaymentTokenInterface
     */
    'is_active': boolean;
    /**
     * Is visible.
     * @type {boolean}
     * @memberof VaultDataPaymentTokenInterface
     */
    'is_visible': boolean;
}
/**
 * List of all weee attributes, their amounts, etc.., that product has
 * @export
 * @interface WeeeDataProductRenderWeeeAdjustmentAttributeInterface
 */
export interface WeeeDataProductRenderWeeeAdjustmentAttributeInterface {
    /**
     * Weee attribute amount
     * @type {string}
     * @memberof WeeeDataProductRenderWeeeAdjustmentAttributeInterface
     */
    'amount': string;
    /**
     * Tax which is calculated to fixed product tax attribute
     * @type {string}
     * @memberof WeeeDataProductRenderWeeeAdjustmentAttributeInterface
     */
    'tax_amount': string;
    /**
     * Tax amount of weee attribute
     * @type {string}
     * @memberof WeeeDataProductRenderWeeeAdjustmentAttributeInterface
     */
    'tax_amount_incl_tax': string;
    /**
     * Product amount exclude tax
     * @type {string}
     * @memberof WeeeDataProductRenderWeeeAdjustmentAttributeInterface
     */
    'amount_excl_tax': string;
    /**
     * Weee attribute code
     * @type {string}
     * @memberof WeeeDataProductRenderWeeeAdjustmentAttributeInterface
     */
    'attribute_code': string;
    /**
     * ExtensionInterface class for @see \\Magento\\Weee\\Api\\Data\\ProductRender\\WeeeAdjustmentAttributeInterface
     * @type {object}
     * @memberof WeeeDataProductRenderWeeeAdjustmentAttributeInterface
     */
    'extension_attributes': object;
}

/**
 * AddressesAddressIdApi - axios parameter creator
 * @export
 */
export const AddressesAddressIdApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Delete customer address by ID.
         * @summary addresses/{addressId}
         * @param {number} addressId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        customerAddressRepositoryV1DeleteByIdDelete: async (addressId: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'addressId' is not null or undefined
            assertParamExists('customerAddressRepositoryV1DeleteByIdDelete', 'addressId', addressId)
            const localVarPath = `/V1/addresses/{addressId}`
                .replace(`{${"addressId"}}`, encodeURIComponent(String(addressId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * AddressesAddressIdApi - functional programming interface
 * @export
 */
export const AddressesAddressIdApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = AddressesAddressIdApiAxiosParamCreator(configuration)
    return {
        /**
         * Delete customer address by ID.
         * @summary addresses/{addressId}
         * @param {number} addressId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async customerAddressRepositoryV1DeleteByIdDelete(addressId: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<boolean>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.customerAddressRepositoryV1DeleteByIdDelete(addressId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * AddressesAddressIdApi - factory interface
 * @export
 */
export const AddressesAddressIdApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = AddressesAddressIdApiFp(configuration)
    return {
        /**
         * Delete customer address by ID.
         * @summary addresses/{addressId}
         * @param {number} addressId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        customerAddressRepositoryV1DeleteByIdDelete(addressId: number, options?: any): AxiosPromise<boolean> {
            return localVarFp.customerAddressRepositoryV1DeleteByIdDelete(addressId, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * AddressesAddressIdApi - object-oriented interface
 * @export
 * @class AddressesAddressIdApi
 * @extends {BaseAPI}
 */
export class AddressesAddressIdApi extends BaseAPI {
    /**
     * Delete customer address by ID.
     * @summary addresses/{addressId}
     * @param {number} addressId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AddressesAddressIdApi
     */
    public customerAddressRepositoryV1DeleteByIdDelete(addressId: number, options?: AxiosRequestConfig) {
        return AddressesAddressIdApiFp(this.configuration).customerAddressRepositoryV1DeleteByIdDelete(addressId, options).then((request) => request(this.axios, this.basePath));
    }
}


/**
 * AmazonBillingAddressAmazonOrderReferenceIdApi - axios parameter creator
 * @export
 */
export const AmazonBillingAddressAmazonOrderReferenceIdApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary amazon-billing-address/{amazonOrderReferenceId}
         * @param {string} amazonOrderReferenceId 
         * @param {AmazonPaymentAddressManagementV1GetBillingAddressPutRequest} [amazonPaymentAddressManagementV1GetBillingAddressPutBody] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        amazonPaymentAddressManagementV1GetBillingAddressPut: async (amazonOrderReferenceId: string, amazonPaymentAddressManagementV1GetBillingAddressPutBody?: AmazonPaymentAddressManagementV1GetBillingAddressPutRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'amazonOrderReferenceId' is not null or undefined
            assertParamExists('amazonPaymentAddressManagementV1GetBillingAddressPut', 'amazonOrderReferenceId', amazonOrderReferenceId)
            const localVarPath = `/V1/amazon-billing-address/{amazonOrderReferenceId}`
                .replace(`{${"amazonOrderReferenceId"}}`, encodeURIComponent(String(amazonOrderReferenceId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(amazonPaymentAddressManagementV1GetBillingAddressPutBody, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * AmazonBillingAddressAmazonOrderReferenceIdApi - functional programming interface
 * @export
 */
export const AmazonBillingAddressAmazonOrderReferenceIdApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = AmazonBillingAddressAmazonOrderReferenceIdApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @summary amazon-billing-address/{amazonOrderReferenceId}
         * @param {string} amazonOrderReferenceId 
         * @param {AmazonPaymentAddressManagementV1GetBillingAddressPutRequest} [amazonPaymentAddressManagementV1GetBillingAddressPutBody] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async amazonPaymentAddressManagementV1GetBillingAddressPut(amazonOrderReferenceId: string, amazonPaymentAddressManagementV1GetBillingAddressPutBody?: AmazonPaymentAddressManagementV1GetBillingAddressPutRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<string>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.amazonPaymentAddressManagementV1GetBillingAddressPut(amazonOrderReferenceId, amazonPaymentAddressManagementV1GetBillingAddressPutBody, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * AmazonBillingAddressAmazonOrderReferenceIdApi - factory interface
 * @export
 */
export const AmazonBillingAddressAmazonOrderReferenceIdApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = AmazonBillingAddressAmazonOrderReferenceIdApiFp(configuration)
    return {
        /**
         * 
         * @summary amazon-billing-address/{amazonOrderReferenceId}
         * @param {string} amazonOrderReferenceId 
         * @param {AmazonPaymentAddressManagementV1GetBillingAddressPutRequest} [amazonPaymentAddressManagementV1GetBillingAddressPutBody] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        amazonPaymentAddressManagementV1GetBillingAddressPut(amazonOrderReferenceId: string, amazonPaymentAddressManagementV1GetBillingAddressPutBody?: AmazonPaymentAddressManagementV1GetBillingAddressPutRequest, options?: any): AxiosPromise<string> {
            return localVarFp.amazonPaymentAddressManagementV1GetBillingAddressPut(amazonOrderReferenceId, amazonPaymentAddressManagementV1GetBillingAddressPutBody, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * AmazonBillingAddressAmazonOrderReferenceIdApi - object-oriented interface
 * @export
 * @class AmazonBillingAddressAmazonOrderReferenceIdApi
 * @extends {BaseAPI}
 */
export class AmazonBillingAddressAmazonOrderReferenceIdApi extends BaseAPI {
    /**
     * 
     * @summary amazon-billing-address/{amazonOrderReferenceId}
     * @param {string} amazonOrderReferenceId 
     * @param {AmazonPaymentAddressManagementV1GetBillingAddressPutRequest} [amazonPaymentAddressManagementV1GetBillingAddressPutBody] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AmazonBillingAddressAmazonOrderReferenceIdApi
     */
    public amazonPaymentAddressManagementV1GetBillingAddressPut(amazonOrderReferenceId: string, amazonPaymentAddressManagementV1GetBillingAddressPutBody?: AmazonPaymentAddressManagementV1GetBillingAddressPutRequest, options?: AxiosRequestConfig) {
        return AmazonBillingAddressAmazonOrderReferenceIdApiFp(this.configuration).amazonPaymentAddressManagementV1GetBillingAddressPut(amazonOrderReferenceId, amazonPaymentAddressManagementV1GetBillingAddressPutBody, options).then((request) => request(this.axios, this.basePath));
    }
}


/**
 * AmazonOrderRefApi - axios parameter creator
 * @export
 */
export const AmazonOrderRefApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary amazon/order-ref
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        amazonPaymentOrderInformationManagementV1RemoveOrderReferenceDelete: async (options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/V1/amazon/order-ref`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * AmazonOrderRefApi - functional programming interface
 * @export
 */
export const AmazonOrderRefApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = AmazonOrderRefApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @summary amazon/order-ref
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async amazonPaymentOrderInformationManagementV1RemoveOrderReferenceDelete(options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ErrorResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.amazonPaymentOrderInformationManagementV1RemoveOrderReferenceDelete(options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * AmazonOrderRefApi - factory interface
 * @export
 */
export const AmazonOrderRefApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = AmazonOrderRefApiFp(configuration)
    return {
        /**
         * 
         * @summary amazon/order-ref
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        amazonPaymentOrderInformationManagementV1RemoveOrderReferenceDelete(options?: any): AxiosPromise<ErrorResponse> {
            return localVarFp.amazonPaymentOrderInformationManagementV1RemoveOrderReferenceDelete(options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * AmazonOrderRefApi - object-oriented interface
 * @export
 * @class AmazonOrderRefApi
 * @extends {BaseAPI}
 */
export class AmazonOrderRefApi extends BaseAPI {
    /**
     * 
     * @summary amazon/order-ref
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AmazonOrderRefApi
     */
    public amazonPaymentOrderInformationManagementV1RemoveOrderReferenceDelete(options?: AxiosRequestConfig) {
        return AmazonOrderRefApiFp(this.configuration).amazonPaymentOrderInformationManagementV1RemoveOrderReferenceDelete(options).then((request) => request(this.axios, this.basePath));
    }
}


/**
 * AmazonShippingAddressAmazonOrderReferenceIdApi - axios parameter creator
 * @export
 */
export const AmazonShippingAddressAmazonOrderReferenceIdApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary amazon-shipping-address/{amazonOrderReferenceId}
         * @param {string} amazonOrderReferenceId 
         * @param {AmazonPaymentAddressManagementV1GetBillingAddressPutRequest} [amazonPaymentAddressManagementV1GetShippingAddressPutBody] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        amazonPaymentAddressManagementV1GetShippingAddressPut: async (amazonOrderReferenceId: string, amazonPaymentAddressManagementV1GetShippingAddressPutBody?: AmazonPaymentAddressManagementV1GetBillingAddressPutRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'amazonOrderReferenceId' is not null or undefined
            assertParamExists('amazonPaymentAddressManagementV1GetShippingAddressPut', 'amazonOrderReferenceId', amazonOrderReferenceId)
            const localVarPath = `/V1/amazon-shipping-address/{amazonOrderReferenceId}`
                .replace(`{${"amazonOrderReferenceId"}}`, encodeURIComponent(String(amazonOrderReferenceId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(amazonPaymentAddressManagementV1GetShippingAddressPutBody, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * AmazonShippingAddressAmazonOrderReferenceIdApi - functional programming interface
 * @export
 */
export const AmazonShippingAddressAmazonOrderReferenceIdApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = AmazonShippingAddressAmazonOrderReferenceIdApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @summary amazon-shipping-address/{amazonOrderReferenceId}
         * @param {string} amazonOrderReferenceId 
         * @param {AmazonPaymentAddressManagementV1GetBillingAddressPutRequest} [amazonPaymentAddressManagementV1GetShippingAddressPutBody] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async amazonPaymentAddressManagementV1GetShippingAddressPut(amazonOrderReferenceId: string, amazonPaymentAddressManagementV1GetShippingAddressPutBody?: AmazonPaymentAddressManagementV1GetBillingAddressPutRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<string>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.amazonPaymentAddressManagementV1GetShippingAddressPut(amazonOrderReferenceId, amazonPaymentAddressManagementV1GetShippingAddressPutBody, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * AmazonShippingAddressAmazonOrderReferenceIdApi - factory interface
 * @export
 */
export const AmazonShippingAddressAmazonOrderReferenceIdApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = AmazonShippingAddressAmazonOrderReferenceIdApiFp(configuration)
    return {
        /**
         * 
         * @summary amazon-shipping-address/{amazonOrderReferenceId}
         * @param {string} amazonOrderReferenceId 
         * @param {AmazonPaymentAddressManagementV1GetBillingAddressPutRequest} [amazonPaymentAddressManagementV1GetShippingAddressPutBody] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        amazonPaymentAddressManagementV1GetShippingAddressPut(amazonOrderReferenceId: string, amazonPaymentAddressManagementV1GetShippingAddressPutBody?: AmazonPaymentAddressManagementV1GetBillingAddressPutRequest, options?: any): AxiosPromise<string> {
            return localVarFp.amazonPaymentAddressManagementV1GetShippingAddressPut(amazonOrderReferenceId, amazonPaymentAddressManagementV1GetShippingAddressPutBody, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * AmazonShippingAddressAmazonOrderReferenceIdApi - object-oriented interface
 * @export
 * @class AmazonShippingAddressAmazonOrderReferenceIdApi
 * @extends {BaseAPI}
 */
export class AmazonShippingAddressAmazonOrderReferenceIdApi extends BaseAPI {
    /**
     * 
     * @summary amazon-shipping-address/{amazonOrderReferenceId}
     * @param {string} amazonOrderReferenceId 
     * @param {AmazonPaymentAddressManagementV1GetBillingAddressPutRequest} [amazonPaymentAddressManagementV1GetShippingAddressPutBody] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AmazonShippingAddressAmazonOrderReferenceIdApi
     */
    public amazonPaymentAddressManagementV1GetShippingAddressPut(amazonOrderReferenceId: string, amazonPaymentAddressManagementV1GetShippingAddressPutBody?: AmazonPaymentAddressManagementV1GetBillingAddressPutRequest, options?: AxiosRequestConfig) {
        return AmazonShippingAddressAmazonOrderReferenceIdApiFp(this.configuration).amazonPaymentAddressManagementV1GetShippingAddressPut(amazonOrderReferenceId, amazonPaymentAddressManagementV1GetShippingAddressPutBody, options).then((request) => request(this.axios, this.basePath));
    }
}


/**
 * AnalyticsLinkApi - axios parameter creator
 * @export
 */
export const AnalyticsLinkApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary analytics/link
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        analyticsLinkProviderV1GetGet: async (options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/V1/analytics/link`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * AnalyticsLinkApi - functional programming interface
 * @export
 */
export const AnalyticsLinkApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = AnalyticsLinkApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @summary analytics/link
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async analyticsLinkProviderV1GetGet(options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<AnalyticsDataLinkInterface>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.analyticsLinkProviderV1GetGet(options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * AnalyticsLinkApi - factory interface
 * @export
 */
export const AnalyticsLinkApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = AnalyticsLinkApiFp(configuration)
    return {
        /**
         * 
         * @summary analytics/link
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        analyticsLinkProviderV1GetGet(options?: any): AxiosPromise<AnalyticsDataLinkInterface> {
            return localVarFp.analyticsLinkProviderV1GetGet(options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * AnalyticsLinkApi - object-oriented interface
 * @export
 * @class AnalyticsLinkApi
 * @extends {BaseAPI}
 */
export class AnalyticsLinkApi extends BaseAPI {
    /**
     * 
     * @summary analytics/link
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AnalyticsLinkApi
     */
    public analyticsLinkProviderV1GetGet(options?: AxiosRequestConfig) {
        return AnalyticsLinkApiFp(this.configuration).analyticsLinkProviderV1GetGet(options).then((request) => request(this.axios, this.basePath));
    }
}


/**
 * AttributeMetadataCustomerApi - axios parameter creator
 * @export
 */
export const AttributeMetadataCustomerApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Get all attribute metadata.
         * @summary attributeMetadata/customer
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        customerCustomerMetadataV1GetAllAttributesMetadataGet: async (options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/V1/attributeMetadata/customer`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * AttributeMetadataCustomerApi - functional programming interface
 * @export
 */
export const AttributeMetadataCustomerApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = AttributeMetadataCustomerApiAxiosParamCreator(configuration)
    return {
        /**
         * Get all attribute metadata.
         * @summary attributeMetadata/customer
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async customerCustomerMetadataV1GetAllAttributesMetadataGet(options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<CustomerDataAttributeMetadataInterface>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.customerCustomerMetadataV1GetAllAttributesMetadataGet(options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * AttributeMetadataCustomerApi - factory interface
 * @export
 */
export const AttributeMetadataCustomerApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = AttributeMetadataCustomerApiFp(configuration)
    return {
        /**
         * Get all attribute metadata.
         * @summary attributeMetadata/customer
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        customerCustomerMetadataV1GetAllAttributesMetadataGet(options?: any): AxiosPromise<Array<CustomerDataAttributeMetadataInterface>> {
            return localVarFp.customerCustomerMetadataV1GetAllAttributesMetadataGet(options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * AttributeMetadataCustomerApi - object-oriented interface
 * @export
 * @class AttributeMetadataCustomerApi
 * @extends {BaseAPI}
 */
export class AttributeMetadataCustomerApi extends BaseAPI {
    /**
     * Get all attribute metadata.
     * @summary attributeMetadata/customer
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AttributeMetadataCustomerApi
     */
    public customerCustomerMetadataV1GetAllAttributesMetadataGet(options?: AxiosRequestConfig) {
        return AttributeMetadataCustomerApiFp(this.configuration).customerCustomerMetadataV1GetAllAttributesMetadataGet(options).then((request) => request(this.axios, this.basePath));
    }
}


/**
 * AttributeMetadataCustomerAddressApi - axios parameter creator
 * @export
 */
export const AttributeMetadataCustomerAddressApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Get all attribute metadata.
         * @summary attributeMetadata/customerAddress
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        customerAddressMetadataV1GetAllAttributesMetadataGet: async (options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/V1/attributeMetadata/customerAddress`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * AttributeMetadataCustomerAddressApi - functional programming interface
 * @export
 */
export const AttributeMetadataCustomerAddressApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = AttributeMetadataCustomerAddressApiAxiosParamCreator(configuration)
    return {
        /**
         * Get all attribute metadata.
         * @summary attributeMetadata/customerAddress
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async customerAddressMetadataV1GetAllAttributesMetadataGet(options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<CustomerDataAttributeMetadataInterface>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.customerAddressMetadataV1GetAllAttributesMetadataGet(options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * AttributeMetadataCustomerAddressApi - factory interface
 * @export
 */
export const AttributeMetadataCustomerAddressApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = AttributeMetadataCustomerAddressApiFp(configuration)
    return {
        /**
         * Get all attribute metadata.
         * @summary attributeMetadata/customerAddress
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        customerAddressMetadataV1GetAllAttributesMetadataGet(options?: any): AxiosPromise<Array<CustomerDataAttributeMetadataInterface>> {
            return localVarFp.customerAddressMetadataV1GetAllAttributesMetadataGet(options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * AttributeMetadataCustomerAddressApi - object-oriented interface
 * @export
 * @class AttributeMetadataCustomerAddressApi
 * @extends {BaseAPI}
 */
export class AttributeMetadataCustomerAddressApi extends BaseAPI {
    /**
     * Get all attribute metadata.
     * @summary attributeMetadata/customerAddress
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AttributeMetadataCustomerAddressApi
     */
    public customerAddressMetadataV1GetAllAttributesMetadataGet(options?: AxiosRequestConfig) {
        return AttributeMetadataCustomerAddressApiFp(this.configuration).customerAddressMetadataV1GetAllAttributesMetadataGet(options).then((request) => request(this.axios, this.basePath));
    }
}


/**
 * AttributeMetadataCustomerAddressAttributeAttributeCodeApi - axios parameter creator
 * @export
 */
export const AttributeMetadataCustomerAddressAttributeAttributeCodeApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Retrieve attribute metadata.
         * @summary attributeMetadata/customerAddress/attribute/{attributeCode}
         * @param {string} attributeCode 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        customerAddressMetadataV1GetAttributeMetadataGet: async (attributeCode: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'attributeCode' is not null or undefined
            assertParamExists('customerAddressMetadataV1GetAttributeMetadataGet', 'attributeCode', attributeCode)
            const localVarPath = `/V1/attributeMetadata/customerAddress/attribute/{attributeCode}`
                .replace(`{${"attributeCode"}}`, encodeURIComponent(String(attributeCode)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * AttributeMetadataCustomerAddressAttributeAttributeCodeApi - functional programming interface
 * @export
 */
export const AttributeMetadataCustomerAddressAttributeAttributeCodeApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = AttributeMetadataCustomerAddressAttributeAttributeCodeApiAxiosParamCreator(configuration)
    return {
        /**
         * Retrieve attribute metadata.
         * @summary attributeMetadata/customerAddress/attribute/{attributeCode}
         * @param {string} attributeCode 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async customerAddressMetadataV1GetAttributeMetadataGet(attributeCode: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<CustomerDataAttributeMetadataInterface>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.customerAddressMetadataV1GetAttributeMetadataGet(attributeCode, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * AttributeMetadataCustomerAddressAttributeAttributeCodeApi - factory interface
 * @export
 */
export const AttributeMetadataCustomerAddressAttributeAttributeCodeApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = AttributeMetadataCustomerAddressAttributeAttributeCodeApiFp(configuration)
    return {
        /**
         * Retrieve attribute metadata.
         * @summary attributeMetadata/customerAddress/attribute/{attributeCode}
         * @param {string} attributeCode 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        customerAddressMetadataV1GetAttributeMetadataGet(attributeCode: string, options?: any): AxiosPromise<CustomerDataAttributeMetadataInterface> {
            return localVarFp.customerAddressMetadataV1GetAttributeMetadataGet(attributeCode, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * AttributeMetadataCustomerAddressAttributeAttributeCodeApi - object-oriented interface
 * @export
 * @class AttributeMetadataCustomerAddressAttributeAttributeCodeApi
 * @extends {BaseAPI}
 */
export class AttributeMetadataCustomerAddressAttributeAttributeCodeApi extends BaseAPI {
    /**
     * Retrieve attribute metadata.
     * @summary attributeMetadata/customerAddress/attribute/{attributeCode}
     * @param {string} attributeCode 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AttributeMetadataCustomerAddressAttributeAttributeCodeApi
     */
    public customerAddressMetadataV1GetAttributeMetadataGet(attributeCode: string, options?: AxiosRequestConfig) {
        return AttributeMetadataCustomerAddressAttributeAttributeCodeApiFp(this.configuration).customerAddressMetadataV1GetAttributeMetadataGet(attributeCode, options).then((request) => request(this.axios, this.basePath));
    }
}


/**
 * AttributeMetadataCustomerAddressCustomApi - axios parameter creator
 * @export
 */
export const AttributeMetadataCustomerAddressCustomApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Get custom attributes metadata for the given data interface.
         * @summary attributeMetadata/customerAddress/custom
         * @param {string} [dataInterfaceName] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        customerAddressMetadataV1GetCustomAttributesMetadataGet: async (dataInterfaceName?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/V1/attributeMetadata/customerAddress/custom`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (dataInterfaceName !== undefined) {
                localVarQueryParameter['dataInterfaceName'] = dataInterfaceName;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * AttributeMetadataCustomerAddressCustomApi - functional programming interface
 * @export
 */
export const AttributeMetadataCustomerAddressCustomApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = AttributeMetadataCustomerAddressCustomApiAxiosParamCreator(configuration)
    return {
        /**
         * Get custom attributes metadata for the given data interface.
         * @summary attributeMetadata/customerAddress/custom
         * @param {string} [dataInterfaceName] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async customerAddressMetadataV1GetCustomAttributesMetadataGet(dataInterfaceName?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<CustomerDataAttributeMetadataInterface>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.customerAddressMetadataV1GetCustomAttributesMetadataGet(dataInterfaceName, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * AttributeMetadataCustomerAddressCustomApi - factory interface
 * @export
 */
export const AttributeMetadataCustomerAddressCustomApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = AttributeMetadataCustomerAddressCustomApiFp(configuration)
    return {
        /**
         * Get custom attributes metadata for the given data interface.
         * @summary attributeMetadata/customerAddress/custom
         * @param {string} [dataInterfaceName] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        customerAddressMetadataV1GetCustomAttributesMetadataGet(dataInterfaceName?: string, options?: any): AxiosPromise<Array<CustomerDataAttributeMetadataInterface>> {
            return localVarFp.customerAddressMetadataV1GetCustomAttributesMetadataGet(dataInterfaceName, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * AttributeMetadataCustomerAddressCustomApi - object-oriented interface
 * @export
 * @class AttributeMetadataCustomerAddressCustomApi
 * @extends {BaseAPI}
 */
export class AttributeMetadataCustomerAddressCustomApi extends BaseAPI {
    /**
     * Get custom attributes metadata for the given data interface.
     * @summary attributeMetadata/customerAddress/custom
     * @param {string} [dataInterfaceName] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AttributeMetadataCustomerAddressCustomApi
     */
    public customerAddressMetadataV1GetCustomAttributesMetadataGet(dataInterfaceName?: string, options?: AxiosRequestConfig) {
        return AttributeMetadataCustomerAddressCustomApiFp(this.configuration).customerAddressMetadataV1GetCustomAttributesMetadataGet(dataInterfaceName, options).then((request) => request(this.axios, this.basePath));
    }
}


/**
 * AttributeMetadataCustomerAddressFormFormCodeApi - axios parameter creator
 * @export
 */
export const AttributeMetadataCustomerAddressFormFormCodeApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Retrieve all attributes filtered by form code
         * @summary attributeMetadata/customerAddress/form/{formCode}
         * @param {string} formCode 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        customerAddressMetadataV1GetAttributesGet: async (formCode: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'formCode' is not null or undefined
            assertParamExists('customerAddressMetadataV1GetAttributesGet', 'formCode', formCode)
            const localVarPath = `/V1/attributeMetadata/customerAddress/form/{formCode}`
                .replace(`{${"formCode"}}`, encodeURIComponent(String(formCode)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * AttributeMetadataCustomerAddressFormFormCodeApi - functional programming interface
 * @export
 */
export const AttributeMetadataCustomerAddressFormFormCodeApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = AttributeMetadataCustomerAddressFormFormCodeApiAxiosParamCreator(configuration)
    return {
        /**
         * Retrieve all attributes filtered by form code
         * @summary attributeMetadata/customerAddress/form/{formCode}
         * @param {string} formCode 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async customerAddressMetadataV1GetAttributesGet(formCode: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<CustomerDataAttributeMetadataInterface>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.customerAddressMetadataV1GetAttributesGet(formCode, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * AttributeMetadataCustomerAddressFormFormCodeApi - factory interface
 * @export
 */
export const AttributeMetadataCustomerAddressFormFormCodeApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = AttributeMetadataCustomerAddressFormFormCodeApiFp(configuration)
    return {
        /**
         * Retrieve all attributes filtered by form code
         * @summary attributeMetadata/customerAddress/form/{formCode}
         * @param {string} formCode 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        customerAddressMetadataV1GetAttributesGet(formCode: string, options?: any): AxiosPromise<Array<CustomerDataAttributeMetadataInterface>> {
            return localVarFp.customerAddressMetadataV1GetAttributesGet(formCode, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * AttributeMetadataCustomerAddressFormFormCodeApi - object-oriented interface
 * @export
 * @class AttributeMetadataCustomerAddressFormFormCodeApi
 * @extends {BaseAPI}
 */
export class AttributeMetadataCustomerAddressFormFormCodeApi extends BaseAPI {
    /**
     * Retrieve all attributes filtered by form code
     * @summary attributeMetadata/customerAddress/form/{formCode}
     * @param {string} formCode 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AttributeMetadataCustomerAddressFormFormCodeApi
     */
    public customerAddressMetadataV1GetAttributesGet(formCode: string, options?: AxiosRequestConfig) {
        return AttributeMetadataCustomerAddressFormFormCodeApiFp(this.configuration).customerAddressMetadataV1GetAttributesGet(formCode, options).then((request) => request(this.axios, this.basePath));
    }
}


/**
 * AttributeMetadataCustomerAttributeAttributeCodeApi - axios parameter creator
 * @export
 */
export const AttributeMetadataCustomerAttributeAttributeCodeApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Retrieve attribute metadata.
         * @summary attributeMetadata/customer/attribute/{attributeCode}
         * @param {string} attributeCode 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        customerCustomerMetadataV1GetAttributeMetadataGet: async (attributeCode: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'attributeCode' is not null or undefined
            assertParamExists('customerCustomerMetadataV1GetAttributeMetadataGet', 'attributeCode', attributeCode)
            const localVarPath = `/V1/attributeMetadata/customer/attribute/{attributeCode}`
                .replace(`{${"attributeCode"}}`, encodeURIComponent(String(attributeCode)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * AttributeMetadataCustomerAttributeAttributeCodeApi - functional programming interface
 * @export
 */
export const AttributeMetadataCustomerAttributeAttributeCodeApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = AttributeMetadataCustomerAttributeAttributeCodeApiAxiosParamCreator(configuration)
    return {
        /**
         * Retrieve attribute metadata.
         * @summary attributeMetadata/customer/attribute/{attributeCode}
         * @param {string} attributeCode 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async customerCustomerMetadataV1GetAttributeMetadataGet(attributeCode: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<CustomerDataAttributeMetadataInterface>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.customerCustomerMetadataV1GetAttributeMetadataGet(attributeCode, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * AttributeMetadataCustomerAttributeAttributeCodeApi - factory interface
 * @export
 */
export const AttributeMetadataCustomerAttributeAttributeCodeApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = AttributeMetadataCustomerAttributeAttributeCodeApiFp(configuration)
    return {
        /**
         * Retrieve attribute metadata.
         * @summary attributeMetadata/customer/attribute/{attributeCode}
         * @param {string} attributeCode 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        customerCustomerMetadataV1GetAttributeMetadataGet(attributeCode: string, options?: any): AxiosPromise<CustomerDataAttributeMetadataInterface> {
            return localVarFp.customerCustomerMetadataV1GetAttributeMetadataGet(attributeCode, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * AttributeMetadataCustomerAttributeAttributeCodeApi - object-oriented interface
 * @export
 * @class AttributeMetadataCustomerAttributeAttributeCodeApi
 * @extends {BaseAPI}
 */
export class AttributeMetadataCustomerAttributeAttributeCodeApi extends BaseAPI {
    /**
     * Retrieve attribute metadata.
     * @summary attributeMetadata/customer/attribute/{attributeCode}
     * @param {string} attributeCode 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AttributeMetadataCustomerAttributeAttributeCodeApi
     */
    public customerCustomerMetadataV1GetAttributeMetadataGet(attributeCode: string, options?: AxiosRequestConfig) {
        return AttributeMetadataCustomerAttributeAttributeCodeApiFp(this.configuration).customerCustomerMetadataV1GetAttributeMetadataGet(attributeCode, options).then((request) => request(this.axios, this.basePath));
    }
}


/**
 * AttributeMetadataCustomerCustomApi - axios parameter creator
 * @export
 */
export const AttributeMetadataCustomerCustomApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Get custom attributes metadata for the given data interface.
         * @summary attributeMetadata/customer/custom
         * @param {string} [dataInterfaceName] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        customerCustomerMetadataV1GetCustomAttributesMetadataGet: async (dataInterfaceName?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/V1/attributeMetadata/customer/custom`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (dataInterfaceName !== undefined) {
                localVarQueryParameter['dataInterfaceName'] = dataInterfaceName;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * AttributeMetadataCustomerCustomApi - functional programming interface
 * @export
 */
export const AttributeMetadataCustomerCustomApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = AttributeMetadataCustomerCustomApiAxiosParamCreator(configuration)
    return {
        /**
         * Get custom attributes metadata for the given data interface.
         * @summary attributeMetadata/customer/custom
         * @param {string} [dataInterfaceName] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async customerCustomerMetadataV1GetCustomAttributesMetadataGet(dataInterfaceName?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<CustomerDataAttributeMetadataInterface>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.customerCustomerMetadataV1GetCustomAttributesMetadataGet(dataInterfaceName, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * AttributeMetadataCustomerCustomApi - factory interface
 * @export
 */
export const AttributeMetadataCustomerCustomApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = AttributeMetadataCustomerCustomApiFp(configuration)
    return {
        /**
         * Get custom attributes metadata for the given data interface.
         * @summary attributeMetadata/customer/custom
         * @param {string} [dataInterfaceName] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        customerCustomerMetadataV1GetCustomAttributesMetadataGet(dataInterfaceName?: string, options?: any): AxiosPromise<Array<CustomerDataAttributeMetadataInterface>> {
            return localVarFp.customerCustomerMetadataV1GetCustomAttributesMetadataGet(dataInterfaceName, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * AttributeMetadataCustomerCustomApi - object-oriented interface
 * @export
 * @class AttributeMetadataCustomerCustomApi
 * @extends {BaseAPI}
 */
export class AttributeMetadataCustomerCustomApi extends BaseAPI {
    /**
     * Get custom attributes metadata for the given data interface.
     * @summary attributeMetadata/customer/custom
     * @param {string} [dataInterfaceName] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AttributeMetadataCustomerCustomApi
     */
    public customerCustomerMetadataV1GetCustomAttributesMetadataGet(dataInterfaceName?: string, options?: AxiosRequestConfig) {
        return AttributeMetadataCustomerCustomApiFp(this.configuration).customerCustomerMetadataV1GetCustomAttributesMetadataGet(dataInterfaceName, options).then((request) => request(this.axios, this.basePath));
    }
}


/**
 * AttributeMetadataCustomerFormFormCodeApi - axios parameter creator
 * @export
 */
export const AttributeMetadataCustomerFormFormCodeApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Retrieve all attributes filtered by form code
         * @summary attributeMetadata/customer/form/{formCode}
         * @param {string} formCode 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        customerCustomerMetadataV1GetAttributesGet: async (formCode: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'formCode' is not null or undefined
            assertParamExists('customerCustomerMetadataV1GetAttributesGet', 'formCode', formCode)
            const localVarPath = `/V1/attributeMetadata/customer/form/{formCode}`
                .replace(`{${"formCode"}}`, encodeURIComponent(String(formCode)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * AttributeMetadataCustomerFormFormCodeApi - functional programming interface
 * @export
 */
export const AttributeMetadataCustomerFormFormCodeApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = AttributeMetadataCustomerFormFormCodeApiAxiosParamCreator(configuration)
    return {
        /**
         * Retrieve all attributes filtered by form code
         * @summary attributeMetadata/customer/form/{formCode}
         * @param {string} formCode 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async customerCustomerMetadataV1GetAttributesGet(formCode: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<CustomerDataAttributeMetadataInterface>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.customerCustomerMetadataV1GetAttributesGet(formCode, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * AttributeMetadataCustomerFormFormCodeApi - factory interface
 * @export
 */
export const AttributeMetadataCustomerFormFormCodeApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = AttributeMetadataCustomerFormFormCodeApiFp(configuration)
    return {
        /**
         * Retrieve all attributes filtered by form code
         * @summary attributeMetadata/customer/form/{formCode}
         * @param {string} formCode 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        customerCustomerMetadataV1GetAttributesGet(formCode: string, options?: any): AxiosPromise<Array<CustomerDataAttributeMetadataInterface>> {
            return localVarFp.customerCustomerMetadataV1GetAttributesGet(formCode, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * AttributeMetadataCustomerFormFormCodeApi - object-oriented interface
 * @export
 * @class AttributeMetadataCustomerFormFormCodeApi
 * @extends {BaseAPI}
 */
export class AttributeMetadataCustomerFormFormCodeApi extends BaseAPI {
    /**
     * Retrieve all attributes filtered by form code
     * @summary attributeMetadata/customer/form/{formCode}
     * @param {string} formCode 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AttributeMetadataCustomerFormFormCodeApi
     */
    public customerCustomerMetadataV1GetAttributesGet(formCode: string, options?: AxiosRequestConfig) {
        return AttributeMetadataCustomerFormFormCodeApiFp(this.configuration).customerCustomerMetadataV1GetAttributesGet(formCode, options).then((request) => request(this.axios, this.basePath));
    }
}


/**
 * BulkBulkUuidDetailedStatusApi - axios parameter creator
 * @export
 */
export const BulkBulkUuidDetailedStatusApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Get Bulk summary data with list of operations items full data.
         * @summary bulk/{bulkUuid}/detailed-status
         * @param {string} bulkUuid 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        asynchronousOperationsBulkStatusV1GetBulkDetailedStatusGet: async (bulkUuid: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'bulkUuid' is not null or undefined
            assertParamExists('asynchronousOperationsBulkStatusV1GetBulkDetailedStatusGet', 'bulkUuid', bulkUuid)
            const localVarPath = `/V1/bulk/{bulkUuid}/detailed-status`
                .replace(`{${"bulkUuid"}}`, encodeURIComponent(String(bulkUuid)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * BulkBulkUuidDetailedStatusApi - functional programming interface
 * @export
 */
export const BulkBulkUuidDetailedStatusApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = BulkBulkUuidDetailedStatusApiAxiosParamCreator(configuration)
    return {
        /**
         * Get Bulk summary data with list of operations items full data.
         * @summary bulk/{bulkUuid}/detailed-status
         * @param {string} bulkUuid 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async asynchronousOperationsBulkStatusV1GetBulkDetailedStatusGet(bulkUuid: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<AsynchronousOperationsDataDetailedBulkOperationsStatusInterface>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.asynchronousOperationsBulkStatusV1GetBulkDetailedStatusGet(bulkUuid, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * BulkBulkUuidDetailedStatusApi - factory interface
 * @export
 */
export const BulkBulkUuidDetailedStatusApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = BulkBulkUuidDetailedStatusApiFp(configuration)
    return {
        /**
         * Get Bulk summary data with list of operations items full data.
         * @summary bulk/{bulkUuid}/detailed-status
         * @param {string} bulkUuid 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        asynchronousOperationsBulkStatusV1GetBulkDetailedStatusGet(bulkUuid: string, options?: any): AxiosPromise<AsynchronousOperationsDataDetailedBulkOperationsStatusInterface> {
            return localVarFp.asynchronousOperationsBulkStatusV1GetBulkDetailedStatusGet(bulkUuid, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * BulkBulkUuidDetailedStatusApi - object-oriented interface
 * @export
 * @class BulkBulkUuidDetailedStatusApi
 * @extends {BaseAPI}
 */
export class BulkBulkUuidDetailedStatusApi extends BaseAPI {
    /**
     * Get Bulk summary data with list of operations items full data.
     * @summary bulk/{bulkUuid}/detailed-status
     * @param {string} bulkUuid 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BulkBulkUuidDetailedStatusApi
     */
    public asynchronousOperationsBulkStatusV1GetBulkDetailedStatusGet(bulkUuid: string, options?: AxiosRequestConfig) {
        return BulkBulkUuidDetailedStatusApiFp(this.configuration).asynchronousOperationsBulkStatusV1GetBulkDetailedStatusGet(bulkUuid, options).then((request) => request(this.axios, this.basePath));
    }
}


/**
 * BulkBulkUuidOperationStatusStatusApi - axios parameter creator
 * @export
 */
export const BulkBulkUuidOperationStatusStatusApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Get operations count by bulk uuid and status.
         * @summary bulk/{bulkUuid}/operation-status/{status}
         * @param {string} bulkUuid 
         * @param {number} status 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        asynchronousOperationsBulkStatusV1GetOperationsCountByBulkIdAndStatusGet: async (bulkUuid: string, status: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'bulkUuid' is not null or undefined
            assertParamExists('asynchronousOperationsBulkStatusV1GetOperationsCountByBulkIdAndStatusGet', 'bulkUuid', bulkUuid)
            // verify required parameter 'status' is not null or undefined
            assertParamExists('asynchronousOperationsBulkStatusV1GetOperationsCountByBulkIdAndStatusGet', 'status', status)
            const localVarPath = `/V1/bulk/{bulkUuid}/operation-status/{status}`
                .replace(`{${"bulkUuid"}}`, encodeURIComponent(String(bulkUuid)))
                .replace(`{${"status"}}`, encodeURIComponent(String(status)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * BulkBulkUuidOperationStatusStatusApi - functional programming interface
 * @export
 */
export const BulkBulkUuidOperationStatusStatusApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = BulkBulkUuidOperationStatusStatusApiAxiosParamCreator(configuration)
    return {
        /**
         * Get operations count by bulk uuid and status.
         * @summary bulk/{bulkUuid}/operation-status/{status}
         * @param {string} bulkUuid 
         * @param {number} status 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async asynchronousOperationsBulkStatusV1GetOperationsCountByBulkIdAndStatusGet(bulkUuid: string, status: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<number>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.asynchronousOperationsBulkStatusV1GetOperationsCountByBulkIdAndStatusGet(bulkUuid, status, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * BulkBulkUuidOperationStatusStatusApi - factory interface
 * @export
 */
export const BulkBulkUuidOperationStatusStatusApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = BulkBulkUuidOperationStatusStatusApiFp(configuration)
    return {
        /**
         * Get operations count by bulk uuid and status.
         * @summary bulk/{bulkUuid}/operation-status/{status}
         * @param {string} bulkUuid 
         * @param {number} status 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        asynchronousOperationsBulkStatusV1GetOperationsCountByBulkIdAndStatusGet(bulkUuid: string, status: number, options?: any): AxiosPromise<number> {
            return localVarFp.asynchronousOperationsBulkStatusV1GetOperationsCountByBulkIdAndStatusGet(bulkUuid, status, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * BulkBulkUuidOperationStatusStatusApi - object-oriented interface
 * @export
 * @class BulkBulkUuidOperationStatusStatusApi
 * @extends {BaseAPI}
 */
export class BulkBulkUuidOperationStatusStatusApi extends BaseAPI {
    /**
     * Get operations count by bulk uuid and status.
     * @summary bulk/{bulkUuid}/operation-status/{status}
     * @param {string} bulkUuid 
     * @param {number} status 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BulkBulkUuidOperationStatusStatusApi
     */
    public asynchronousOperationsBulkStatusV1GetOperationsCountByBulkIdAndStatusGet(bulkUuid: string, status: number, options?: AxiosRequestConfig) {
        return BulkBulkUuidOperationStatusStatusApiFp(this.configuration).asynchronousOperationsBulkStatusV1GetOperationsCountByBulkIdAndStatusGet(bulkUuid, status, options).then((request) => request(this.axios, this.basePath));
    }
}


/**
 * BulkBulkUuidStatusApi - axios parameter creator
 * @export
 */
export const BulkBulkUuidStatusApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Get Bulk summary data with list of operations items short data.
         * @summary bulk/{bulkUuid}/status
         * @param {string} bulkUuid 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        asynchronousOperationsBulkStatusV1GetBulkShortStatusGet: async (bulkUuid: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'bulkUuid' is not null or undefined
            assertParamExists('asynchronousOperationsBulkStatusV1GetBulkShortStatusGet', 'bulkUuid', bulkUuid)
            const localVarPath = `/V1/bulk/{bulkUuid}/status`
                .replace(`{${"bulkUuid"}}`, encodeURIComponent(String(bulkUuid)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * BulkBulkUuidStatusApi - functional programming interface
 * @export
 */
export const BulkBulkUuidStatusApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = BulkBulkUuidStatusApiAxiosParamCreator(configuration)
    return {
        /**
         * Get Bulk summary data with list of operations items short data.
         * @summary bulk/{bulkUuid}/status
         * @param {string} bulkUuid 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async asynchronousOperationsBulkStatusV1GetBulkShortStatusGet(bulkUuid: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<AsynchronousOperationsDataBulkOperationsStatusInterface>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.asynchronousOperationsBulkStatusV1GetBulkShortStatusGet(bulkUuid, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * BulkBulkUuidStatusApi - factory interface
 * @export
 */
export const BulkBulkUuidStatusApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = BulkBulkUuidStatusApiFp(configuration)
    return {
        /**
         * Get Bulk summary data with list of operations items short data.
         * @summary bulk/{bulkUuid}/status
         * @param {string} bulkUuid 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        asynchronousOperationsBulkStatusV1GetBulkShortStatusGet(bulkUuid: string, options?: any): AxiosPromise<AsynchronousOperationsDataBulkOperationsStatusInterface> {
            return localVarFp.asynchronousOperationsBulkStatusV1GetBulkShortStatusGet(bulkUuid, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * BulkBulkUuidStatusApi - object-oriented interface
 * @export
 * @class BulkBulkUuidStatusApi
 * @extends {BaseAPI}
 */
export class BulkBulkUuidStatusApi extends BaseAPI {
    /**
     * Get Bulk summary data with list of operations items short data.
     * @summary bulk/{bulkUuid}/status
     * @param {string} bulkUuid 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BulkBulkUuidStatusApi
     */
    public asynchronousOperationsBulkStatusV1GetBulkShortStatusGet(bulkUuid: string, options?: AxiosRequestConfig) {
        return BulkBulkUuidStatusApiFp(this.configuration).asynchronousOperationsBulkStatusV1GetBulkShortStatusGet(bulkUuid, options).then((request) => request(this.axios, this.basePath));
    }
}


/**
 * BundleProductsOptionsAddApi - axios parameter creator
 * @export
 */
export const BundleProductsOptionsAddApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Add new option for bundle product
         * @summary bundle-products/options/add
         * @param {BundleProductOptionManagementV1SavePostRequest} [bundleProductOptionManagementV1SavePostBody] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        bundleProductOptionManagementV1SavePost: async (bundleProductOptionManagementV1SavePostBody?: BundleProductOptionManagementV1SavePostRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/V1/bundle-products/options/add`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(bundleProductOptionManagementV1SavePostBody, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * BundleProductsOptionsAddApi - functional programming interface
 * @export
 */
export const BundleProductsOptionsAddApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = BundleProductsOptionsAddApiAxiosParamCreator(configuration)
    return {
        /**
         * Add new option for bundle product
         * @summary bundle-products/options/add
         * @param {BundleProductOptionManagementV1SavePostRequest} [bundleProductOptionManagementV1SavePostBody] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async bundleProductOptionManagementV1SavePost(bundleProductOptionManagementV1SavePostBody?: BundleProductOptionManagementV1SavePostRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<number>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.bundleProductOptionManagementV1SavePost(bundleProductOptionManagementV1SavePostBody, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * BundleProductsOptionsAddApi - factory interface
 * @export
 */
export const BundleProductsOptionsAddApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = BundleProductsOptionsAddApiFp(configuration)
    return {
        /**
         * Add new option for bundle product
         * @summary bundle-products/options/add
         * @param {BundleProductOptionManagementV1SavePostRequest} [bundleProductOptionManagementV1SavePostBody] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        bundleProductOptionManagementV1SavePost(bundleProductOptionManagementV1SavePostBody?: BundleProductOptionManagementV1SavePostRequest, options?: any): AxiosPromise<number> {
            return localVarFp.bundleProductOptionManagementV1SavePost(bundleProductOptionManagementV1SavePostBody, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * BundleProductsOptionsAddApi - object-oriented interface
 * @export
 * @class BundleProductsOptionsAddApi
 * @extends {BaseAPI}
 */
export class BundleProductsOptionsAddApi extends BaseAPI {
    /**
     * Add new option for bundle product
     * @summary bundle-products/options/add
     * @param {BundleProductOptionManagementV1SavePostRequest} [bundleProductOptionManagementV1SavePostBody] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BundleProductsOptionsAddApi
     */
    public bundleProductOptionManagementV1SavePost(bundleProductOptionManagementV1SavePostBody?: BundleProductOptionManagementV1SavePostRequest, options?: AxiosRequestConfig) {
        return BundleProductsOptionsAddApiFp(this.configuration).bundleProductOptionManagementV1SavePost(bundleProductOptionManagementV1SavePostBody, options).then((request) => request(this.axios, this.basePath));
    }
}


/**
 * BundleProductsOptionsOptionIdApi - axios parameter creator
 * @export
 */
export const BundleProductsOptionsOptionIdApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Add new option for bundle product
         * @summary bundle-products/options/{optionId}
         * @param {string} optionId 
         * @param {BundleProductOptionManagementV1SavePostRequest} [bundleProductOptionManagementV1SavePutBody] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        bundleProductOptionManagementV1SavePut: async (optionId: string, bundleProductOptionManagementV1SavePutBody?: BundleProductOptionManagementV1SavePostRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'optionId' is not null or undefined
            assertParamExists('bundleProductOptionManagementV1SavePut', 'optionId', optionId)
            const localVarPath = `/V1/bundle-products/options/{optionId}`
                .replace(`{${"optionId"}}`, encodeURIComponent(String(optionId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(bundleProductOptionManagementV1SavePutBody, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * BundleProductsOptionsOptionIdApi - functional programming interface
 * @export
 */
export const BundleProductsOptionsOptionIdApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = BundleProductsOptionsOptionIdApiAxiosParamCreator(configuration)
    return {
        /**
         * Add new option for bundle product
         * @summary bundle-products/options/{optionId}
         * @param {string} optionId 
         * @param {BundleProductOptionManagementV1SavePostRequest} [bundleProductOptionManagementV1SavePutBody] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async bundleProductOptionManagementV1SavePut(optionId: string, bundleProductOptionManagementV1SavePutBody?: BundleProductOptionManagementV1SavePostRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<number>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.bundleProductOptionManagementV1SavePut(optionId, bundleProductOptionManagementV1SavePutBody, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * BundleProductsOptionsOptionIdApi - factory interface
 * @export
 */
export const BundleProductsOptionsOptionIdApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = BundleProductsOptionsOptionIdApiFp(configuration)
    return {
        /**
         * Add new option for bundle product
         * @summary bundle-products/options/{optionId}
         * @param {string} optionId 
         * @param {BundleProductOptionManagementV1SavePostRequest} [bundleProductOptionManagementV1SavePutBody] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        bundleProductOptionManagementV1SavePut(optionId: string, bundleProductOptionManagementV1SavePutBody?: BundleProductOptionManagementV1SavePostRequest, options?: any): AxiosPromise<number> {
            return localVarFp.bundleProductOptionManagementV1SavePut(optionId, bundleProductOptionManagementV1SavePutBody, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * BundleProductsOptionsOptionIdApi - object-oriented interface
 * @export
 * @class BundleProductsOptionsOptionIdApi
 * @extends {BaseAPI}
 */
export class BundleProductsOptionsOptionIdApi extends BaseAPI {
    /**
     * Add new option for bundle product
     * @summary bundle-products/options/{optionId}
     * @param {string} optionId 
     * @param {BundleProductOptionManagementV1SavePostRequest} [bundleProductOptionManagementV1SavePutBody] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BundleProductsOptionsOptionIdApi
     */
    public bundleProductOptionManagementV1SavePut(optionId: string, bundleProductOptionManagementV1SavePutBody?: BundleProductOptionManagementV1SavePostRequest, options?: AxiosRequestConfig) {
        return BundleProductsOptionsOptionIdApiFp(this.configuration).bundleProductOptionManagementV1SavePut(optionId, bundleProductOptionManagementV1SavePutBody, options).then((request) => request(this.axios, this.basePath));
    }
}


/**
 * BundleProductsOptionsTypesApi - axios parameter creator
 * @export
 */
export const BundleProductsOptionsTypesApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Get all types for options for bundle products
         * @summary bundle-products/options/types
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        bundleProductOptionTypeListV1GetItemsGet: async (options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/V1/bundle-products/options/types`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * BundleProductsOptionsTypesApi - functional programming interface
 * @export
 */
export const BundleProductsOptionsTypesApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = BundleProductsOptionsTypesApiAxiosParamCreator(configuration)
    return {
        /**
         * Get all types for options for bundle products
         * @summary bundle-products/options/types
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async bundleProductOptionTypeListV1GetItemsGet(options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<BundleDataOptionTypeInterface>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.bundleProductOptionTypeListV1GetItemsGet(options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * BundleProductsOptionsTypesApi - factory interface
 * @export
 */
export const BundleProductsOptionsTypesApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = BundleProductsOptionsTypesApiFp(configuration)
    return {
        /**
         * Get all types for options for bundle products
         * @summary bundle-products/options/types
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        bundleProductOptionTypeListV1GetItemsGet(options?: any): AxiosPromise<Array<BundleDataOptionTypeInterface>> {
            return localVarFp.bundleProductOptionTypeListV1GetItemsGet(options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * BundleProductsOptionsTypesApi - object-oriented interface
 * @export
 * @class BundleProductsOptionsTypesApi
 * @extends {BaseAPI}
 */
export class BundleProductsOptionsTypesApi extends BaseAPI {
    /**
     * Get all types for options for bundle products
     * @summary bundle-products/options/types
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BundleProductsOptionsTypesApi
     */
    public bundleProductOptionTypeListV1GetItemsGet(options?: AxiosRequestConfig) {
        return BundleProductsOptionsTypesApiFp(this.configuration).bundleProductOptionTypeListV1GetItemsGet(options).then((request) => request(this.axios, this.basePath));
    }
}


/**
 * BundleProductsProductSkuChildrenApi - axios parameter creator
 * @export
 */
export const BundleProductsProductSkuChildrenApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Get all children for Bundle product
         * @summary bundle-products/{productSku}/children
         * @param {string} productSku 
         * @param {number} [optionId] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        bundleProductLinkManagementV1GetChildrenGet: async (productSku: string, optionId?: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'productSku' is not null or undefined
            assertParamExists('bundleProductLinkManagementV1GetChildrenGet', 'productSku', productSku)
            const localVarPath = `/V1/bundle-products/{productSku}/children`
                .replace(`{${"productSku"}}`, encodeURIComponent(String(productSku)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (optionId !== undefined) {
                localVarQueryParameter['optionId'] = optionId;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * BundleProductsProductSkuChildrenApi - functional programming interface
 * @export
 */
export const BundleProductsProductSkuChildrenApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = BundleProductsProductSkuChildrenApiAxiosParamCreator(configuration)
    return {
        /**
         * Get all children for Bundle product
         * @summary bundle-products/{productSku}/children
         * @param {string} productSku 
         * @param {number} [optionId] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async bundleProductLinkManagementV1GetChildrenGet(productSku: string, optionId?: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<BundleDataLinkInterface>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.bundleProductLinkManagementV1GetChildrenGet(productSku, optionId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * BundleProductsProductSkuChildrenApi - factory interface
 * @export
 */
export const BundleProductsProductSkuChildrenApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = BundleProductsProductSkuChildrenApiFp(configuration)
    return {
        /**
         * Get all children for Bundle product
         * @summary bundle-products/{productSku}/children
         * @param {string} productSku 
         * @param {number} [optionId] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        bundleProductLinkManagementV1GetChildrenGet(productSku: string, optionId?: number, options?: any): AxiosPromise<Array<BundleDataLinkInterface>> {
            return localVarFp.bundleProductLinkManagementV1GetChildrenGet(productSku, optionId, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * BundleProductsProductSkuChildrenApi - object-oriented interface
 * @export
 * @class BundleProductsProductSkuChildrenApi
 * @extends {BaseAPI}
 */
export class BundleProductsProductSkuChildrenApi extends BaseAPI {
    /**
     * Get all children for Bundle product
     * @summary bundle-products/{productSku}/children
     * @param {string} productSku 
     * @param {number} [optionId] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BundleProductsProductSkuChildrenApi
     */
    public bundleProductLinkManagementV1GetChildrenGet(productSku: string, optionId?: number, options?: AxiosRequestConfig) {
        return BundleProductsProductSkuChildrenApiFp(this.configuration).bundleProductLinkManagementV1GetChildrenGet(productSku, optionId, options).then((request) => request(this.axios, this.basePath));
    }
}


/**
 * BundleProductsSkuLinksIdApi - axios parameter creator
 * @export
 */
export const BundleProductsSkuLinksIdApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary bundle-products/{sku}/links/{id}
         * @param {string} sku 
         * @param {string} id 
         * @param {BundleProductLinkManagementV1SaveChildPutRequest} [bundleProductLinkManagementV1SaveChildPutBody] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        bundleProductLinkManagementV1SaveChildPut: async (sku: string, id: string, bundleProductLinkManagementV1SaveChildPutBody?: BundleProductLinkManagementV1SaveChildPutRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'sku' is not null or undefined
            assertParamExists('bundleProductLinkManagementV1SaveChildPut', 'sku', sku)
            // verify required parameter 'id' is not null or undefined
            assertParamExists('bundleProductLinkManagementV1SaveChildPut', 'id', id)
            const localVarPath = `/V1/bundle-products/{sku}/links/{id}`
                .replace(`{${"sku"}}`, encodeURIComponent(String(sku)))
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(bundleProductLinkManagementV1SaveChildPutBody, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * BundleProductsSkuLinksIdApi - functional programming interface
 * @export
 */
export const BundleProductsSkuLinksIdApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = BundleProductsSkuLinksIdApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @summary bundle-products/{sku}/links/{id}
         * @param {string} sku 
         * @param {string} id 
         * @param {BundleProductLinkManagementV1SaveChildPutRequest} [bundleProductLinkManagementV1SaveChildPutBody] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async bundleProductLinkManagementV1SaveChildPut(sku: string, id: string, bundleProductLinkManagementV1SaveChildPutBody?: BundleProductLinkManagementV1SaveChildPutRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<boolean>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.bundleProductLinkManagementV1SaveChildPut(sku, id, bundleProductLinkManagementV1SaveChildPutBody, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * BundleProductsSkuLinksIdApi - factory interface
 * @export
 */
export const BundleProductsSkuLinksIdApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = BundleProductsSkuLinksIdApiFp(configuration)
    return {
        /**
         * 
         * @summary bundle-products/{sku}/links/{id}
         * @param {string} sku 
         * @param {string} id 
         * @param {BundleProductLinkManagementV1SaveChildPutRequest} [bundleProductLinkManagementV1SaveChildPutBody] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        bundleProductLinkManagementV1SaveChildPut(sku: string, id: string, bundleProductLinkManagementV1SaveChildPutBody?: BundleProductLinkManagementV1SaveChildPutRequest, options?: any): AxiosPromise<boolean> {
            return localVarFp.bundleProductLinkManagementV1SaveChildPut(sku, id, bundleProductLinkManagementV1SaveChildPutBody, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * BundleProductsSkuLinksIdApi - object-oriented interface
 * @export
 * @class BundleProductsSkuLinksIdApi
 * @extends {BaseAPI}
 */
export class BundleProductsSkuLinksIdApi extends BaseAPI {
    /**
     * 
     * @summary bundle-products/{sku}/links/{id}
     * @param {string} sku 
     * @param {string} id 
     * @param {BundleProductLinkManagementV1SaveChildPutRequest} [bundleProductLinkManagementV1SaveChildPutBody] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BundleProductsSkuLinksIdApi
     */
    public bundleProductLinkManagementV1SaveChildPut(sku: string, id: string, bundleProductLinkManagementV1SaveChildPutBody?: BundleProductLinkManagementV1SaveChildPutRequest, options?: AxiosRequestConfig) {
        return BundleProductsSkuLinksIdApiFp(this.configuration).bundleProductLinkManagementV1SaveChildPut(sku, id, bundleProductLinkManagementV1SaveChildPutBody, options).then((request) => request(this.axios, this.basePath));
    }
}


/**
 * BundleProductsSkuLinksOptionIdApi - axios parameter creator
 * @export
 */
export const BundleProductsSkuLinksOptionIdApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Add child product to specified Bundle option by product sku
         * @summary bundle-products/{sku}/links/{optionId}
         * @param {string} sku 
         * @param {number} optionId 
         * @param {BundleProductLinkManagementV1SaveChildPutRequest} [bundleProductLinkManagementV1AddChildByProductSkuPostBody] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        bundleProductLinkManagementV1AddChildByProductSkuPost: async (sku: string, optionId: number, bundleProductLinkManagementV1AddChildByProductSkuPostBody?: BundleProductLinkManagementV1SaveChildPutRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'sku' is not null or undefined
            assertParamExists('bundleProductLinkManagementV1AddChildByProductSkuPost', 'sku', sku)
            // verify required parameter 'optionId' is not null or undefined
            assertParamExists('bundleProductLinkManagementV1AddChildByProductSkuPost', 'optionId', optionId)
            const localVarPath = `/V1/bundle-products/{sku}/links/{optionId}`
                .replace(`{${"sku"}}`, encodeURIComponent(String(sku)))
                .replace(`{${"optionId"}}`, encodeURIComponent(String(optionId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(bundleProductLinkManagementV1AddChildByProductSkuPostBody, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * BundleProductsSkuLinksOptionIdApi - functional programming interface
 * @export
 */
export const BundleProductsSkuLinksOptionIdApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = BundleProductsSkuLinksOptionIdApiAxiosParamCreator(configuration)
    return {
        /**
         * Add child product to specified Bundle option by product sku
         * @summary bundle-products/{sku}/links/{optionId}
         * @param {string} sku 
         * @param {number} optionId 
         * @param {BundleProductLinkManagementV1SaveChildPutRequest} [bundleProductLinkManagementV1AddChildByProductSkuPostBody] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async bundleProductLinkManagementV1AddChildByProductSkuPost(sku: string, optionId: number, bundleProductLinkManagementV1AddChildByProductSkuPostBody?: BundleProductLinkManagementV1SaveChildPutRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<number>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.bundleProductLinkManagementV1AddChildByProductSkuPost(sku, optionId, bundleProductLinkManagementV1AddChildByProductSkuPostBody, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * BundleProductsSkuLinksOptionIdApi - factory interface
 * @export
 */
export const BundleProductsSkuLinksOptionIdApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = BundleProductsSkuLinksOptionIdApiFp(configuration)
    return {
        /**
         * Add child product to specified Bundle option by product sku
         * @summary bundle-products/{sku}/links/{optionId}
         * @param {string} sku 
         * @param {number} optionId 
         * @param {BundleProductLinkManagementV1SaveChildPutRequest} [bundleProductLinkManagementV1AddChildByProductSkuPostBody] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        bundleProductLinkManagementV1AddChildByProductSkuPost(sku: string, optionId: number, bundleProductLinkManagementV1AddChildByProductSkuPostBody?: BundleProductLinkManagementV1SaveChildPutRequest, options?: any): AxiosPromise<number> {
            return localVarFp.bundleProductLinkManagementV1AddChildByProductSkuPost(sku, optionId, bundleProductLinkManagementV1AddChildByProductSkuPostBody, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * BundleProductsSkuLinksOptionIdApi - object-oriented interface
 * @export
 * @class BundleProductsSkuLinksOptionIdApi
 * @extends {BaseAPI}
 */
export class BundleProductsSkuLinksOptionIdApi extends BaseAPI {
    /**
     * Add child product to specified Bundle option by product sku
     * @summary bundle-products/{sku}/links/{optionId}
     * @param {string} sku 
     * @param {number} optionId 
     * @param {BundleProductLinkManagementV1SaveChildPutRequest} [bundleProductLinkManagementV1AddChildByProductSkuPostBody] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BundleProductsSkuLinksOptionIdApi
     */
    public bundleProductLinkManagementV1AddChildByProductSkuPost(sku: string, optionId: number, bundleProductLinkManagementV1AddChildByProductSkuPostBody?: BundleProductLinkManagementV1SaveChildPutRequest, options?: AxiosRequestConfig) {
        return BundleProductsSkuLinksOptionIdApiFp(this.configuration).bundleProductLinkManagementV1AddChildByProductSkuPost(sku, optionId, bundleProductLinkManagementV1AddChildByProductSkuPostBody, options).then((request) => request(this.axios, this.basePath));
    }
}


/**
 * BundleProductsSkuOptionsAllApi - axios parameter creator
 * @export
 */
export const BundleProductsSkuOptionsAllApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Get all options for bundle product
         * @summary bundle-products/{sku}/options/all
         * @param {string} sku 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        bundleProductOptionRepositoryV1GetListGet: async (sku: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'sku' is not null or undefined
            assertParamExists('bundleProductOptionRepositoryV1GetListGet', 'sku', sku)
            const localVarPath = `/V1/bundle-products/{sku}/options/all`
                .replace(`{${"sku"}}`, encodeURIComponent(String(sku)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * BundleProductsSkuOptionsAllApi - functional programming interface
 * @export
 */
export const BundleProductsSkuOptionsAllApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = BundleProductsSkuOptionsAllApiAxiosParamCreator(configuration)
    return {
        /**
         * Get all options for bundle product
         * @summary bundle-products/{sku}/options/all
         * @param {string} sku 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async bundleProductOptionRepositoryV1GetListGet(sku: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<BundleDataOptionInterface>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.bundleProductOptionRepositoryV1GetListGet(sku, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * BundleProductsSkuOptionsAllApi - factory interface
 * @export
 */
export const BundleProductsSkuOptionsAllApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = BundleProductsSkuOptionsAllApiFp(configuration)
    return {
        /**
         * Get all options for bundle product
         * @summary bundle-products/{sku}/options/all
         * @param {string} sku 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        bundleProductOptionRepositoryV1GetListGet(sku: string, options?: any): AxiosPromise<Array<BundleDataOptionInterface>> {
            return localVarFp.bundleProductOptionRepositoryV1GetListGet(sku, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * BundleProductsSkuOptionsAllApi - object-oriented interface
 * @export
 * @class BundleProductsSkuOptionsAllApi
 * @extends {BaseAPI}
 */
export class BundleProductsSkuOptionsAllApi extends BaseAPI {
    /**
     * Get all options for bundle product
     * @summary bundle-products/{sku}/options/all
     * @param {string} sku 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BundleProductsSkuOptionsAllApi
     */
    public bundleProductOptionRepositoryV1GetListGet(sku: string, options?: AxiosRequestConfig) {
        return BundleProductsSkuOptionsAllApiFp(this.configuration).bundleProductOptionRepositoryV1GetListGet(sku, options).then((request) => request(this.axios, this.basePath));
    }
}


/**
 * BundleProductsSkuOptionsOptionIdApi - axios parameter creator
 * @export
 */
export const BundleProductsSkuOptionsOptionIdApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Remove bundle option
         * @summary bundle-products/{sku}/options/{optionId}
         * @param {string} sku 
         * @param {number} optionId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        bundleProductOptionRepositoryV1DeleteByIdDelete: async (sku: string, optionId: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'sku' is not null or undefined
            assertParamExists('bundleProductOptionRepositoryV1DeleteByIdDelete', 'sku', sku)
            // verify required parameter 'optionId' is not null or undefined
            assertParamExists('bundleProductOptionRepositoryV1DeleteByIdDelete', 'optionId', optionId)
            const localVarPath = `/V1/bundle-products/{sku}/options/{optionId}`
                .replace(`{${"sku"}}`, encodeURIComponent(String(sku)))
                .replace(`{${"optionId"}}`, encodeURIComponent(String(optionId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Get option for bundle product
         * @summary bundle-products/{sku}/options/{optionId}
         * @param {string} sku 
         * @param {number} optionId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        bundleProductOptionRepositoryV1GetGet: async (sku: string, optionId: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'sku' is not null or undefined
            assertParamExists('bundleProductOptionRepositoryV1GetGet', 'sku', sku)
            // verify required parameter 'optionId' is not null or undefined
            assertParamExists('bundleProductOptionRepositoryV1GetGet', 'optionId', optionId)
            const localVarPath = `/V1/bundle-products/{sku}/options/{optionId}`
                .replace(`{${"sku"}}`, encodeURIComponent(String(sku)))
                .replace(`{${"optionId"}}`, encodeURIComponent(String(optionId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * BundleProductsSkuOptionsOptionIdApi - functional programming interface
 * @export
 */
export const BundleProductsSkuOptionsOptionIdApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = BundleProductsSkuOptionsOptionIdApiAxiosParamCreator(configuration)
    return {
        /**
         * Remove bundle option
         * @summary bundle-products/{sku}/options/{optionId}
         * @param {string} sku 
         * @param {number} optionId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async bundleProductOptionRepositoryV1DeleteByIdDelete(sku: string, optionId: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<boolean>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.bundleProductOptionRepositoryV1DeleteByIdDelete(sku, optionId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Get option for bundle product
         * @summary bundle-products/{sku}/options/{optionId}
         * @param {string} sku 
         * @param {number} optionId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async bundleProductOptionRepositoryV1GetGet(sku: string, optionId: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<BundleDataOptionInterface>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.bundleProductOptionRepositoryV1GetGet(sku, optionId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * BundleProductsSkuOptionsOptionIdApi - factory interface
 * @export
 */
export const BundleProductsSkuOptionsOptionIdApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = BundleProductsSkuOptionsOptionIdApiFp(configuration)
    return {
        /**
         * Remove bundle option
         * @summary bundle-products/{sku}/options/{optionId}
         * @param {string} sku 
         * @param {number} optionId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        bundleProductOptionRepositoryV1DeleteByIdDelete(sku: string, optionId: number, options?: any): AxiosPromise<boolean> {
            return localVarFp.bundleProductOptionRepositoryV1DeleteByIdDelete(sku, optionId, options).then((request) => request(axios, basePath));
        },
        /**
         * Get option for bundle product
         * @summary bundle-products/{sku}/options/{optionId}
         * @param {string} sku 
         * @param {number} optionId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        bundleProductOptionRepositoryV1GetGet(sku: string, optionId: number, options?: any): AxiosPromise<BundleDataOptionInterface> {
            return localVarFp.bundleProductOptionRepositoryV1GetGet(sku, optionId, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * BundleProductsSkuOptionsOptionIdApi - object-oriented interface
 * @export
 * @class BundleProductsSkuOptionsOptionIdApi
 * @extends {BaseAPI}
 */
export class BundleProductsSkuOptionsOptionIdApi extends BaseAPI {
    /**
     * Remove bundle option
     * @summary bundle-products/{sku}/options/{optionId}
     * @param {string} sku 
     * @param {number} optionId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BundleProductsSkuOptionsOptionIdApi
     */
    public bundleProductOptionRepositoryV1DeleteByIdDelete(sku: string, optionId: number, options?: AxiosRequestConfig) {
        return BundleProductsSkuOptionsOptionIdApiFp(this.configuration).bundleProductOptionRepositoryV1DeleteByIdDelete(sku, optionId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Get option for bundle product
     * @summary bundle-products/{sku}/options/{optionId}
     * @param {string} sku 
     * @param {number} optionId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BundleProductsSkuOptionsOptionIdApi
     */
    public bundleProductOptionRepositoryV1GetGet(sku: string, optionId: number, options?: AxiosRequestConfig) {
        return BundleProductsSkuOptionsOptionIdApiFp(this.configuration).bundleProductOptionRepositoryV1GetGet(sku, optionId, options).then((request) => request(this.axios, this.basePath));
    }
}


/**
 * BundleProductsSkuOptionsOptionIdChildrenChildSkuApi - axios parameter creator
 * @export
 */
export const BundleProductsSkuOptionsOptionIdChildrenChildSkuApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Remove product from Bundle product option
         * @summary bundle-products/{sku}/options/{optionId}/children/{childSku}
         * @param {string} sku 
         * @param {number} optionId 
         * @param {string} childSku 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        bundleProductLinkManagementV1RemoveChildDelete: async (sku: string, optionId: number, childSku: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'sku' is not null or undefined
            assertParamExists('bundleProductLinkManagementV1RemoveChildDelete', 'sku', sku)
            // verify required parameter 'optionId' is not null or undefined
            assertParamExists('bundleProductLinkManagementV1RemoveChildDelete', 'optionId', optionId)
            // verify required parameter 'childSku' is not null or undefined
            assertParamExists('bundleProductLinkManagementV1RemoveChildDelete', 'childSku', childSku)
            const localVarPath = `/V1/bundle-products/{sku}/options/{optionId}/children/{childSku}`
                .replace(`{${"sku"}}`, encodeURIComponent(String(sku)))
                .replace(`{${"optionId"}}`, encodeURIComponent(String(optionId)))
                .replace(`{${"childSku"}}`, encodeURIComponent(String(childSku)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * BundleProductsSkuOptionsOptionIdChildrenChildSkuApi - functional programming interface
 * @export
 */
export const BundleProductsSkuOptionsOptionIdChildrenChildSkuApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = BundleProductsSkuOptionsOptionIdChildrenChildSkuApiAxiosParamCreator(configuration)
    return {
        /**
         * Remove product from Bundle product option
         * @summary bundle-products/{sku}/options/{optionId}/children/{childSku}
         * @param {string} sku 
         * @param {number} optionId 
         * @param {string} childSku 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async bundleProductLinkManagementV1RemoveChildDelete(sku: string, optionId: number, childSku: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<boolean>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.bundleProductLinkManagementV1RemoveChildDelete(sku, optionId, childSku, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * BundleProductsSkuOptionsOptionIdChildrenChildSkuApi - factory interface
 * @export
 */
export const BundleProductsSkuOptionsOptionIdChildrenChildSkuApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = BundleProductsSkuOptionsOptionIdChildrenChildSkuApiFp(configuration)
    return {
        /**
         * Remove product from Bundle product option
         * @summary bundle-products/{sku}/options/{optionId}/children/{childSku}
         * @param {string} sku 
         * @param {number} optionId 
         * @param {string} childSku 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        bundleProductLinkManagementV1RemoveChildDelete(sku: string, optionId: number, childSku: string, options?: any): AxiosPromise<boolean> {
            return localVarFp.bundleProductLinkManagementV1RemoveChildDelete(sku, optionId, childSku, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * BundleProductsSkuOptionsOptionIdChildrenChildSkuApi - object-oriented interface
 * @export
 * @class BundleProductsSkuOptionsOptionIdChildrenChildSkuApi
 * @extends {BaseAPI}
 */
export class BundleProductsSkuOptionsOptionIdChildrenChildSkuApi extends BaseAPI {
    /**
     * Remove product from Bundle product option
     * @summary bundle-products/{sku}/options/{optionId}/children/{childSku}
     * @param {string} sku 
     * @param {number} optionId 
     * @param {string} childSku 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BundleProductsSkuOptionsOptionIdChildrenChildSkuApi
     */
    public bundleProductLinkManagementV1RemoveChildDelete(sku: string, optionId: number, childSku: string, options?: AxiosRequestConfig) {
        return BundleProductsSkuOptionsOptionIdChildrenChildSkuApiFp(this.configuration).bundleProductLinkManagementV1RemoveChildDelete(sku, optionId, childSku, options).then((request) => request(this.axios, this.basePath));
    }
}


/**
 * CartsApi - axios parameter creator
 * @export
 */
export const CartsApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Creates an empty cart and quote for a guest.
         * @summary carts/
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        quoteCartManagementV1CreateEmptyCartPost: async (options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/V1/carts/`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * CartsApi - functional programming interface
 * @export
 */
export const CartsApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = CartsApiAxiosParamCreator(configuration)
    return {
        /**
         * Creates an empty cart and quote for a guest.
         * @summary carts/
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async quoteCartManagementV1CreateEmptyCartPost(options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<number>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.quoteCartManagementV1CreateEmptyCartPost(options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * CartsApi - factory interface
 * @export
 */
export const CartsApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = CartsApiFp(configuration)
    return {
        /**
         * Creates an empty cart and quote for a guest.
         * @summary carts/
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        quoteCartManagementV1CreateEmptyCartPost(options?: any): AxiosPromise<number> {
            return localVarFp.quoteCartManagementV1CreateEmptyCartPost(options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * CartsApi - object-oriented interface
 * @export
 * @class CartsApi
 * @extends {BaseAPI}
 */
export class CartsApi extends BaseAPI {
    /**
     * Creates an empty cart and quote for a guest.
     * @summary carts/
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CartsApi
     */
    public quoteCartManagementV1CreateEmptyCartPost(options?: AxiosRequestConfig) {
        return CartsApiFp(this.configuration).quoteCartManagementV1CreateEmptyCartPost(options).then((request) => request(this.axios, this.basePath));
    }
}


/**
 * CartsCartIdApi - axios parameter creator
 * @export
 */
export const CartsCartIdApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Assigns a specified customer to a specified shopping cart.
         * @summary carts/{cartId}
         * @param {number} cartId The cart ID.
         * @param {QuoteCartManagementV1AssignCustomerPutRequest} [quoteCartManagementV1AssignCustomerPutBody] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        quoteCartManagementV1AssignCustomerPut: async (cartId: number, quoteCartManagementV1AssignCustomerPutBody?: QuoteCartManagementV1AssignCustomerPutRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'cartId' is not null or undefined
            assertParamExists('quoteCartManagementV1AssignCustomerPut', 'cartId', cartId)
            const localVarPath = `/V1/carts/{cartId}`
                .replace(`{${"cartId"}}`, encodeURIComponent(String(cartId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(quoteCartManagementV1AssignCustomerPutBody, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Enables an administrative user to return information for a specified cart.
         * @summary carts/{cartId}
         * @param {number} cartId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        quoteCartRepositoryV1GetGet: async (cartId: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'cartId' is not null or undefined
            assertParamExists('quoteCartRepositoryV1GetGet', 'cartId', cartId)
            const localVarPath = `/V1/carts/{cartId}`
                .replace(`{${"cartId"}}`, encodeURIComponent(String(cartId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * CartsCartIdApi - functional programming interface
 * @export
 */
export const CartsCartIdApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = CartsCartIdApiAxiosParamCreator(configuration)
    return {
        /**
         * Assigns a specified customer to a specified shopping cart.
         * @summary carts/{cartId}
         * @param {number} cartId The cart ID.
         * @param {QuoteCartManagementV1AssignCustomerPutRequest} [quoteCartManagementV1AssignCustomerPutBody] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async quoteCartManagementV1AssignCustomerPut(cartId: number, quoteCartManagementV1AssignCustomerPutBody?: QuoteCartManagementV1AssignCustomerPutRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<boolean>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.quoteCartManagementV1AssignCustomerPut(cartId, quoteCartManagementV1AssignCustomerPutBody, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Enables an administrative user to return information for a specified cart.
         * @summary carts/{cartId}
         * @param {number} cartId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async quoteCartRepositoryV1GetGet(cartId: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<QuoteDataCartInterface>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.quoteCartRepositoryV1GetGet(cartId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * CartsCartIdApi - factory interface
 * @export
 */
export const CartsCartIdApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = CartsCartIdApiFp(configuration)
    return {
        /**
         * Assigns a specified customer to a specified shopping cart.
         * @summary carts/{cartId}
         * @param {number} cartId The cart ID.
         * @param {QuoteCartManagementV1AssignCustomerPutRequest} [quoteCartManagementV1AssignCustomerPutBody] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        quoteCartManagementV1AssignCustomerPut(cartId: number, quoteCartManagementV1AssignCustomerPutBody?: QuoteCartManagementV1AssignCustomerPutRequest, options?: any): AxiosPromise<boolean> {
            return localVarFp.quoteCartManagementV1AssignCustomerPut(cartId, quoteCartManagementV1AssignCustomerPutBody, options).then((request) => request(axios, basePath));
        },
        /**
         * Enables an administrative user to return information for a specified cart.
         * @summary carts/{cartId}
         * @param {number} cartId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        quoteCartRepositoryV1GetGet(cartId: number, options?: any): AxiosPromise<QuoteDataCartInterface> {
            return localVarFp.quoteCartRepositoryV1GetGet(cartId, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * CartsCartIdApi - object-oriented interface
 * @export
 * @class CartsCartIdApi
 * @extends {BaseAPI}
 */
export class CartsCartIdApi extends BaseAPI {
    /**
     * Assigns a specified customer to a specified shopping cart.
     * @summary carts/{cartId}
     * @param {number} cartId The cart ID.
     * @param {QuoteCartManagementV1AssignCustomerPutRequest} [quoteCartManagementV1AssignCustomerPutBody] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CartsCartIdApi
     */
    public quoteCartManagementV1AssignCustomerPut(cartId: number, quoteCartManagementV1AssignCustomerPutBody?: QuoteCartManagementV1AssignCustomerPutRequest, options?: AxiosRequestConfig) {
        return CartsCartIdApiFp(this.configuration).quoteCartManagementV1AssignCustomerPut(cartId, quoteCartManagementV1AssignCustomerPutBody, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Enables an administrative user to return information for a specified cart.
     * @summary carts/{cartId}
     * @param {number} cartId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CartsCartIdApi
     */
    public quoteCartRepositoryV1GetGet(cartId: number, options?: AxiosRequestConfig) {
        return CartsCartIdApiFp(this.configuration).quoteCartRepositoryV1GetGet(cartId, options).then((request) => request(this.axios, this.basePath));
    }
}


/**
 * CartsCartIdBillingAddressApi - axios parameter creator
 * @export
 */
export const CartsCartIdBillingAddressApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Assigns a specified billing address to a specified cart.
         * @summary carts/{cartId}/billing-address
         * @param {number} cartId The cart ID.
         * @param {QuoteBillingAddressManagementV1AssignPostRequest} [quoteBillingAddressManagementV1AssignPostBody] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        quoteBillingAddressManagementV1AssignPost: async (cartId: number, quoteBillingAddressManagementV1AssignPostBody?: QuoteBillingAddressManagementV1AssignPostRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'cartId' is not null or undefined
            assertParamExists('quoteBillingAddressManagementV1AssignPost', 'cartId', cartId)
            const localVarPath = `/V1/carts/{cartId}/billing-address`
                .replace(`{${"cartId"}}`, encodeURIComponent(String(cartId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(quoteBillingAddressManagementV1AssignPostBody, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Returns the billing address for a specified quote.
         * @summary carts/{cartId}/billing-address
         * @param {number} cartId The cart ID.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        quoteBillingAddressManagementV1GetGet: async (cartId: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'cartId' is not null or undefined
            assertParamExists('quoteBillingAddressManagementV1GetGet', 'cartId', cartId)
            const localVarPath = `/V1/carts/{cartId}/billing-address`
                .replace(`{${"cartId"}}`, encodeURIComponent(String(cartId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * CartsCartIdBillingAddressApi - functional programming interface
 * @export
 */
export const CartsCartIdBillingAddressApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = CartsCartIdBillingAddressApiAxiosParamCreator(configuration)
    return {
        /**
         * Assigns a specified billing address to a specified cart.
         * @summary carts/{cartId}/billing-address
         * @param {number} cartId The cart ID.
         * @param {QuoteBillingAddressManagementV1AssignPostRequest} [quoteBillingAddressManagementV1AssignPostBody] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async quoteBillingAddressManagementV1AssignPost(cartId: number, quoteBillingAddressManagementV1AssignPostBody?: QuoteBillingAddressManagementV1AssignPostRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<number>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.quoteBillingAddressManagementV1AssignPost(cartId, quoteBillingAddressManagementV1AssignPostBody, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Returns the billing address for a specified quote.
         * @summary carts/{cartId}/billing-address
         * @param {number} cartId The cart ID.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async quoteBillingAddressManagementV1GetGet(cartId: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<QuoteDataAddressInterface>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.quoteBillingAddressManagementV1GetGet(cartId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * CartsCartIdBillingAddressApi - factory interface
 * @export
 */
export const CartsCartIdBillingAddressApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = CartsCartIdBillingAddressApiFp(configuration)
    return {
        /**
         * Assigns a specified billing address to a specified cart.
         * @summary carts/{cartId}/billing-address
         * @param {number} cartId The cart ID.
         * @param {QuoteBillingAddressManagementV1AssignPostRequest} [quoteBillingAddressManagementV1AssignPostBody] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        quoteBillingAddressManagementV1AssignPost(cartId: number, quoteBillingAddressManagementV1AssignPostBody?: QuoteBillingAddressManagementV1AssignPostRequest, options?: any): AxiosPromise<number> {
            return localVarFp.quoteBillingAddressManagementV1AssignPost(cartId, quoteBillingAddressManagementV1AssignPostBody, options).then((request) => request(axios, basePath));
        },
        /**
         * Returns the billing address for a specified quote.
         * @summary carts/{cartId}/billing-address
         * @param {number} cartId The cart ID.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        quoteBillingAddressManagementV1GetGet(cartId: number, options?: any): AxiosPromise<QuoteDataAddressInterface> {
            return localVarFp.quoteBillingAddressManagementV1GetGet(cartId, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * CartsCartIdBillingAddressApi - object-oriented interface
 * @export
 * @class CartsCartIdBillingAddressApi
 * @extends {BaseAPI}
 */
export class CartsCartIdBillingAddressApi extends BaseAPI {
    /**
     * Assigns a specified billing address to a specified cart.
     * @summary carts/{cartId}/billing-address
     * @param {number} cartId The cart ID.
     * @param {QuoteBillingAddressManagementV1AssignPostRequest} [quoteBillingAddressManagementV1AssignPostBody] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CartsCartIdBillingAddressApi
     */
    public quoteBillingAddressManagementV1AssignPost(cartId: number, quoteBillingAddressManagementV1AssignPostBody?: QuoteBillingAddressManagementV1AssignPostRequest, options?: AxiosRequestConfig) {
        return CartsCartIdBillingAddressApiFp(this.configuration).quoteBillingAddressManagementV1AssignPost(cartId, quoteBillingAddressManagementV1AssignPostBody, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Returns the billing address for a specified quote.
     * @summary carts/{cartId}/billing-address
     * @param {number} cartId The cart ID.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CartsCartIdBillingAddressApi
     */
    public quoteBillingAddressManagementV1GetGet(cartId: number, options?: AxiosRequestConfig) {
        return CartsCartIdBillingAddressApiFp(this.configuration).quoteBillingAddressManagementV1GetGet(cartId, options).then((request) => request(this.axios, this.basePath));
    }
}


/**
 * CartsCartIdCouponsApi - axios parameter creator
 * @export
 */
export const CartsCartIdCouponsApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Returns information for a coupon in a specified cart.
         * @summary carts/{cartId}/coupons
         * @param {number} cartId The cart ID.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        quoteCouponManagementV1GetGet: async (cartId: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'cartId' is not null or undefined
            assertParamExists('quoteCouponManagementV1GetGet', 'cartId', cartId)
            const localVarPath = `/V1/carts/{cartId}/coupons`
                .replace(`{${"cartId"}}`, encodeURIComponent(String(cartId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Deletes a coupon from a specified cart.
         * @summary carts/{cartId}/coupons
         * @param {number} cartId The cart ID.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        quoteCouponManagementV1RemoveDelete: async (cartId: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'cartId' is not null or undefined
            assertParamExists('quoteCouponManagementV1RemoveDelete', 'cartId', cartId)
            const localVarPath = `/V1/carts/{cartId}/coupons`
                .replace(`{${"cartId"}}`, encodeURIComponent(String(cartId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * CartsCartIdCouponsApi - functional programming interface
 * @export
 */
export const CartsCartIdCouponsApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = CartsCartIdCouponsApiAxiosParamCreator(configuration)
    return {
        /**
         * Returns information for a coupon in a specified cart.
         * @summary carts/{cartId}/coupons
         * @param {number} cartId The cart ID.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async quoteCouponManagementV1GetGet(cartId: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<string>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.quoteCouponManagementV1GetGet(cartId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Deletes a coupon from a specified cart.
         * @summary carts/{cartId}/coupons
         * @param {number} cartId The cart ID.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async quoteCouponManagementV1RemoveDelete(cartId: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<boolean>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.quoteCouponManagementV1RemoveDelete(cartId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * CartsCartIdCouponsApi - factory interface
 * @export
 */
export const CartsCartIdCouponsApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = CartsCartIdCouponsApiFp(configuration)
    return {
        /**
         * Returns information for a coupon in a specified cart.
         * @summary carts/{cartId}/coupons
         * @param {number} cartId The cart ID.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        quoteCouponManagementV1GetGet(cartId: number, options?: any): AxiosPromise<string> {
            return localVarFp.quoteCouponManagementV1GetGet(cartId, options).then((request) => request(axios, basePath));
        },
        /**
         * Deletes a coupon from a specified cart.
         * @summary carts/{cartId}/coupons
         * @param {number} cartId The cart ID.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        quoteCouponManagementV1RemoveDelete(cartId: number, options?: any): AxiosPromise<boolean> {
            return localVarFp.quoteCouponManagementV1RemoveDelete(cartId, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * CartsCartIdCouponsApi - object-oriented interface
 * @export
 * @class CartsCartIdCouponsApi
 * @extends {BaseAPI}
 */
export class CartsCartIdCouponsApi extends BaseAPI {
    /**
     * Returns information for a coupon in a specified cart.
     * @summary carts/{cartId}/coupons
     * @param {number} cartId The cart ID.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CartsCartIdCouponsApi
     */
    public quoteCouponManagementV1GetGet(cartId: number, options?: AxiosRequestConfig) {
        return CartsCartIdCouponsApiFp(this.configuration).quoteCouponManagementV1GetGet(cartId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Deletes a coupon from a specified cart.
     * @summary carts/{cartId}/coupons
     * @param {number} cartId The cart ID.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CartsCartIdCouponsApi
     */
    public quoteCouponManagementV1RemoveDelete(cartId: number, options?: AxiosRequestConfig) {
        return CartsCartIdCouponsApiFp(this.configuration).quoteCouponManagementV1RemoveDelete(cartId, options).then((request) => request(this.axios, this.basePath));
    }
}


/**
 * CartsCartIdCouponsCouponCodeApi - axios parameter creator
 * @export
 */
export const CartsCartIdCouponsCouponCodeApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Adds a coupon by code to a specified cart.
         * @summary carts/{cartId}/coupons/{couponCode}
         * @param {number} cartId The cart ID.
         * @param {string} couponCode The coupon code data.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        quoteCouponManagementV1SetPut: async (cartId: number, couponCode: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'cartId' is not null or undefined
            assertParamExists('quoteCouponManagementV1SetPut', 'cartId', cartId)
            // verify required parameter 'couponCode' is not null or undefined
            assertParamExists('quoteCouponManagementV1SetPut', 'couponCode', couponCode)
            const localVarPath = `/V1/carts/{cartId}/coupons/{couponCode}`
                .replace(`{${"cartId"}}`, encodeURIComponent(String(cartId)))
                .replace(`{${"couponCode"}}`, encodeURIComponent(String(couponCode)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * CartsCartIdCouponsCouponCodeApi - functional programming interface
 * @export
 */
export const CartsCartIdCouponsCouponCodeApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = CartsCartIdCouponsCouponCodeApiAxiosParamCreator(configuration)
    return {
        /**
         * Adds a coupon by code to a specified cart.
         * @summary carts/{cartId}/coupons/{couponCode}
         * @param {number} cartId The cart ID.
         * @param {string} couponCode The coupon code data.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async quoteCouponManagementV1SetPut(cartId: number, couponCode: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<boolean>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.quoteCouponManagementV1SetPut(cartId, couponCode, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * CartsCartIdCouponsCouponCodeApi - factory interface
 * @export
 */
export const CartsCartIdCouponsCouponCodeApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = CartsCartIdCouponsCouponCodeApiFp(configuration)
    return {
        /**
         * Adds a coupon by code to a specified cart.
         * @summary carts/{cartId}/coupons/{couponCode}
         * @param {number} cartId The cart ID.
         * @param {string} couponCode The coupon code data.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        quoteCouponManagementV1SetPut(cartId: number, couponCode: string, options?: any): AxiosPromise<boolean> {
            return localVarFp.quoteCouponManagementV1SetPut(cartId, couponCode, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * CartsCartIdCouponsCouponCodeApi - object-oriented interface
 * @export
 * @class CartsCartIdCouponsCouponCodeApi
 * @extends {BaseAPI}
 */
export class CartsCartIdCouponsCouponCodeApi extends BaseAPI {
    /**
     * Adds a coupon by code to a specified cart.
     * @summary carts/{cartId}/coupons/{couponCode}
     * @param {number} cartId The cart ID.
     * @param {string} couponCode The coupon code data.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CartsCartIdCouponsCouponCodeApi
     */
    public quoteCouponManagementV1SetPut(cartId: number, couponCode: string, options?: AxiosRequestConfig) {
        return CartsCartIdCouponsCouponCodeApiFp(this.configuration).quoteCouponManagementV1SetPut(cartId, couponCode, options).then((request) => request(this.axios, this.basePath));
    }
}


/**
 * CartsCartIdEstimateShippingMethodsApi - axios parameter creator
 * @export
 */
export const CartsCartIdEstimateShippingMethodsApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Estimate shipping by address and return list of available shipping methods
         * @summary carts/{cartId}/estimate-shipping-methods
         * @param {string} cartId 
         * @param {QuoteShipmentEstimationV1EstimateByExtendedAddressPostRequest} [quoteShipmentEstimationV1EstimateByExtendedAddressPostBody] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        quoteShipmentEstimationV1EstimateByExtendedAddressPost: async (cartId: string, quoteShipmentEstimationV1EstimateByExtendedAddressPostBody?: QuoteShipmentEstimationV1EstimateByExtendedAddressPostRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'cartId' is not null or undefined
            assertParamExists('quoteShipmentEstimationV1EstimateByExtendedAddressPost', 'cartId', cartId)
            const localVarPath = `/V1/carts/{cartId}/estimate-shipping-methods`
                .replace(`{${"cartId"}}`, encodeURIComponent(String(cartId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(quoteShipmentEstimationV1EstimateByExtendedAddressPostBody, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * CartsCartIdEstimateShippingMethodsApi - functional programming interface
 * @export
 */
export const CartsCartIdEstimateShippingMethodsApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = CartsCartIdEstimateShippingMethodsApiAxiosParamCreator(configuration)
    return {
        /**
         * Estimate shipping by address and return list of available shipping methods
         * @summary carts/{cartId}/estimate-shipping-methods
         * @param {string} cartId 
         * @param {QuoteShipmentEstimationV1EstimateByExtendedAddressPostRequest} [quoteShipmentEstimationV1EstimateByExtendedAddressPostBody] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async quoteShipmentEstimationV1EstimateByExtendedAddressPost(cartId: string, quoteShipmentEstimationV1EstimateByExtendedAddressPostBody?: QuoteShipmentEstimationV1EstimateByExtendedAddressPostRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<QuoteDataShippingMethodInterface>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.quoteShipmentEstimationV1EstimateByExtendedAddressPost(cartId, quoteShipmentEstimationV1EstimateByExtendedAddressPostBody, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * CartsCartIdEstimateShippingMethodsApi - factory interface
 * @export
 */
export const CartsCartIdEstimateShippingMethodsApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = CartsCartIdEstimateShippingMethodsApiFp(configuration)
    return {
        /**
         * Estimate shipping by address and return list of available shipping methods
         * @summary carts/{cartId}/estimate-shipping-methods
         * @param {string} cartId 
         * @param {QuoteShipmentEstimationV1EstimateByExtendedAddressPostRequest} [quoteShipmentEstimationV1EstimateByExtendedAddressPostBody] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        quoteShipmentEstimationV1EstimateByExtendedAddressPost(cartId: string, quoteShipmentEstimationV1EstimateByExtendedAddressPostBody?: QuoteShipmentEstimationV1EstimateByExtendedAddressPostRequest, options?: any): AxiosPromise<Array<QuoteDataShippingMethodInterface>> {
            return localVarFp.quoteShipmentEstimationV1EstimateByExtendedAddressPost(cartId, quoteShipmentEstimationV1EstimateByExtendedAddressPostBody, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * CartsCartIdEstimateShippingMethodsApi - object-oriented interface
 * @export
 * @class CartsCartIdEstimateShippingMethodsApi
 * @extends {BaseAPI}
 */
export class CartsCartIdEstimateShippingMethodsApi extends BaseAPI {
    /**
     * Estimate shipping by address and return list of available shipping methods
     * @summary carts/{cartId}/estimate-shipping-methods
     * @param {string} cartId 
     * @param {QuoteShipmentEstimationV1EstimateByExtendedAddressPostRequest} [quoteShipmentEstimationV1EstimateByExtendedAddressPostBody] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CartsCartIdEstimateShippingMethodsApi
     */
    public quoteShipmentEstimationV1EstimateByExtendedAddressPost(cartId: string, quoteShipmentEstimationV1EstimateByExtendedAddressPostBody?: QuoteShipmentEstimationV1EstimateByExtendedAddressPostRequest, options?: AxiosRequestConfig) {
        return CartsCartIdEstimateShippingMethodsApiFp(this.configuration).quoteShipmentEstimationV1EstimateByExtendedAddressPost(cartId, quoteShipmentEstimationV1EstimateByExtendedAddressPostBody, options).then((request) => request(this.axios, this.basePath));
    }
}


/**
 * CartsCartIdEstimateShippingMethodsByAddressIdApi - axios parameter creator
 * @export
 */
export const CartsCartIdEstimateShippingMethodsByAddressIdApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Estimate shipping
         * @summary carts/{cartId}/estimate-shipping-methods-by-address-id
         * @param {number} cartId The shopping cart ID.
         * @param {QuoteShippingMethodManagementV1EstimateByAddressIdPostRequest} [quoteShippingMethodManagementV1EstimateByAddressIdPostBody] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        quoteShippingMethodManagementV1EstimateByAddressIdPost: async (cartId: number, quoteShippingMethodManagementV1EstimateByAddressIdPostBody?: QuoteShippingMethodManagementV1EstimateByAddressIdPostRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'cartId' is not null or undefined
            assertParamExists('quoteShippingMethodManagementV1EstimateByAddressIdPost', 'cartId', cartId)
            const localVarPath = `/V1/carts/{cartId}/estimate-shipping-methods-by-address-id`
                .replace(`{${"cartId"}}`, encodeURIComponent(String(cartId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(quoteShippingMethodManagementV1EstimateByAddressIdPostBody, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * CartsCartIdEstimateShippingMethodsByAddressIdApi - functional programming interface
 * @export
 */
export const CartsCartIdEstimateShippingMethodsByAddressIdApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = CartsCartIdEstimateShippingMethodsByAddressIdApiAxiosParamCreator(configuration)
    return {
        /**
         * Estimate shipping
         * @summary carts/{cartId}/estimate-shipping-methods-by-address-id
         * @param {number} cartId The shopping cart ID.
         * @param {QuoteShippingMethodManagementV1EstimateByAddressIdPostRequest} [quoteShippingMethodManagementV1EstimateByAddressIdPostBody] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async quoteShippingMethodManagementV1EstimateByAddressIdPost(cartId: number, quoteShippingMethodManagementV1EstimateByAddressIdPostBody?: QuoteShippingMethodManagementV1EstimateByAddressIdPostRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<QuoteDataShippingMethodInterface>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.quoteShippingMethodManagementV1EstimateByAddressIdPost(cartId, quoteShippingMethodManagementV1EstimateByAddressIdPostBody, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * CartsCartIdEstimateShippingMethodsByAddressIdApi - factory interface
 * @export
 */
export const CartsCartIdEstimateShippingMethodsByAddressIdApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = CartsCartIdEstimateShippingMethodsByAddressIdApiFp(configuration)
    return {
        /**
         * Estimate shipping
         * @summary carts/{cartId}/estimate-shipping-methods-by-address-id
         * @param {number} cartId The shopping cart ID.
         * @param {QuoteShippingMethodManagementV1EstimateByAddressIdPostRequest} [quoteShippingMethodManagementV1EstimateByAddressIdPostBody] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        quoteShippingMethodManagementV1EstimateByAddressIdPost(cartId: number, quoteShippingMethodManagementV1EstimateByAddressIdPostBody?: QuoteShippingMethodManagementV1EstimateByAddressIdPostRequest, options?: any): AxiosPromise<Array<QuoteDataShippingMethodInterface>> {
            return localVarFp.quoteShippingMethodManagementV1EstimateByAddressIdPost(cartId, quoteShippingMethodManagementV1EstimateByAddressIdPostBody, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * CartsCartIdEstimateShippingMethodsByAddressIdApi - object-oriented interface
 * @export
 * @class CartsCartIdEstimateShippingMethodsByAddressIdApi
 * @extends {BaseAPI}
 */
export class CartsCartIdEstimateShippingMethodsByAddressIdApi extends BaseAPI {
    /**
     * Estimate shipping
     * @summary carts/{cartId}/estimate-shipping-methods-by-address-id
     * @param {number} cartId The shopping cart ID.
     * @param {QuoteShippingMethodManagementV1EstimateByAddressIdPostRequest} [quoteShippingMethodManagementV1EstimateByAddressIdPostBody] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CartsCartIdEstimateShippingMethodsByAddressIdApi
     */
    public quoteShippingMethodManagementV1EstimateByAddressIdPost(cartId: number, quoteShippingMethodManagementV1EstimateByAddressIdPostBody?: QuoteShippingMethodManagementV1EstimateByAddressIdPostRequest, options?: AxiosRequestConfig) {
        return CartsCartIdEstimateShippingMethodsByAddressIdApiFp(this.configuration).quoteShippingMethodManagementV1EstimateByAddressIdPost(cartId, quoteShippingMethodManagementV1EstimateByAddressIdPostBody, options).then((request) => request(this.axios, this.basePath));
    }
}


/**
 * CartsCartIdGiftCardsApi - axios parameter creator
 * @export
 */
export const CartsCartIdGiftCardsApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary carts/{cartId}/giftCards
         * @param {number} cartId 
         * @param {GiftCardAccountGuestGiftCardAccountManagementV1AddGiftCardPostRequest} [giftCardAccountGiftCardAccountManagementV1SaveByQuoteIdPutBody] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        giftCardAccountGiftCardAccountManagementV1SaveByQuoteIdPut: async (cartId: number, giftCardAccountGiftCardAccountManagementV1SaveByQuoteIdPutBody?: GiftCardAccountGuestGiftCardAccountManagementV1AddGiftCardPostRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'cartId' is not null or undefined
            assertParamExists('giftCardAccountGiftCardAccountManagementV1SaveByQuoteIdPut', 'cartId', cartId)
            const localVarPath = `/V1/carts/{cartId}/giftCards`
                .replace(`{${"cartId"}}`, encodeURIComponent(String(cartId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(giftCardAccountGiftCardAccountManagementV1SaveByQuoteIdPutBody, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * CartsCartIdGiftCardsApi - functional programming interface
 * @export
 */
export const CartsCartIdGiftCardsApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = CartsCartIdGiftCardsApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @summary carts/{cartId}/giftCards
         * @param {number} cartId 
         * @param {GiftCardAccountGuestGiftCardAccountManagementV1AddGiftCardPostRequest} [giftCardAccountGiftCardAccountManagementV1SaveByQuoteIdPutBody] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async giftCardAccountGiftCardAccountManagementV1SaveByQuoteIdPut(cartId: number, giftCardAccountGiftCardAccountManagementV1SaveByQuoteIdPutBody?: GiftCardAccountGuestGiftCardAccountManagementV1AddGiftCardPostRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<boolean>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.giftCardAccountGiftCardAccountManagementV1SaveByQuoteIdPut(cartId, giftCardAccountGiftCardAccountManagementV1SaveByQuoteIdPutBody, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * CartsCartIdGiftCardsApi - factory interface
 * @export
 */
export const CartsCartIdGiftCardsApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = CartsCartIdGiftCardsApiFp(configuration)
    return {
        /**
         * 
         * @summary carts/{cartId}/giftCards
         * @param {number} cartId 
         * @param {GiftCardAccountGuestGiftCardAccountManagementV1AddGiftCardPostRequest} [giftCardAccountGiftCardAccountManagementV1SaveByQuoteIdPutBody] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        giftCardAccountGiftCardAccountManagementV1SaveByQuoteIdPut(cartId: number, giftCardAccountGiftCardAccountManagementV1SaveByQuoteIdPutBody?: GiftCardAccountGuestGiftCardAccountManagementV1AddGiftCardPostRequest, options?: any): AxiosPromise<boolean> {
            return localVarFp.giftCardAccountGiftCardAccountManagementV1SaveByQuoteIdPut(cartId, giftCardAccountGiftCardAccountManagementV1SaveByQuoteIdPutBody, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * CartsCartIdGiftCardsApi - object-oriented interface
 * @export
 * @class CartsCartIdGiftCardsApi
 * @extends {BaseAPI}
 */
export class CartsCartIdGiftCardsApi extends BaseAPI {
    /**
     * 
     * @summary carts/{cartId}/giftCards
     * @param {number} cartId 
     * @param {GiftCardAccountGuestGiftCardAccountManagementV1AddGiftCardPostRequest} [giftCardAccountGiftCardAccountManagementV1SaveByQuoteIdPutBody] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CartsCartIdGiftCardsApi
     */
    public giftCardAccountGiftCardAccountManagementV1SaveByQuoteIdPut(cartId: number, giftCardAccountGiftCardAccountManagementV1SaveByQuoteIdPutBody?: GiftCardAccountGuestGiftCardAccountManagementV1AddGiftCardPostRequest, options?: AxiosRequestConfig) {
        return CartsCartIdGiftCardsApiFp(this.configuration).giftCardAccountGiftCardAccountManagementV1SaveByQuoteIdPut(cartId, giftCardAccountGiftCardAccountManagementV1SaveByQuoteIdPutBody, options).then((request) => request(this.axios, this.basePath));
    }
}


/**
 * CartsCartIdGiftCardsGiftCardCodeApi - axios parameter creator
 * @export
 */
export const CartsCartIdGiftCardsGiftCardCodeApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Remove GiftCard Account entity
         * @summary carts/{cartId}/giftCards/{giftCardCode}
         * @param {number} cartId 
         * @param {string} giftCardCode 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        giftCardAccountGiftCardAccountManagementV1DeleteByQuoteIdDelete: async (cartId: number, giftCardCode: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'cartId' is not null or undefined
            assertParamExists('giftCardAccountGiftCardAccountManagementV1DeleteByQuoteIdDelete', 'cartId', cartId)
            // verify required parameter 'giftCardCode' is not null or undefined
            assertParamExists('giftCardAccountGiftCardAccountManagementV1DeleteByQuoteIdDelete', 'giftCardCode', giftCardCode)
            const localVarPath = `/V1/carts/{cartId}/giftCards/{giftCardCode}`
                .replace(`{${"cartId"}}`, encodeURIComponent(String(cartId)))
                .replace(`{${"giftCardCode"}}`, encodeURIComponent(String(giftCardCode)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * CartsCartIdGiftCardsGiftCardCodeApi - functional programming interface
 * @export
 */
export const CartsCartIdGiftCardsGiftCardCodeApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = CartsCartIdGiftCardsGiftCardCodeApiAxiosParamCreator(configuration)
    return {
        /**
         * Remove GiftCard Account entity
         * @summary carts/{cartId}/giftCards/{giftCardCode}
         * @param {number} cartId 
         * @param {string} giftCardCode 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async giftCardAccountGiftCardAccountManagementV1DeleteByQuoteIdDelete(cartId: number, giftCardCode: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<boolean>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.giftCardAccountGiftCardAccountManagementV1DeleteByQuoteIdDelete(cartId, giftCardCode, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * CartsCartIdGiftCardsGiftCardCodeApi - factory interface
 * @export
 */
export const CartsCartIdGiftCardsGiftCardCodeApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = CartsCartIdGiftCardsGiftCardCodeApiFp(configuration)
    return {
        /**
         * Remove GiftCard Account entity
         * @summary carts/{cartId}/giftCards/{giftCardCode}
         * @param {number} cartId 
         * @param {string} giftCardCode 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        giftCardAccountGiftCardAccountManagementV1DeleteByQuoteIdDelete(cartId: number, giftCardCode: string, options?: any): AxiosPromise<boolean> {
            return localVarFp.giftCardAccountGiftCardAccountManagementV1DeleteByQuoteIdDelete(cartId, giftCardCode, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * CartsCartIdGiftCardsGiftCardCodeApi - object-oriented interface
 * @export
 * @class CartsCartIdGiftCardsGiftCardCodeApi
 * @extends {BaseAPI}
 */
export class CartsCartIdGiftCardsGiftCardCodeApi extends BaseAPI {
    /**
     * Remove GiftCard Account entity
     * @summary carts/{cartId}/giftCards/{giftCardCode}
     * @param {number} cartId 
     * @param {string} giftCardCode 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CartsCartIdGiftCardsGiftCardCodeApi
     */
    public giftCardAccountGiftCardAccountManagementV1DeleteByQuoteIdDelete(cartId: number, giftCardCode: string, options?: AxiosRequestConfig) {
        return CartsCartIdGiftCardsGiftCardCodeApiFp(this.configuration).giftCardAccountGiftCardAccountManagementV1DeleteByQuoteIdDelete(cartId, giftCardCode, options).then((request) => request(this.axios, this.basePath));
    }
}


/**
 * CartsCartIdGiftMessageApi - axios parameter creator
 * @export
 */
export const CartsCartIdGiftMessageApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Return the gift message for a specified order.
         * @summary carts/{cartId}/gift-message
         * @param {number} cartId The shopping cart ID.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        giftMessageCartRepositoryV1GetGet: async (cartId: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'cartId' is not null or undefined
            assertParamExists('giftMessageCartRepositoryV1GetGet', 'cartId', cartId)
            const localVarPath = `/V1/carts/{cartId}/gift-message`
                .replace(`{${"cartId"}}`, encodeURIComponent(String(cartId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Set the gift message for an entire order.
         * @summary carts/{cartId}/gift-message
         * @param {number} cartId The cart ID.
         * @param {GiftMessageCartRepositoryV1SavePostRequest} [giftMessageCartRepositoryV1SavePostBody] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        giftMessageCartRepositoryV1SavePost: async (cartId: number, giftMessageCartRepositoryV1SavePostBody?: GiftMessageCartRepositoryV1SavePostRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'cartId' is not null or undefined
            assertParamExists('giftMessageCartRepositoryV1SavePost', 'cartId', cartId)
            const localVarPath = `/V1/carts/{cartId}/gift-message`
                .replace(`{${"cartId"}}`, encodeURIComponent(String(cartId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(giftMessageCartRepositoryV1SavePostBody, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * CartsCartIdGiftMessageApi - functional programming interface
 * @export
 */
export const CartsCartIdGiftMessageApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = CartsCartIdGiftMessageApiAxiosParamCreator(configuration)
    return {
        /**
         * Return the gift message for a specified order.
         * @summary carts/{cartId}/gift-message
         * @param {number} cartId The shopping cart ID.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async giftMessageCartRepositoryV1GetGet(cartId: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<GiftMessageDataMessageInterface>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.giftMessageCartRepositoryV1GetGet(cartId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Set the gift message for an entire order.
         * @summary carts/{cartId}/gift-message
         * @param {number} cartId The cart ID.
         * @param {GiftMessageCartRepositoryV1SavePostRequest} [giftMessageCartRepositoryV1SavePostBody] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async giftMessageCartRepositoryV1SavePost(cartId: number, giftMessageCartRepositoryV1SavePostBody?: GiftMessageCartRepositoryV1SavePostRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<boolean>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.giftMessageCartRepositoryV1SavePost(cartId, giftMessageCartRepositoryV1SavePostBody, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * CartsCartIdGiftMessageApi - factory interface
 * @export
 */
export const CartsCartIdGiftMessageApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = CartsCartIdGiftMessageApiFp(configuration)
    return {
        /**
         * Return the gift message for a specified order.
         * @summary carts/{cartId}/gift-message
         * @param {number} cartId The shopping cart ID.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        giftMessageCartRepositoryV1GetGet(cartId: number, options?: any): AxiosPromise<GiftMessageDataMessageInterface> {
            return localVarFp.giftMessageCartRepositoryV1GetGet(cartId, options).then((request) => request(axios, basePath));
        },
        /**
         * Set the gift message for an entire order.
         * @summary carts/{cartId}/gift-message
         * @param {number} cartId The cart ID.
         * @param {GiftMessageCartRepositoryV1SavePostRequest} [giftMessageCartRepositoryV1SavePostBody] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        giftMessageCartRepositoryV1SavePost(cartId: number, giftMessageCartRepositoryV1SavePostBody?: GiftMessageCartRepositoryV1SavePostRequest, options?: any): AxiosPromise<boolean> {
            return localVarFp.giftMessageCartRepositoryV1SavePost(cartId, giftMessageCartRepositoryV1SavePostBody, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * CartsCartIdGiftMessageApi - object-oriented interface
 * @export
 * @class CartsCartIdGiftMessageApi
 * @extends {BaseAPI}
 */
export class CartsCartIdGiftMessageApi extends BaseAPI {
    /**
     * Return the gift message for a specified order.
     * @summary carts/{cartId}/gift-message
     * @param {number} cartId The shopping cart ID.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CartsCartIdGiftMessageApi
     */
    public giftMessageCartRepositoryV1GetGet(cartId: number, options?: AxiosRequestConfig) {
        return CartsCartIdGiftMessageApiFp(this.configuration).giftMessageCartRepositoryV1GetGet(cartId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Set the gift message for an entire order.
     * @summary carts/{cartId}/gift-message
     * @param {number} cartId The cart ID.
     * @param {GiftMessageCartRepositoryV1SavePostRequest} [giftMessageCartRepositoryV1SavePostBody] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CartsCartIdGiftMessageApi
     */
    public giftMessageCartRepositoryV1SavePost(cartId: number, giftMessageCartRepositoryV1SavePostBody?: GiftMessageCartRepositoryV1SavePostRequest, options?: AxiosRequestConfig) {
        return CartsCartIdGiftMessageApiFp(this.configuration).giftMessageCartRepositoryV1SavePost(cartId, giftMessageCartRepositoryV1SavePostBody, options).then((request) => request(this.axios, this.basePath));
    }
}


/**
 * CartsCartIdGiftMessageItemIdApi - axios parameter creator
 * @export
 */
export const CartsCartIdGiftMessageItemIdApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Return the gift message for a specified item in a specified shopping cart.
         * @summary carts/{cartId}/gift-message/{itemId}
         * @param {number} cartId The shopping cart ID.
         * @param {number} itemId The item ID.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        giftMessageItemRepositoryV1GetGet: async (cartId: number, itemId: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'cartId' is not null or undefined
            assertParamExists('giftMessageItemRepositoryV1GetGet', 'cartId', cartId)
            // verify required parameter 'itemId' is not null or undefined
            assertParamExists('giftMessageItemRepositoryV1GetGet', 'itemId', itemId)
            const localVarPath = `/V1/carts/{cartId}/gift-message/{itemId}`
                .replace(`{${"cartId"}}`, encodeURIComponent(String(cartId)))
                .replace(`{${"itemId"}}`, encodeURIComponent(String(itemId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Set the gift message for a specified item in a specified shopping cart.
         * @summary carts/{cartId}/gift-message/{itemId}
         * @param {number} cartId The cart ID.
         * @param {number} itemId The item ID.
         * @param {GiftMessageCartRepositoryV1SavePostRequest} [giftMessageItemRepositoryV1SavePostBody] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        giftMessageItemRepositoryV1SavePost: async (cartId: number, itemId: number, giftMessageItemRepositoryV1SavePostBody?: GiftMessageCartRepositoryV1SavePostRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'cartId' is not null or undefined
            assertParamExists('giftMessageItemRepositoryV1SavePost', 'cartId', cartId)
            // verify required parameter 'itemId' is not null or undefined
            assertParamExists('giftMessageItemRepositoryV1SavePost', 'itemId', itemId)
            const localVarPath = `/V1/carts/{cartId}/gift-message/{itemId}`
                .replace(`{${"cartId"}}`, encodeURIComponent(String(cartId)))
                .replace(`{${"itemId"}}`, encodeURIComponent(String(itemId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(giftMessageItemRepositoryV1SavePostBody, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * CartsCartIdGiftMessageItemIdApi - functional programming interface
 * @export
 */
export const CartsCartIdGiftMessageItemIdApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = CartsCartIdGiftMessageItemIdApiAxiosParamCreator(configuration)
    return {
        /**
         * Return the gift message for a specified item in a specified shopping cart.
         * @summary carts/{cartId}/gift-message/{itemId}
         * @param {number} cartId The shopping cart ID.
         * @param {number} itemId The item ID.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async giftMessageItemRepositoryV1GetGet(cartId: number, itemId: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<GiftMessageDataMessageInterface>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.giftMessageItemRepositoryV1GetGet(cartId, itemId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Set the gift message for a specified item in a specified shopping cart.
         * @summary carts/{cartId}/gift-message/{itemId}
         * @param {number} cartId The cart ID.
         * @param {number} itemId The item ID.
         * @param {GiftMessageCartRepositoryV1SavePostRequest} [giftMessageItemRepositoryV1SavePostBody] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async giftMessageItemRepositoryV1SavePost(cartId: number, itemId: number, giftMessageItemRepositoryV1SavePostBody?: GiftMessageCartRepositoryV1SavePostRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<boolean>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.giftMessageItemRepositoryV1SavePost(cartId, itemId, giftMessageItemRepositoryV1SavePostBody, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * CartsCartIdGiftMessageItemIdApi - factory interface
 * @export
 */
export const CartsCartIdGiftMessageItemIdApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = CartsCartIdGiftMessageItemIdApiFp(configuration)
    return {
        /**
         * Return the gift message for a specified item in a specified shopping cart.
         * @summary carts/{cartId}/gift-message/{itemId}
         * @param {number} cartId The shopping cart ID.
         * @param {number} itemId The item ID.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        giftMessageItemRepositoryV1GetGet(cartId: number, itemId: number, options?: any): AxiosPromise<GiftMessageDataMessageInterface> {
            return localVarFp.giftMessageItemRepositoryV1GetGet(cartId, itemId, options).then((request) => request(axios, basePath));
        },
        /**
         * Set the gift message for a specified item in a specified shopping cart.
         * @summary carts/{cartId}/gift-message/{itemId}
         * @param {number} cartId The cart ID.
         * @param {number} itemId The item ID.
         * @param {GiftMessageCartRepositoryV1SavePostRequest} [giftMessageItemRepositoryV1SavePostBody] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        giftMessageItemRepositoryV1SavePost(cartId: number, itemId: number, giftMessageItemRepositoryV1SavePostBody?: GiftMessageCartRepositoryV1SavePostRequest, options?: any): AxiosPromise<boolean> {
            return localVarFp.giftMessageItemRepositoryV1SavePost(cartId, itemId, giftMessageItemRepositoryV1SavePostBody, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * CartsCartIdGiftMessageItemIdApi - object-oriented interface
 * @export
 * @class CartsCartIdGiftMessageItemIdApi
 * @extends {BaseAPI}
 */
export class CartsCartIdGiftMessageItemIdApi extends BaseAPI {
    /**
     * Return the gift message for a specified item in a specified shopping cart.
     * @summary carts/{cartId}/gift-message/{itemId}
     * @param {number} cartId The shopping cart ID.
     * @param {number} itemId The item ID.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CartsCartIdGiftMessageItemIdApi
     */
    public giftMessageItemRepositoryV1GetGet(cartId: number, itemId: number, options?: AxiosRequestConfig) {
        return CartsCartIdGiftMessageItemIdApiFp(this.configuration).giftMessageItemRepositoryV1GetGet(cartId, itemId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Set the gift message for a specified item in a specified shopping cart.
     * @summary carts/{cartId}/gift-message/{itemId}
     * @param {number} cartId The cart ID.
     * @param {number} itemId The item ID.
     * @param {GiftMessageCartRepositoryV1SavePostRequest} [giftMessageItemRepositoryV1SavePostBody] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CartsCartIdGiftMessageItemIdApi
     */
    public giftMessageItemRepositoryV1SavePost(cartId: number, itemId: number, giftMessageItemRepositoryV1SavePostBody?: GiftMessageCartRepositoryV1SavePostRequest, options?: AxiosRequestConfig) {
        return CartsCartIdGiftMessageItemIdApiFp(this.configuration).giftMessageItemRepositoryV1SavePost(cartId, itemId, giftMessageItemRepositoryV1SavePostBody, options).then((request) => request(this.axios, this.basePath));
    }
}


/**
 * CartsCartIdItemsApi - axios parameter creator
 * @export
 */
export const CartsCartIdItemsApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Lists items that are assigned to a specified cart.
         * @summary carts/{cartId}/items
         * @param {number} cartId The cart ID.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        quoteCartItemRepositoryV1GetListGet: async (cartId: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'cartId' is not null or undefined
            assertParamExists('quoteCartItemRepositoryV1GetListGet', 'cartId', cartId)
            const localVarPath = `/V1/carts/{cartId}/items`
                .replace(`{${"cartId"}}`, encodeURIComponent(String(cartId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * CartsCartIdItemsApi - functional programming interface
 * @export
 */
export const CartsCartIdItemsApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = CartsCartIdItemsApiAxiosParamCreator(configuration)
    return {
        /**
         * Lists items that are assigned to a specified cart.
         * @summary carts/{cartId}/items
         * @param {number} cartId The cart ID.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async quoteCartItemRepositoryV1GetListGet(cartId: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<QuoteDataCartItemInterface>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.quoteCartItemRepositoryV1GetListGet(cartId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * CartsCartIdItemsApi - factory interface
 * @export
 */
export const CartsCartIdItemsApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = CartsCartIdItemsApiFp(configuration)
    return {
        /**
         * Lists items that are assigned to a specified cart.
         * @summary carts/{cartId}/items
         * @param {number} cartId The cart ID.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        quoteCartItemRepositoryV1GetListGet(cartId: number, options?: any): AxiosPromise<Array<QuoteDataCartItemInterface>> {
            return localVarFp.quoteCartItemRepositoryV1GetListGet(cartId, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * CartsCartIdItemsApi - object-oriented interface
 * @export
 * @class CartsCartIdItemsApi
 * @extends {BaseAPI}
 */
export class CartsCartIdItemsApi extends BaseAPI {
    /**
     * Lists items that are assigned to a specified cart.
     * @summary carts/{cartId}/items
     * @param {number} cartId The cart ID.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CartsCartIdItemsApi
     */
    public quoteCartItemRepositoryV1GetListGet(cartId: number, options?: AxiosRequestConfig) {
        return CartsCartIdItemsApiFp(this.configuration).quoteCartItemRepositoryV1GetListGet(cartId, options).then((request) => request(this.axios, this.basePath));
    }
}


/**
 * CartsCartIdItemsItemIdApi - axios parameter creator
 * @export
 */
export const CartsCartIdItemsItemIdApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Removes the specified item from the specified cart.
         * @summary carts/{cartId}/items/{itemId}
         * @param {number} cartId The cart ID.
         * @param {number} itemId The item ID of the item to be removed.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        quoteCartItemRepositoryV1DeleteByIdDelete: async (cartId: number, itemId: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'cartId' is not null or undefined
            assertParamExists('quoteCartItemRepositoryV1DeleteByIdDelete', 'cartId', cartId)
            // verify required parameter 'itemId' is not null or undefined
            assertParamExists('quoteCartItemRepositoryV1DeleteByIdDelete', 'itemId', itemId)
            const localVarPath = `/V1/carts/{cartId}/items/{itemId}`
                .replace(`{${"cartId"}}`, encodeURIComponent(String(cartId)))
                .replace(`{${"itemId"}}`, encodeURIComponent(String(itemId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Add/update the specified cart item.
         * @summary carts/{cartId}/items/{itemId}
         * @param {string} cartId 
         * @param {string} itemId 
         * @param {QuoteCartItemRepositoryV1SavePostRequest} [quoteCartItemRepositoryV1SavePutBody] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        quoteCartItemRepositoryV1SavePut: async (cartId: string, itemId: string, quoteCartItemRepositoryV1SavePutBody?: QuoteCartItemRepositoryV1SavePostRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'cartId' is not null or undefined
            assertParamExists('quoteCartItemRepositoryV1SavePut', 'cartId', cartId)
            // verify required parameter 'itemId' is not null or undefined
            assertParamExists('quoteCartItemRepositoryV1SavePut', 'itemId', itemId)
            const localVarPath = `/V1/carts/{cartId}/items/{itemId}`
                .replace(`{${"cartId"}}`, encodeURIComponent(String(cartId)))
                .replace(`{${"itemId"}}`, encodeURIComponent(String(itemId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(quoteCartItemRepositoryV1SavePutBody, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * CartsCartIdItemsItemIdApi - functional programming interface
 * @export
 */
export const CartsCartIdItemsItemIdApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = CartsCartIdItemsItemIdApiAxiosParamCreator(configuration)
    return {
        /**
         * Removes the specified item from the specified cart.
         * @summary carts/{cartId}/items/{itemId}
         * @param {number} cartId The cart ID.
         * @param {number} itemId The item ID of the item to be removed.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async quoteCartItemRepositoryV1DeleteByIdDelete(cartId: number, itemId: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<boolean>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.quoteCartItemRepositoryV1DeleteByIdDelete(cartId, itemId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Add/update the specified cart item.
         * @summary carts/{cartId}/items/{itemId}
         * @param {string} cartId 
         * @param {string} itemId 
         * @param {QuoteCartItemRepositoryV1SavePostRequest} [quoteCartItemRepositoryV1SavePutBody] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async quoteCartItemRepositoryV1SavePut(cartId: string, itemId: string, quoteCartItemRepositoryV1SavePutBody?: QuoteCartItemRepositoryV1SavePostRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<QuoteDataCartItemInterface>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.quoteCartItemRepositoryV1SavePut(cartId, itemId, quoteCartItemRepositoryV1SavePutBody, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * CartsCartIdItemsItemIdApi - factory interface
 * @export
 */
export const CartsCartIdItemsItemIdApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = CartsCartIdItemsItemIdApiFp(configuration)
    return {
        /**
         * Removes the specified item from the specified cart.
         * @summary carts/{cartId}/items/{itemId}
         * @param {number} cartId The cart ID.
         * @param {number} itemId The item ID of the item to be removed.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        quoteCartItemRepositoryV1DeleteByIdDelete(cartId: number, itemId: number, options?: any): AxiosPromise<boolean> {
            return localVarFp.quoteCartItemRepositoryV1DeleteByIdDelete(cartId, itemId, options).then((request) => request(axios, basePath));
        },
        /**
         * Add/update the specified cart item.
         * @summary carts/{cartId}/items/{itemId}
         * @param {string} cartId 
         * @param {string} itemId 
         * @param {QuoteCartItemRepositoryV1SavePostRequest} [quoteCartItemRepositoryV1SavePutBody] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        quoteCartItemRepositoryV1SavePut(cartId: string, itemId: string, quoteCartItemRepositoryV1SavePutBody?: QuoteCartItemRepositoryV1SavePostRequest, options?: any): AxiosPromise<QuoteDataCartItemInterface> {
            return localVarFp.quoteCartItemRepositoryV1SavePut(cartId, itemId, quoteCartItemRepositoryV1SavePutBody, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * CartsCartIdItemsItemIdApi - object-oriented interface
 * @export
 * @class CartsCartIdItemsItemIdApi
 * @extends {BaseAPI}
 */
export class CartsCartIdItemsItemIdApi extends BaseAPI {
    /**
     * Removes the specified item from the specified cart.
     * @summary carts/{cartId}/items/{itemId}
     * @param {number} cartId The cart ID.
     * @param {number} itemId The item ID of the item to be removed.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CartsCartIdItemsItemIdApi
     */
    public quoteCartItemRepositoryV1DeleteByIdDelete(cartId: number, itemId: number, options?: AxiosRequestConfig) {
        return CartsCartIdItemsItemIdApiFp(this.configuration).quoteCartItemRepositoryV1DeleteByIdDelete(cartId, itemId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Add/update the specified cart item.
     * @summary carts/{cartId}/items/{itemId}
     * @param {string} cartId 
     * @param {string} itemId 
     * @param {QuoteCartItemRepositoryV1SavePostRequest} [quoteCartItemRepositoryV1SavePutBody] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CartsCartIdItemsItemIdApi
     */
    public quoteCartItemRepositoryV1SavePut(cartId: string, itemId: string, quoteCartItemRepositoryV1SavePutBody?: QuoteCartItemRepositoryV1SavePostRequest, options?: AxiosRequestConfig) {
        return CartsCartIdItemsItemIdApiFp(this.configuration).quoteCartItemRepositoryV1SavePut(cartId, itemId, quoteCartItemRepositoryV1SavePutBody, options).then((request) => request(this.axios, this.basePath));
    }
}


/**
 * CartsCartIdOrderApi - axios parameter creator
 * @export
 */
export const CartsCartIdOrderApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Places an order for a specified cart.
         * @summary carts/{cartId}/order
         * @param {number} cartId The cart ID.
         * @param {QuoteCartManagementV1PlaceOrderPutRequest} [quoteCartManagementV1PlaceOrderPutBody] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        quoteCartManagementV1PlaceOrderPut: async (cartId: number, quoteCartManagementV1PlaceOrderPutBody?: QuoteCartManagementV1PlaceOrderPutRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'cartId' is not null or undefined
            assertParamExists('quoteCartManagementV1PlaceOrderPut', 'cartId', cartId)
            const localVarPath = `/V1/carts/{cartId}/order`
                .replace(`{${"cartId"}}`, encodeURIComponent(String(cartId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(quoteCartManagementV1PlaceOrderPutBody, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * CartsCartIdOrderApi - functional programming interface
 * @export
 */
export const CartsCartIdOrderApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = CartsCartIdOrderApiAxiosParamCreator(configuration)
    return {
        /**
         * Places an order for a specified cart.
         * @summary carts/{cartId}/order
         * @param {number} cartId The cart ID.
         * @param {QuoteCartManagementV1PlaceOrderPutRequest} [quoteCartManagementV1PlaceOrderPutBody] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async quoteCartManagementV1PlaceOrderPut(cartId: number, quoteCartManagementV1PlaceOrderPutBody?: QuoteCartManagementV1PlaceOrderPutRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<number>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.quoteCartManagementV1PlaceOrderPut(cartId, quoteCartManagementV1PlaceOrderPutBody, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * CartsCartIdOrderApi - factory interface
 * @export
 */
export const CartsCartIdOrderApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = CartsCartIdOrderApiFp(configuration)
    return {
        /**
         * Places an order for a specified cart.
         * @summary carts/{cartId}/order
         * @param {number} cartId The cart ID.
         * @param {QuoteCartManagementV1PlaceOrderPutRequest} [quoteCartManagementV1PlaceOrderPutBody] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        quoteCartManagementV1PlaceOrderPut(cartId: number, quoteCartManagementV1PlaceOrderPutBody?: QuoteCartManagementV1PlaceOrderPutRequest, options?: any): AxiosPromise<number> {
            return localVarFp.quoteCartManagementV1PlaceOrderPut(cartId, quoteCartManagementV1PlaceOrderPutBody, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * CartsCartIdOrderApi - object-oriented interface
 * @export
 * @class CartsCartIdOrderApi
 * @extends {BaseAPI}
 */
export class CartsCartIdOrderApi extends BaseAPI {
    /**
     * Places an order for a specified cart.
     * @summary carts/{cartId}/order
     * @param {number} cartId The cart ID.
     * @param {QuoteCartManagementV1PlaceOrderPutRequest} [quoteCartManagementV1PlaceOrderPutBody] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CartsCartIdOrderApi
     */
    public quoteCartManagementV1PlaceOrderPut(cartId: number, quoteCartManagementV1PlaceOrderPutBody?: QuoteCartManagementV1PlaceOrderPutRequest, options?: AxiosRequestConfig) {
        return CartsCartIdOrderApiFp(this.configuration).quoteCartManagementV1PlaceOrderPut(cartId, quoteCartManagementV1PlaceOrderPutBody, options).then((request) => request(this.axios, this.basePath));
    }
}


/**
 * CartsCartIdPaymentMethodsApi - axios parameter creator
 * @export
 */
export const CartsCartIdPaymentMethodsApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Lists available payment methods for a specified shopping cart. This call returns an array of objects, but detailed information about each object’s attributes might not be included.  See http://devdocs.magento.com/codelinks/attributes.html#PaymentMethodManagementInterface to determine which call to use to get detailed information about all attributes for an object.
         * @summary carts/{cartId}/payment-methods
         * @param {number} cartId The cart ID.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        quotePaymentMethodManagementV1GetListGet: async (cartId: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'cartId' is not null or undefined
            assertParamExists('quotePaymentMethodManagementV1GetListGet', 'cartId', cartId)
            const localVarPath = `/V1/carts/{cartId}/payment-methods`
                .replace(`{${"cartId"}}`, encodeURIComponent(String(cartId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * CartsCartIdPaymentMethodsApi - functional programming interface
 * @export
 */
export const CartsCartIdPaymentMethodsApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = CartsCartIdPaymentMethodsApiAxiosParamCreator(configuration)
    return {
        /**
         * Lists available payment methods for a specified shopping cart. This call returns an array of objects, but detailed information about each object’s attributes might not be included.  See http://devdocs.magento.com/codelinks/attributes.html#PaymentMethodManagementInterface to determine which call to use to get detailed information about all attributes for an object.
         * @summary carts/{cartId}/payment-methods
         * @param {number} cartId The cart ID.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async quotePaymentMethodManagementV1GetListGet(cartId: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<QuoteDataPaymentMethodInterface>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.quotePaymentMethodManagementV1GetListGet(cartId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * CartsCartIdPaymentMethodsApi - factory interface
 * @export
 */
export const CartsCartIdPaymentMethodsApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = CartsCartIdPaymentMethodsApiFp(configuration)
    return {
        /**
         * Lists available payment methods for a specified shopping cart. This call returns an array of objects, but detailed information about each object’s attributes might not be included.  See http://devdocs.magento.com/codelinks/attributes.html#PaymentMethodManagementInterface to determine which call to use to get detailed information about all attributes for an object.
         * @summary carts/{cartId}/payment-methods
         * @param {number} cartId The cart ID.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        quotePaymentMethodManagementV1GetListGet(cartId: number, options?: any): AxiosPromise<Array<QuoteDataPaymentMethodInterface>> {
            return localVarFp.quotePaymentMethodManagementV1GetListGet(cartId, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * CartsCartIdPaymentMethodsApi - object-oriented interface
 * @export
 * @class CartsCartIdPaymentMethodsApi
 * @extends {BaseAPI}
 */
export class CartsCartIdPaymentMethodsApi extends BaseAPI {
    /**
     * Lists available payment methods for a specified shopping cart. This call returns an array of objects, but detailed information about each object’s attributes might not be included.  See http://devdocs.magento.com/codelinks/attributes.html#PaymentMethodManagementInterface to determine which call to use to get detailed information about all attributes for an object.
     * @summary carts/{cartId}/payment-methods
     * @param {number} cartId The cart ID.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CartsCartIdPaymentMethodsApi
     */
    public quotePaymentMethodManagementV1GetListGet(cartId: number, options?: AxiosRequestConfig) {
        return CartsCartIdPaymentMethodsApiFp(this.configuration).quotePaymentMethodManagementV1GetListGet(cartId, options).then((request) => request(this.axios, this.basePath));
    }
}


/**
 * CartsCartIdSelectedPaymentMethodApi - axios parameter creator
 * @export
 */
export const CartsCartIdSelectedPaymentMethodApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Returns the payment method for a specified shopping cart.
         * @summary carts/{cartId}/selected-payment-method
         * @param {number} cartId The cart ID.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        quotePaymentMethodManagementV1GetGet: async (cartId: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'cartId' is not null or undefined
            assertParamExists('quotePaymentMethodManagementV1GetGet', 'cartId', cartId)
            const localVarPath = `/V1/carts/{cartId}/selected-payment-method`
                .replace(`{${"cartId"}}`, encodeURIComponent(String(cartId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Adds a specified payment method to a specified shopping cart.
         * @summary carts/{cartId}/selected-payment-method
         * @param {number} cartId The cart ID.
         * @param {QuotePaymentMethodManagementV1SetPutRequest} [quotePaymentMethodManagementV1SetPutBody] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        quotePaymentMethodManagementV1SetPut: async (cartId: number, quotePaymentMethodManagementV1SetPutBody?: QuotePaymentMethodManagementV1SetPutRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'cartId' is not null or undefined
            assertParamExists('quotePaymentMethodManagementV1SetPut', 'cartId', cartId)
            const localVarPath = `/V1/carts/{cartId}/selected-payment-method`
                .replace(`{${"cartId"}}`, encodeURIComponent(String(cartId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(quotePaymentMethodManagementV1SetPutBody, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * CartsCartIdSelectedPaymentMethodApi - functional programming interface
 * @export
 */
export const CartsCartIdSelectedPaymentMethodApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = CartsCartIdSelectedPaymentMethodApiAxiosParamCreator(configuration)
    return {
        /**
         * Returns the payment method for a specified shopping cart.
         * @summary carts/{cartId}/selected-payment-method
         * @param {number} cartId The cart ID.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async quotePaymentMethodManagementV1GetGet(cartId: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<QuoteDataPaymentInterface>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.quotePaymentMethodManagementV1GetGet(cartId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Adds a specified payment method to a specified shopping cart.
         * @summary carts/{cartId}/selected-payment-method
         * @param {number} cartId The cart ID.
         * @param {QuotePaymentMethodManagementV1SetPutRequest} [quotePaymentMethodManagementV1SetPutBody] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async quotePaymentMethodManagementV1SetPut(cartId: number, quotePaymentMethodManagementV1SetPutBody?: QuotePaymentMethodManagementV1SetPutRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<string>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.quotePaymentMethodManagementV1SetPut(cartId, quotePaymentMethodManagementV1SetPutBody, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * CartsCartIdSelectedPaymentMethodApi - factory interface
 * @export
 */
export const CartsCartIdSelectedPaymentMethodApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = CartsCartIdSelectedPaymentMethodApiFp(configuration)
    return {
        /**
         * Returns the payment method for a specified shopping cart.
         * @summary carts/{cartId}/selected-payment-method
         * @param {number} cartId The cart ID.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        quotePaymentMethodManagementV1GetGet(cartId: number, options?: any): AxiosPromise<QuoteDataPaymentInterface> {
            return localVarFp.quotePaymentMethodManagementV1GetGet(cartId, options).then((request) => request(axios, basePath));
        },
        /**
         * Adds a specified payment method to a specified shopping cart.
         * @summary carts/{cartId}/selected-payment-method
         * @param {number} cartId The cart ID.
         * @param {QuotePaymentMethodManagementV1SetPutRequest} [quotePaymentMethodManagementV1SetPutBody] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        quotePaymentMethodManagementV1SetPut(cartId: number, quotePaymentMethodManagementV1SetPutBody?: QuotePaymentMethodManagementV1SetPutRequest, options?: any): AxiosPromise<string> {
            return localVarFp.quotePaymentMethodManagementV1SetPut(cartId, quotePaymentMethodManagementV1SetPutBody, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * CartsCartIdSelectedPaymentMethodApi - object-oriented interface
 * @export
 * @class CartsCartIdSelectedPaymentMethodApi
 * @extends {BaseAPI}
 */
export class CartsCartIdSelectedPaymentMethodApi extends BaseAPI {
    /**
     * Returns the payment method for a specified shopping cart.
     * @summary carts/{cartId}/selected-payment-method
     * @param {number} cartId The cart ID.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CartsCartIdSelectedPaymentMethodApi
     */
    public quotePaymentMethodManagementV1GetGet(cartId: number, options?: AxiosRequestConfig) {
        return CartsCartIdSelectedPaymentMethodApiFp(this.configuration).quotePaymentMethodManagementV1GetGet(cartId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Adds a specified payment method to a specified shopping cart.
     * @summary carts/{cartId}/selected-payment-method
     * @param {number} cartId The cart ID.
     * @param {QuotePaymentMethodManagementV1SetPutRequest} [quotePaymentMethodManagementV1SetPutBody] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CartsCartIdSelectedPaymentMethodApi
     */
    public quotePaymentMethodManagementV1SetPut(cartId: number, quotePaymentMethodManagementV1SetPutBody?: QuotePaymentMethodManagementV1SetPutRequest, options?: AxiosRequestConfig) {
        return CartsCartIdSelectedPaymentMethodApiFp(this.configuration).quotePaymentMethodManagementV1SetPut(cartId, quotePaymentMethodManagementV1SetPutBody, options).then((request) => request(this.axios, this.basePath));
    }
}


/**
 * CartsCartIdShippingInformationApi - axios parameter creator
 * @export
 */
export const CartsCartIdShippingInformationApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary carts/{cartId}/shipping-information
         * @param {number} cartId 
         * @param {CheckoutShippingInformationManagementV1SaveAddressInformationPostRequest} [checkoutShippingInformationManagementV1SaveAddressInformationPostBody] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        checkoutShippingInformationManagementV1SaveAddressInformationPost: async (cartId: number, checkoutShippingInformationManagementV1SaveAddressInformationPostBody?: CheckoutShippingInformationManagementV1SaveAddressInformationPostRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'cartId' is not null or undefined
            assertParamExists('checkoutShippingInformationManagementV1SaveAddressInformationPost', 'cartId', cartId)
            const localVarPath = `/V1/carts/{cartId}/shipping-information`
                .replace(`{${"cartId"}}`, encodeURIComponent(String(cartId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(checkoutShippingInformationManagementV1SaveAddressInformationPostBody, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * CartsCartIdShippingInformationApi - functional programming interface
 * @export
 */
export const CartsCartIdShippingInformationApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = CartsCartIdShippingInformationApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @summary carts/{cartId}/shipping-information
         * @param {number} cartId 
         * @param {CheckoutShippingInformationManagementV1SaveAddressInformationPostRequest} [checkoutShippingInformationManagementV1SaveAddressInformationPostBody] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async checkoutShippingInformationManagementV1SaveAddressInformationPost(cartId: number, checkoutShippingInformationManagementV1SaveAddressInformationPostBody?: CheckoutShippingInformationManagementV1SaveAddressInformationPostRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<CheckoutDataPaymentDetailsInterface>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.checkoutShippingInformationManagementV1SaveAddressInformationPost(cartId, checkoutShippingInformationManagementV1SaveAddressInformationPostBody, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * CartsCartIdShippingInformationApi - factory interface
 * @export
 */
export const CartsCartIdShippingInformationApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = CartsCartIdShippingInformationApiFp(configuration)
    return {
        /**
         * 
         * @summary carts/{cartId}/shipping-information
         * @param {number} cartId 
         * @param {CheckoutShippingInformationManagementV1SaveAddressInformationPostRequest} [checkoutShippingInformationManagementV1SaveAddressInformationPostBody] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        checkoutShippingInformationManagementV1SaveAddressInformationPost(cartId: number, checkoutShippingInformationManagementV1SaveAddressInformationPostBody?: CheckoutShippingInformationManagementV1SaveAddressInformationPostRequest, options?: any): AxiosPromise<CheckoutDataPaymentDetailsInterface> {
            return localVarFp.checkoutShippingInformationManagementV1SaveAddressInformationPost(cartId, checkoutShippingInformationManagementV1SaveAddressInformationPostBody, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * CartsCartIdShippingInformationApi - object-oriented interface
 * @export
 * @class CartsCartIdShippingInformationApi
 * @extends {BaseAPI}
 */
export class CartsCartIdShippingInformationApi extends BaseAPI {
    /**
     * 
     * @summary carts/{cartId}/shipping-information
     * @param {number} cartId 
     * @param {CheckoutShippingInformationManagementV1SaveAddressInformationPostRequest} [checkoutShippingInformationManagementV1SaveAddressInformationPostBody] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CartsCartIdShippingInformationApi
     */
    public checkoutShippingInformationManagementV1SaveAddressInformationPost(cartId: number, checkoutShippingInformationManagementV1SaveAddressInformationPostBody?: CheckoutShippingInformationManagementV1SaveAddressInformationPostRequest, options?: AxiosRequestConfig) {
        return CartsCartIdShippingInformationApiFp(this.configuration).checkoutShippingInformationManagementV1SaveAddressInformationPost(cartId, checkoutShippingInformationManagementV1SaveAddressInformationPostBody, options).then((request) => request(this.axios, this.basePath));
    }
}


/**
 * CartsCartIdShippingMethodsApi - axios parameter creator
 * @export
 */
export const CartsCartIdShippingMethodsApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Lists applicable shipping methods for a specified quote.
         * @summary carts/{cartId}/shipping-methods
         * @param {number} cartId The shopping cart ID.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        quoteShippingMethodManagementV1GetListGet: async (cartId: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'cartId' is not null or undefined
            assertParamExists('quoteShippingMethodManagementV1GetListGet', 'cartId', cartId)
            const localVarPath = `/V1/carts/{cartId}/shipping-methods`
                .replace(`{${"cartId"}}`, encodeURIComponent(String(cartId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * CartsCartIdShippingMethodsApi - functional programming interface
 * @export
 */
export const CartsCartIdShippingMethodsApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = CartsCartIdShippingMethodsApiAxiosParamCreator(configuration)
    return {
        /**
         * Lists applicable shipping methods for a specified quote.
         * @summary carts/{cartId}/shipping-methods
         * @param {number} cartId The shopping cart ID.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async quoteShippingMethodManagementV1GetListGet(cartId: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<QuoteDataShippingMethodInterface>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.quoteShippingMethodManagementV1GetListGet(cartId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * CartsCartIdShippingMethodsApi - factory interface
 * @export
 */
export const CartsCartIdShippingMethodsApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = CartsCartIdShippingMethodsApiFp(configuration)
    return {
        /**
         * Lists applicable shipping methods for a specified quote.
         * @summary carts/{cartId}/shipping-methods
         * @param {number} cartId The shopping cart ID.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        quoteShippingMethodManagementV1GetListGet(cartId: number, options?: any): AxiosPromise<Array<QuoteDataShippingMethodInterface>> {
            return localVarFp.quoteShippingMethodManagementV1GetListGet(cartId, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * CartsCartIdShippingMethodsApi - object-oriented interface
 * @export
 * @class CartsCartIdShippingMethodsApi
 * @extends {BaseAPI}
 */
export class CartsCartIdShippingMethodsApi extends BaseAPI {
    /**
     * Lists applicable shipping methods for a specified quote.
     * @summary carts/{cartId}/shipping-methods
     * @param {number} cartId The shopping cart ID.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CartsCartIdShippingMethodsApi
     */
    public quoteShippingMethodManagementV1GetListGet(cartId: number, options?: AxiosRequestConfig) {
        return CartsCartIdShippingMethodsApiFp(this.configuration).quoteShippingMethodManagementV1GetListGet(cartId, options).then((request) => request(this.axios, this.basePath));
    }
}


/**
 * CartsCartIdTotalsApi - axios parameter creator
 * @export
 */
export const CartsCartIdTotalsApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Returns quote totals data for a specified cart.
         * @summary carts/{cartId}/totals
         * @param {number} cartId The cart ID.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        quoteCartTotalRepositoryV1GetGet: async (cartId: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'cartId' is not null or undefined
            assertParamExists('quoteCartTotalRepositoryV1GetGet', 'cartId', cartId)
            const localVarPath = `/V1/carts/{cartId}/totals`
                .replace(`{${"cartId"}}`, encodeURIComponent(String(cartId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * CartsCartIdTotalsApi - functional programming interface
 * @export
 */
export const CartsCartIdTotalsApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = CartsCartIdTotalsApiAxiosParamCreator(configuration)
    return {
        /**
         * Returns quote totals data for a specified cart.
         * @summary carts/{cartId}/totals
         * @param {number} cartId The cart ID.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async quoteCartTotalRepositoryV1GetGet(cartId: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<QuoteDataTotalsInterface>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.quoteCartTotalRepositoryV1GetGet(cartId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * CartsCartIdTotalsApi - factory interface
 * @export
 */
export const CartsCartIdTotalsApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = CartsCartIdTotalsApiFp(configuration)
    return {
        /**
         * Returns quote totals data for a specified cart.
         * @summary carts/{cartId}/totals
         * @param {number} cartId The cart ID.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        quoteCartTotalRepositoryV1GetGet(cartId: number, options?: any): AxiosPromise<QuoteDataTotalsInterface> {
            return localVarFp.quoteCartTotalRepositoryV1GetGet(cartId, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * CartsCartIdTotalsApi - object-oriented interface
 * @export
 * @class CartsCartIdTotalsApi
 * @extends {BaseAPI}
 */
export class CartsCartIdTotalsApi extends BaseAPI {
    /**
     * Returns quote totals data for a specified cart.
     * @summary carts/{cartId}/totals
     * @param {number} cartId The cart ID.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CartsCartIdTotalsApi
     */
    public quoteCartTotalRepositoryV1GetGet(cartId: number, options?: AxiosRequestConfig) {
        return CartsCartIdTotalsApiFp(this.configuration).quoteCartTotalRepositoryV1GetGet(cartId, options).then((request) => request(this.axios, this.basePath));
    }
}


/**
 * CartsCartIdTotalsInformationApi - axios parameter creator
 * @export
 */
export const CartsCartIdTotalsInformationApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Calculate quote totals based on address and shipping method.
         * @summary carts/{cartId}/totals-information
         * @param {number} cartId 
         * @param {CheckoutTotalsInformationManagementV1CalculatePostRequest} [checkoutTotalsInformationManagementV1CalculatePostBody] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        checkoutTotalsInformationManagementV1CalculatePost: async (cartId: number, checkoutTotalsInformationManagementV1CalculatePostBody?: CheckoutTotalsInformationManagementV1CalculatePostRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'cartId' is not null or undefined
            assertParamExists('checkoutTotalsInformationManagementV1CalculatePost', 'cartId', cartId)
            const localVarPath = `/V1/carts/{cartId}/totals-information`
                .replace(`{${"cartId"}}`, encodeURIComponent(String(cartId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(checkoutTotalsInformationManagementV1CalculatePostBody, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * CartsCartIdTotalsInformationApi - functional programming interface
 * @export
 */
export const CartsCartIdTotalsInformationApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = CartsCartIdTotalsInformationApiAxiosParamCreator(configuration)
    return {
        /**
         * Calculate quote totals based on address and shipping method.
         * @summary carts/{cartId}/totals-information
         * @param {number} cartId 
         * @param {CheckoutTotalsInformationManagementV1CalculatePostRequest} [checkoutTotalsInformationManagementV1CalculatePostBody] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async checkoutTotalsInformationManagementV1CalculatePost(cartId: number, checkoutTotalsInformationManagementV1CalculatePostBody?: CheckoutTotalsInformationManagementV1CalculatePostRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<QuoteDataTotalsInterface>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.checkoutTotalsInformationManagementV1CalculatePost(cartId, checkoutTotalsInformationManagementV1CalculatePostBody, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * CartsCartIdTotalsInformationApi - factory interface
 * @export
 */
export const CartsCartIdTotalsInformationApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = CartsCartIdTotalsInformationApiFp(configuration)
    return {
        /**
         * Calculate quote totals based on address and shipping method.
         * @summary carts/{cartId}/totals-information
         * @param {number} cartId 
         * @param {CheckoutTotalsInformationManagementV1CalculatePostRequest} [checkoutTotalsInformationManagementV1CalculatePostBody] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        checkoutTotalsInformationManagementV1CalculatePost(cartId: number, checkoutTotalsInformationManagementV1CalculatePostBody?: CheckoutTotalsInformationManagementV1CalculatePostRequest, options?: any): AxiosPromise<QuoteDataTotalsInterface> {
            return localVarFp.checkoutTotalsInformationManagementV1CalculatePost(cartId, checkoutTotalsInformationManagementV1CalculatePostBody, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * CartsCartIdTotalsInformationApi - object-oriented interface
 * @export
 * @class CartsCartIdTotalsInformationApi
 * @extends {BaseAPI}
 */
export class CartsCartIdTotalsInformationApi extends BaseAPI {
    /**
     * Calculate quote totals based on address and shipping method.
     * @summary carts/{cartId}/totals-information
     * @param {number} cartId 
     * @param {CheckoutTotalsInformationManagementV1CalculatePostRequest} [checkoutTotalsInformationManagementV1CalculatePostBody] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CartsCartIdTotalsInformationApi
     */
    public checkoutTotalsInformationManagementV1CalculatePost(cartId: number, checkoutTotalsInformationManagementV1CalculatePostBody?: CheckoutTotalsInformationManagementV1CalculatePostRequest, options?: AxiosRequestConfig) {
        return CartsCartIdTotalsInformationApiFp(this.configuration).checkoutTotalsInformationManagementV1CalculatePost(cartId, checkoutTotalsInformationManagementV1CalculatePostBody, options).then((request) => request(this.axios, this.basePath));
    }
}


/**
 * CartsGuestCartsCartIdCheckGiftCardGiftCardCodeApi - axios parameter creator
 * @export
 */
export const CartsGuestCartsCartIdCheckGiftCardGiftCardCodeApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary carts/guest-carts/{cartId}/checkGiftCard/{giftCardCode}
         * @param {string} cartId 
         * @param {string} giftCardCode 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        giftCardAccountGuestGiftCardAccountManagementV1CheckGiftCardGet: async (cartId: string, giftCardCode: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'cartId' is not null or undefined
            assertParamExists('giftCardAccountGuestGiftCardAccountManagementV1CheckGiftCardGet', 'cartId', cartId)
            // verify required parameter 'giftCardCode' is not null or undefined
            assertParamExists('giftCardAccountGuestGiftCardAccountManagementV1CheckGiftCardGet', 'giftCardCode', giftCardCode)
            const localVarPath = `/V1/carts/guest-carts/{cartId}/checkGiftCard/{giftCardCode}`
                .replace(`{${"cartId"}}`, encodeURIComponent(String(cartId)))
                .replace(`{${"giftCardCode"}}`, encodeURIComponent(String(giftCardCode)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * CartsGuestCartsCartIdCheckGiftCardGiftCardCodeApi - functional programming interface
 * @export
 */
export const CartsGuestCartsCartIdCheckGiftCardGiftCardCodeApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = CartsGuestCartsCartIdCheckGiftCardGiftCardCodeApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @summary carts/guest-carts/{cartId}/checkGiftCard/{giftCardCode}
         * @param {string} cartId 
         * @param {string} giftCardCode 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async giftCardAccountGuestGiftCardAccountManagementV1CheckGiftCardGet(cartId: string, giftCardCode: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<number>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.giftCardAccountGuestGiftCardAccountManagementV1CheckGiftCardGet(cartId, giftCardCode, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * CartsGuestCartsCartIdCheckGiftCardGiftCardCodeApi - factory interface
 * @export
 */
export const CartsGuestCartsCartIdCheckGiftCardGiftCardCodeApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = CartsGuestCartsCartIdCheckGiftCardGiftCardCodeApiFp(configuration)
    return {
        /**
         * 
         * @summary carts/guest-carts/{cartId}/checkGiftCard/{giftCardCode}
         * @param {string} cartId 
         * @param {string} giftCardCode 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        giftCardAccountGuestGiftCardAccountManagementV1CheckGiftCardGet(cartId: string, giftCardCode: string, options?: any): AxiosPromise<number> {
            return localVarFp.giftCardAccountGuestGiftCardAccountManagementV1CheckGiftCardGet(cartId, giftCardCode, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * CartsGuestCartsCartIdCheckGiftCardGiftCardCodeApi - object-oriented interface
 * @export
 * @class CartsGuestCartsCartIdCheckGiftCardGiftCardCodeApi
 * @extends {BaseAPI}
 */
export class CartsGuestCartsCartIdCheckGiftCardGiftCardCodeApi extends BaseAPI {
    /**
     * 
     * @summary carts/guest-carts/{cartId}/checkGiftCard/{giftCardCode}
     * @param {string} cartId 
     * @param {string} giftCardCode 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CartsGuestCartsCartIdCheckGiftCardGiftCardCodeApi
     */
    public giftCardAccountGuestGiftCardAccountManagementV1CheckGiftCardGet(cartId: string, giftCardCode: string, options?: AxiosRequestConfig) {
        return CartsGuestCartsCartIdCheckGiftCardGiftCardCodeApiFp(this.configuration).giftCardAccountGuestGiftCardAccountManagementV1CheckGiftCardGet(cartId, giftCardCode, options).then((request) => request(this.axios, this.basePath));
    }
}


/**
 * CartsGuestCartsCartIdGiftCardsApi - axios parameter creator
 * @export
 */
export const CartsGuestCartsCartIdGiftCardsApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary carts/guest-carts/{cartId}/giftCards
         * @param {string} cartId 
         * @param {GiftCardAccountGuestGiftCardAccountManagementV1AddGiftCardPostRequest} [giftCardAccountGuestGiftCardAccountManagementV1AddGiftCardPostBody] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        giftCardAccountGuestGiftCardAccountManagementV1AddGiftCardPost: async (cartId: string, giftCardAccountGuestGiftCardAccountManagementV1AddGiftCardPostBody?: GiftCardAccountGuestGiftCardAccountManagementV1AddGiftCardPostRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'cartId' is not null or undefined
            assertParamExists('giftCardAccountGuestGiftCardAccountManagementV1AddGiftCardPost', 'cartId', cartId)
            const localVarPath = `/V1/carts/guest-carts/{cartId}/giftCards`
                .replace(`{${"cartId"}}`, encodeURIComponent(String(cartId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(giftCardAccountGuestGiftCardAccountManagementV1AddGiftCardPostBody, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * CartsGuestCartsCartIdGiftCardsApi - functional programming interface
 * @export
 */
export const CartsGuestCartsCartIdGiftCardsApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = CartsGuestCartsCartIdGiftCardsApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @summary carts/guest-carts/{cartId}/giftCards
         * @param {string} cartId 
         * @param {GiftCardAccountGuestGiftCardAccountManagementV1AddGiftCardPostRequest} [giftCardAccountGuestGiftCardAccountManagementV1AddGiftCardPostBody] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async giftCardAccountGuestGiftCardAccountManagementV1AddGiftCardPost(cartId: string, giftCardAccountGuestGiftCardAccountManagementV1AddGiftCardPostBody?: GiftCardAccountGuestGiftCardAccountManagementV1AddGiftCardPostRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<boolean>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.giftCardAccountGuestGiftCardAccountManagementV1AddGiftCardPost(cartId, giftCardAccountGuestGiftCardAccountManagementV1AddGiftCardPostBody, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * CartsGuestCartsCartIdGiftCardsApi - factory interface
 * @export
 */
export const CartsGuestCartsCartIdGiftCardsApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = CartsGuestCartsCartIdGiftCardsApiFp(configuration)
    return {
        /**
         * 
         * @summary carts/guest-carts/{cartId}/giftCards
         * @param {string} cartId 
         * @param {GiftCardAccountGuestGiftCardAccountManagementV1AddGiftCardPostRequest} [giftCardAccountGuestGiftCardAccountManagementV1AddGiftCardPostBody] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        giftCardAccountGuestGiftCardAccountManagementV1AddGiftCardPost(cartId: string, giftCardAccountGuestGiftCardAccountManagementV1AddGiftCardPostBody?: GiftCardAccountGuestGiftCardAccountManagementV1AddGiftCardPostRequest, options?: any): AxiosPromise<boolean> {
            return localVarFp.giftCardAccountGuestGiftCardAccountManagementV1AddGiftCardPost(cartId, giftCardAccountGuestGiftCardAccountManagementV1AddGiftCardPostBody, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * CartsGuestCartsCartIdGiftCardsApi - object-oriented interface
 * @export
 * @class CartsGuestCartsCartIdGiftCardsApi
 * @extends {BaseAPI}
 */
export class CartsGuestCartsCartIdGiftCardsApi extends BaseAPI {
    /**
     * 
     * @summary carts/guest-carts/{cartId}/giftCards
     * @param {string} cartId 
     * @param {GiftCardAccountGuestGiftCardAccountManagementV1AddGiftCardPostRequest} [giftCardAccountGuestGiftCardAccountManagementV1AddGiftCardPostBody] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CartsGuestCartsCartIdGiftCardsApi
     */
    public giftCardAccountGuestGiftCardAccountManagementV1AddGiftCardPost(cartId: string, giftCardAccountGuestGiftCardAccountManagementV1AddGiftCardPostBody?: GiftCardAccountGuestGiftCardAccountManagementV1AddGiftCardPostRequest, options?: AxiosRequestConfig) {
        return CartsGuestCartsCartIdGiftCardsApiFp(this.configuration).giftCardAccountGuestGiftCardAccountManagementV1AddGiftCardPost(cartId, giftCardAccountGuestGiftCardAccountManagementV1AddGiftCardPostBody, options).then((request) => request(this.axios, this.basePath));
    }
}


/**
 * CartsGuestCartsCartIdGiftCardsGiftCardCodeApi - axios parameter creator
 * @export
 */
export const CartsGuestCartsCartIdGiftCardsGiftCardCodeApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Remove GiftCard Account entity
         * @summary carts/guest-carts/{cartId}/giftCards/{giftCardCode}
         * @param {string} cartId 
         * @param {string} giftCardCode 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        giftCardAccountGuestGiftCardAccountManagementV1DeleteByQuoteIdDelete: async (cartId: string, giftCardCode: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'cartId' is not null or undefined
            assertParamExists('giftCardAccountGuestGiftCardAccountManagementV1DeleteByQuoteIdDelete', 'cartId', cartId)
            // verify required parameter 'giftCardCode' is not null or undefined
            assertParamExists('giftCardAccountGuestGiftCardAccountManagementV1DeleteByQuoteIdDelete', 'giftCardCode', giftCardCode)
            const localVarPath = `/V1/carts/guest-carts/{cartId}/giftCards/{giftCardCode}`
                .replace(`{${"cartId"}}`, encodeURIComponent(String(cartId)))
                .replace(`{${"giftCardCode"}}`, encodeURIComponent(String(giftCardCode)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * CartsGuestCartsCartIdGiftCardsGiftCardCodeApi - functional programming interface
 * @export
 */
export const CartsGuestCartsCartIdGiftCardsGiftCardCodeApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = CartsGuestCartsCartIdGiftCardsGiftCardCodeApiAxiosParamCreator(configuration)
    return {
        /**
         * Remove GiftCard Account entity
         * @summary carts/guest-carts/{cartId}/giftCards/{giftCardCode}
         * @param {string} cartId 
         * @param {string} giftCardCode 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async giftCardAccountGuestGiftCardAccountManagementV1DeleteByQuoteIdDelete(cartId: string, giftCardCode: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<boolean>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.giftCardAccountGuestGiftCardAccountManagementV1DeleteByQuoteIdDelete(cartId, giftCardCode, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * CartsGuestCartsCartIdGiftCardsGiftCardCodeApi - factory interface
 * @export
 */
export const CartsGuestCartsCartIdGiftCardsGiftCardCodeApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = CartsGuestCartsCartIdGiftCardsGiftCardCodeApiFp(configuration)
    return {
        /**
         * Remove GiftCard Account entity
         * @summary carts/guest-carts/{cartId}/giftCards/{giftCardCode}
         * @param {string} cartId 
         * @param {string} giftCardCode 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        giftCardAccountGuestGiftCardAccountManagementV1DeleteByQuoteIdDelete(cartId: string, giftCardCode: string, options?: any): AxiosPromise<boolean> {
            return localVarFp.giftCardAccountGuestGiftCardAccountManagementV1DeleteByQuoteIdDelete(cartId, giftCardCode, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * CartsGuestCartsCartIdGiftCardsGiftCardCodeApi - object-oriented interface
 * @export
 * @class CartsGuestCartsCartIdGiftCardsGiftCardCodeApi
 * @extends {BaseAPI}
 */
export class CartsGuestCartsCartIdGiftCardsGiftCardCodeApi extends BaseAPI {
    /**
     * Remove GiftCard Account entity
     * @summary carts/guest-carts/{cartId}/giftCards/{giftCardCode}
     * @param {string} cartId 
     * @param {string} giftCardCode 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CartsGuestCartsCartIdGiftCardsGiftCardCodeApi
     */
    public giftCardAccountGuestGiftCardAccountManagementV1DeleteByQuoteIdDelete(cartId: string, giftCardCode: string, options?: AxiosRequestConfig) {
        return CartsGuestCartsCartIdGiftCardsGiftCardCodeApiFp(this.configuration).giftCardAccountGuestGiftCardAccountManagementV1DeleteByQuoteIdDelete(cartId, giftCardCode, options).then((request) => request(this.axios, this.basePath));
    }
}


/**
 * CartsLicenceApi - axios parameter creator
 * @export
 */
export const CartsLicenceApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Lists active checkout agreements.
         * @summary carts/licence
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        checkoutAgreementsCheckoutAgreementsRepositoryV1GetListGet: async (options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/V1/carts/licence`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * CartsLicenceApi - functional programming interface
 * @export
 */
export const CartsLicenceApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = CartsLicenceApiAxiosParamCreator(configuration)
    return {
        /**
         * Lists active checkout agreements.
         * @summary carts/licence
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async checkoutAgreementsCheckoutAgreementsRepositoryV1GetListGet(options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<CheckoutAgreementsDataAgreementInterface>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.checkoutAgreementsCheckoutAgreementsRepositoryV1GetListGet(options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * CartsLicenceApi - factory interface
 * @export
 */
export const CartsLicenceApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = CartsLicenceApiFp(configuration)
    return {
        /**
         * Lists active checkout agreements.
         * @summary carts/licence
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        checkoutAgreementsCheckoutAgreementsRepositoryV1GetListGet(options?: any): AxiosPromise<Array<CheckoutAgreementsDataAgreementInterface>> {
            return localVarFp.checkoutAgreementsCheckoutAgreementsRepositoryV1GetListGet(options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * CartsLicenceApi - object-oriented interface
 * @export
 * @class CartsLicenceApi
 * @extends {BaseAPI}
 */
export class CartsLicenceApi extends BaseAPI {
    /**
     * Lists active checkout agreements.
     * @summary carts/licence
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CartsLicenceApi
     */
    public checkoutAgreementsCheckoutAgreementsRepositoryV1GetListGet(options?: AxiosRequestConfig) {
        return CartsLicenceApiFp(this.configuration).checkoutAgreementsCheckoutAgreementsRepositoryV1GetListGet(options).then((request) => request(this.axios, this.basePath));
    }
}


/**
 * CartsMineApi - axios parameter creator
 * @export
 */
export const CartsMineApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Creates an empty cart and quote for a specified customer if customer does not have a cart yet.
         * @summary carts/mine
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        quoteCartManagementV1CreateEmptyCartForCustomerPost: async (options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/V1/carts/mine`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Returns information for the cart for a specified customer.
         * @summary carts/mine
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        quoteCartManagementV1GetCartForCustomerGet: async (options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/V1/carts/mine`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Save quote
         * @summary carts/mine
         * @param {QuoteCartRepositoryV1SavePutRequest} [quoteCartRepositoryV1SavePutBody] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        quoteCartRepositoryV1SavePut: async (quoteCartRepositoryV1SavePutBody?: QuoteCartRepositoryV1SavePutRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/V1/carts/mine`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(quoteCartRepositoryV1SavePutBody, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * CartsMineApi - functional programming interface
 * @export
 */
export const CartsMineApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = CartsMineApiAxiosParamCreator(configuration)
    return {
        /**
         * Creates an empty cart and quote for a specified customer if customer does not have a cart yet.
         * @summary carts/mine
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async quoteCartManagementV1CreateEmptyCartForCustomerPost(options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<number>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.quoteCartManagementV1CreateEmptyCartForCustomerPost(options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Returns information for the cart for a specified customer.
         * @summary carts/mine
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async quoteCartManagementV1GetCartForCustomerGet(options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<QuoteDataCartInterface>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.quoteCartManagementV1GetCartForCustomerGet(options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Save quote
         * @summary carts/mine
         * @param {QuoteCartRepositoryV1SavePutRequest} [quoteCartRepositoryV1SavePutBody] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async quoteCartRepositoryV1SavePut(quoteCartRepositoryV1SavePutBody?: QuoteCartRepositoryV1SavePutRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ErrorResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.quoteCartRepositoryV1SavePut(quoteCartRepositoryV1SavePutBody, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * CartsMineApi - factory interface
 * @export
 */
export const CartsMineApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = CartsMineApiFp(configuration)
    return {
        /**
         * Creates an empty cart and quote for a specified customer if customer does not have a cart yet.
         * @summary carts/mine
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        quoteCartManagementV1CreateEmptyCartForCustomerPost(options?: any): AxiosPromise<number> {
            return localVarFp.quoteCartManagementV1CreateEmptyCartForCustomerPost(options).then((request) => request(axios, basePath));
        },
        /**
         * Returns information for the cart for a specified customer.
         * @summary carts/mine
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        quoteCartManagementV1GetCartForCustomerGet(options?: any): AxiosPromise<QuoteDataCartInterface> {
            return localVarFp.quoteCartManagementV1GetCartForCustomerGet(options).then((request) => request(axios, basePath));
        },
        /**
         * Save quote
         * @summary carts/mine
         * @param {QuoteCartRepositoryV1SavePutRequest} [quoteCartRepositoryV1SavePutBody] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        quoteCartRepositoryV1SavePut(quoteCartRepositoryV1SavePutBody?: QuoteCartRepositoryV1SavePutRequest, options?: any): AxiosPromise<ErrorResponse> {
            return localVarFp.quoteCartRepositoryV1SavePut(quoteCartRepositoryV1SavePutBody, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * CartsMineApi - object-oriented interface
 * @export
 * @class CartsMineApi
 * @extends {BaseAPI}
 */
export class CartsMineApi extends BaseAPI {
    /**
     * Creates an empty cart and quote for a specified customer if customer does not have a cart yet.
     * @summary carts/mine
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CartsMineApi
     */
    public quoteCartManagementV1CreateEmptyCartForCustomerPost(options?: AxiosRequestConfig) {
        return CartsMineApiFp(this.configuration).quoteCartManagementV1CreateEmptyCartForCustomerPost(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Returns information for the cart for a specified customer.
     * @summary carts/mine
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CartsMineApi
     */
    public quoteCartManagementV1GetCartForCustomerGet(options?: AxiosRequestConfig) {
        return CartsMineApiFp(this.configuration).quoteCartManagementV1GetCartForCustomerGet(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Save quote
     * @summary carts/mine
     * @param {QuoteCartRepositoryV1SavePutRequest} [quoteCartRepositoryV1SavePutBody] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CartsMineApi
     */
    public quoteCartRepositoryV1SavePut(quoteCartRepositoryV1SavePutBody?: QuoteCartRepositoryV1SavePutRequest, options?: AxiosRequestConfig) {
        return CartsMineApiFp(this.configuration).quoteCartRepositoryV1SavePut(quoteCartRepositoryV1SavePutBody, options).then((request) => request(this.axios, this.basePath));
    }
}


/**
 * CartsMineBalanceApplyApi - axios parameter creator
 * @export
 */
export const CartsMineBalanceApplyApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Apply store credit.
         * @summary carts/mine/balance/apply
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        customerBalanceBalanceManagementFromQuoteV1ApplyPost: async (options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/V1/carts/mine/balance/apply`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * CartsMineBalanceApplyApi - functional programming interface
 * @export
 */
export const CartsMineBalanceApplyApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = CartsMineBalanceApplyApiAxiosParamCreator(configuration)
    return {
        /**
         * Apply store credit.
         * @summary carts/mine/balance/apply
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async customerBalanceBalanceManagementFromQuoteV1ApplyPost(options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<boolean>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.customerBalanceBalanceManagementFromQuoteV1ApplyPost(options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * CartsMineBalanceApplyApi - factory interface
 * @export
 */
export const CartsMineBalanceApplyApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = CartsMineBalanceApplyApiFp(configuration)
    return {
        /**
         * Apply store credit.
         * @summary carts/mine/balance/apply
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        customerBalanceBalanceManagementFromQuoteV1ApplyPost(options?: any): AxiosPromise<boolean> {
            return localVarFp.customerBalanceBalanceManagementFromQuoteV1ApplyPost(options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * CartsMineBalanceApplyApi - object-oriented interface
 * @export
 * @class CartsMineBalanceApplyApi
 * @extends {BaseAPI}
 */
export class CartsMineBalanceApplyApi extends BaseAPI {
    /**
     * Apply store credit.
     * @summary carts/mine/balance/apply
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CartsMineBalanceApplyApi
     */
    public customerBalanceBalanceManagementFromQuoteV1ApplyPost(options?: AxiosRequestConfig) {
        return CartsMineBalanceApplyApiFp(this.configuration).customerBalanceBalanceManagementFromQuoteV1ApplyPost(options).then((request) => request(this.axios, this.basePath));
    }
}


/**
 * CartsMineBalanceUnapplyApi - axios parameter creator
 * @export
 */
export const CartsMineBalanceUnapplyApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Unapply store credit.
         * @summary carts/mine/balance/unapply
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        customerBalanceBalanceManagementFromQuoteV1UnapplyPost: async (options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/V1/carts/mine/balance/unapply`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * CartsMineBalanceUnapplyApi - functional programming interface
 * @export
 */
export const CartsMineBalanceUnapplyApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = CartsMineBalanceUnapplyApiAxiosParamCreator(configuration)
    return {
        /**
         * Unapply store credit.
         * @summary carts/mine/balance/unapply
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async customerBalanceBalanceManagementFromQuoteV1UnapplyPost(options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<boolean>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.customerBalanceBalanceManagementFromQuoteV1UnapplyPost(options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * CartsMineBalanceUnapplyApi - factory interface
 * @export
 */
export const CartsMineBalanceUnapplyApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = CartsMineBalanceUnapplyApiFp(configuration)
    return {
        /**
         * Unapply store credit.
         * @summary carts/mine/balance/unapply
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        customerBalanceBalanceManagementFromQuoteV1UnapplyPost(options?: any): AxiosPromise<boolean> {
            return localVarFp.customerBalanceBalanceManagementFromQuoteV1UnapplyPost(options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * CartsMineBalanceUnapplyApi - object-oriented interface
 * @export
 * @class CartsMineBalanceUnapplyApi
 * @extends {BaseAPI}
 */
export class CartsMineBalanceUnapplyApi extends BaseAPI {
    /**
     * Unapply store credit.
     * @summary carts/mine/balance/unapply
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CartsMineBalanceUnapplyApi
     */
    public customerBalanceBalanceManagementFromQuoteV1UnapplyPost(options?: AxiosRequestConfig) {
        return CartsMineBalanceUnapplyApiFp(this.configuration).customerBalanceBalanceManagementFromQuoteV1UnapplyPost(options).then((request) => request(this.axios, this.basePath));
    }
}


/**
 * CartsMineBillingAddressApi - axios parameter creator
 * @export
 */
export const CartsMineBillingAddressApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Assigns a specified billing address to a specified cart.
         * @summary carts/mine/billing-address
         * @param {QuoteBillingAddressManagementV1AssignPostRequest} [quoteBillingAddressManagementV1AssignPostBody] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        quoteBillingAddressManagementV1AssignPost: async (quoteBillingAddressManagementV1AssignPostBody?: QuoteBillingAddressManagementV1AssignPostRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/V1/carts/mine/billing-address`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(quoteBillingAddressManagementV1AssignPostBody, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Returns the billing address for a specified quote.
         * @summary carts/mine/billing-address
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        quoteBillingAddressManagementV1GetGet: async (options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/V1/carts/mine/billing-address`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * CartsMineBillingAddressApi - functional programming interface
 * @export
 */
export const CartsMineBillingAddressApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = CartsMineBillingAddressApiAxiosParamCreator(configuration)
    return {
        /**
         * Assigns a specified billing address to a specified cart.
         * @summary carts/mine/billing-address
         * @param {QuoteBillingAddressManagementV1AssignPostRequest} [quoteBillingAddressManagementV1AssignPostBody] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async quoteBillingAddressManagementV1AssignPost(quoteBillingAddressManagementV1AssignPostBody?: QuoteBillingAddressManagementV1AssignPostRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<number>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.quoteBillingAddressManagementV1AssignPost(quoteBillingAddressManagementV1AssignPostBody, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Returns the billing address for a specified quote.
         * @summary carts/mine/billing-address
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async quoteBillingAddressManagementV1GetGet(options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<QuoteDataAddressInterface>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.quoteBillingAddressManagementV1GetGet(options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * CartsMineBillingAddressApi - factory interface
 * @export
 */
export const CartsMineBillingAddressApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = CartsMineBillingAddressApiFp(configuration)
    return {
        /**
         * Assigns a specified billing address to a specified cart.
         * @summary carts/mine/billing-address
         * @param {QuoteBillingAddressManagementV1AssignPostRequest} [quoteBillingAddressManagementV1AssignPostBody] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        quoteBillingAddressManagementV1AssignPost(quoteBillingAddressManagementV1AssignPostBody?: QuoteBillingAddressManagementV1AssignPostRequest, options?: any): AxiosPromise<number> {
            return localVarFp.quoteBillingAddressManagementV1AssignPost(quoteBillingAddressManagementV1AssignPostBody, options).then((request) => request(axios, basePath));
        },
        /**
         * Returns the billing address for a specified quote.
         * @summary carts/mine/billing-address
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        quoteBillingAddressManagementV1GetGet(options?: any): AxiosPromise<QuoteDataAddressInterface> {
            return localVarFp.quoteBillingAddressManagementV1GetGet(options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * CartsMineBillingAddressApi - object-oriented interface
 * @export
 * @class CartsMineBillingAddressApi
 * @extends {BaseAPI}
 */
export class CartsMineBillingAddressApi extends BaseAPI {
    /**
     * Assigns a specified billing address to a specified cart.
     * @summary carts/mine/billing-address
     * @param {QuoteBillingAddressManagementV1AssignPostRequest} [quoteBillingAddressManagementV1AssignPostBody] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CartsMineBillingAddressApi
     */
    public quoteBillingAddressManagementV1AssignPost(quoteBillingAddressManagementV1AssignPostBody?: QuoteBillingAddressManagementV1AssignPostRequest, options?: AxiosRequestConfig) {
        return CartsMineBillingAddressApiFp(this.configuration).quoteBillingAddressManagementV1AssignPost(quoteBillingAddressManagementV1AssignPostBody, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Returns the billing address for a specified quote.
     * @summary carts/mine/billing-address
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CartsMineBillingAddressApi
     */
    public quoteBillingAddressManagementV1GetGet(options?: AxiosRequestConfig) {
        return CartsMineBillingAddressApiFp(this.configuration).quoteBillingAddressManagementV1GetGet(options).then((request) => request(this.axios, this.basePath));
    }
}


/**
 * CartsMineCheckGiftCardGiftCardCodeApi - axios parameter creator
 * @export
 */
export const CartsMineCheckGiftCardGiftCardCodeApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary carts/mine/checkGiftCard/{giftCardCode}
         * @param {string} giftCardCode 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        giftCardAccountGiftCardAccountManagementV1CheckGiftCardGet: async (giftCardCode: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'giftCardCode' is not null or undefined
            assertParamExists('giftCardAccountGiftCardAccountManagementV1CheckGiftCardGet', 'giftCardCode', giftCardCode)
            const localVarPath = `/V1/carts/mine/checkGiftCard/{giftCardCode}`
                .replace(`{${"giftCardCode"}}`, encodeURIComponent(String(giftCardCode)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * CartsMineCheckGiftCardGiftCardCodeApi - functional programming interface
 * @export
 */
export const CartsMineCheckGiftCardGiftCardCodeApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = CartsMineCheckGiftCardGiftCardCodeApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @summary carts/mine/checkGiftCard/{giftCardCode}
         * @param {string} giftCardCode 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async giftCardAccountGiftCardAccountManagementV1CheckGiftCardGet(giftCardCode: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<number>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.giftCardAccountGiftCardAccountManagementV1CheckGiftCardGet(giftCardCode, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * CartsMineCheckGiftCardGiftCardCodeApi - factory interface
 * @export
 */
export const CartsMineCheckGiftCardGiftCardCodeApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = CartsMineCheckGiftCardGiftCardCodeApiFp(configuration)
    return {
        /**
         * 
         * @summary carts/mine/checkGiftCard/{giftCardCode}
         * @param {string} giftCardCode 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        giftCardAccountGiftCardAccountManagementV1CheckGiftCardGet(giftCardCode: string, options?: any): AxiosPromise<number> {
            return localVarFp.giftCardAccountGiftCardAccountManagementV1CheckGiftCardGet(giftCardCode, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * CartsMineCheckGiftCardGiftCardCodeApi - object-oriented interface
 * @export
 * @class CartsMineCheckGiftCardGiftCardCodeApi
 * @extends {BaseAPI}
 */
export class CartsMineCheckGiftCardGiftCardCodeApi extends BaseAPI {
    /**
     * 
     * @summary carts/mine/checkGiftCard/{giftCardCode}
     * @param {string} giftCardCode 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CartsMineCheckGiftCardGiftCardCodeApi
     */
    public giftCardAccountGiftCardAccountManagementV1CheckGiftCardGet(giftCardCode: string, options?: AxiosRequestConfig) {
        return CartsMineCheckGiftCardGiftCardCodeApiFp(this.configuration).giftCardAccountGiftCardAccountManagementV1CheckGiftCardGet(giftCardCode, options).then((request) => request(this.axios, this.basePath));
    }
}


/**
 * CartsMineCheckoutFieldsApi - axios parameter creator
 * @export
 */
export const CartsMineCheckoutFieldsApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary carts/mine/checkout-fields
         * @param {TemandoShippingQuoteCartCheckoutFieldManagementV1SaveCheckoutFieldsPostRequest} [temandoShippingQuoteCartCheckoutFieldManagementV1SaveCheckoutFieldsPostBody] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        temandoShippingQuoteCartCheckoutFieldManagementV1SaveCheckoutFieldsPost: async (temandoShippingQuoteCartCheckoutFieldManagementV1SaveCheckoutFieldsPostBody?: TemandoShippingQuoteCartCheckoutFieldManagementV1SaveCheckoutFieldsPostRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/V1/carts/mine/checkout-fields`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(temandoShippingQuoteCartCheckoutFieldManagementV1SaveCheckoutFieldsPostBody, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * CartsMineCheckoutFieldsApi - functional programming interface
 * @export
 */
export const CartsMineCheckoutFieldsApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = CartsMineCheckoutFieldsApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @summary carts/mine/checkout-fields
         * @param {TemandoShippingQuoteCartCheckoutFieldManagementV1SaveCheckoutFieldsPostRequest} [temandoShippingQuoteCartCheckoutFieldManagementV1SaveCheckoutFieldsPostBody] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async temandoShippingQuoteCartCheckoutFieldManagementV1SaveCheckoutFieldsPost(temandoShippingQuoteCartCheckoutFieldManagementV1SaveCheckoutFieldsPostBody?: TemandoShippingQuoteCartCheckoutFieldManagementV1SaveCheckoutFieldsPostRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ErrorResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.temandoShippingQuoteCartCheckoutFieldManagementV1SaveCheckoutFieldsPost(temandoShippingQuoteCartCheckoutFieldManagementV1SaveCheckoutFieldsPostBody, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * CartsMineCheckoutFieldsApi - factory interface
 * @export
 */
export const CartsMineCheckoutFieldsApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = CartsMineCheckoutFieldsApiFp(configuration)
    return {
        /**
         * 
         * @summary carts/mine/checkout-fields
         * @param {TemandoShippingQuoteCartCheckoutFieldManagementV1SaveCheckoutFieldsPostRequest} [temandoShippingQuoteCartCheckoutFieldManagementV1SaveCheckoutFieldsPostBody] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        temandoShippingQuoteCartCheckoutFieldManagementV1SaveCheckoutFieldsPost(temandoShippingQuoteCartCheckoutFieldManagementV1SaveCheckoutFieldsPostBody?: TemandoShippingQuoteCartCheckoutFieldManagementV1SaveCheckoutFieldsPostRequest, options?: any): AxiosPromise<ErrorResponse> {
            return localVarFp.temandoShippingQuoteCartCheckoutFieldManagementV1SaveCheckoutFieldsPost(temandoShippingQuoteCartCheckoutFieldManagementV1SaveCheckoutFieldsPostBody, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * CartsMineCheckoutFieldsApi - object-oriented interface
 * @export
 * @class CartsMineCheckoutFieldsApi
 * @extends {BaseAPI}
 */
export class CartsMineCheckoutFieldsApi extends BaseAPI {
    /**
     * 
     * @summary carts/mine/checkout-fields
     * @param {TemandoShippingQuoteCartCheckoutFieldManagementV1SaveCheckoutFieldsPostRequest} [temandoShippingQuoteCartCheckoutFieldManagementV1SaveCheckoutFieldsPostBody] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CartsMineCheckoutFieldsApi
     */
    public temandoShippingQuoteCartCheckoutFieldManagementV1SaveCheckoutFieldsPost(temandoShippingQuoteCartCheckoutFieldManagementV1SaveCheckoutFieldsPostBody?: TemandoShippingQuoteCartCheckoutFieldManagementV1SaveCheckoutFieldsPostRequest, options?: AxiosRequestConfig) {
        return CartsMineCheckoutFieldsApiFp(this.configuration).temandoShippingQuoteCartCheckoutFieldManagementV1SaveCheckoutFieldsPost(temandoShippingQuoteCartCheckoutFieldManagementV1SaveCheckoutFieldsPostBody, options).then((request) => request(this.axios, this.basePath));
    }
}


/**
 * CartsMineCollectTotalsApi - axios parameter creator
 * @export
 */
export const CartsMineCollectTotalsApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Set shipping/billing methods and additional data for cart and collect totals.
         * @summary carts/mine/collect-totals
         * @param {QuoteCartTotalManagementV1CollectTotalsPutRequest} [quoteCartTotalManagementV1CollectTotalsPutBody] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        quoteCartTotalManagementV1CollectTotalsPut: async (quoteCartTotalManagementV1CollectTotalsPutBody?: QuoteCartTotalManagementV1CollectTotalsPutRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/V1/carts/mine/collect-totals`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(quoteCartTotalManagementV1CollectTotalsPutBody, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * CartsMineCollectTotalsApi - functional programming interface
 * @export
 */
export const CartsMineCollectTotalsApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = CartsMineCollectTotalsApiAxiosParamCreator(configuration)
    return {
        /**
         * Set shipping/billing methods and additional data for cart and collect totals.
         * @summary carts/mine/collect-totals
         * @param {QuoteCartTotalManagementV1CollectTotalsPutRequest} [quoteCartTotalManagementV1CollectTotalsPutBody] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async quoteCartTotalManagementV1CollectTotalsPut(quoteCartTotalManagementV1CollectTotalsPutBody?: QuoteCartTotalManagementV1CollectTotalsPutRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<QuoteDataTotalsInterface>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.quoteCartTotalManagementV1CollectTotalsPut(quoteCartTotalManagementV1CollectTotalsPutBody, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * CartsMineCollectTotalsApi - factory interface
 * @export
 */
export const CartsMineCollectTotalsApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = CartsMineCollectTotalsApiFp(configuration)
    return {
        /**
         * Set shipping/billing methods and additional data for cart and collect totals.
         * @summary carts/mine/collect-totals
         * @param {QuoteCartTotalManagementV1CollectTotalsPutRequest} [quoteCartTotalManagementV1CollectTotalsPutBody] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        quoteCartTotalManagementV1CollectTotalsPut(quoteCartTotalManagementV1CollectTotalsPutBody?: QuoteCartTotalManagementV1CollectTotalsPutRequest, options?: any): AxiosPromise<QuoteDataTotalsInterface> {
            return localVarFp.quoteCartTotalManagementV1CollectTotalsPut(quoteCartTotalManagementV1CollectTotalsPutBody, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * CartsMineCollectTotalsApi - object-oriented interface
 * @export
 * @class CartsMineCollectTotalsApi
 * @extends {BaseAPI}
 */
export class CartsMineCollectTotalsApi extends BaseAPI {
    /**
     * Set shipping/billing methods and additional data for cart and collect totals.
     * @summary carts/mine/collect-totals
     * @param {QuoteCartTotalManagementV1CollectTotalsPutRequest} [quoteCartTotalManagementV1CollectTotalsPutBody] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CartsMineCollectTotalsApi
     */
    public quoteCartTotalManagementV1CollectTotalsPut(quoteCartTotalManagementV1CollectTotalsPutBody?: QuoteCartTotalManagementV1CollectTotalsPutRequest, options?: AxiosRequestConfig) {
        return CartsMineCollectTotalsApiFp(this.configuration).quoteCartTotalManagementV1CollectTotalsPut(quoteCartTotalManagementV1CollectTotalsPutBody, options).then((request) => request(this.axios, this.basePath));
    }
}


/**
 * CartsMineCollectionPointSearchRequestApi - axios parameter creator
 * @export
 */
export const CartsMineCollectionPointSearchRequestApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary carts/mine/collection-point/search-request
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        temandoShippingCollectionPointCartCollectionPointManagementV1DeleteSearchRequestDelete: async (options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/V1/carts/mine/collection-point/search-request`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary carts/mine/collection-point/search-request
         * @param {TemandoShippingCollectionPointCartCollectionPointManagementV1SaveSearchRequestPutRequest} [temandoShippingCollectionPointCartCollectionPointManagementV1SaveSearchRequestPutBody] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        temandoShippingCollectionPointCartCollectionPointManagementV1SaveSearchRequestPut: async (temandoShippingCollectionPointCartCollectionPointManagementV1SaveSearchRequestPutBody?: TemandoShippingCollectionPointCartCollectionPointManagementV1SaveSearchRequestPutRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/V1/carts/mine/collection-point/search-request`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(temandoShippingCollectionPointCartCollectionPointManagementV1SaveSearchRequestPutBody, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * CartsMineCollectionPointSearchRequestApi - functional programming interface
 * @export
 */
export const CartsMineCollectionPointSearchRequestApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = CartsMineCollectionPointSearchRequestApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @summary carts/mine/collection-point/search-request
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async temandoShippingCollectionPointCartCollectionPointManagementV1DeleteSearchRequestDelete(options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<boolean>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.temandoShippingCollectionPointCartCollectionPointManagementV1DeleteSearchRequestDelete(options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary carts/mine/collection-point/search-request
         * @param {TemandoShippingCollectionPointCartCollectionPointManagementV1SaveSearchRequestPutRequest} [temandoShippingCollectionPointCartCollectionPointManagementV1SaveSearchRequestPutBody] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async temandoShippingCollectionPointCartCollectionPointManagementV1SaveSearchRequestPut(temandoShippingCollectionPointCartCollectionPointManagementV1SaveSearchRequestPutBody?: TemandoShippingCollectionPointCartCollectionPointManagementV1SaveSearchRequestPutRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<TemandoShippingDataCollectionPointSearchRequestInterface>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.temandoShippingCollectionPointCartCollectionPointManagementV1SaveSearchRequestPut(temandoShippingCollectionPointCartCollectionPointManagementV1SaveSearchRequestPutBody, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * CartsMineCollectionPointSearchRequestApi - factory interface
 * @export
 */
export const CartsMineCollectionPointSearchRequestApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = CartsMineCollectionPointSearchRequestApiFp(configuration)
    return {
        /**
         * 
         * @summary carts/mine/collection-point/search-request
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        temandoShippingCollectionPointCartCollectionPointManagementV1DeleteSearchRequestDelete(options?: any): AxiosPromise<boolean> {
            return localVarFp.temandoShippingCollectionPointCartCollectionPointManagementV1DeleteSearchRequestDelete(options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary carts/mine/collection-point/search-request
         * @param {TemandoShippingCollectionPointCartCollectionPointManagementV1SaveSearchRequestPutRequest} [temandoShippingCollectionPointCartCollectionPointManagementV1SaveSearchRequestPutBody] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        temandoShippingCollectionPointCartCollectionPointManagementV1SaveSearchRequestPut(temandoShippingCollectionPointCartCollectionPointManagementV1SaveSearchRequestPutBody?: TemandoShippingCollectionPointCartCollectionPointManagementV1SaveSearchRequestPutRequest, options?: any): AxiosPromise<TemandoShippingDataCollectionPointSearchRequestInterface> {
            return localVarFp.temandoShippingCollectionPointCartCollectionPointManagementV1SaveSearchRequestPut(temandoShippingCollectionPointCartCollectionPointManagementV1SaveSearchRequestPutBody, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * CartsMineCollectionPointSearchRequestApi - object-oriented interface
 * @export
 * @class CartsMineCollectionPointSearchRequestApi
 * @extends {BaseAPI}
 */
export class CartsMineCollectionPointSearchRequestApi extends BaseAPI {
    /**
     * 
     * @summary carts/mine/collection-point/search-request
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CartsMineCollectionPointSearchRequestApi
     */
    public temandoShippingCollectionPointCartCollectionPointManagementV1DeleteSearchRequestDelete(options?: AxiosRequestConfig) {
        return CartsMineCollectionPointSearchRequestApiFp(this.configuration).temandoShippingCollectionPointCartCollectionPointManagementV1DeleteSearchRequestDelete(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary carts/mine/collection-point/search-request
     * @param {TemandoShippingCollectionPointCartCollectionPointManagementV1SaveSearchRequestPutRequest} [temandoShippingCollectionPointCartCollectionPointManagementV1SaveSearchRequestPutBody] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CartsMineCollectionPointSearchRequestApi
     */
    public temandoShippingCollectionPointCartCollectionPointManagementV1SaveSearchRequestPut(temandoShippingCollectionPointCartCollectionPointManagementV1SaveSearchRequestPutBody?: TemandoShippingCollectionPointCartCollectionPointManagementV1SaveSearchRequestPutRequest, options?: AxiosRequestConfig) {
        return CartsMineCollectionPointSearchRequestApiFp(this.configuration).temandoShippingCollectionPointCartCollectionPointManagementV1SaveSearchRequestPut(temandoShippingCollectionPointCartCollectionPointManagementV1SaveSearchRequestPutBody, options).then((request) => request(this.axios, this.basePath));
    }
}


/**
 * CartsMineCollectionPointSearchResultApi - axios parameter creator
 * @export
 */
export const CartsMineCollectionPointSearchResultApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary carts/mine/collection-point/search-result
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        temandoShippingCollectionPointCartCollectionPointManagementV1GetCollectionPointsGet: async (options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/V1/carts/mine/collection-point/search-result`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * CartsMineCollectionPointSearchResultApi - functional programming interface
 * @export
 */
export const CartsMineCollectionPointSearchResultApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = CartsMineCollectionPointSearchResultApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @summary carts/mine/collection-point/search-result
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async temandoShippingCollectionPointCartCollectionPointManagementV1GetCollectionPointsGet(options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<TemandoShippingDataCollectionPointQuoteCollectionPointInterface>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.temandoShippingCollectionPointCartCollectionPointManagementV1GetCollectionPointsGet(options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * CartsMineCollectionPointSearchResultApi - factory interface
 * @export
 */
export const CartsMineCollectionPointSearchResultApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = CartsMineCollectionPointSearchResultApiFp(configuration)
    return {
        /**
         * 
         * @summary carts/mine/collection-point/search-result
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        temandoShippingCollectionPointCartCollectionPointManagementV1GetCollectionPointsGet(options?: any): AxiosPromise<Array<TemandoShippingDataCollectionPointQuoteCollectionPointInterface>> {
            return localVarFp.temandoShippingCollectionPointCartCollectionPointManagementV1GetCollectionPointsGet(options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * CartsMineCollectionPointSearchResultApi - object-oriented interface
 * @export
 * @class CartsMineCollectionPointSearchResultApi
 * @extends {BaseAPI}
 */
export class CartsMineCollectionPointSearchResultApi extends BaseAPI {
    /**
     * 
     * @summary carts/mine/collection-point/search-result
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CartsMineCollectionPointSearchResultApi
     */
    public temandoShippingCollectionPointCartCollectionPointManagementV1GetCollectionPointsGet(options?: AxiosRequestConfig) {
        return CartsMineCollectionPointSearchResultApiFp(this.configuration).temandoShippingCollectionPointCartCollectionPointManagementV1GetCollectionPointsGet(options).then((request) => request(this.axios, this.basePath));
    }
}


/**
 * CartsMineCollectionPointSelectApi - axios parameter creator
 * @export
 */
export const CartsMineCollectionPointSelectApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary carts/mine/collection-point/select
         * @param {TemandoShippingCollectionPointCartCollectionPointManagementV1SelectCollectionPointPostRequest} [temandoShippingCollectionPointCartCollectionPointManagementV1SelectCollectionPointPostBody] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        temandoShippingCollectionPointCartCollectionPointManagementV1SelectCollectionPointPost: async (temandoShippingCollectionPointCartCollectionPointManagementV1SelectCollectionPointPostBody?: TemandoShippingCollectionPointCartCollectionPointManagementV1SelectCollectionPointPostRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/V1/carts/mine/collection-point/select`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(temandoShippingCollectionPointCartCollectionPointManagementV1SelectCollectionPointPostBody, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * CartsMineCollectionPointSelectApi - functional programming interface
 * @export
 */
export const CartsMineCollectionPointSelectApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = CartsMineCollectionPointSelectApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @summary carts/mine/collection-point/select
         * @param {TemandoShippingCollectionPointCartCollectionPointManagementV1SelectCollectionPointPostRequest} [temandoShippingCollectionPointCartCollectionPointManagementV1SelectCollectionPointPostBody] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async temandoShippingCollectionPointCartCollectionPointManagementV1SelectCollectionPointPost(temandoShippingCollectionPointCartCollectionPointManagementV1SelectCollectionPointPostBody?: TemandoShippingCollectionPointCartCollectionPointManagementV1SelectCollectionPointPostRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<boolean>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.temandoShippingCollectionPointCartCollectionPointManagementV1SelectCollectionPointPost(temandoShippingCollectionPointCartCollectionPointManagementV1SelectCollectionPointPostBody, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * CartsMineCollectionPointSelectApi - factory interface
 * @export
 */
export const CartsMineCollectionPointSelectApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = CartsMineCollectionPointSelectApiFp(configuration)
    return {
        /**
         * 
         * @summary carts/mine/collection-point/select
         * @param {TemandoShippingCollectionPointCartCollectionPointManagementV1SelectCollectionPointPostRequest} [temandoShippingCollectionPointCartCollectionPointManagementV1SelectCollectionPointPostBody] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        temandoShippingCollectionPointCartCollectionPointManagementV1SelectCollectionPointPost(temandoShippingCollectionPointCartCollectionPointManagementV1SelectCollectionPointPostBody?: TemandoShippingCollectionPointCartCollectionPointManagementV1SelectCollectionPointPostRequest, options?: any): AxiosPromise<boolean> {
            return localVarFp.temandoShippingCollectionPointCartCollectionPointManagementV1SelectCollectionPointPost(temandoShippingCollectionPointCartCollectionPointManagementV1SelectCollectionPointPostBody, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * CartsMineCollectionPointSelectApi - object-oriented interface
 * @export
 * @class CartsMineCollectionPointSelectApi
 * @extends {BaseAPI}
 */
export class CartsMineCollectionPointSelectApi extends BaseAPI {
    /**
     * 
     * @summary carts/mine/collection-point/select
     * @param {TemandoShippingCollectionPointCartCollectionPointManagementV1SelectCollectionPointPostRequest} [temandoShippingCollectionPointCartCollectionPointManagementV1SelectCollectionPointPostBody] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CartsMineCollectionPointSelectApi
     */
    public temandoShippingCollectionPointCartCollectionPointManagementV1SelectCollectionPointPost(temandoShippingCollectionPointCartCollectionPointManagementV1SelectCollectionPointPostBody?: TemandoShippingCollectionPointCartCollectionPointManagementV1SelectCollectionPointPostRequest, options?: AxiosRequestConfig) {
        return CartsMineCollectionPointSelectApiFp(this.configuration).temandoShippingCollectionPointCartCollectionPointManagementV1SelectCollectionPointPost(temandoShippingCollectionPointCartCollectionPointManagementV1SelectCollectionPointPostBody, options).then((request) => request(this.axios, this.basePath));
    }
}


/**
 * CartsMineCouponsApi - axios parameter creator
 * @export
 */
export const CartsMineCouponsApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Returns information for a coupon in a specified cart.
         * @summary carts/mine/coupons
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        quoteCouponManagementV1GetGet: async (options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/V1/carts/mine/coupons`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Deletes a coupon from a specified cart.
         * @summary carts/mine/coupons
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        quoteCouponManagementV1RemoveDelete: async (options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/V1/carts/mine/coupons`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * CartsMineCouponsApi - functional programming interface
 * @export
 */
export const CartsMineCouponsApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = CartsMineCouponsApiAxiosParamCreator(configuration)
    return {
        /**
         * Returns information for a coupon in a specified cart.
         * @summary carts/mine/coupons
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async quoteCouponManagementV1GetGet(options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<string>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.quoteCouponManagementV1GetGet(options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Deletes a coupon from a specified cart.
         * @summary carts/mine/coupons
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async quoteCouponManagementV1RemoveDelete(options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<boolean>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.quoteCouponManagementV1RemoveDelete(options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * CartsMineCouponsApi - factory interface
 * @export
 */
export const CartsMineCouponsApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = CartsMineCouponsApiFp(configuration)
    return {
        /**
         * Returns information for a coupon in a specified cart.
         * @summary carts/mine/coupons
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        quoteCouponManagementV1GetGet(options?: any): AxiosPromise<string> {
            return localVarFp.quoteCouponManagementV1GetGet(options).then((request) => request(axios, basePath));
        },
        /**
         * Deletes a coupon from a specified cart.
         * @summary carts/mine/coupons
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        quoteCouponManagementV1RemoveDelete(options?: any): AxiosPromise<boolean> {
            return localVarFp.quoteCouponManagementV1RemoveDelete(options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * CartsMineCouponsApi - object-oriented interface
 * @export
 * @class CartsMineCouponsApi
 * @extends {BaseAPI}
 */
export class CartsMineCouponsApi extends BaseAPI {
    /**
     * Returns information for a coupon in a specified cart.
     * @summary carts/mine/coupons
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CartsMineCouponsApi
     */
    public quoteCouponManagementV1GetGet(options?: AxiosRequestConfig) {
        return CartsMineCouponsApiFp(this.configuration).quoteCouponManagementV1GetGet(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Deletes a coupon from a specified cart.
     * @summary carts/mine/coupons
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CartsMineCouponsApi
     */
    public quoteCouponManagementV1RemoveDelete(options?: AxiosRequestConfig) {
        return CartsMineCouponsApiFp(this.configuration).quoteCouponManagementV1RemoveDelete(options).then((request) => request(this.axios, this.basePath));
    }
}


/**
 * CartsMineCouponsCouponCodeApi - axios parameter creator
 * @export
 */
export const CartsMineCouponsCouponCodeApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Adds a coupon by code to a specified cart.
         * @summary carts/mine/coupons/{couponCode}
         * @param {string} couponCode The coupon code data.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        quoteCouponManagementV1SetPut: async (couponCode: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'couponCode' is not null or undefined
            assertParamExists('quoteCouponManagementV1SetPut', 'couponCode', couponCode)
            const localVarPath = `/V1/carts/mine/coupons/{couponCode}`
                .replace(`{${"couponCode"}}`, encodeURIComponent(String(couponCode)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * CartsMineCouponsCouponCodeApi - functional programming interface
 * @export
 */
export const CartsMineCouponsCouponCodeApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = CartsMineCouponsCouponCodeApiAxiosParamCreator(configuration)
    return {
        /**
         * Adds a coupon by code to a specified cart.
         * @summary carts/mine/coupons/{couponCode}
         * @param {string} couponCode The coupon code data.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async quoteCouponManagementV1SetPut(couponCode: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<boolean>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.quoteCouponManagementV1SetPut(couponCode, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * CartsMineCouponsCouponCodeApi - factory interface
 * @export
 */
export const CartsMineCouponsCouponCodeApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = CartsMineCouponsCouponCodeApiFp(configuration)
    return {
        /**
         * Adds a coupon by code to a specified cart.
         * @summary carts/mine/coupons/{couponCode}
         * @param {string} couponCode The coupon code data.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        quoteCouponManagementV1SetPut(couponCode: string, options?: any): AxiosPromise<boolean> {
            return localVarFp.quoteCouponManagementV1SetPut(couponCode, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * CartsMineCouponsCouponCodeApi - object-oriented interface
 * @export
 * @class CartsMineCouponsCouponCodeApi
 * @extends {BaseAPI}
 */
export class CartsMineCouponsCouponCodeApi extends BaseAPI {
    /**
     * Adds a coupon by code to a specified cart.
     * @summary carts/mine/coupons/{couponCode}
     * @param {string} couponCode The coupon code data.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CartsMineCouponsCouponCodeApi
     */
    public quoteCouponManagementV1SetPut(couponCode: string, options?: AxiosRequestConfig) {
        return CartsMineCouponsCouponCodeApiFp(this.configuration).quoteCouponManagementV1SetPut(couponCode, options).then((request) => request(this.axios, this.basePath));
    }
}


/**
 * CartsMineDeliveryOptionApi - axios parameter creator
 * @export
 */
export const CartsMineDeliveryOptionApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Handle selected delivery option.
         * @summary carts/mine/delivery-option
         * @param {TemandoShippingQuoteCartDeliveryOptionManagementV1SavePostRequest} [temandoShippingQuoteCartDeliveryOptionManagementV1SavePostBody] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        temandoShippingQuoteCartDeliveryOptionManagementV1SavePost: async (temandoShippingQuoteCartDeliveryOptionManagementV1SavePostBody?: TemandoShippingQuoteCartDeliveryOptionManagementV1SavePostRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/V1/carts/mine/delivery-option`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(temandoShippingQuoteCartDeliveryOptionManagementV1SavePostBody, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * CartsMineDeliveryOptionApi - functional programming interface
 * @export
 */
export const CartsMineDeliveryOptionApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = CartsMineDeliveryOptionApiAxiosParamCreator(configuration)
    return {
        /**
         * Handle selected delivery option.
         * @summary carts/mine/delivery-option
         * @param {TemandoShippingQuoteCartDeliveryOptionManagementV1SavePostRequest} [temandoShippingQuoteCartDeliveryOptionManagementV1SavePostBody] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async temandoShippingQuoteCartDeliveryOptionManagementV1SavePost(temandoShippingQuoteCartDeliveryOptionManagementV1SavePostBody?: TemandoShippingQuoteCartDeliveryOptionManagementV1SavePostRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ErrorResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.temandoShippingQuoteCartDeliveryOptionManagementV1SavePost(temandoShippingQuoteCartDeliveryOptionManagementV1SavePostBody, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * CartsMineDeliveryOptionApi - factory interface
 * @export
 */
export const CartsMineDeliveryOptionApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = CartsMineDeliveryOptionApiFp(configuration)
    return {
        /**
         * Handle selected delivery option.
         * @summary carts/mine/delivery-option
         * @param {TemandoShippingQuoteCartDeliveryOptionManagementV1SavePostRequest} [temandoShippingQuoteCartDeliveryOptionManagementV1SavePostBody] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        temandoShippingQuoteCartDeliveryOptionManagementV1SavePost(temandoShippingQuoteCartDeliveryOptionManagementV1SavePostBody?: TemandoShippingQuoteCartDeliveryOptionManagementV1SavePostRequest, options?: any): AxiosPromise<ErrorResponse> {
            return localVarFp.temandoShippingQuoteCartDeliveryOptionManagementV1SavePost(temandoShippingQuoteCartDeliveryOptionManagementV1SavePostBody, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * CartsMineDeliveryOptionApi - object-oriented interface
 * @export
 * @class CartsMineDeliveryOptionApi
 * @extends {BaseAPI}
 */
export class CartsMineDeliveryOptionApi extends BaseAPI {
    /**
     * Handle selected delivery option.
     * @summary carts/mine/delivery-option
     * @param {TemandoShippingQuoteCartDeliveryOptionManagementV1SavePostRequest} [temandoShippingQuoteCartDeliveryOptionManagementV1SavePostBody] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CartsMineDeliveryOptionApi
     */
    public temandoShippingQuoteCartDeliveryOptionManagementV1SavePost(temandoShippingQuoteCartDeliveryOptionManagementV1SavePostBody?: TemandoShippingQuoteCartDeliveryOptionManagementV1SavePostRequest, options?: AxiosRequestConfig) {
        return CartsMineDeliveryOptionApiFp(this.configuration).temandoShippingQuoteCartDeliveryOptionManagementV1SavePost(temandoShippingQuoteCartDeliveryOptionManagementV1SavePostBody, options).then((request) => request(this.axios, this.basePath));
    }
}


/**
 * CartsMineEstimateShippingMethodsApi - axios parameter creator
 * @export
 */
export const CartsMineEstimateShippingMethodsApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Estimate shipping by address and return list of available shipping methods
         * @summary carts/mine/estimate-shipping-methods
         * @param {QuoteShipmentEstimationV1EstimateByExtendedAddressPostRequest} [quoteShipmentEstimationV1EstimateByExtendedAddressPostBody] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        quoteShipmentEstimationV1EstimateByExtendedAddressPost: async (quoteShipmentEstimationV1EstimateByExtendedAddressPostBody?: QuoteShipmentEstimationV1EstimateByExtendedAddressPostRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/V1/carts/mine/estimate-shipping-methods`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(quoteShipmentEstimationV1EstimateByExtendedAddressPostBody, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * CartsMineEstimateShippingMethodsApi - functional programming interface
 * @export
 */
export const CartsMineEstimateShippingMethodsApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = CartsMineEstimateShippingMethodsApiAxiosParamCreator(configuration)
    return {
        /**
         * Estimate shipping by address and return list of available shipping methods
         * @summary carts/mine/estimate-shipping-methods
         * @param {QuoteShipmentEstimationV1EstimateByExtendedAddressPostRequest} [quoteShipmentEstimationV1EstimateByExtendedAddressPostBody] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async quoteShipmentEstimationV1EstimateByExtendedAddressPost(quoteShipmentEstimationV1EstimateByExtendedAddressPostBody?: QuoteShipmentEstimationV1EstimateByExtendedAddressPostRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<QuoteDataShippingMethodInterface>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.quoteShipmentEstimationV1EstimateByExtendedAddressPost(quoteShipmentEstimationV1EstimateByExtendedAddressPostBody, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * CartsMineEstimateShippingMethodsApi - factory interface
 * @export
 */
export const CartsMineEstimateShippingMethodsApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = CartsMineEstimateShippingMethodsApiFp(configuration)
    return {
        /**
         * Estimate shipping by address and return list of available shipping methods
         * @summary carts/mine/estimate-shipping-methods
         * @param {QuoteShipmentEstimationV1EstimateByExtendedAddressPostRequest} [quoteShipmentEstimationV1EstimateByExtendedAddressPostBody] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        quoteShipmentEstimationV1EstimateByExtendedAddressPost(quoteShipmentEstimationV1EstimateByExtendedAddressPostBody?: QuoteShipmentEstimationV1EstimateByExtendedAddressPostRequest, options?: any): AxiosPromise<Array<QuoteDataShippingMethodInterface>> {
            return localVarFp.quoteShipmentEstimationV1EstimateByExtendedAddressPost(quoteShipmentEstimationV1EstimateByExtendedAddressPostBody, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * CartsMineEstimateShippingMethodsApi - object-oriented interface
 * @export
 * @class CartsMineEstimateShippingMethodsApi
 * @extends {BaseAPI}
 */
export class CartsMineEstimateShippingMethodsApi extends BaseAPI {
    /**
     * Estimate shipping by address and return list of available shipping methods
     * @summary carts/mine/estimate-shipping-methods
     * @param {QuoteShipmentEstimationV1EstimateByExtendedAddressPostRequest} [quoteShipmentEstimationV1EstimateByExtendedAddressPostBody] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CartsMineEstimateShippingMethodsApi
     */
    public quoteShipmentEstimationV1EstimateByExtendedAddressPost(quoteShipmentEstimationV1EstimateByExtendedAddressPostBody?: QuoteShipmentEstimationV1EstimateByExtendedAddressPostRequest, options?: AxiosRequestConfig) {
        return CartsMineEstimateShippingMethodsApiFp(this.configuration).quoteShipmentEstimationV1EstimateByExtendedAddressPost(quoteShipmentEstimationV1EstimateByExtendedAddressPostBody, options).then((request) => request(this.axios, this.basePath));
    }
}


/**
 * CartsMineEstimateShippingMethodsByAddressIdApi - axios parameter creator
 * @export
 */
export const CartsMineEstimateShippingMethodsByAddressIdApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Estimate shipping
         * @summary carts/mine/estimate-shipping-methods-by-address-id
         * @param {QuoteShippingMethodManagementV1EstimateByAddressIdPostRequest} [quoteShippingMethodManagementV1EstimateByAddressIdPostBody] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        quoteShippingMethodManagementV1EstimateByAddressIdPost: async (quoteShippingMethodManagementV1EstimateByAddressIdPostBody?: QuoteShippingMethodManagementV1EstimateByAddressIdPostRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/V1/carts/mine/estimate-shipping-methods-by-address-id`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(quoteShippingMethodManagementV1EstimateByAddressIdPostBody, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * CartsMineEstimateShippingMethodsByAddressIdApi - functional programming interface
 * @export
 */
export const CartsMineEstimateShippingMethodsByAddressIdApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = CartsMineEstimateShippingMethodsByAddressIdApiAxiosParamCreator(configuration)
    return {
        /**
         * Estimate shipping
         * @summary carts/mine/estimate-shipping-methods-by-address-id
         * @param {QuoteShippingMethodManagementV1EstimateByAddressIdPostRequest} [quoteShippingMethodManagementV1EstimateByAddressIdPostBody] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async quoteShippingMethodManagementV1EstimateByAddressIdPost(quoteShippingMethodManagementV1EstimateByAddressIdPostBody?: QuoteShippingMethodManagementV1EstimateByAddressIdPostRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<QuoteDataShippingMethodInterface>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.quoteShippingMethodManagementV1EstimateByAddressIdPost(quoteShippingMethodManagementV1EstimateByAddressIdPostBody, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * CartsMineEstimateShippingMethodsByAddressIdApi - factory interface
 * @export
 */
export const CartsMineEstimateShippingMethodsByAddressIdApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = CartsMineEstimateShippingMethodsByAddressIdApiFp(configuration)
    return {
        /**
         * Estimate shipping
         * @summary carts/mine/estimate-shipping-methods-by-address-id
         * @param {QuoteShippingMethodManagementV1EstimateByAddressIdPostRequest} [quoteShippingMethodManagementV1EstimateByAddressIdPostBody] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        quoteShippingMethodManagementV1EstimateByAddressIdPost(quoteShippingMethodManagementV1EstimateByAddressIdPostBody?: QuoteShippingMethodManagementV1EstimateByAddressIdPostRequest, options?: any): AxiosPromise<Array<QuoteDataShippingMethodInterface>> {
            return localVarFp.quoteShippingMethodManagementV1EstimateByAddressIdPost(quoteShippingMethodManagementV1EstimateByAddressIdPostBody, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * CartsMineEstimateShippingMethodsByAddressIdApi - object-oriented interface
 * @export
 * @class CartsMineEstimateShippingMethodsByAddressIdApi
 * @extends {BaseAPI}
 */
export class CartsMineEstimateShippingMethodsByAddressIdApi extends BaseAPI {
    /**
     * Estimate shipping
     * @summary carts/mine/estimate-shipping-methods-by-address-id
     * @param {QuoteShippingMethodManagementV1EstimateByAddressIdPostRequest} [quoteShippingMethodManagementV1EstimateByAddressIdPostBody] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CartsMineEstimateShippingMethodsByAddressIdApi
     */
    public quoteShippingMethodManagementV1EstimateByAddressIdPost(quoteShippingMethodManagementV1EstimateByAddressIdPostBody?: QuoteShippingMethodManagementV1EstimateByAddressIdPostRequest, options?: AxiosRequestConfig) {
        return CartsMineEstimateShippingMethodsByAddressIdApiFp(this.configuration).quoteShippingMethodManagementV1EstimateByAddressIdPost(quoteShippingMethodManagementV1EstimateByAddressIdPostBody, options).then((request) => request(this.axios, this.basePath));
    }
}


/**
 * CartsMineGiftCardsApi - axios parameter creator
 * @export
 */
export const CartsMineGiftCardsApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary carts/mine/giftCards
         * @param {GiftCardAccountGuestGiftCardAccountManagementV1AddGiftCardPostRequest} [giftCardAccountGiftCardAccountManagementV1SaveByQuoteIdPostBody] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        giftCardAccountGiftCardAccountManagementV1SaveByQuoteIdPost: async (giftCardAccountGiftCardAccountManagementV1SaveByQuoteIdPostBody?: GiftCardAccountGuestGiftCardAccountManagementV1AddGiftCardPostRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/V1/carts/mine/giftCards`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(giftCardAccountGiftCardAccountManagementV1SaveByQuoteIdPostBody, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * CartsMineGiftCardsApi - functional programming interface
 * @export
 */
export const CartsMineGiftCardsApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = CartsMineGiftCardsApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @summary carts/mine/giftCards
         * @param {GiftCardAccountGuestGiftCardAccountManagementV1AddGiftCardPostRequest} [giftCardAccountGiftCardAccountManagementV1SaveByQuoteIdPostBody] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async giftCardAccountGiftCardAccountManagementV1SaveByQuoteIdPost(giftCardAccountGiftCardAccountManagementV1SaveByQuoteIdPostBody?: GiftCardAccountGuestGiftCardAccountManagementV1AddGiftCardPostRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<boolean>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.giftCardAccountGiftCardAccountManagementV1SaveByQuoteIdPost(giftCardAccountGiftCardAccountManagementV1SaveByQuoteIdPostBody, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * CartsMineGiftCardsApi - factory interface
 * @export
 */
export const CartsMineGiftCardsApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = CartsMineGiftCardsApiFp(configuration)
    return {
        /**
         * 
         * @summary carts/mine/giftCards
         * @param {GiftCardAccountGuestGiftCardAccountManagementV1AddGiftCardPostRequest} [giftCardAccountGiftCardAccountManagementV1SaveByQuoteIdPostBody] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        giftCardAccountGiftCardAccountManagementV1SaveByQuoteIdPost(giftCardAccountGiftCardAccountManagementV1SaveByQuoteIdPostBody?: GiftCardAccountGuestGiftCardAccountManagementV1AddGiftCardPostRequest, options?: any): AxiosPromise<boolean> {
            return localVarFp.giftCardAccountGiftCardAccountManagementV1SaveByQuoteIdPost(giftCardAccountGiftCardAccountManagementV1SaveByQuoteIdPostBody, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * CartsMineGiftCardsApi - object-oriented interface
 * @export
 * @class CartsMineGiftCardsApi
 * @extends {BaseAPI}
 */
export class CartsMineGiftCardsApi extends BaseAPI {
    /**
     * 
     * @summary carts/mine/giftCards
     * @param {GiftCardAccountGuestGiftCardAccountManagementV1AddGiftCardPostRequest} [giftCardAccountGiftCardAccountManagementV1SaveByQuoteIdPostBody] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CartsMineGiftCardsApi
     */
    public giftCardAccountGiftCardAccountManagementV1SaveByQuoteIdPost(giftCardAccountGiftCardAccountManagementV1SaveByQuoteIdPostBody?: GiftCardAccountGuestGiftCardAccountManagementV1AddGiftCardPostRequest, options?: AxiosRequestConfig) {
        return CartsMineGiftCardsApiFp(this.configuration).giftCardAccountGiftCardAccountManagementV1SaveByQuoteIdPost(giftCardAccountGiftCardAccountManagementV1SaveByQuoteIdPostBody, options).then((request) => request(this.axios, this.basePath));
    }
}


/**
 * CartsMineGiftCardsGiftCardCodeApi - axios parameter creator
 * @export
 */
export const CartsMineGiftCardsGiftCardCodeApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Remove GiftCard Account entity
         * @summary carts/mine/giftCards/{giftCardCode}
         * @param {string} giftCardCode 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        giftCardAccountGiftCardAccountManagementV1DeleteByQuoteIdDelete: async (giftCardCode: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'giftCardCode' is not null or undefined
            assertParamExists('giftCardAccountGiftCardAccountManagementV1DeleteByQuoteIdDelete', 'giftCardCode', giftCardCode)
            const localVarPath = `/V1/carts/mine/giftCards/{giftCardCode}`
                .replace(`{${"giftCardCode"}}`, encodeURIComponent(String(giftCardCode)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * CartsMineGiftCardsGiftCardCodeApi - functional programming interface
 * @export
 */
export const CartsMineGiftCardsGiftCardCodeApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = CartsMineGiftCardsGiftCardCodeApiAxiosParamCreator(configuration)
    return {
        /**
         * Remove GiftCard Account entity
         * @summary carts/mine/giftCards/{giftCardCode}
         * @param {string} giftCardCode 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async giftCardAccountGiftCardAccountManagementV1DeleteByQuoteIdDelete(giftCardCode: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<boolean>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.giftCardAccountGiftCardAccountManagementV1DeleteByQuoteIdDelete(giftCardCode, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * CartsMineGiftCardsGiftCardCodeApi - factory interface
 * @export
 */
export const CartsMineGiftCardsGiftCardCodeApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = CartsMineGiftCardsGiftCardCodeApiFp(configuration)
    return {
        /**
         * Remove GiftCard Account entity
         * @summary carts/mine/giftCards/{giftCardCode}
         * @param {string} giftCardCode 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        giftCardAccountGiftCardAccountManagementV1DeleteByQuoteIdDelete(giftCardCode: string, options?: any): AxiosPromise<boolean> {
            return localVarFp.giftCardAccountGiftCardAccountManagementV1DeleteByQuoteIdDelete(giftCardCode, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * CartsMineGiftCardsGiftCardCodeApi - object-oriented interface
 * @export
 * @class CartsMineGiftCardsGiftCardCodeApi
 * @extends {BaseAPI}
 */
export class CartsMineGiftCardsGiftCardCodeApi extends BaseAPI {
    /**
     * Remove GiftCard Account entity
     * @summary carts/mine/giftCards/{giftCardCode}
     * @param {string} giftCardCode 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CartsMineGiftCardsGiftCardCodeApi
     */
    public giftCardAccountGiftCardAccountManagementV1DeleteByQuoteIdDelete(giftCardCode: string, options?: AxiosRequestConfig) {
        return CartsMineGiftCardsGiftCardCodeApiFp(this.configuration).giftCardAccountGiftCardAccountManagementV1DeleteByQuoteIdDelete(giftCardCode, options).then((request) => request(this.axios, this.basePath));
    }
}


/**
 * CartsMineGiftMessageApi - axios parameter creator
 * @export
 */
export const CartsMineGiftMessageApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Return the gift message for a specified order.
         * @summary carts/mine/gift-message
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        giftMessageCartRepositoryV1GetGet: async (options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/V1/carts/mine/gift-message`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Set the gift message for an entire order.
         * @summary carts/mine/gift-message
         * @param {GiftMessageCartRepositoryV1SavePostRequest} [giftMessageCartRepositoryV1SavePostBody] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        giftMessageCartRepositoryV1SavePost: async (giftMessageCartRepositoryV1SavePostBody?: GiftMessageCartRepositoryV1SavePostRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/V1/carts/mine/gift-message`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(giftMessageCartRepositoryV1SavePostBody, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * CartsMineGiftMessageApi - functional programming interface
 * @export
 */
export const CartsMineGiftMessageApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = CartsMineGiftMessageApiAxiosParamCreator(configuration)
    return {
        /**
         * Return the gift message for a specified order.
         * @summary carts/mine/gift-message
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async giftMessageCartRepositoryV1GetGet(options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<GiftMessageDataMessageInterface>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.giftMessageCartRepositoryV1GetGet(options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Set the gift message for an entire order.
         * @summary carts/mine/gift-message
         * @param {GiftMessageCartRepositoryV1SavePostRequest} [giftMessageCartRepositoryV1SavePostBody] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async giftMessageCartRepositoryV1SavePost(giftMessageCartRepositoryV1SavePostBody?: GiftMessageCartRepositoryV1SavePostRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<boolean>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.giftMessageCartRepositoryV1SavePost(giftMessageCartRepositoryV1SavePostBody, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * CartsMineGiftMessageApi - factory interface
 * @export
 */
export const CartsMineGiftMessageApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = CartsMineGiftMessageApiFp(configuration)
    return {
        /**
         * Return the gift message for a specified order.
         * @summary carts/mine/gift-message
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        giftMessageCartRepositoryV1GetGet(options?: any): AxiosPromise<GiftMessageDataMessageInterface> {
            return localVarFp.giftMessageCartRepositoryV1GetGet(options).then((request) => request(axios, basePath));
        },
        /**
         * Set the gift message for an entire order.
         * @summary carts/mine/gift-message
         * @param {GiftMessageCartRepositoryV1SavePostRequest} [giftMessageCartRepositoryV1SavePostBody] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        giftMessageCartRepositoryV1SavePost(giftMessageCartRepositoryV1SavePostBody?: GiftMessageCartRepositoryV1SavePostRequest, options?: any): AxiosPromise<boolean> {
            return localVarFp.giftMessageCartRepositoryV1SavePost(giftMessageCartRepositoryV1SavePostBody, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * CartsMineGiftMessageApi - object-oriented interface
 * @export
 * @class CartsMineGiftMessageApi
 * @extends {BaseAPI}
 */
export class CartsMineGiftMessageApi extends BaseAPI {
    /**
     * Return the gift message for a specified order.
     * @summary carts/mine/gift-message
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CartsMineGiftMessageApi
     */
    public giftMessageCartRepositoryV1GetGet(options?: AxiosRequestConfig) {
        return CartsMineGiftMessageApiFp(this.configuration).giftMessageCartRepositoryV1GetGet(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Set the gift message for an entire order.
     * @summary carts/mine/gift-message
     * @param {GiftMessageCartRepositoryV1SavePostRequest} [giftMessageCartRepositoryV1SavePostBody] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CartsMineGiftMessageApi
     */
    public giftMessageCartRepositoryV1SavePost(giftMessageCartRepositoryV1SavePostBody?: GiftMessageCartRepositoryV1SavePostRequest, options?: AxiosRequestConfig) {
        return CartsMineGiftMessageApiFp(this.configuration).giftMessageCartRepositoryV1SavePost(giftMessageCartRepositoryV1SavePostBody, options).then((request) => request(this.axios, this.basePath));
    }
}


/**
 * CartsMineGiftMessageItemIdApi - axios parameter creator
 * @export
 */
export const CartsMineGiftMessageItemIdApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Return the gift message for a specified item in a specified shopping cart.
         * @summary carts/mine/gift-message/{itemId}
         * @param {number} itemId The item ID.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        giftMessageItemRepositoryV1GetGet: async (itemId: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'itemId' is not null or undefined
            assertParamExists('giftMessageItemRepositoryV1GetGet', 'itemId', itemId)
            const localVarPath = `/V1/carts/mine/gift-message/{itemId}`
                .replace(`{${"itemId"}}`, encodeURIComponent(String(itemId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Set the gift message for a specified item in a specified shopping cart.
         * @summary carts/mine/gift-message/{itemId}
         * @param {number} itemId The item ID.
         * @param {GiftMessageCartRepositoryV1SavePostRequest} [giftMessageItemRepositoryV1SavePostBody] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        giftMessageItemRepositoryV1SavePost: async (itemId: number, giftMessageItemRepositoryV1SavePostBody?: GiftMessageCartRepositoryV1SavePostRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'itemId' is not null or undefined
            assertParamExists('giftMessageItemRepositoryV1SavePost', 'itemId', itemId)
            const localVarPath = `/V1/carts/mine/gift-message/{itemId}`
                .replace(`{${"itemId"}}`, encodeURIComponent(String(itemId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(giftMessageItemRepositoryV1SavePostBody, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * CartsMineGiftMessageItemIdApi - functional programming interface
 * @export
 */
export const CartsMineGiftMessageItemIdApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = CartsMineGiftMessageItemIdApiAxiosParamCreator(configuration)
    return {
        /**
         * Return the gift message for a specified item in a specified shopping cart.
         * @summary carts/mine/gift-message/{itemId}
         * @param {number} itemId The item ID.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async giftMessageItemRepositoryV1GetGet(itemId: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<GiftMessageDataMessageInterface>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.giftMessageItemRepositoryV1GetGet(itemId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Set the gift message for a specified item in a specified shopping cart.
         * @summary carts/mine/gift-message/{itemId}
         * @param {number} itemId The item ID.
         * @param {GiftMessageCartRepositoryV1SavePostRequest} [giftMessageItemRepositoryV1SavePostBody] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async giftMessageItemRepositoryV1SavePost(itemId: number, giftMessageItemRepositoryV1SavePostBody?: GiftMessageCartRepositoryV1SavePostRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<boolean>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.giftMessageItemRepositoryV1SavePost(itemId, giftMessageItemRepositoryV1SavePostBody, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * CartsMineGiftMessageItemIdApi - factory interface
 * @export
 */
export const CartsMineGiftMessageItemIdApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = CartsMineGiftMessageItemIdApiFp(configuration)
    return {
        /**
         * Return the gift message for a specified item in a specified shopping cart.
         * @summary carts/mine/gift-message/{itemId}
         * @param {number} itemId The item ID.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        giftMessageItemRepositoryV1GetGet(itemId: number, options?: any): AxiosPromise<GiftMessageDataMessageInterface> {
            return localVarFp.giftMessageItemRepositoryV1GetGet(itemId, options).then((request) => request(axios, basePath));
        },
        /**
         * Set the gift message for a specified item in a specified shopping cart.
         * @summary carts/mine/gift-message/{itemId}
         * @param {number} itemId The item ID.
         * @param {GiftMessageCartRepositoryV1SavePostRequest} [giftMessageItemRepositoryV1SavePostBody] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        giftMessageItemRepositoryV1SavePost(itemId: number, giftMessageItemRepositoryV1SavePostBody?: GiftMessageCartRepositoryV1SavePostRequest, options?: any): AxiosPromise<boolean> {
            return localVarFp.giftMessageItemRepositoryV1SavePost(itemId, giftMessageItemRepositoryV1SavePostBody, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * CartsMineGiftMessageItemIdApi - object-oriented interface
 * @export
 * @class CartsMineGiftMessageItemIdApi
 * @extends {BaseAPI}
 */
export class CartsMineGiftMessageItemIdApi extends BaseAPI {
    /**
     * Return the gift message for a specified item in a specified shopping cart.
     * @summary carts/mine/gift-message/{itemId}
     * @param {number} itemId The item ID.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CartsMineGiftMessageItemIdApi
     */
    public giftMessageItemRepositoryV1GetGet(itemId: number, options?: AxiosRequestConfig) {
        return CartsMineGiftMessageItemIdApiFp(this.configuration).giftMessageItemRepositoryV1GetGet(itemId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Set the gift message for a specified item in a specified shopping cart.
     * @summary carts/mine/gift-message/{itemId}
     * @param {number} itemId The item ID.
     * @param {GiftMessageCartRepositoryV1SavePostRequest} [giftMessageItemRepositoryV1SavePostBody] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CartsMineGiftMessageItemIdApi
     */
    public giftMessageItemRepositoryV1SavePost(itemId: number, giftMessageItemRepositoryV1SavePostBody?: GiftMessageCartRepositoryV1SavePostRequest, options?: AxiosRequestConfig) {
        return CartsMineGiftMessageItemIdApiFp(this.configuration).giftMessageItemRepositoryV1SavePost(itemId, giftMessageItemRepositoryV1SavePostBody, options).then((request) => request(this.axios, this.basePath));
    }
}


/**
 * CartsMineItemsApi - axios parameter creator
 * @export
 */
export const CartsMineItemsApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Lists items that are assigned to a specified cart.
         * @summary carts/mine/items
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        quoteCartItemRepositoryV1GetListGet: async (options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/V1/carts/mine/items`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Add/update the specified cart item.
         * @summary carts/mine/items
         * @param {QuoteCartItemRepositoryV1SavePostRequest} [quoteCartItemRepositoryV1SavePostBody] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        quoteCartItemRepositoryV1SavePost: async (quoteCartItemRepositoryV1SavePostBody?: QuoteCartItemRepositoryV1SavePostRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/V1/carts/mine/items`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(quoteCartItemRepositoryV1SavePostBody, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * CartsMineItemsApi - functional programming interface
 * @export
 */
export const CartsMineItemsApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = CartsMineItemsApiAxiosParamCreator(configuration)
    return {
        /**
         * Lists items that are assigned to a specified cart.
         * @summary carts/mine/items
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async quoteCartItemRepositoryV1GetListGet(options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<QuoteDataCartItemInterface>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.quoteCartItemRepositoryV1GetListGet(options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Add/update the specified cart item.
         * @summary carts/mine/items
         * @param {QuoteCartItemRepositoryV1SavePostRequest} [quoteCartItemRepositoryV1SavePostBody] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async quoteCartItemRepositoryV1SavePost(quoteCartItemRepositoryV1SavePostBody?: QuoteCartItemRepositoryV1SavePostRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<QuoteDataCartItemInterface>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.quoteCartItemRepositoryV1SavePost(quoteCartItemRepositoryV1SavePostBody, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * CartsMineItemsApi - factory interface
 * @export
 */
export const CartsMineItemsApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = CartsMineItemsApiFp(configuration)
    return {
        /**
         * Lists items that are assigned to a specified cart.
         * @summary carts/mine/items
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        quoteCartItemRepositoryV1GetListGet(options?: any): AxiosPromise<Array<QuoteDataCartItemInterface>> {
            return localVarFp.quoteCartItemRepositoryV1GetListGet(options).then((request) => request(axios, basePath));
        },
        /**
         * Add/update the specified cart item.
         * @summary carts/mine/items
         * @param {QuoteCartItemRepositoryV1SavePostRequest} [quoteCartItemRepositoryV1SavePostBody] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        quoteCartItemRepositoryV1SavePost(quoteCartItemRepositoryV1SavePostBody?: QuoteCartItemRepositoryV1SavePostRequest, options?: any): AxiosPromise<QuoteDataCartItemInterface> {
            return localVarFp.quoteCartItemRepositoryV1SavePost(quoteCartItemRepositoryV1SavePostBody, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * CartsMineItemsApi - object-oriented interface
 * @export
 * @class CartsMineItemsApi
 * @extends {BaseAPI}
 */
export class CartsMineItemsApi extends BaseAPI {
    /**
     * Lists items that are assigned to a specified cart.
     * @summary carts/mine/items
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CartsMineItemsApi
     */
    public quoteCartItemRepositoryV1GetListGet(options?: AxiosRequestConfig) {
        return CartsMineItemsApiFp(this.configuration).quoteCartItemRepositoryV1GetListGet(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Add/update the specified cart item.
     * @summary carts/mine/items
     * @param {QuoteCartItemRepositoryV1SavePostRequest} [quoteCartItemRepositoryV1SavePostBody] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CartsMineItemsApi
     */
    public quoteCartItemRepositoryV1SavePost(quoteCartItemRepositoryV1SavePostBody?: QuoteCartItemRepositoryV1SavePostRequest, options?: AxiosRequestConfig) {
        return CartsMineItemsApiFp(this.configuration).quoteCartItemRepositoryV1SavePost(quoteCartItemRepositoryV1SavePostBody, options).then((request) => request(this.axios, this.basePath));
    }
}


/**
 * CartsMineItemsItemIdApi - axios parameter creator
 * @export
 */
export const CartsMineItemsItemIdApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Removes the specified item from the specified cart.
         * @summary carts/mine/items/{itemId}
         * @param {number} itemId The item ID of the item to be removed.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        quoteCartItemRepositoryV1DeleteByIdDelete: async (itemId: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'itemId' is not null or undefined
            assertParamExists('quoteCartItemRepositoryV1DeleteByIdDelete', 'itemId', itemId)
            const localVarPath = `/V1/carts/mine/items/{itemId}`
                .replace(`{${"itemId"}}`, encodeURIComponent(String(itemId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Add/update the specified cart item.
         * @summary carts/mine/items/{itemId}
         * @param {string} itemId 
         * @param {QuoteCartItemRepositoryV1SavePostRequest} [quoteCartItemRepositoryV1SavePutBody] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        quoteCartItemRepositoryV1SavePut: async (itemId: string, quoteCartItemRepositoryV1SavePutBody?: QuoteCartItemRepositoryV1SavePostRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'itemId' is not null or undefined
            assertParamExists('quoteCartItemRepositoryV1SavePut', 'itemId', itemId)
            const localVarPath = `/V1/carts/mine/items/{itemId}`
                .replace(`{${"itemId"}}`, encodeURIComponent(String(itemId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(quoteCartItemRepositoryV1SavePutBody, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * CartsMineItemsItemIdApi - functional programming interface
 * @export
 */
export const CartsMineItemsItemIdApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = CartsMineItemsItemIdApiAxiosParamCreator(configuration)
    return {
        /**
         * Removes the specified item from the specified cart.
         * @summary carts/mine/items/{itemId}
         * @param {number} itemId The item ID of the item to be removed.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async quoteCartItemRepositoryV1DeleteByIdDelete(itemId: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<boolean>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.quoteCartItemRepositoryV1DeleteByIdDelete(itemId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Add/update the specified cart item.
         * @summary carts/mine/items/{itemId}
         * @param {string} itemId 
         * @param {QuoteCartItemRepositoryV1SavePostRequest} [quoteCartItemRepositoryV1SavePutBody] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async quoteCartItemRepositoryV1SavePut(itemId: string, quoteCartItemRepositoryV1SavePutBody?: QuoteCartItemRepositoryV1SavePostRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<QuoteDataCartItemInterface>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.quoteCartItemRepositoryV1SavePut(itemId, quoteCartItemRepositoryV1SavePutBody, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * CartsMineItemsItemIdApi - factory interface
 * @export
 */
export const CartsMineItemsItemIdApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = CartsMineItemsItemIdApiFp(configuration)
    return {
        /**
         * Removes the specified item from the specified cart.
         * @summary carts/mine/items/{itemId}
         * @param {number} itemId The item ID of the item to be removed.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        quoteCartItemRepositoryV1DeleteByIdDelete(itemId: number, options?: any): AxiosPromise<boolean> {
            return localVarFp.quoteCartItemRepositoryV1DeleteByIdDelete(itemId, options).then((request) => request(axios, basePath));
        },
        /**
         * Add/update the specified cart item.
         * @summary carts/mine/items/{itemId}
         * @param {string} itemId 
         * @param {QuoteCartItemRepositoryV1SavePostRequest} [quoteCartItemRepositoryV1SavePutBody] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        quoteCartItemRepositoryV1SavePut(itemId: string, quoteCartItemRepositoryV1SavePutBody?: QuoteCartItemRepositoryV1SavePostRequest, options?: any): AxiosPromise<QuoteDataCartItemInterface> {
            return localVarFp.quoteCartItemRepositoryV1SavePut(itemId, quoteCartItemRepositoryV1SavePutBody, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * CartsMineItemsItemIdApi - object-oriented interface
 * @export
 * @class CartsMineItemsItemIdApi
 * @extends {BaseAPI}
 */
export class CartsMineItemsItemIdApi extends BaseAPI {
    /**
     * Removes the specified item from the specified cart.
     * @summary carts/mine/items/{itemId}
     * @param {number} itemId The item ID of the item to be removed.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CartsMineItemsItemIdApi
     */
    public quoteCartItemRepositoryV1DeleteByIdDelete(itemId: number, options?: AxiosRequestConfig) {
        return CartsMineItemsItemIdApiFp(this.configuration).quoteCartItemRepositoryV1DeleteByIdDelete(itemId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Add/update the specified cart item.
     * @summary carts/mine/items/{itemId}
     * @param {string} itemId 
     * @param {QuoteCartItemRepositoryV1SavePostRequest} [quoteCartItemRepositoryV1SavePutBody] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CartsMineItemsItemIdApi
     */
    public quoteCartItemRepositoryV1SavePut(itemId: string, quoteCartItemRepositoryV1SavePutBody?: QuoteCartItemRepositoryV1SavePostRequest, options?: AxiosRequestConfig) {
        return CartsMineItemsItemIdApiFp(this.configuration).quoteCartItemRepositoryV1SavePut(itemId, quoteCartItemRepositoryV1SavePutBody, options).then((request) => request(this.axios, this.basePath));
    }
}


/**
 * CartsMineOrderApi - axios parameter creator
 * @export
 */
export const CartsMineOrderApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Places an order for a specified cart.
         * @summary carts/mine/order
         * @param {QuoteCartManagementV1PlaceOrderPutRequest} [quoteCartManagementV1PlaceOrderPutBody] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        quoteCartManagementV1PlaceOrderPut: async (quoteCartManagementV1PlaceOrderPutBody?: QuoteCartManagementV1PlaceOrderPutRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/V1/carts/mine/order`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(quoteCartManagementV1PlaceOrderPutBody, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * CartsMineOrderApi - functional programming interface
 * @export
 */
export const CartsMineOrderApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = CartsMineOrderApiAxiosParamCreator(configuration)
    return {
        /**
         * Places an order for a specified cart.
         * @summary carts/mine/order
         * @param {QuoteCartManagementV1PlaceOrderPutRequest} [quoteCartManagementV1PlaceOrderPutBody] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async quoteCartManagementV1PlaceOrderPut(quoteCartManagementV1PlaceOrderPutBody?: QuoteCartManagementV1PlaceOrderPutRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<number>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.quoteCartManagementV1PlaceOrderPut(quoteCartManagementV1PlaceOrderPutBody, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * CartsMineOrderApi - factory interface
 * @export
 */
export const CartsMineOrderApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = CartsMineOrderApiFp(configuration)
    return {
        /**
         * Places an order for a specified cart.
         * @summary carts/mine/order
         * @param {QuoteCartManagementV1PlaceOrderPutRequest} [quoteCartManagementV1PlaceOrderPutBody] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        quoteCartManagementV1PlaceOrderPut(quoteCartManagementV1PlaceOrderPutBody?: QuoteCartManagementV1PlaceOrderPutRequest, options?: any): AxiosPromise<number> {
            return localVarFp.quoteCartManagementV1PlaceOrderPut(quoteCartManagementV1PlaceOrderPutBody, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * CartsMineOrderApi - object-oriented interface
 * @export
 * @class CartsMineOrderApi
 * @extends {BaseAPI}
 */
export class CartsMineOrderApi extends BaseAPI {
    /**
     * Places an order for a specified cart.
     * @summary carts/mine/order
     * @param {QuoteCartManagementV1PlaceOrderPutRequest} [quoteCartManagementV1PlaceOrderPutBody] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CartsMineOrderApi
     */
    public quoteCartManagementV1PlaceOrderPut(quoteCartManagementV1PlaceOrderPutBody?: QuoteCartManagementV1PlaceOrderPutRequest, options?: AxiosRequestConfig) {
        return CartsMineOrderApiFp(this.configuration).quoteCartManagementV1PlaceOrderPut(quoteCartManagementV1PlaceOrderPutBody, options).then((request) => request(this.axios, this.basePath));
    }
}


/**
 * CartsMinePaymentInformationApi - axios parameter creator
 * @export
 */
export const CartsMinePaymentInformationApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Get payment information
         * @summary carts/mine/payment-information
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        checkoutPaymentInformationManagementV1GetPaymentInformationGet: async (options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/V1/carts/mine/payment-information`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Set payment information and place order for a specified cart.
         * @summary carts/mine/payment-information
         * @param {CheckoutPaymentInformationManagementV1SavePaymentInformationAndPlaceOrderPostRequest} [checkoutPaymentInformationManagementV1SavePaymentInformationAndPlaceOrderPostBody] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        checkoutPaymentInformationManagementV1SavePaymentInformationAndPlaceOrderPost: async (checkoutPaymentInformationManagementV1SavePaymentInformationAndPlaceOrderPostBody?: CheckoutPaymentInformationManagementV1SavePaymentInformationAndPlaceOrderPostRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/V1/carts/mine/payment-information`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(checkoutPaymentInformationManagementV1SavePaymentInformationAndPlaceOrderPostBody, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * CartsMinePaymentInformationApi - functional programming interface
 * @export
 */
export const CartsMinePaymentInformationApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = CartsMinePaymentInformationApiAxiosParamCreator(configuration)
    return {
        /**
         * Get payment information
         * @summary carts/mine/payment-information
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async checkoutPaymentInformationManagementV1GetPaymentInformationGet(options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<CheckoutDataPaymentDetailsInterface>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.checkoutPaymentInformationManagementV1GetPaymentInformationGet(options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Set payment information and place order for a specified cart.
         * @summary carts/mine/payment-information
         * @param {CheckoutPaymentInformationManagementV1SavePaymentInformationAndPlaceOrderPostRequest} [checkoutPaymentInformationManagementV1SavePaymentInformationAndPlaceOrderPostBody] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async checkoutPaymentInformationManagementV1SavePaymentInformationAndPlaceOrderPost(checkoutPaymentInformationManagementV1SavePaymentInformationAndPlaceOrderPostBody?: CheckoutPaymentInformationManagementV1SavePaymentInformationAndPlaceOrderPostRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<number>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.checkoutPaymentInformationManagementV1SavePaymentInformationAndPlaceOrderPost(checkoutPaymentInformationManagementV1SavePaymentInformationAndPlaceOrderPostBody, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * CartsMinePaymentInformationApi - factory interface
 * @export
 */
export const CartsMinePaymentInformationApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = CartsMinePaymentInformationApiFp(configuration)
    return {
        /**
         * Get payment information
         * @summary carts/mine/payment-information
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        checkoutPaymentInformationManagementV1GetPaymentInformationGet(options?: any): AxiosPromise<CheckoutDataPaymentDetailsInterface> {
            return localVarFp.checkoutPaymentInformationManagementV1GetPaymentInformationGet(options).then((request) => request(axios, basePath));
        },
        /**
         * Set payment information and place order for a specified cart.
         * @summary carts/mine/payment-information
         * @param {CheckoutPaymentInformationManagementV1SavePaymentInformationAndPlaceOrderPostRequest} [checkoutPaymentInformationManagementV1SavePaymentInformationAndPlaceOrderPostBody] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        checkoutPaymentInformationManagementV1SavePaymentInformationAndPlaceOrderPost(checkoutPaymentInformationManagementV1SavePaymentInformationAndPlaceOrderPostBody?: CheckoutPaymentInformationManagementV1SavePaymentInformationAndPlaceOrderPostRequest, options?: any): AxiosPromise<number> {
            return localVarFp.checkoutPaymentInformationManagementV1SavePaymentInformationAndPlaceOrderPost(checkoutPaymentInformationManagementV1SavePaymentInformationAndPlaceOrderPostBody, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * CartsMinePaymentInformationApi - object-oriented interface
 * @export
 * @class CartsMinePaymentInformationApi
 * @extends {BaseAPI}
 */
export class CartsMinePaymentInformationApi extends BaseAPI {
    /**
     * Get payment information
     * @summary carts/mine/payment-information
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CartsMinePaymentInformationApi
     */
    public checkoutPaymentInformationManagementV1GetPaymentInformationGet(options?: AxiosRequestConfig) {
        return CartsMinePaymentInformationApiFp(this.configuration).checkoutPaymentInformationManagementV1GetPaymentInformationGet(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Set payment information and place order for a specified cart.
     * @summary carts/mine/payment-information
     * @param {CheckoutPaymentInformationManagementV1SavePaymentInformationAndPlaceOrderPostRequest} [checkoutPaymentInformationManagementV1SavePaymentInformationAndPlaceOrderPostBody] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CartsMinePaymentInformationApi
     */
    public checkoutPaymentInformationManagementV1SavePaymentInformationAndPlaceOrderPost(checkoutPaymentInformationManagementV1SavePaymentInformationAndPlaceOrderPostBody?: CheckoutPaymentInformationManagementV1SavePaymentInformationAndPlaceOrderPostRequest, options?: AxiosRequestConfig) {
        return CartsMinePaymentInformationApiFp(this.configuration).checkoutPaymentInformationManagementV1SavePaymentInformationAndPlaceOrderPost(checkoutPaymentInformationManagementV1SavePaymentInformationAndPlaceOrderPostBody, options).then((request) => request(this.axios, this.basePath));
    }
}


/**
 * CartsMinePaymentMethodsApi - axios parameter creator
 * @export
 */
export const CartsMinePaymentMethodsApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Lists available payment methods for a specified shopping cart. This call returns an array of objects, but detailed information about each object’s attributes might not be included.  See http://devdocs.magento.com/codelinks/attributes.html#PaymentMethodManagementInterface to determine which call to use to get detailed information about all attributes for an object.
         * @summary carts/mine/payment-methods
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        quotePaymentMethodManagementV1GetListGet: async (options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/V1/carts/mine/payment-methods`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * CartsMinePaymentMethodsApi - functional programming interface
 * @export
 */
export const CartsMinePaymentMethodsApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = CartsMinePaymentMethodsApiAxiosParamCreator(configuration)
    return {
        /**
         * Lists available payment methods for a specified shopping cart. This call returns an array of objects, but detailed information about each object’s attributes might not be included.  See http://devdocs.magento.com/codelinks/attributes.html#PaymentMethodManagementInterface to determine which call to use to get detailed information about all attributes for an object.
         * @summary carts/mine/payment-methods
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async quotePaymentMethodManagementV1GetListGet(options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<QuoteDataPaymentMethodInterface>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.quotePaymentMethodManagementV1GetListGet(options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * CartsMinePaymentMethodsApi - factory interface
 * @export
 */
export const CartsMinePaymentMethodsApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = CartsMinePaymentMethodsApiFp(configuration)
    return {
        /**
         * Lists available payment methods for a specified shopping cart. This call returns an array of objects, but detailed information about each object’s attributes might not be included.  See http://devdocs.magento.com/codelinks/attributes.html#PaymentMethodManagementInterface to determine which call to use to get detailed information about all attributes for an object.
         * @summary carts/mine/payment-methods
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        quotePaymentMethodManagementV1GetListGet(options?: any): AxiosPromise<Array<QuoteDataPaymentMethodInterface>> {
            return localVarFp.quotePaymentMethodManagementV1GetListGet(options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * CartsMinePaymentMethodsApi - object-oriented interface
 * @export
 * @class CartsMinePaymentMethodsApi
 * @extends {BaseAPI}
 */
export class CartsMinePaymentMethodsApi extends BaseAPI {
    /**
     * Lists available payment methods for a specified shopping cart. This call returns an array of objects, but detailed information about each object’s attributes might not be included.  See http://devdocs.magento.com/codelinks/attributes.html#PaymentMethodManagementInterface to determine which call to use to get detailed information about all attributes for an object.
     * @summary carts/mine/payment-methods
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CartsMinePaymentMethodsApi
     */
    public quotePaymentMethodManagementV1GetListGet(options?: AxiosRequestConfig) {
        return CartsMinePaymentMethodsApiFp(this.configuration).quotePaymentMethodManagementV1GetListGet(options).then((request) => request(this.axios, this.basePath));
    }
}


/**
 * CartsMineSelectedPaymentMethodApi - axios parameter creator
 * @export
 */
export const CartsMineSelectedPaymentMethodApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Returns the payment method for a specified shopping cart.
         * @summary carts/mine/selected-payment-method
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        quotePaymentMethodManagementV1GetGet: async (options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/V1/carts/mine/selected-payment-method`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Adds a specified payment method to a specified shopping cart.
         * @summary carts/mine/selected-payment-method
         * @param {QuotePaymentMethodManagementV1SetPutRequest} [quotePaymentMethodManagementV1SetPutBody] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        quotePaymentMethodManagementV1SetPut: async (quotePaymentMethodManagementV1SetPutBody?: QuotePaymentMethodManagementV1SetPutRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/V1/carts/mine/selected-payment-method`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(quotePaymentMethodManagementV1SetPutBody, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * CartsMineSelectedPaymentMethodApi - functional programming interface
 * @export
 */
export const CartsMineSelectedPaymentMethodApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = CartsMineSelectedPaymentMethodApiAxiosParamCreator(configuration)
    return {
        /**
         * Returns the payment method for a specified shopping cart.
         * @summary carts/mine/selected-payment-method
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async quotePaymentMethodManagementV1GetGet(options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<QuoteDataPaymentInterface>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.quotePaymentMethodManagementV1GetGet(options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Adds a specified payment method to a specified shopping cart.
         * @summary carts/mine/selected-payment-method
         * @param {QuotePaymentMethodManagementV1SetPutRequest} [quotePaymentMethodManagementV1SetPutBody] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async quotePaymentMethodManagementV1SetPut(quotePaymentMethodManagementV1SetPutBody?: QuotePaymentMethodManagementV1SetPutRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<string>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.quotePaymentMethodManagementV1SetPut(quotePaymentMethodManagementV1SetPutBody, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * CartsMineSelectedPaymentMethodApi - factory interface
 * @export
 */
export const CartsMineSelectedPaymentMethodApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = CartsMineSelectedPaymentMethodApiFp(configuration)
    return {
        /**
         * Returns the payment method for a specified shopping cart.
         * @summary carts/mine/selected-payment-method
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        quotePaymentMethodManagementV1GetGet(options?: any): AxiosPromise<QuoteDataPaymentInterface> {
            return localVarFp.quotePaymentMethodManagementV1GetGet(options).then((request) => request(axios, basePath));
        },
        /**
         * Adds a specified payment method to a specified shopping cart.
         * @summary carts/mine/selected-payment-method
         * @param {QuotePaymentMethodManagementV1SetPutRequest} [quotePaymentMethodManagementV1SetPutBody] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        quotePaymentMethodManagementV1SetPut(quotePaymentMethodManagementV1SetPutBody?: QuotePaymentMethodManagementV1SetPutRequest, options?: any): AxiosPromise<string> {
            return localVarFp.quotePaymentMethodManagementV1SetPut(quotePaymentMethodManagementV1SetPutBody, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * CartsMineSelectedPaymentMethodApi - object-oriented interface
 * @export
 * @class CartsMineSelectedPaymentMethodApi
 * @extends {BaseAPI}
 */
export class CartsMineSelectedPaymentMethodApi extends BaseAPI {
    /**
     * Returns the payment method for a specified shopping cart.
     * @summary carts/mine/selected-payment-method
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CartsMineSelectedPaymentMethodApi
     */
    public quotePaymentMethodManagementV1GetGet(options?: AxiosRequestConfig) {
        return CartsMineSelectedPaymentMethodApiFp(this.configuration).quotePaymentMethodManagementV1GetGet(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Adds a specified payment method to a specified shopping cart.
     * @summary carts/mine/selected-payment-method
     * @param {QuotePaymentMethodManagementV1SetPutRequest} [quotePaymentMethodManagementV1SetPutBody] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CartsMineSelectedPaymentMethodApi
     */
    public quotePaymentMethodManagementV1SetPut(quotePaymentMethodManagementV1SetPutBody?: QuotePaymentMethodManagementV1SetPutRequest, options?: AxiosRequestConfig) {
        return CartsMineSelectedPaymentMethodApiFp(this.configuration).quotePaymentMethodManagementV1SetPut(quotePaymentMethodManagementV1SetPutBody, options).then((request) => request(this.axios, this.basePath));
    }
}


/**
 * CartsMineSetPaymentInformationApi - axios parameter creator
 * @export
 */
export const CartsMineSetPaymentInformationApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Set payment information for a specified cart.
         * @summary carts/mine/set-payment-information
         * @param {CheckoutPaymentInformationManagementV1SavePaymentInformationAndPlaceOrderPostRequest} [checkoutPaymentInformationManagementV1SavePaymentInformationPostBody] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        checkoutPaymentInformationManagementV1SavePaymentInformationPost: async (checkoutPaymentInformationManagementV1SavePaymentInformationPostBody?: CheckoutPaymentInformationManagementV1SavePaymentInformationAndPlaceOrderPostRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/V1/carts/mine/set-payment-information`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(checkoutPaymentInformationManagementV1SavePaymentInformationPostBody, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * CartsMineSetPaymentInformationApi - functional programming interface
 * @export
 */
export const CartsMineSetPaymentInformationApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = CartsMineSetPaymentInformationApiAxiosParamCreator(configuration)
    return {
        /**
         * Set payment information for a specified cart.
         * @summary carts/mine/set-payment-information
         * @param {CheckoutPaymentInformationManagementV1SavePaymentInformationAndPlaceOrderPostRequest} [checkoutPaymentInformationManagementV1SavePaymentInformationPostBody] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async checkoutPaymentInformationManagementV1SavePaymentInformationPost(checkoutPaymentInformationManagementV1SavePaymentInformationPostBody?: CheckoutPaymentInformationManagementV1SavePaymentInformationAndPlaceOrderPostRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<number>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.checkoutPaymentInformationManagementV1SavePaymentInformationPost(checkoutPaymentInformationManagementV1SavePaymentInformationPostBody, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * CartsMineSetPaymentInformationApi - factory interface
 * @export
 */
export const CartsMineSetPaymentInformationApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = CartsMineSetPaymentInformationApiFp(configuration)
    return {
        /**
         * Set payment information for a specified cart.
         * @summary carts/mine/set-payment-information
         * @param {CheckoutPaymentInformationManagementV1SavePaymentInformationAndPlaceOrderPostRequest} [checkoutPaymentInformationManagementV1SavePaymentInformationPostBody] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        checkoutPaymentInformationManagementV1SavePaymentInformationPost(checkoutPaymentInformationManagementV1SavePaymentInformationPostBody?: CheckoutPaymentInformationManagementV1SavePaymentInformationAndPlaceOrderPostRequest, options?: any): AxiosPromise<number> {
            return localVarFp.checkoutPaymentInformationManagementV1SavePaymentInformationPost(checkoutPaymentInformationManagementV1SavePaymentInformationPostBody, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * CartsMineSetPaymentInformationApi - object-oriented interface
 * @export
 * @class CartsMineSetPaymentInformationApi
 * @extends {BaseAPI}
 */
export class CartsMineSetPaymentInformationApi extends BaseAPI {
    /**
     * Set payment information for a specified cart.
     * @summary carts/mine/set-payment-information
     * @param {CheckoutPaymentInformationManagementV1SavePaymentInformationAndPlaceOrderPostRequest} [checkoutPaymentInformationManagementV1SavePaymentInformationPostBody] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CartsMineSetPaymentInformationApi
     */
    public checkoutPaymentInformationManagementV1SavePaymentInformationPost(checkoutPaymentInformationManagementV1SavePaymentInformationPostBody?: CheckoutPaymentInformationManagementV1SavePaymentInformationAndPlaceOrderPostRequest, options?: AxiosRequestConfig) {
        return CartsMineSetPaymentInformationApiFp(this.configuration).checkoutPaymentInformationManagementV1SavePaymentInformationPost(checkoutPaymentInformationManagementV1SavePaymentInformationPostBody, options).then((request) => request(this.axios, this.basePath));
    }
}


/**
 * CartsMineShippingInformationApi - axios parameter creator
 * @export
 */
export const CartsMineShippingInformationApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary carts/mine/shipping-information
         * @param {CheckoutShippingInformationManagementV1SaveAddressInformationPostRequest} [checkoutShippingInformationManagementV1SaveAddressInformationPostBody] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        checkoutShippingInformationManagementV1SaveAddressInformationPost: async (checkoutShippingInformationManagementV1SaveAddressInformationPostBody?: CheckoutShippingInformationManagementV1SaveAddressInformationPostRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/V1/carts/mine/shipping-information`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(checkoutShippingInformationManagementV1SaveAddressInformationPostBody, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * CartsMineShippingInformationApi - functional programming interface
 * @export
 */
export const CartsMineShippingInformationApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = CartsMineShippingInformationApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @summary carts/mine/shipping-information
         * @param {CheckoutShippingInformationManagementV1SaveAddressInformationPostRequest} [checkoutShippingInformationManagementV1SaveAddressInformationPostBody] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async checkoutShippingInformationManagementV1SaveAddressInformationPost(checkoutShippingInformationManagementV1SaveAddressInformationPostBody?: CheckoutShippingInformationManagementV1SaveAddressInformationPostRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<CheckoutDataPaymentDetailsInterface>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.checkoutShippingInformationManagementV1SaveAddressInformationPost(checkoutShippingInformationManagementV1SaveAddressInformationPostBody, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * CartsMineShippingInformationApi - factory interface
 * @export
 */
export const CartsMineShippingInformationApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = CartsMineShippingInformationApiFp(configuration)
    return {
        /**
         * 
         * @summary carts/mine/shipping-information
         * @param {CheckoutShippingInformationManagementV1SaveAddressInformationPostRequest} [checkoutShippingInformationManagementV1SaveAddressInformationPostBody] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        checkoutShippingInformationManagementV1SaveAddressInformationPost(checkoutShippingInformationManagementV1SaveAddressInformationPostBody?: CheckoutShippingInformationManagementV1SaveAddressInformationPostRequest, options?: any): AxiosPromise<CheckoutDataPaymentDetailsInterface> {
            return localVarFp.checkoutShippingInformationManagementV1SaveAddressInformationPost(checkoutShippingInformationManagementV1SaveAddressInformationPostBody, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * CartsMineShippingInformationApi - object-oriented interface
 * @export
 * @class CartsMineShippingInformationApi
 * @extends {BaseAPI}
 */
export class CartsMineShippingInformationApi extends BaseAPI {
    /**
     * 
     * @summary carts/mine/shipping-information
     * @param {CheckoutShippingInformationManagementV1SaveAddressInformationPostRequest} [checkoutShippingInformationManagementV1SaveAddressInformationPostBody] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CartsMineShippingInformationApi
     */
    public checkoutShippingInformationManagementV1SaveAddressInformationPost(checkoutShippingInformationManagementV1SaveAddressInformationPostBody?: CheckoutShippingInformationManagementV1SaveAddressInformationPostRequest, options?: AxiosRequestConfig) {
        return CartsMineShippingInformationApiFp(this.configuration).checkoutShippingInformationManagementV1SaveAddressInformationPost(checkoutShippingInformationManagementV1SaveAddressInformationPostBody, options).then((request) => request(this.axios, this.basePath));
    }
}


/**
 * CartsMineShippingMethodsApi - axios parameter creator
 * @export
 */
export const CartsMineShippingMethodsApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Lists applicable shipping methods for a specified quote.
         * @summary carts/mine/shipping-methods
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        quoteShippingMethodManagementV1GetListGet: async (options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/V1/carts/mine/shipping-methods`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * CartsMineShippingMethodsApi - functional programming interface
 * @export
 */
export const CartsMineShippingMethodsApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = CartsMineShippingMethodsApiAxiosParamCreator(configuration)
    return {
        /**
         * Lists applicable shipping methods for a specified quote.
         * @summary carts/mine/shipping-methods
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async quoteShippingMethodManagementV1GetListGet(options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<QuoteDataShippingMethodInterface>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.quoteShippingMethodManagementV1GetListGet(options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * CartsMineShippingMethodsApi - factory interface
 * @export
 */
export const CartsMineShippingMethodsApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = CartsMineShippingMethodsApiFp(configuration)
    return {
        /**
         * Lists applicable shipping methods for a specified quote.
         * @summary carts/mine/shipping-methods
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        quoteShippingMethodManagementV1GetListGet(options?: any): AxiosPromise<Array<QuoteDataShippingMethodInterface>> {
            return localVarFp.quoteShippingMethodManagementV1GetListGet(options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * CartsMineShippingMethodsApi - object-oriented interface
 * @export
 * @class CartsMineShippingMethodsApi
 * @extends {BaseAPI}
 */
export class CartsMineShippingMethodsApi extends BaseAPI {
    /**
     * Lists applicable shipping methods for a specified quote.
     * @summary carts/mine/shipping-methods
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CartsMineShippingMethodsApi
     */
    public quoteShippingMethodManagementV1GetListGet(options?: AxiosRequestConfig) {
        return CartsMineShippingMethodsApiFp(this.configuration).quoteShippingMethodManagementV1GetListGet(options).then((request) => request(this.axios, this.basePath));
    }
}


/**
 * CartsMineTotalsApi - axios parameter creator
 * @export
 */
export const CartsMineTotalsApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Returns quote totals data for a specified cart.
         * @summary carts/mine/totals
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        quoteCartTotalRepositoryV1GetGet: async (options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/V1/carts/mine/totals`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * CartsMineTotalsApi - functional programming interface
 * @export
 */
export const CartsMineTotalsApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = CartsMineTotalsApiAxiosParamCreator(configuration)
    return {
        /**
         * Returns quote totals data for a specified cart.
         * @summary carts/mine/totals
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async quoteCartTotalRepositoryV1GetGet(options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<QuoteDataTotalsInterface>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.quoteCartTotalRepositoryV1GetGet(options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * CartsMineTotalsApi - factory interface
 * @export
 */
export const CartsMineTotalsApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = CartsMineTotalsApiFp(configuration)
    return {
        /**
         * Returns quote totals data for a specified cart.
         * @summary carts/mine/totals
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        quoteCartTotalRepositoryV1GetGet(options?: any): AxiosPromise<QuoteDataTotalsInterface> {
            return localVarFp.quoteCartTotalRepositoryV1GetGet(options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * CartsMineTotalsApi - object-oriented interface
 * @export
 * @class CartsMineTotalsApi
 * @extends {BaseAPI}
 */
export class CartsMineTotalsApi extends BaseAPI {
    /**
     * Returns quote totals data for a specified cart.
     * @summary carts/mine/totals
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CartsMineTotalsApi
     */
    public quoteCartTotalRepositoryV1GetGet(options?: AxiosRequestConfig) {
        return CartsMineTotalsApiFp(this.configuration).quoteCartTotalRepositoryV1GetGet(options).then((request) => request(this.axios, this.basePath));
    }
}


/**
 * CartsMineTotalsInformationApi - axios parameter creator
 * @export
 */
export const CartsMineTotalsInformationApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Calculate quote totals based on address and shipping method.
         * @summary carts/mine/totals-information
         * @param {CheckoutTotalsInformationManagementV1CalculatePostRequest} [checkoutTotalsInformationManagementV1CalculatePostBody] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        checkoutTotalsInformationManagementV1CalculatePost: async (checkoutTotalsInformationManagementV1CalculatePostBody?: CheckoutTotalsInformationManagementV1CalculatePostRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/V1/carts/mine/totals-information`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(checkoutTotalsInformationManagementV1CalculatePostBody, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * CartsMineTotalsInformationApi - functional programming interface
 * @export
 */
export const CartsMineTotalsInformationApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = CartsMineTotalsInformationApiAxiosParamCreator(configuration)
    return {
        /**
         * Calculate quote totals based on address and shipping method.
         * @summary carts/mine/totals-information
         * @param {CheckoutTotalsInformationManagementV1CalculatePostRequest} [checkoutTotalsInformationManagementV1CalculatePostBody] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async checkoutTotalsInformationManagementV1CalculatePost(checkoutTotalsInformationManagementV1CalculatePostBody?: CheckoutTotalsInformationManagementV1CalculatePostRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<QuoteDataTotalsInterface>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.checkoutTotalsInformationManagementV1CalculatePost(checkoutTotalsInformationManagementV1CalculatePostBody, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * CartsMineTotalsInformationApi - factory interface
 * @export
 */
export const CartsMineTotalsInformationApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = CartsMineTotalsInformationApiFp(configuration)
    return {
        /**
         * Calculate quote totals based on address and shipping method.
         * @summary carts/mine/totals-information
         * @param {CheckoutTotalsInformationManagementV1CalculatePostRequest} [checkoutTotalsInformationManagementV1CalculatePostBody] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        checkoutTotalsInformationManagementV1CalculatePost(checkoutTotalsInformationManagementV1CalculatePostBody?: CheckoutTotalsInformationManagementV1CalculatePostRequest, options?: any): AxiosPromise<QuoteDataTotalsInterface> {
            return localVarFp.checkoutTotalsInformationManagementV1CalculatePost(checkoutTotalsInformationManagementV1CalculatePostBody, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * CartsMineTotalsInformationApi - object-oriented interface
 * @export
 * @class CartsMineTotalsInformationApi
 * @extends {BaseAPI}
 */
export class CartsMineTotalsInformationApi extends BaseAPI {
    /**
     * Calculate quote totals based on address and shipping method.
     * @summary carts/mine/totals-information
     * @param {CheckoutTotalsInformationManagementV1CalculatePostRequest} [checkoutTotalsInformationManagementV1CalculatePostBody] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CartsMineTotalsInformationApi
     */
    public checkoutTotalsInformationManagementV1CalculatePost(checkoutTotalsInformationManagementV1CalculatePostBody?: CheckoutTotalsInformationManagementV1CalculatePostRequest, options?: AxiosRequestConfig) {
        return CartsMineTotalsInformationApiFp(this.configuration).checkoutTotalsInformationManagementV1CalculatePost(checkoutTotalsInformationManagementV1CalculatePostBody, options).then((request) => request(this.axios, this.basePath));
    }
}


/**
 * CartsQuoteIdGiftCardsApi - axios parameter creator
 * @export
 */
export const CartsQuoteIdGiftCardsApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Return GiftCard Account cards
         * @summary carts/{quoteId}/giftCards
         * @param {number} quoteId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        giftCardAccountGiftCardAccountManagementV1GetListByQuoteIdGet: async (quoteId: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'quoteId' is not null or undefined
            assertParamExists('giftCardAccountGiftCardAccountManagementV1GetListByQuoteIdGet', 'quoteId', quoteId)
            const localVarPath = `/V1/carts/{quoteId}/giftCards`
                .replace(`{${"quoteId"}}`, encodeURIComponent(String(quoteId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * CartsQuoteIdGiftCardsApi - functional programming interface
 * @export
 */
export const CartsQuoteIdGiftCardsApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = CartsQuoteIdGiftCardsApiAxiosParamCreator(configuration)
    return {
        /**
         * Return GiftCard Account cards
         * @summary carts/{quoteId}/giftCards
         * @param {number} quoteId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async giftCardAccountGiftCardAccountManagementV1GetListByQuoteIdGet(quoteId: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<GiftCardAccountDataGiftCardAccountInterface>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.giftCardAccountGiftCardAccountManagementV1GetListByQuoteIdGet(quoteId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * CartsQuoteIdGiftCardsApi - factory interface
 * @export
 */
export const CartsQuoteIdGiftCardsApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = CartsQuoteIdGiftCardsApiFp(configuration)
    return {
        /**
         * Return GiftCard Account cards
         * @summary carts/{quoteId}/giftCards
         * @param {number} quoteId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        giftCardAccountGiftCardAccountManagementV1GetListByQuoteIdGet(quoteId: number, options?: any): AxiosPromise<GiftCardAccountDataGiftCardAccountInterface> {
            return localVarFp.giftCardAccountGiftCardAccountManagementV1GetListByQuoteIdGet(quoteId, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * CartsQuoteIdGiftCardsApi - object-oriented interface
 * @export
 * @class CartsQuoteIdGiftCardsApi
 * @extends {BaseAPI}
 */
export class CartsQuoteIdGiftCardsApi extends BaseAPI {
    /**
     * Return GiftCard Account cards
     * @summary carts/{quoteId}/giftCards
     * @param {number} quoteId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CartsQuoteIdGiftCardsApi
     */
    public giftCardAccountGiftCardAccountManagementV1GetListByQuoteIdGet(quoteId: number, options?: AxiosRequestConfig) {
        return CartsQuoteIdGiftCardsApiFp(this.configuration).giftCardAccountGiftCardAccountManagementV1GetListByQuoteIdGet(quoteId, options).then((request) => request(this.axios, this.basePath));
    }
}


/**
 * CartsQuoteIdItemsApi - axios parameter creator
 * @export
 */
export const CartsQuoteIdItemsApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Add/update the specified cart item.
         * @summary carts/{quoteId}/items
         * @param {string} quoteId 
         * @param {QuoteCartItemRepositoryV1SavePostRequest} [quoteCartItemRepositoryV1SavePostBody] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        quoteCartItemRepositoryV1SavePost: async (quoteId: string, quoteCartItemRepositoryV1SavePostBody?: QuoteCartItemRepositoryV1SavePostRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'quoteId' is not null or undefined
            assertParamExists('quoteCartItemRepositoryV1SavePost', 'quoteId', quoteId)
            const localVarPath = `/V1/carts/{quoteId}/items`
                .replace(`{${"quoteId"}}`, encodeURIComponent(String(quoteId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(quoteCartItemRepositoryV1SavePostBody, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * CartsQuoteIdItemsApi - functional programming interface
 * @export
 */
export const CartsQuoteIdItemsApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = CartsQuoteIdItemsApiAxiosParamCreator(configuration)
    return {
        /**
         * Add/update the specified cart item.
         * @summary carts/{quoteId}/items
         * @param {string} quoteId 
         * @param {QuoteCartItemRepositoryV1SavePostRequest} [quoteCartItemRepositoryV1SavePostBody] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async quoteCartItemRepositoryV1SavePost(quoteId: string, quoteCartItemRepositoryV1SavePostBody?: QuoteCartItemRepositoryV1SavePostRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<QuoteDataCartItemInterface>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.quoteCartItemRepositoryV1SavePost(quoteId, quoteCartItemRepositoryV1SavePostBody, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * CartsQuoteIdItemsApi - factory interface
 * @export
 */
export const CartsQuoteIdItemsApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = CartsQuoteIdItemsApiFp(configuration)
    return {
        /**
         * Add/update the specified cart item.
         * @summary carts/{quoteId}/items
         * @param {string} quoteId 
         * @param {QuoteCartItemRepositoryV1SavePostRequest} [quoteCartItemRepositoryV1SavePostBody] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        quoteCartItemRepositoryV1SavePost(quoteId: string, quoteCartItemRepositoryV1SavePostBody?: QuoteCartItemRepositoryV1SavePostRequest, options?: any): AxiosPromise<QuoteDataCartItemInterface> {
            return localVarFp.quoteCartItemRepositoryV1SavePost(quoteId, quoteCartItemRepositoryV1SavePostBody, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * CartsQuoteIdItemsApi - object-oriented interface
 * @export
 * @class CartsQuoteIdItemsApi
 * @extends {BaseAPI}
 */
export class CartsQuoteIdItemsApi extends BaseAPI {
    /**
     * Add/update the specified cart item.
     * @summary carts/{quoteId}/items
     * @param {string} quoteId 
     * @param {QuoteCartItemRepositoryV1SavePostRequest} [quoteCartItemRepositoryV1SavePostBody] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CartsQuoteIdItemsApi
     */
    public quoteCartItemRepositoryV1SavePost(quoteId: string, quoteCartItemRepositoryV1SavePostBody?: QuoteCartItemRepositoryV1SavePostRequest, options?: AxiosRequestConfig) {
        return CartsQuoteIdItemsApiFp(this.configuration).quoteCartItemRepositoryV1SavePost(quoteId, quoteCartItemRepositoryV1SavePostBody, options).then((request) => request(this.axios, this.basePath));
    }
}


/**
 * CartsSearchApi - axios parameter creator
 * @export
 */
export const CartsSearchApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Enables administrative users to list carts that match specified search criteria. This call returns an array of objects, but detailed information about each object’s attributes might not be included.  See http://devdocs.magento.com/codelinks/attributes.html#CartRepositoryInterface to determine which call to use to get detailed information about all attributes for an object.
         * @summary carts/search
         * @param {string} [searchCriteriaFilterGroups0Filters0Field] Field
         * @param {string} [searchCriteriaFilterGroups0Filters0Value] Value
         * @param {string} [searchCriteriaFilterGroups0Filters0ConditionType] Condition type
         * @param {string} [searchCriteriaSortOrders0Field] Sorting field.
         * @param {string} [searchCriteriaSortOrders0Direction] Sorting direction.
         * @param {number} [searchCriteriaPageSize] Page size.
         * @param {number} [searchCriteriaCurrentPage] Current page.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        quoteCartRepositoryV1GetListGet: async (searchCriteriaFilterGroups0Filters0Field?: string, searchCriteriaFilterGroups0Filters0Value?: string, searchCriteriaFilterGroups0Filters0ConditionType?: string, searchCriteriaSortOrders0Field?: string, searchCriteriaSortOrders0Direction?: string, searchCriteriaPageSize?: number, searchCriteriaCurrentPage?: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/V1/carts/search`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (searchCriteriaFilterGroups0Filters0Field !== undefined) {
                localVarQueryParameter['searchCriteria[filterGroups][0][filters][0][field]'] = searchCriteriaFilterGroups0Filters0Field;
            }

            if (searchCriteriaFilterGroups0Filters0Value !== undefined) {
                localVarQueryParameter['searchCriteria[filterGroups][0][filters][0][value]'] = searchCriteriaFilterGroups0Filters0Value;
            }

            if (searchCriteriaFilterGroups0Filters0ConditionType !== undefined) {
                localVarQueryParameter['searchCriteria[filterGroups][0][filters][0][conditionType]'] = searchCriteriaFilterGroups0Filters0ConditionType;
            }

            if (searchCriteriaSortOrders0Field !== undefined) {
                localVarQueryParameter['searchCriteria[sortOrders][0][field]'] = searchCriteriaSortOrders0Field;
            }

            if (searchCriteriaSortOrders0Direction !== undefined) {
                localVarQueryParameter['searchCriteria[sortOrders][0][direction]'] = searchCriteriaSortOrders0Direction;
            }

            if (searchCriteriaPageSize !== undefined) {
                localVarQueryParameter['searchCriteria[pageSize]'] = searchCriteriaPageSize;
            }

            if (searchCriteriaCurrentPage !== undefined) {
                localVarQueryParameter['searchCriteria[currentPage]'] = searchCriteriaCurrentPage;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * CartsSearchApi - functional programming interface
 * @export
 */
export const CartsSearchApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = CartsSearchApiAxiosParamCreator(configuration)
    return {
        /**
         * Enables administrative users to list carts that match specified search criteria. This call returns an array of objects, but detailed information about each object’s attributes might not be included.  See http://devdocs.magento.com/codelinks/attributes.html#CartRepositoryInterface to determine which call to use to get detailed information about all attributes for an object.
         * @summary carts/search
         * @param {string} [searchCriteriaFilterGroups0Filters0Field] Field
         * @param {string} [searchCriteriaFilterGroups0Filters0Value] Value
         * @param {string} [searchCriteriaFilterGroups0Filters0ConditionType] Condition type
         * @param {string} [searchCriteriaSortOrders0Field] Sorting field.
         * @param {string} [searchCriteriaSortOrders0Direction] Sorting direction.
         * @param {number} [searchCriteriaPageSize] Page size.
         * @param {number} [searchCriteriaCurrentPage] Current page.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async quoteCartRepositoryV1GetListGet(searchCriteriaFilterGroups0Filters0Field?: string, searchCriteriaFilterGroups0Filters0Value?: string, searchCriteriaFilterGroups0Filters0ConditionType?: string, searchCriteriaSortOrders0Field?: string, searchCriteriaSortOrders0Direction?: string, searchCriteriaPageSize?: number, searchCriteriaCurrentPage?: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<QuoteDataCartSearchResultsInterface>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.quoteCartRepositoryV1GetListGet(searchCriteriaFilterGroups0Filters0Field, searchCriteriaFilterGroups0Filters0Value, searchCriteriaFilterGroups0Filters0ConditionType, searchCriteriaSortOrders0Field, searchCriteriaSortOrders0Direction, searchCriteriaPageSize, searchCriteriaCurrentPage, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * CartsSearchApi - factory interface
 * @export
 */
export const CartsSearchApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = CartsSearchApiFp(configuration)
    return {
        /**
         * Enables administrative users to list carts that match specified search criteria. This call returns an array of objects, but detailed information about each object’s attributes might not be included.  See http://devdocs.magento.com/codelinks/attributes.html#CartRepositoryInterface to determine which call to use to get detailed information about all attributes for an object.
         * @summary carts/search
         * @param {string} [searchCriteriaFilterGroups0Filters0Field] Field
         * @param {string} [searchCriteriaFilterGroups0Filters0Value] Value
         * @param {string} [searchCriteriaFilterGroups0Filters0ConditionType] Condition type
         * @param {string} [searchCriteriaSortOrders0Field] Sorting field.
         * @param {string} [searchCriteriaSortOrders0Direction] Sorting direction.
         * @param {number} [searchCriteriaPageSize] Page size.
         * @param {number} [searchCriteriaCurrentPage] Current page.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        quoteCartRepositoryV1GetListGet(searchCriteriaFilterGroups0Filters0Field?: string, searchCriteriaFilterGroups0Filters0Value?: string, searchCriteriaFilterGroups0Filters0ConditionType?: string, searchCriteriaSortOrders0Field?: string, searchCriteriaSortOrders0Direction?: string, searchCriteriaPageSize?: number, searchCriteriaCurrentPage?: number, options?: any): AxiosPromise<QuoteDataCartSearchResultsInterface> {
            return localVarFp.quoteCartRepositoryV1GetListGet(searchCriteriaFilterGroups0Filters0Field, searchCriteriaFilterGroups0Filters0Value, searchCriteriaFilterGroups0Filters0ConditionType, searchCriteriaSortOrders0Field, searchCriteriaSortOrders0Direction, searchCriteriaPageSize, searchCriteriaCurrentPage, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * CartsSearchApi - object-oriented interface
 * @export
 * @class CartsSearchApi
 * @extends {BaseAPI}
 */
export class CartsSearchApi extends BaseAPI {
    /**
     * Enables administrative users to list carts that match specified search criteria. This call returns an array of objects, but detailed information about each object’s attributes might not be included.  See http://devdocs.magento.com/codelinks/attributes.html#CartRepositoryInterface to determine which call to use to get detailed information about all attributes for an object.
     * @summary carts/search
     * @param {string} [searchCriteriaFilterGroups0Filters0Field] Field
     * @param {string} [searchCriteriaFilterGroups0Filters0Value] Value
     * @param {string} [searchCriteriaFilterGroups0Filters0ConditionType] Condition type
     * @param {string} [searchCriteriaSortOrders0Field] Sorting field.
     * @param {string} [searchCriteriaSortOrders0Direction] Sorting direction.
     * @param {number} [searchCriteriaPageSize] Page size.
     * @param {number} [searchCriteriaCurrentPage] Current page.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CartsSearchApi
     */
    public quoteCartRepositoryV1GetListGet(searchCriteriaFilterGroups0Filters0Field?: string, searchCriteriaFilterGroups0Filters0Value?: string, searchCriteriaFilterGroups0Filters0ConditionType?: string, searchCriteriaSortOrders0Field?: string, searchCriteriaSortOrders0Direction?: string, searchCriteriaPageSize?: number, searchCriteriaCurrentPage?: number, options?: AxiosRequestConfig) {
        return CartsSearchApiFp(this.configuration).quoteCartRepositoryV1GetListGet(searchCriteriaFilterGroups0Filters0Field, searchCriteriaFilterGroups0Filters0Value, searchCriteriaFilterGroups0Filters0ConditionType, searchCriteriaSortOrders0Field, searchCriteriaSortOrders0Direction, searchCriteriaPageSize, searchCriteriaCurrentPage, options).then((request) => request(this.axios, this.basePath));
    }
}


/**
 * CategoriesApi - axios parameter creator
 * @export
 */
export const CategoriesApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Retrieve list of categories
         * @summary categories
         * @param {number} [rootCategoryId] 
         * @param {number} [depth] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        catalogCategoryManagementV1GetTreeGet: async (rootCategoryId?: number, depth?: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/V1/categories`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (rootCategoryId !== undefined) {
                localVarQueryParameter['rootCategoryId'] = rootCategoryId;
            }

            if (depth !== undefined) {
                localVarQueryParameter['depth'] = depth;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Create category service
         * @summary categories
         * @param {CatalogCategoryRepositoryV1SavePostRequest} [catalogCategoryRepositoryV1SavePostBody] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        catalogCategoryRepositoryV1SavePost: async (catalogCategoryRepositoryV1SavePostBody?: CatalogCategoryRepositoryV1SavePostRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/V1/categories`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(catalogCategoryRepositoryV1SavePostBody, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * CategoriesApi - functional programming interface
 * @export
 */
export const CategoriesApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = CategoriesApiAxiosParamCreator(configuration)
    return {
        /**
         * Retrieve list of categories
         * @summary categories
         * @param {number} [rootCategoryId] 
         * @param {number} [depth] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async catalogCategoryManagementV1GetTreeGet(rootCategoryId?: number, depth?: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<CatalogDataCategoryTreeInterface>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.catalogCategoryManagementV1GetTreeGet(rootCategoryId, depth, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Create category service
         * @summary categories
         * @param {CatalogCategoryRepositoryV1SavePostRequest} [catalogCategoryRepositoryV1SavePostBody] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async catalogCategoryRepositoryV1SavePost(catalogCategoryRepositoryV1SavePostBody?: CatalogCategoryRepositoryV1SavePostRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<CatalogDataCategoryInterface>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.catalogCategoryRepositoryV1SavePost(catalogCategoryRepositoryV1SavePostBody, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * CategoriesApi - factory interface
 * @export
 */
export const CategoriesApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = CategoriesApiFp(configuration)
    return {
        /**
         * Retrieve list of categories
         * @summary categories
         * @param {number} [rootCategoryId] 
         * @param {number} [depth] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        catalogCategoryManagementV1GetTreeGet(rootCategoryId?: number, depth?: number, options?: any): AxiosPromise<CatalogDataCategoryTreeInterface> {
            return localVarFp.catalogCategoryManagementV1GetTreeGet(rootCategoryId, depth, options).then((request) => request(axios, basePath));
        },
        /**
         * Create category service
         * @summary categories
         * @param {CatalogCategoryRepositoryV1SavePostRequest} [catalogCategoryRepositoryV1SavePostBody] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        catalogCategoryRepositoryV1SavePost(catalogCategoryRepositoryV1SavePostBody?: CatalogCategoryRepositoryV1SavePostRequest, options?: any): AxiosPromise<CatalogDataCategoryInterface> {
            return localVarFp.catalogCategoryRepositoryV1SavePost(catalogCategoryRepositoryV1SavePostBody, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * CategoriesApi - object-oriented interface
 * @export
 * @class CategoriesApi
 * @extends {BaseAPI}
 */
export class CategoriesApi extends BaseAPI {
    /**
     * Retrieve list of categories
     * @summary categories
     * @param {number} [rootCategoryId] 
     * @param {number} [depth] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CategoriesApi
     */
    public catalogCategoryManagementV1GetTreeGet(rootCategoryId?: number, depth?: number, options?: AxiosRequestConfig) {
        return CategoriesApiFp(this.configuration).catalogCategoryManagementV1GetTreeGet(rootCategoryId, depth, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Create category service
     * @summary categories
     * @param {CatalogCategoryRepositoryV1SavePostRequest} [catalogCategoryRepositoryV1SavePostBody] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CategoriesApi
     */
    public catalogCategoryRepositoryV1SavePost(catalogCategoryRepositoryV1SavePostBody?: CatalogCategoryRepositoryV1SavePostRequest, options?: AxiosRequestConfig) {
        return CategoriesApiFp(this.configuration).catalogCategoryRepositoryV1SavePost(catalogCategoryRepositoryV1SavePostBody, options).then((request) => request(this.axios, this.basePath));
    }
}


/**
 * CategoriesAttributesApi - axios parameter creator
 * @export
 */
export const CategoriesAttributesApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Retrieve all attributes for entity type
         * @summary categories/attributes
         * @param {string} [searchCriteriaFilterGroups0Filters0Field] Field
         * @param {string} [searchCriteriaFilterGroups0Filters0Value] Value
         * @param {string} [searchCriteriaFilterGroups0Filters0ConditionType] Condition type
         * @param {string} [searchCriteriaSortOrders0Field] Sorting field.
         * @param {string} [searchCriteriaSortOrders0Direction] Sorting direction.
         * @param {number} [searchCriteriaPageSize] Page size.
         * @param {number} [searchCriteriaCurrentPage] Current page.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        catalogCategoryAttributeRepositoryV1GetListGet: async (searchCriteriaFilterGroups0Filters0Field?: string, searchCriteriaFilterGroups0Filters0Value?: string, searchCriteriaFilterGroups0Filters0ConditionType?: string, searchCriteriaSortOrders0Field?: string, searchCriteriaSortOrders0Direction?: string, searchCriteriaPageSize?: number, searchCriteriaCurrentPage?: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/V1/categories/attributes`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (searchCriteriaFilterGroups0Filters0Field !== undefined) {
                localVarQueryParameter['searchCriteria[filterGroups][0][filters][0][field]'] = searchCriteriaFilterGroups0Filters0Field;
            }

            if (searchCriteriaFilterGroups0Filters0Value !== undefined) {
                localVarQueryParameter['searchCriteria[filterGroups][0][filters][0][value]'] = searchCriteriaFilterGroups0Filters0Value;
            }

            if (searchCriteriaFilterGroups0Filters0ConditionType !== undefined) {
                localVarQueryParameter['searchCriteria[filterGroups][0][filters][0][conditionType]'] = searchCriteriaFilterGroups0Filters0ConditionType;
            }

            if (searchCriteriaSortOrders0Field !== undefined) {
                localVarQueryParameter['searchCriteria[sortOrders][0][field]'] = searchCriteriaSortOrders0Field;
            }

            if (searchCriteriaSortOrders0Direction !== undefined) {
                localVarQueryParameter['searchCriteria[sortOrders][0][direction]'] = searchCriteriaSortOrders0Direction;
            }

            if (searchCriteriaPageSize !== undefined) {
                localVarQueryParameter['searchCriteria[pageSize]'] = searchCriteriaPageSize;
            }

            if (searchCriteriaCurrentPage !== undefined) {
                localVarQueryParameter['searchCriteria[currentPage]'] = searchCriteriaCurrentPage;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * CategoriesAttributesApi - functional programming interface
 * @export
 */
export const CategoriesAttributesApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = CategoriesAttributesApiAxiosParamCreator(configuration)
    return {
        /**
         * Retrieve all attributes for entity type
         * @summary categories/attributes
         * @param {string} [searchCriteriaFilterGroups0Filters0Field] Field
         * @param {string} [searchCriteriaFilterGroups0Filters0Value] Value
         * @param {string} [searchCriteriaFilterGroups0Filters0ConditionType] Condition type
         * @param {string} [searchCriteriaSortOrders0Field] Sorting field.
         * @param {string} [searchCriteriaSortOrders0Direction] Sorting direction.
         * @param {number} [searchCriteriaPageSize] Page size.
         * @param {number} [searchCriteriaCurrentPage] Current page.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async catalogCategoryAttributeRepositoryV1GetListGet(searchCriteriaFilterGroups0Filters0Field?: string, searchCriteriaFilterGroups0Filters0Value?: string, searchCriteriaFilterGroups0Filters0ConditionType?: string, searchCriteriaSortOrders0Field?: string, searchCriteriaSortOrders0Direction?: string, searchCriteriaPageSize?: number, searchCriteriaCurrentPage?: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<CatalogDataCategoryAttributeSearchResultsInterface>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.catalogCategoryAttributeRepositoryV1GetListGet(searchCriteriaFilterGroups0Filters0Field, searchCriteriaFilterGroups0Filters0Value, searchCriteriaFilterGroups0Filters0ConditionType, searchCriteriaSortOrders0Field, searchCriteriaSortOrders0Direction, searchCriteriaPageSize, searchCriteriaCurrentPage, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * CategoriesAttributesApi - factory interface
 * @export
 */
export const CategoriesAttributesApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = CategoriesAttributesApiFp(configuration)
    return {
        /**
         * Retrieve all attributes for entity type
         * @summary categories/attributes
         * @param {string} [searchCriteriaFilterGroups0Filters0Field] Field
         * @param {string} [searchCriteriaFilterGroups0Filters0Value] Value
         * @param {string} [searchCriteriaFilterGroups0Filters0ConditionType] Condition type
         * @param {string} [searchCriteriaSortOrders0Field] Sorting field.
         * @param {string} [searchCriteriaSortOrders0Direction] Sorting direction.
         * @param {number} [searchCriteriaPageSize] Page size.
         * @param {number} [searchCriteriaCurrentPage] Current page.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        catalogCategoryAttributeRepositoryV1GetListGet(searchCriteriaFilterGroups0Filters0Field?: string, searchCriteriaFilterGroups0Filters0Value?: string, searchCriteriaFilterGroups0Filters0ConditionType?: string, searchCriteriaSortOrders0Field?: string, searchCriteriaSortOrders0Direction?: string, searchCriteriaPageSize?: number, searchCriteriaCurrentPage?: number, options?: any): AxiosPromise<CatalogDataCategoryAttributeSearchResultsInterface> {
            return localVarFp.catalogCategoryAttributeRepositoryV1GetListGet(searchCriteriaFilterGroups0Filters0Field, searchCriteriaFilterGroups0Filters0Value, searchCriteriaFilterGroups0Filters0ConditionType, searchCriteriaSortOrders0Field, searchCriteriaSortOrders0Direction, searchCriteriaPageSize, searchCriteriaCurrentPage, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * CategoriesAttributesApi - object-oriented interface
 * @export
 * @class CategoriesAttributesApi
 * @extends {BaseAPI}
 */
export class CategoriesAttributesApi extends BaseAPI {
    /**
     * Retrieve all attributes for entity type
     * @summary categories/attributes
     * @param {string} [searchCriteriaFilterGroups0Filters0Field] Field
     * @param {string} [searchCriteriaFilterGroups0Filters0Value] Value
     * @param {string} [searchCriteriaFilterGroups0Filters0ConditionType] Condition type
     * @param {string} [searchCriteriaSortOrders0Field] Sorting field.
     * @param {string} [searchCriteriaSortOrders0Direction] Sorting direction.
     * @param {number} [searchCriteriaPageSize] Page size.
     * @param {number} [searchCriteriaCurrentPage] Current page.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CategoriesAttributesApi
     */
    public catalogCategoryAttributeRepositoryV1GetListGet(searchCriteriaFilterGroups0Filters0Field?: string, searchCriteriaFilterGroups0Filters0Value?: string, searchCriteriaFilterGroups0Filters0ConditionType?: string, searchCriteriaSortOrders0Field?: string, searchCriteriaSortOrders0Direction?: string, searchCriteriaPageSize?: number, searchCriteriaCurrentPage?: number, options?: AxiosRequestConfig) {
        return CategoriesAttributesApiFp(this.configuration).catalogCategoryAttributeRepositoryV1GetListGet(searchCriteriaFilterGroups0Filters0Field, searchCriteriaFilterGroups0Filters0Value, searchCriteriaFilterGroups0Filters0ConditionType, searchCriteriaSortOrders0Field, searchCriteriaSortOrders0Direction, searchCriteriaPageSize, searchCriteriaCurrentPage, options).then((request) => request(this.axios, this.basePath));
    }
}


/**
 * CategoriesAttributesAttributeCodeApi - axios parameter creator
 * @export
 */
export const CategoriesAttributesAttributeCodeApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Retrieve specific attribute
         * @summary categories/attributes/{attributeCode}
         * @param {string} attributeCode 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        catalogCategoryAttributeRepositoryV1GetGet: async (attributeCode: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'attributeCode' is not null or undefined
            assertParamExists('catalogCategoryAttributeRepositoryV1GetGet', 'attributeCode', attributeCode)
            const localVarPath = `/V1/categories/attributes/{attributeCode}`
                .replace(`{${"attributeCode"}}`, encodeURIComponent(String(attributeCode)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * CategoriesAttributesAttributeCodeApi - functional programming interface
 * @export
 */
export const CategoriesAttributesAttributeCodeApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = CategoriesAttributesAttributeCodeApiAxiosParamCreator(configuration)
    return {
        /**
         * Retrieve specific attribute
         * @summary categories/attributes/{attributeCode}
         * @param {string} attributeCode 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async catalogCategoryAttributeRepositoryV1GetGet(attributeCode: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<CatalogDataCategoryAttributeInterface>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.catalogCategoryAttributeRepositoryV1GetGet(attributeCode, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * CategoriesAttributesAttributeCodeApi - factory interface
 * @export
 */
export const CategoriesAttributesAttributeCodeApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = CategoriesAttributesAttributeCodeApiFp(configuration)
    return {
        /**
         * Retrieve specific attribute
         * @summary categories/attributes/{attributeCode}
         * @param {string} attributeCode 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        catalogCategoryAttributeRepositoryV1GetGet(attributeCode: string, options?: any): AxiosPromise<CatalogDataCategoryAttributeInterface> {
            return localVarFp.catalogCategoryAttributeRepositoryV1GetGet(attributeCode, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * CategoriesAttributesAttributeCodeApi - object-oriented interface
 * @export
 * @class CategoriesAttributesAttributeCodeApi
 * @extends {BaseAPI}
 */
export class CategoriesAttributesAttributeCodeApi extends BaseAPI {
    /**
     * Retrieve specific attribute
     * @summary categories/attributes/{attributeCode}
     * @param {string} attributeCode 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CategoriesAttributesAttributeCodeApi
     */
    public catalogCategoryAttributeRepositoryV1GetGet(attributeCode: string, options?: AxiosRequestConfig) {
        return CategoriesAttributesAttributeCodeApiFp(this.configuration).catalogCategoryAttributeRepositoryV1GetGet(attributeCode, options).then((request) => request(this.axios, this.basePath));
    }
}


/**
 * CategoriesAttributesAttributeCodeOptionsApi - axios parameter creator
 * @export
 */
export const CategoriesAttributesAttributeCodeOptionsApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Retrieve list of attribute options
         * @summary categories/attributes/{attributeCode}/options
         * @param {string} attributeCode 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        catalogCategoryAttributeOptionManagementV1GetItemsGet: async (attributeCode: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'attributeCode' is not null or undefined
            assertParamExists('catalogCategoryAttributeOptionManagementV1GetItemsGet', 'attributeCode', attributeCode)
            const localVarPath = `/V1/categories/attributes/{attributeCode}/options`
                .replace(`{${"attributeCode"}}`, encodeURIComponent(String(attributeCode)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * CategoriesAttributesAttributeCodeOptionsApi - functional programming interface
 * @export
 */
export const CategoriesAttributesAttributeCodeOptionsApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = CategoriesAttributesAttributeCodeOptionsApiAxiosParamCreator(configuration)
    return {
        /**
         * Retrieve list of attribute options
         * @summary categories/attributes/{attributeCode}/options
         * @param {string} attributeCode 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async catalogCategoryAttributeOptionManagementV1GetItemsGet(attributeCode: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<EavDataAttributeOptionInterface>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.catalogCategoryAttributeOptionManagementV1GetItemsGet(attributeCode, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * CategoriesAttributesAttributeCodeOptionsApi - factory interface
 * @export
 */
export const CategoriesAttributesAttributeCodeOptionsApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = CategoriesAttributesAttributeCodeOptionsApiFp(configuration)
    return {
        /**
         * Retrieve list of attribute options
         * @summary categories/attributes/{attributeCode}/options
         * @param {string} attributeCode 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        catalogCategoryAttributeOptionManagementV1GetItemsGet(attributeCode: string, options?: any): AxiosPromise<Array<EavDataAttributeOptionInterface>> {
            return localVarFp.catalogCategoryAttributeOptionManagementV1GetItemsGet(attributeCode, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * CategoriesAttributesAttributeCodeOptionsApi - object-oriented interface
 * @export
 * @class CategoriesAttributesAttributeCodeOptionsApi
 * @extends {BaseAPI}
 */
export class CategoriesAttributesAttributeCodeOptionsApi extends BaseAPI {
    /**
     * Retrieve list of attribute options
     * @summary categories/attributes/{attributeCode}/options
     * @param {string} attributeCode 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CategoriesAttributesAttributeCodeOptionsApi
     */
    public catalogCategoryAttributeOptionManagementV1GetItemsGet(attributeCode: string, options?: AxiosRequestConfig) {
        return CategoriesAttributesAttributeCodeOptionsApiFp(this.configuration).catalogCategoryAttributeOptionManagementV1GetItemsGet(attributeCode, options).then((request) => request(this.axios, this.basePath));
    }
}


/**
 * CategoriesCategoryIdApi - axios parameter creator
 * @export
 */
export const CategoriesCategoryIdApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Delete category by identifier
         * @summary categories/{categoryId}
         * @param {number} categoryId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        catalogCategoryRepositoryV1DeleteByIdentifierDelete: async (categoryId: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'categoryId' is not null or undefined
            assertParamExists('catalogCategoryRepositoryV1DeleteByIdentifierDelete', 'categoryId', categoryId)
            const localVarPath = `/V1/categories/{categoryId}`
                .replace(`{${"categoryId"}}`, encodeURIComponent(String(categoryId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Get info about category by category id
         * @summary categories/{categoryId}
         * @param {number} categoryId 
         * @param {number} [storeId] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        catalogCategoryRepositoryV1GetGet: async (categoryId: number, storeId?: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'categoryId' is not null or undefined
            assertParamExists('catalogCategoryRepositoryV1GetGet', 'categoryId', categoryId)
            const localVarPath = `/V1/categories/{categoryId}`
                .replace(`{${"categoryId"}}`, encodeURIComponent(String(categoryId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (storeId !== undefined) {
                localVarQueryParameter['storeId'] = storeId;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * CategoriesCategoryIdApi - functional programming interface
 * @export
 */
export const CategoriesCategoryIdApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = CategoriesCategoryIdApiAxiosParamCreator(configuration)
    return {
        /**
         * Delete category by identifier
         * @summary categories/{categoryId}
         * @param {number} categoryId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async catalogCategoryRepositoryV1DeleteByIdentifierDelete(categoryId: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<boolean>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.catalogCategoryRepositoryV1DeleteByIdentifierDelete(categoryId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Get info about category by category id
         * @summary categories/{categoryId}
         * @param {number} categoryId 
         * @param {number} [storeId] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async catalogCategoryRepositoryV1GetGet(categoryId: number, storeId?: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<CatalogDataCategoryInterface>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.catalogCategoryRepositoryV1GetGet(categoryId, storeId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * CategoriesCategoryIdApi - factory interface
 * @export
 */
export const CategoriesCategoryIdApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = CategoriesCategoryIdApiFp(configuration)
    return {
        /**
         * Delete category by identifier
         * @summary categories/{categoryId}
         * @param {number} categoryId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        catalogCategoryRepositoryV1DeleteByIdentifierDelete(categoryId: number, options?: any): AxiosPromise<boolean> {
            return localVarFp.catalogCategoryRepositoryV1DeleteByIdentifierDelete(categoryId, options).then((request) => request(axios, basePath));
        },
        /**
         * Get info about category by category id
         * @summary categories/{categoryId}
         * @param {number} categoryId 
         * @param {number} [storeId] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        catalogCategoryRepositoryV1GetGet(categoryId: number, storeId?: number, options?: any): AxiosPromise<CatalogDataCategoryInterface> {
            return localVarFp.catalogCategoryRepositoryV1GetGet(categoryId, storeId, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * CategoriesCategoryIdApi - object-oriented interface
 * @export
 * @class CategoriesCategoryIdApi
 * @extends {BaseAPI}
 */
export class CategoriesCategoryIdApi extends BaseAPI {
    /**
     * Delete category by identifier
     * @summary categories/{categoryId}
     * @param {number} categoryId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CategoriesCategoryIdApi
     */
    public catalogCategoryRepositoryV1DeleteByIdentifierDelete(categoryId: number, options?: AxiosRequestConfig) {
        return CategoriesCategoryIdApiFp(this.configuration).catalogCategoryRepositoryV1DeleteByIdentifierDelete(categoryId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Get info about category by category id
     * @summary categories/{categoryId}
     * @param {number} categoryId 
     * @param {number} [storeId] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CategoriesCategoryIdApi
     */
    public catalogCategoryRepositoryV1GetGet(categoryId: number, storeId?: number, options?: AxiosRequestConfig) {
        return CategoriesCategoryIdApiFp(this.configuration).catalogCategoryRepositoryV1GetGet(categoryId, storeId, options).then((request) => request(this.axios, this.basePath));
    }
}


/**
 * CategoriesCategoryIdMoveApi - axios parameter creator
 * @export
 */
export const CategoriesCategoryIdMoveApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Move category
         * @summary categories/{categoryId}/move
         * @param {number} categoryId 
         * @param {CatalogCategoryManagementV1MovePutRequest} [catalogCategoryManagementV1MovePutBody] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        catalogCategoryManagementV1MovePut: async (categoryId: number, catalogCategoryManagementV1MovePutBody?: CatalogCategoryManagementV1MovePutRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'categoryId' is not null or undefined
            assertParamExists('catalogCategoryManagementV1MovePut', 'categoryId', categoryId)
            const localVarPath = `/V1/categories/{categoryId}/move`
                .replace(`{${"categoryId"}}`, encodeURIComponent(String(categoryId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(catalogCategoryManagementV1MovePutBody, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * CategoriesCategoryIdMoveApi - functional programming interface
 * @export
 */
export const CategoriesCategoryIdMoveApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = CategoriesCategoryIdMoveApiAxiosParamCreator(configuration)
    return {
        /**
         * Move category
         * @summary categories/{categoryId}/move
         * @param {number} categoryId 
         * @param {CatalogCategoryManagementV1MovePutRequest} [catalogCategoryManagementV1MovePutBody] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async catalogCategoryManagementV1MovePut(categoryId: number, catalogCategoryManagementV1MovePutBody?: CatalogCategoryManagementV1MovePutRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<boolean>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.catalogCategoryManagementV1MovePut(categoryId, catalogCategoryManagementV1MovePutBody, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * CategoriesCategoryIdMoveApi - factory interface
 * @export
 */
export const CategoriesCategoryIdMoveApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = CategoriesCategoryIdMoveApiFp(configuration)
    return {
        /**
         * Move category
         * @summary categories/{categoryId}/move
         * @param {number} categoryId 
         * @param {CatalogCategoryManagementV1MovePutRequest} [catalogCategoryManagementV1MovePutBody] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        catalogCategoryManagementV1MovePut(categoryId: number, catalogCategoryManagementV1MovePutBody?: CatalogCategoryManagementV1MovePutRequest, options?: any): AxiosPromise<boolean> {
            return localVarFp.catalogCategoryManagementV1MovePut(categoryId, catalogCategoryManagementV1MovePutBody, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * CategoriesCategoryIdMoveApi - object-oriented interface
 * @export
 * @class CategoriesCategoryIdMoveApi
 * @extends {BaseAPI}
 */
export class CategoriesCategoryIdMoveApi extends BaseAPI {
    /**
     * Move category
     * @summary categories/{categoryId}/move
     * @param {number} categoryId 
     * @param {CatalogCategoryManagementV1MovePutRequest} [catalogCategoryManagementV1MovePutBody] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CategoriesCategoryIdMoveApi
     */
    public catalogCategoryManagementV1MovePut(categoryId: number, catalogCategoryManagementV1MovePutBody?: CatalogCategoryManagementV1MovePutRequest, options?: AxiosRequestConfig) {
        return CategoriesCategoryIdMoveApiFp(this.configuration).catalogCategoryManagementV1MovePut(categoryId, catalogCategoryManagementV1MovePutBody, options).then((request) => request(this.axios, this.basePath));
    }
}


/**
 * CategoriesCategoryIdProductsApi - axios parameter creator
 * @export
 */
export const CategoriesCategoryIdProductsApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Get products assigned to category
         * @summary categories/{categoryId}/products
         * @param {number} categoryId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        catalogCategoryLinkManagementV1GetAssignedProductsGet: async (categoryId: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'categoryId' is not null or undefined
            assertParamExists('catalogCategoryLinkManagementV1GetAssignedProductsGet', 'categoryId', categoryId)
            const localVarPath = `/V1/categories/{categoryId}/products`
                .replace(`{${"categoryId"}}`, encodeURIComponent(String(categoryId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Assign a product to the required category
         * @summary categories/{categoryId}/products
         * @param {string} categoryId 
         * @param {CatalogCategoryLinkRepositoryV1SavePutRequest} [catalogCategoryLinkRepositoryV1SavePostBody] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        catalogCategoryLinkRepositoryV1SavePost: async (categoryId: string, catalogCategoryLinkRepositoryV1SavePostBody?: CatalogCategoryLinkRepositoryV1SavePutRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'categoryId' is not null or undefined
            assertParamExists('catalogCategoryLinkRepositoryV1SavePost', 'categoryId', categoryId)
            const localVarPath = `/V1/categories/{categoryId}/products`
                .replace(`{${"categoryId"}}`, encodeURIComponent(String(categoryId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(catalogCategoryLinkRepositoryV1SavePostBody, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Assign a product to the required category
         * @summary categories/{categoryId}/products
         * @param {string} categoryId 
         * @param {CatalogCategoryLinkRepositoryV1SavePutRequest} [catalogCategoryLinkRepositoryV1SavePutBody] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        catalogCategoryLinkRepositoryV1SavePut: async (categoryId: string, catalogCategoryLinkRepositoryV1SavePutBody?: CatalogCategoryLinkRepositoryV1SavePutRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'categoryId' is not null or undefined
            assertParamExists('catalogCategoryLinkRepositoryV1SavePut', 'categoryId', categoryId)
            const localVarPath = `/V1/categories/{categoryId}/products`
                .replace(`{${"categoryId"}}`, encodeURIComponent(String(categoryId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(catalogCategoryLinkRepositoryV1SavePutBody, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * CategoriesCategoryIdProductsApi - functional programming interface
 * @export
 */
export const CategoriesCategoryIdProductsApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = CategoriesCategoryIdProductsApiAxiosParamCreator(configuration)
    return {
        /**
         * Get products assigned to category
         * @summary categories/{categoryId}/products
         * @param {number} categoryId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async catalogCategoryLinkManagementV1GetAssignedProductsGet(categoryId: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<CatalogDataCategoryProductLinkInterface>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.catalogCategoryLinkManagementV1GetAssignedProductsGet(categoryId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Assign a product to the required category
         * @summary categories/{categoryId}/products
         * @param {string} categoryId 
         * @param {CatalogCategoryLinkRepositoryV1SavePutRequest} [catalogCategoryLinkRepositoryV1SavePostBody] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async catalogCategoryLinkRepositoryV1SavePost(categoryId: string, catalogCategoryLinkRepositoryV1SavePostBody?: CatalogCategoryLinkRepositoryV1SavePutRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<boolean>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.catalogCategoryLinkRepositoryV1SavePost(categoryId, catalogCategoryLinkRepositoryV1SavePostBody, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Assign a product to the required category
         * @summary categories/{categoryId}/products
         * @param {string} categoryId 
         * @param {CatalogCategoryLinkRepositoryV1SavePutRequest} [catalogCategoryLinkRepositoryV1SavePutBody] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async catalogCategoryLinkRepositoryV1SavePut(categoryId: string, catalogCategoryLinkRepositoryV1SavePutBody?: CatalogCategoryLinkRepositoryV1SavePutRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<boolean>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.catalogCategoryLinkRepositoryV1SavePut(categoryId, catalogCategoryLinkRepositoryV1SavePutBody, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * CategoriesCategoryIdProductsApi - factory interface
 * @export
 */
export const CategoriesCategoryIdProductsApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = CategoriesCategoryIdProductsApiFp(configuration)
    return {
        /**
         * Get products assigned to category
         * @summary categories/{categoryId}/products
         * @param {number} categoryId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        catalogCategoryLinkManagementV1GetAssignedProductsGet(categoryId: number, options?: any): AxiosPromise<Array<CatalogDataCategoryProductLinkInterface>> {
            return localVarFp.catalogCategoryLinkManagementV1GetAssignedProductsGet(categoryId, options).then((request) => request(axios, basePath));
        },
        /**
         * Assign a product to the required category
         * @summary categories/{categoryId}/products
         * @param {string} categoryId 
         * @param {CatalogCategoryLinkRepositoryV1SavePutRequest} [catalogCategoryLinkRepositoryV1SavePostBody] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        catalogCategoryLinkRepositoryV1SavePost(categoryId: string, catalogCategoryLinkRepositoryV1SavePostBody?: CatalogCategoryLinkRepositoryV1SavePutRequest, options?: any): AxiosPromise<boolean> {
            return localVarFp.catalogCategoryLinkRepositoryV1SavePost(categoryId, catalogCategoryLinkRepositoryV1SavePostBody, options).then((request) => request(axios, basePath));
        },
        /**
         * Assign a product to the required category
         * @summary categories/{categoryId}/products
         * @param {string} categoryId 
         * @param {CatalogCategoryLinkRepositoryV1SavePutRequest} [catalogCategoryLinkRepositoryV1SavePutBody] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        catalogCategoryLinkRepositoryV1SavePut(categoryId: string, catalogCategoryLinkRepositoryV1SavePutBody?: CatalogCategoryLinkRepositoryV1SavePutRequest, options?: any): AxiosPromise<boolean> {
            return localVarFp.catalogCategoryLinkRepositoryV1SavePut(categoryId, catalogCategoryLinkRepositoryV1SavePutBody, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * CategoriesCategoryIdProductsApi - object-oriented interface
 * @export
 * @class CategoriesCategoryIdProductsApi
 * @extends {BaseAPI}
 */
export class CategoriesCategoryIdProductsApi extends BaseAPI {
    /**
     * Get products assigned to category
     * @summary categories/{categoryId}/products
     * @param {number} categoryId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CategoriesCategoryIdProductsApi
     */
    public catalogCategoryLinkManagementV1GetAssignedProductsGet(categoryId: number, options?: AxiosRequestConfig) {
        return CategoriesCategoryIdProductsApiFp(this.configuration).catalogCategoryLinkManagementV1GetAssignedProductsGet(categoryId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Assign a product to the required category
     * @summary categories/{categoryId}/products
     * @param {string} categoryId 
     * @param {CatalogCategoryLinkRepositoryV1SavePutRequest} [catalogCategoryLinkRepositoryV1SavePostBody] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CategoriesCategoryIdProductsApi
     */
    public catalogCategoryLinkRepositoryV1SavePost(categoryId: string, catalogCategoryLinkRepositoryV1SavePostBody?: CatalogCategoryLinkRepositoryV1SavePutRequest, options?: AxiosRequestConfig) {
        return CategoriesCategoryIdProductsApiFp(this.configuration).catalogCategoryLinkRepositoryV1SavePost(categoryId, catalogCategoryLinkRepositoryV1SavePostBody, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Assign a product to the required category
     * @summary categories/{categoryId}/products
     * @param {string} categoryId 
     * @param {CatalogCategoryLinkRepositoryV1SavePutRequest} [catalogCategoryLinkRepositoryV1SavePutBody] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CategoriesCategoryIdProductsApi
     */
    public catalogCategoryLinkRepositoryV1SavePut(categoryId: string, catalogCategoryLinkRepositoryV1SavePutBody?: CatalogCategoryLinkRepositoryV1SavePutRequest, options?: AxiosRequestConfig) {
        return CategoriesCategoryIdProductsApiFp(this.configuration).catalogCategoryLinkRepositoryV1SavePut(categoryId, catalogCategoryLinkRepositoryV1SavePutBody, options).then((request) => request(this.axios, this.basePath));
    }
}


/**
 * CategoriesCategoryIdProductsSkuApi - axios parameter creator
 * @export
 */
export const CategoriesCategoryIdProductsSkuApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Remove the product assignment from the category by category id and sku
         * @summary categories/{categoryId}/products/{sku}
         * @param {string} categoryId 
         * @param {string} sku 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        catalogCategoryLinkRepositoryV1DeleteByIdsDelete: async (categoryId: string, sku: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'categoryId' is not null or undefined
            assertParamExists('catalogCategoryLinkRepositoryV1DeleteByIdsDelete', 'categoryId', categoryId)
            // verify required parameter 'sku' is not null or undefined
            assertParamExists('catalogCategoryLinkRepositoryV1DeleteByIdsDelete', 'sku', sku)
            const localVarPath = `/V1/categories/{categoryId}/products/{sku}`
                .replace(`{${"categoryId"}}`, encodeURIComponent(String(categoryId)))
                .replace(`{${"sku"}}`, encodeURIComponent(String(sku)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * CategoriesCategoryIdProductsSkuApi - functional programming interface
 * @export
 */
export const CategoriesCategoryIdProductsSkuApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = CategoriesCategoryIdProductsSkuApiAxiosParamCreator(configuration)
    return {
        /**
         * Remove the product assignment from the category by category id and sku
         * @summary categories/{categoryId}/products/{sku}
         * @param {string} categoryId 
         * @param {string} sku 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async catalogCategoryLinkRepositoryV1DeleteByIdsDelete(categoryId: string, sku: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<boolean>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.catalogCategoryLinkRepositoryV1DeleteByIdsDelete(categoryId, sku, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * CategoriesCategoryIdProductsSkuApi - factory interface
 * @export
 */
export const CategoriesCategoryIdProductsSkuApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = CategoriesCategoryIdProductsSkuApiFp(configuration)
    return {
        /**
         * Remove the product assignment from the category by category id and sku
         * @summary categories/{categoryId}/products/{sku}
         * @param {string} categoryId 
         * @param {string} sku 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        catalogCategoryLinkRepositoryV1DeleteByIdsDelete(categoryId: string, sku: string, options?: any): AxiosPromise<boolean> {
            return localVarFp.catalogCategoryLinkRepositoryV1DeleteByIdsDelete(categoryId, sku, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * CategoriesCategoryIdProductsSkuApi - object-oriented interface
 * @export
 * @class CategoriesCategoryIdProductsSkuApi
 * @extends {BaseAPI}
 */
export class CategoriesCategoryIdProductsSkuApi extends BaseAPI {
    /**
     * Remove the product assignment from the category by category id and sku
     * @summary categories/{categoryId}/products/{sku}
     * @param {string} categoryId 
     * @param {string} sku 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CategoriesCategoryIdProductsSkuApi
     */
    public catalogCategoryLinkRepositoryV1DeleteByIdsDelete(categoryId: string, sku: string, options?: AxiosRequestConfig) {
        return CategoriesCategoryIdProductsSkuApiFp(this.configuration).catalogCategoryLinkRepositoryV1DeleteByIdsDelete(categoryId, sku, options).then((request) => request(this.axios, this.basePath));
    }
}


/**
 * CategoriesIdApi - axios parameter creator
 * @export
 */
export const CategoriesIdApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Create category service
         * @summary categories/{id}
         * @param {string} id 
         * @param {CatalogCategoryRepositoryV1SavePostRequest} [catalogCategoryRepositoryV1SavePutBody] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        catalogCategoryRepositoryV1SavePut: async (id: string, catalogCategoryRepositoryV1SavePutBody?: CatalogCategoryRepositoryV1SavePostRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('catalogCategoryRepositoryV1SavePut', 'id', id)
            const localVarPath = `/V1/categories/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(catalogCategoryRepositoryV1SavePutBody, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * CategoriesIdApi - functional programming interface
 * @export
 */
export const CategoriesIdApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = CategoriesIdApiAxiosParamCreator(configuration)
    return {
        /**
         * Create category service
         * @summary categories/{id}
         * @param {string} id 
         * @param {CatalogCategoryRepositoryV1SavePostRequest} [catalogCategoryRepositoryV1SavePutBody] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async catalogCategoryRepositoryV1SavePut(id: string, catalogCategoryRepositoryV1SavePutBody?: CatalogCategoryRepositoryV1SavePostRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<CatalogDataCategoryInterface>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.catalogCategoryRepositoryV1SavePut(id, catalogCategoryRepositoryV1SavePutBody, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * CategoriesIdApi - factory interface
 * @export
 */
export const CategoriesIdApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = CategoriesIdApiFp(configuration)
    return {
        /**
         * Create category service
         * @summary categories/{id}
         * @param {string} id 
         * @param {CatalogCategoryRepositoryV1SavePostRequest} [catalogCategoryRepositoryV1SavePutBody] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        catalogCategoryRepositoryV1SavePut(id: string, catalogCategoryRepositoryV1SavePutBody?: CatalogCategoryRepositoryV1SavePostRequest, options?: any): AxiosPromise<CatalogDataCategoryInterface> {
            return localVarFp.catalogCategoryRepositoryV1SavePut(id, catalogCategoryRepositoryV1SavePutBody, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * CategoriesIdApi - object-oriented interface
 * @export
 * @class CategoriesIdApi
 * @extends {BaseAPI}
 */
export class CategoriesIdApi extends BaseAPI {
    /**
     * Create category service
     * @summary categories/{id}
     * @param {string} id 
     * @param {CatalogCategoryRepositoryV1SavePostRequest} [catalogCategoryRepositoryV1SavePutBody] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CategoriesIdApi
     */
    public catalogCategoryRepositoryV1SavePut(id: string, catalogCategoryRepositoryV1SavePutBody?: CatalogCategoryRepositoryV1SavePostRequest, options?: AxiosRequestConfig) {
        return CategoriesIdApiFp(this.configuration).catalogCategoryRepositoryV1SavePut(id, catalogCategoryRepositoryV1SavePutBody, options).then((request) => request(this.axios, this.basePath));
    }
}


/**
 * CategoriesListApi - axios parameter creator
 * @export
 */
export const CategoriesListApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Get category list
         * @summary categories/list
         * @param {string} [searchCriteriaFilterGroups0Filters0Field] Field
         * @param {string} [searchCriteriaFilterGroups0Filters0Value] Value
         * @param {string} [searchCriteriaFilterGroups0Filters0ConditionType] Condition type
         * @param {string} [searchCriteriaSortOrders0Field] Sorting field.
         * @param {string} [searchCriteriaSortOrders0Direction] Sorting direction.
         * @param {number} [searchCriteriaPageSize] Page size.
         * @param {number} [searchCriteriaCurrentPage] Current page.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        catalogCategoryListV1GetListGet: async (searchCriteriaFilterGroups0Filters0Field?: string, searchCriteriaFilterGroups0Filters0Value?: string, searchCriteriaFilterGroups0Filters0ConditionType?: string, searchCriteriaSortOrders0Field?: string, searchCriteriaSortOrders0Direction?: string, searchCriteriaPageSize?: number, searchCriteriaCurrentPage?: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/V1/categories/list`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (searchCriteriaFilterGroups0Filters0Field !== undefined) {
                localVarQueryParameter['searchCriteria[filterGroups][0][filters][0][field]'] = searchCriteriaFilterGroups0Filters0Field;
            }

            if (searchCriteriaFilterGroups0Filters0Value !== undefined) {
                localVarQueryParameter['searchCriteria[filterGroups][0][filters][0][value]'] = searchCriteriaFilterGroups0Filters0Value;
            }

            if (searchCriteriaFilterGroups0Filters0ConditionType !== undefined) {
                localVarQueryParameter['searchCriteria[filterGroups][0][filters][0][conditionType]'] = searchCriteriaFilterGroups0Filters0ConditionType;
            }

            if (searchCriteriaSortOrders0Field !== undefined) {
                localVarQueryParameter['searchCriteria[sortOrders][0][field]'] = searchCriteriaSortOrders0Field;
            }

            if (searchCriteriaSortOrders0Direction !== undefined) {
                localVarQueryParameter['searchCriteria[sortOrders][0][direction]'] = searchCriteriaSortOrders0Direction;
            }

            if (searchCriteriaPageSize !== undefined) {
                localVarQueryParameter['searchCriteria[pageSize]'] = searchCriteriaPageSize;
            }

            if (searchCriteriaCurrentPage !== undefined) {
                localVarQueryParameter['searchCriteria[currentPage]'] = searchCriteriaCurrentPage;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * CategoriesListApi - functional programming interface
 * @export
 */
export const CategoriesListApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = CategoriesListApiAxiosParamCreator(configuration)
    return {
        /**
         * Get category list
         * @summary categories/list
         * @param {string} [searchCriteriaFilterGroups0Filters0Field] Field
         * @param {string} [searchCriteriaFilterGroups0Filters0Value] Value
         * @param {string} [searchCriteriaFilterGroups0Filters0ConditionType] Condition type
         * @param {string} [searchCriteriaSortOrders0Field] Sorting field.
         * @param {string} [searchCriteriaSortOrders0Direction] Sorting direction.
         * @param {number} [searchCriteriaPageSize] Page size.
         * @param {number} [searchCriteriaCurrentPage] Current page.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async catalogCategoryListV1GetListGet(searchCriteriaFilterGroups0Filters0Field?: string, searchCriteriaFilterGroups0Filters0Value?: string, searchCriteriaFilterGroups0Filters0ConditionType?: string, searchCriteriaSortOrders0Field?: string, searchCriteriaSortOrders0Direction?: string, searchCriteriaPageSize?: number, searchCriteriaCurrentPage?: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<CatalogDataCategorySearchResultsInterface>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.catalogCategoryListV1GetListGet(searchCriteriaFilterGroups0Filters0Field, searchCriteriaFilterGroups0Filters0Value, searchCriteriaFilterGroups0Filters0ConditionType, searchCriteriaSortOrders0Field, searchCriteriaSortOrders0Direction, searchCriteriaPageSize, searchCriteriaCurrentPage, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * CategoriesListApi - factory interface
 * @export
 */
export const CategoriesListApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = CategoriesListApiFp(configuration)
    return {
        /**
         * Get category list
         * @summary categories/list
         * @param {string} [searchCriteriaFilterGroups0Filters0Field] Field
         * @param {string} [searchCriteriaFilterGroups0Filters0Value] Value
         * @param {string} [searchCriteriaFilterGroups0Filters0ConditionType] Condition type
         * @param {string} [searchCriteriaSortOrders0Field] Sorting field.
         * @param {string} [searchCriteriaSortOrders0Direction] Sorting direction.
         * @param {number} [searchCriteriaPageSize] Page size.
         * @param {number} [searchCriteriaCurrentPage] Current page.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        catalogCategoryListV1GetListGet(searchCriteriaFilterGroups0Filters0Field?: string, searchCriteriaFilterGroups0Filters0Value?: string, searchCriteriaFilterGroups0Filters0ConditionType?: string, searchCriteriaSortOrders0Field?: string, searchCriteriaSortOrders0Direction?: string, searchCriteriaPageSize?: number, searchCriteriaCurrentPage?: number, options?: any): AxiosPromise<CatalogDataCategorySearchResultsInterface> {
            return localVarFp.catalogCategoryListV1GetListGet(searchCriteriaFilterGroups0Filters0Field, searchCriteriaFilterGroups0Filters0Value, searchCriteriaFilterGroups0Filters0ConditionType, searchCriteriaSortOrders0Field, searchCriteriaSortOrders0Direction, searchCriteriaPageSize, searchCriteriaCurrentPage, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * CategoriesListApi - object-oriented interface
 * @export
 * @class CategoriesListApi
 * @extends {BaseAPI}
 */
export class CategoriesListApi extends BaseAPI {
    /**
     * Get category list
     * @summary categories/list
     * @param {string} [searchCriteriaFilterGroups0Filters0Field] Field
     * @param {string} [searchCriteriaFilterGroups0Filters0Value] Value
     * @param {string} [searchCriteriaFilterGroups0Filters0ConditionType] Condition type
     * @param {string} [searchCriteriaSortOrders0Field] Sorting field.
     * @param {string} [searchCriteriaSortOrders0Direction] Sorting direction.
     * @param {number} [searchCriteriaPageSize] Page size.
     * @param {number} [searchCriteriaCurrentPage] Current page.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CategoriesListApi
     */
    public catalogCategoryListV1GetListGet(searchCriteriaFilterGroups0Filters0Field?: string, searchCriteriaFilterGroups0Filters0Value?: string, searchCriteriaFilterGroups0Filters0ConditionType?: string, searchCriteriaSortOrders0Field?: string, searchCriteriaSortOrders0Direction?: string, searchCriteriaPageSize?: number, searchCriteriaCurrentPage?: number, options?: AxiosRequestConfig) {
        return CategoriesListApiFp(this.configuration).catalogCategoryListV1GetListGet(searchCriteriaFilterGroups0Filters0Field, searchCriteriaFilterGroups0Filters0Value, searchCriteriaFilterGroups0Filters0ConditionType, searchCriteriaSortOrders0Field, searchCriteriaSortOrders0Direction, searchCriteriaPageSize, searchCriteriaCurrentPage, options).then((request) => request(this.axios, this.basePath));
    }
}


/**
 * CmsBlockApi - axios parameter creator
 * @export
 */
export const CmsBlockApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Save block.
         * @summary cmsBlock
         * @param {CmsBlockRepositoryV1SavePostRequest} [cmsBlockRepositoryV1SavePostBody] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        cmsBlockRepositoryV1SavePost: async (cmsBlockRepositoryV1SavePostBody?: CmsBlockRepositoryV1SavePostRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/V1/cmsBlock`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(cmsBlockRepositoryV1SavePostBody, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * CmsBlockApi - functional programming interface
 * @export
 */
export const CmsBlockApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = CmsBlockApiAxiosParamCreator(configuration)
    return {
        /**
         * Save block.
         * @summary cmsBlock
         * @param {CmsBlockRepositoryV1SavePostRequest} [cmsBlockRepositoryV1SavePostBody] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async cmsBlockRepositoryV1SavePost(cmsBlockRepositoryV1SavePostBody?: CmsBlockRepositoryV1SavePostRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<CmsDataBlockInterface>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.cmsBlockRepositoryV1SavePost(cmsBlockRepositoryV1SavePostBody, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * CmsBlockApi - factory interface
 * @export
 */
export const CmsBlockApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = CmsBlockApiFp(configuration)
    return {
        /**
         * Save block.
         * @summary cmsBlock
         * @param {CmsBlockRepositoryV1SavePostRequest} [cmsBlockRepositoryV1SavePostBody] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        cmsBlockRepositoryV1SavePost(cmsBlockRepositoryV1SavePostBody?: CmsBlockRepositoryV1SavePostRequest, options?: any): AxiosPromise<CmsDataBlockInterface> {
            return localVarFp.cmsBlockRepositoryV1SavePost(cmsBlockRepositoryV1SavePostBody, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * CmsBlockApi - object-oriented interface
 * @export
 * @class CmsBlockApi
 * @extends {BaseAPI}
 */
export class CmsBlockApi extends BaseAPI {
    /**
     * Save block.
     * @summary cmsBlock
     * @param {CmsBlockRepositoryV1SavePostRequest} [cmsBlockRepositoryV1SavePostBody] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CmsBlockApi
     */
    public cmsBlockRepositoryV1SavePost(cmsBlockRepositoryV1SavePostBody?: CmsBlockRepositoryV1SavePostRequest, options?: AxiosRequestConfig) {
        return CmsBlockApiFp(this.configuration).cmsBlockRepositoryV1SavePost(cmsBlockRepositoryV1SavePostBody, options).then((request) => request(this.axios, this.basePath));
    }
}


/**
 * CmsBlockBlockIdApi - axios parameter creator
 * @export
 */
export const CmsBlockBlockIdApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Delete block by ID.
         * @summary cmsBlock/{blockId}
         * @param {number} blockId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        cmsBlockRepositoryV1DeleteByIdDelete: async (blockId: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'blockId' is not null or undefined
            assertParamExists('cmsBlockRepositoryV1DeleteByIdDelete', 'blockId', blockId)
            const localVarPath = `/V1/cmsBlock/{blockId}`
                .replace(`{${"blockId"}}`, encodeURIComponent(String(blockId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Retrieve block.
         * @summary cmsBlock/{blockId}
         * @param {number} blockId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        cmsBlockRepositoryV1GetByIdGet: async (blockId: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'blockId' is not null or undefined
            assertParamExists('cmsBlockRepositoryV1GetByIdGet', 'blockId', blockId)
            const localVarPath = `/V1/cmsBlock/{blockId}`
                .replace(`{${"blockId"}}`, encodeURIComponent(String(blockId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * CmsBlockBlockIdApi - functional programming interface
 * @export
 */
export const CmsBlockBlockIdApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = CmsBlockBlockIdApiAxiosParamCreator(configuration)
    return {
        /**
         * Delete block by ID.
         * @summary cmsBlock/{blockId}
         * @param {number} blockId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async cmsBlockRepositoryV1DeleteByIdDelete(blockId: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<boolean>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.cmsBlockRepositoryV1DeleteByIdDelete(blockId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Retrieve block.
         * @summary cmsBlock/{blockId}
         * @param {number} blockId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async cmsBlockRepositoryV1GetByIdGet(blockId: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<CmsDataBlockInterface>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.cmsBlockRepositoryV1GetByIdGet(blockId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * CmsBlockBlockIdApi - factory interface
 * @export
 */
export const CmsBlockBlockIdApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = CmsBlockBlockIdApiFp(configuration)
    return {
        /**
         * Delete block by ID.
         * @summary cmsBlock/{blockId}
         * @param {number} blockId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        cmsBlockRepositoryV1DeleteByIdDelete(blockId: number, options?: any): AxiosPromise<boolean> {
            return localVarFp.cmsBlockRepositoryV1DeleteByIdDelete(blockId, options).then((request) => request(axios, basePath));
        },
        /**
         * Retrieve block.
         * @summary cmsBlock/{blockId}
         * @param {number} blockId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        cmsBlockRepositoryV1GetByIdGet(blockId: number, options?: any): AxiosPromise<CmsDataBlockInterface> {
            return localVarFp.cmsBlockRepositoryV1GetByIdGet(blockId, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * CmsBlockBlockIdApi - object-oriented interface
 * @export
 * @class CmsBlockBlockIdApi
 * @extends {BaseAPI}
 */
export class CmsBlockBlockIdApi extends BaseAPI {
    /**
     * Delete block by ID.
     * @summary cmsBlock/{blockId}
     * @param {number} blockId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CmsBlockBlockIdApi
     */
    public cmsBlockRepositoryV1DeleteByIdDelete(blockId: number, options?: AxiosRequestConfig) {
        return CmsBlockBlockIdApiFp(this.configuration).cmsBlockRepositoryV1DeleteByIdDelete(blockId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Retrieve block.
     * @summary cmsBlock/{blockId}
     * @param {number} blockId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CmsBlockBlockIdApi
     */
    public cmsBlockRepositoryV1GetByIdGet(blockId: number, options?: AxiosRequestConfig) {
        return CmsBlockBlockIdApiFp(this.configuration).cmsBlockRepositoryV1GetByIdGet(blockId, options).then((request) => request(this.axios, this.basePath));
    }
}


/**
 * CmsBlockIdApi - axios parameter creator
 * @export
 */
export const CmsBlockIdApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Save block.
         * @summary cmsBlock/{id}
         * @param {string} id 
         * @param {CmsBlockRepositoryV1SavePostRequest} [cmsBlockRepositoryV1SavePutBody] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        cmsBlockRepositoryV1SavePut: async (id: string, cmsBlockRepositoryV1SavePutBody?: CmsBlockRepositoryV1SavePostRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('cmsBlockRepositoryV1SavePut', 'id', id)
            const localVarPath = `/V1/cmsBlock/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(cmsBlockRepositoryV1SavePutBody, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * CmsBlockIdApi - functional programming interface
 * @export
 */
export const CmsBlockIdApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = CmsBlockIdApiAxiosParamCreator(configuration)
    return {
        /**
         * Save block.
         * @summary cmsBlock/{id}
         * @param {string} id 
         * @param {CmsBlockRepositoryV1SavePostRequest} [cmsBlockRepositoryV1SavePutBody] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async cmsBlockRepositoryV1SavePut(id: string, cmsBlockRepositoryV1SavePutBody?: CmsBlockRepositoryV1SavePostRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<CmsDataBlockInterface>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.cmsBlockRepositoryV1SavePut(id, cmsBlockRepositoryV1SavePutBody, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * CmsBlockIdApi - factory interface
 * @export
 */
export const CmsBlockIdApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = CmsBlockIdApiFp(configuration)
    return {
        /**
         * Save block.
         * @summary cmsBlock/{id}
         * @param {string} id 
         * @param {CmsBlockRepositoryV1SavePostRequest} [cmsBlockRepositoryV1SavePutBody] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        cmsBlockRepositoryV1SavePut(id: string, cmsBlockRepositoryV1SavePutBody?: CmsBlockRepositoryV1SavePostRequest, options?: any): AxiosPromise<CmsDataBlockInterface> {
            return localVarFp.cmsBlockRepositoryV1SavePut(id, cmsBlockRepositoryV1SavePutBody, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * CmsBlockIdApi - object-oriented interface
 * @export
 * @class CmsBlockIdApi
 * @extends {BaseAPI}
 */
export class CmsBlockIdApi extends BaseAPI {
    /**
     * Save block.
     * @summary cmsBlock/{id}
     * @param {string} id 
     * @param {CmsBlockRepositoryV1SavePostRequest} [cmsBlockRepositoryV1SavePutBody] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CmsBlockIdApi
     */
    public cmsBlockRepositoryV1SavePut(id: string, cmsBlockRepositoryV1SavePutBody?: CmsBlockRepositoryV1SavePostRequest, options?: AxiosRequestConfig) {
        return CmsBlockIdApiFp(this.configuration).cmsBlockRepositoryV1SavePut(id, cmsBlockRepositoryV1SavePutBody, options).then((request) => request(this.axios, this.basePath));
    }
}


/**
 * CmsBlockSearchApi - axios parameter creator
 * @export
 */
export const CmsBlockSearchApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Retrieve blocks matching the specified criteria.
         * @summary cmsBlock/search
         * @param {string} [searchCriteriaFilterGroups0Filters0Field] Field
         * @param {string} [searchCriteriaFilterGroups0Filters0Value] Value
         * @param {string} [searchCriteriaFilterGroups0Filters0ConditionType] Condition type
         * @param {string} [searchCriteriaSortOrders0Field] Sorting field.
         * @param {string} [searchCriteriaSortOrders0Direction] Sorting direction.
         * @param {number} [searchCriteriaPageSize] Page size.
         * @param {number} [searchCriteriaCurrentPage] Current page.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        cmsBlockRepositoryV1GetListGet: async (searchCriteriaFilterGroups0Filters0Field?: string, searchCriteriaFilterGroups0Filters0Value?: string, searchCriteriaFilterGroups0Filters0ConditionType?: string, searchCriteriaSortOrders0Field?: string, searchCriteriaSortOrders0Direction?: string, searchCriteriaPageSize?: number, searchCriteriaCurrentPage?: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/V1/cmsBlock/search`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (searchCriteriaFilterGroups0Filters0Field !== undefined) {
                localVarQueryParameter['searchCriteria[filterGroups][0][filters][0][field]'] = searchCriteriaFilterGroups0Filters0Field;
            }

            if (searchCriteriaFilterGroups0Filters0Value !== undefined) {
                localVarQueryParameter['searchCriteria[filterGroups][0][filters][0][value]'] = searchCriteriaFilterGroups0Filters0Value;
            }

            if (searchCriteriaFilterGroups0Filters0ConditionType !== undefined) {
                localVarQueryParameter['searchCriteria[filterGroups][0][filters][0][conditionType]'] = searchCriteriaFilterGroups0Filters0ConditionType;
            }

            if (searchCriteriaSortOrders0Field !== undefined) {
                localVarQueryParameter['searchCriteria[sortOrders][0][field]'] = searchCriteriaSortOrders0Field;
            }

            if (searchCriteriaSortOrders0Direction !== undefined) {
                localVarQueryParameter['searchCriteria[sortOrders][0][direction]'] = searchCriteriaSortOrders0Direction;
            }

            if (searchCriteriaPageSize !== undefined) {
                localVarQueryParameter['searchCriteria[pageSize]'] = searchCriteriaPageSize;
            }

            if (searchCriteriaCurrentPage !== undefined) {
                localVarQueryParameter['searchCriteria[currentPage]'] = searchCriteriaCurrentPage;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * CmsBlockSearchApi - functional programming interface
 * @export
 */
export const CmsBlockSearchApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = CmsBlockSearchApiAxiosParamCreator(configuration)
    return {
        /**
         * Retrieve blocks matching the specified criteria.
         * @summary cmsBlock/search
         * @param {string} [searchCriteriaFilterGroups0Filters0Field] Field
         * @param {string} [searchCriteriaFilterGroups0Filters0Value] Value
         * @param {string} [searchCriteriaFilterGroups0Filters0ConditionType] Condition type
         * @param {string} [searchCriteriaSortOrders0Field] Sorting field.
         * @param {string} [searchCriteriaSortOrders0Direction] Sorting direction.
         * @param {number} [searchCriteriaPageSize] Page size.
         * @param {number} [searchCriteriaCurrentPage] Current page.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async cmsBlockRepositoryV1GetListGet(searchCriteriaFilterGroups0Filters0Field?: string, searchCriteriaFilterGroups0Filters0Value?: string, searchCriteriaFilterGroups0Filters0ConditionType?: string, searchCriteriaSortOrders0Field?: string, searchCriteriaSortOrders0Direction?: string, searchCriteriaPageSize?: number, searchCriteriaCurrentPage?: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<CmsDataBlockSearchResultsInterface>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.cmsBlockRepositoryV1GetListGet(searchCriteriaFilterGroups0Filters0Field, searchCriteriaFilterGroups0Filters0Value, searchCriteriaFilterGroups0Filters0ConditionType, searchCriteriaSortOrders0Field, searchCriteriaSortOrders0Direction, searchCriteriaPageSize, searchCriteriaCurrentPage, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * CmsBlockSearchApi - factory interface
 * @export
 */
export const CmsBlockSearchApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = CmsBlockSearchApiFp(configuration)
    return {
        /**
         * Retrieve blocks matching the specified criteria.
         * @summary cmsBlock/search
         * @param {string} [searchCriteriaFilterGroups0Filters0Field] Field
         * @param {string} [searchCriteriaFilterGroups0Filters0Value] Value
         * @param {string} [searchCriteriaFilterGroups0Filters0ConditionType] Condition type
         * @param {string} [searchCriteriaSortOrders0Field] Sorting field.
         * @param {string} [searchCriteriaSortOrders0Direction] Sorting direction.
         * @param {number} [searchCriteriaPageSize] Page size.
         * @param {number} [searchCriteriaCurrentPage] Current page.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        cmsBlockRepositoryV1GetListGet(searchCriteriaFilterGroups0Filters0Field?: string, searchCriteriaFilterGroups0Filters0Value?: string, searchCriteriaFilterGroups0Filters0ConditionType?: string, searchCriteriaSortOrders0Field?: string, searchCriteriaSortOrders0Direction?: string, searchCriteriaPageSize?: number, searchCriteriaCurrentPage?: number, options?: any): AxiosPromise<CmsDataBlockSearchResultsInterface> {
            return localVarFp.cmsBlockRepositoryV1GetListGet(searchCriteriaFilterGroups0Filters0Field, searchCriteriaFilterGroups0Filters0Value, searchCriteriaFilterGroups0Filters0ConditionType, searchCriteriaSortOrders0Field, searchCriteriaSortOrders0Direction, searchCriteriaPageSize, searchCriteriaCurrentPage, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * CmsBlockSearchApi - object-oriented interface
 * @export
 * @class CmsBlockSearchApi
 * @extends {BaseAPI}
 */
export class CmsBlockSearchApi extends BaseAPI {
    /**
     * Retrieve blocks matching the specified criteria.
     * @summary cmsBlock/search
     * @param {string} [searchCriteriaFilterGroups0Filters0Field] Field
     * @param {string} [searchCriteriaFilterGroups0Filters0Value] Value
     * @param {string} [searchCriteriaFilterGroups0Filters0ConditionType] Condition type
     * @param {string} [searchCriteriaSortOrders0Field] Sorting field.
     * @param {string} [searchCriteriaSortOrders0Direction] Sorting direction.
     * @param {number} [searchCriteriaPageSize] Page size.
     * @param {number} [searchCriteriaCurrentPage] Current page.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CmsBlockSearchApi
     */
    public cmsBlockRepositoryV1GetListGet(searchCriteriaFilterGroups0Filters0Field?: string, searchCriteriaFilterGroups0Filters0Value?: string, searchCriteriaFilterGroups0Filters0ConditionType?: string, searchCriteriaSortOrders0Field?: string, searchCriteriaSortOrders0Direction?: string, searchCriteriaPageSize?: number, searchCriteriaCurrentPage?: number, options?: AxiosRequestConfig) {
        return CmsBlockSearchApiFp(this.configuration).cmsBlockRepositoryV1GetListGet(searchCriteriaFilterGroups0Filters0Field, searchCriteriaFilterGroups0Filters0Value, searchCriteriaFilterGroups0Filters0ConditionType, searchCriteriaSortOrders0Field, searchCriteriaSortOrders0Direction, searchCriteriaPageSize, searchCriteriaCurrentPage, options).then((request) => request(this.axios, this.basePath));
    }
}


/**
 * CmsPageApi - axios parameter creator
 * @export
 */
export const CmsPageApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Save page.
         * @summary cmsPage
         * @param {CmsPageRepositoryV1SavePostRequest} [cmsPageRepositoryV1SavePostBody] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        cmsPageRepositoryV1SavePost: async (cmsPageRepositoryV1SavePostBody?: CmsPageRepositoryV1SavePostRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/V1/cmsPage`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(cmsPageRepositoryV1SavePostBody, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * CmsPageApi - functional programming interface
 * @export
 */
export const CmsPageApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = CmsPageApiAxiosParamCreator(configuration)
    return {
        /**
         * Save page.
         * @summary cmsPage
         * @param {CmsPageRepositoryV1SavePostRequest} [cmsPageRepositoryV1SavePostBody] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async cmsPageRepositoryV1SavePost(cmsPageRepositoryV1SavePostBody?: CmsPageRepositoryV1SavePostRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<CmsDataPageInterface>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.cmsPageRepositoryV1SavePost(cmsPageRepositoryV1SavePostBody, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * CmsPageApi - factory interface
 * @export
 */
export const CmsPageApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = CmsPageApiFp(configuration)
    return {
        /**
         * Save page.
         * @summary cmsPage
         * @param {CmsPageRepositoryV1SavePostRequest} [cmsPageRepositoryV1SavePostBody] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        cmsPageRepositoryV1SavePost(cmsPageRepositoryV1SavePostBody?: CmsPageRepositoryV1SavePostRequest, options?: any): AxiosPromise<CmsDataPageInterface> {
            return localVarFp.cmsPageRepositoryV1SavePost(cmsPageRepositoryV1SavePostBody, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * CmsPageApi - object-oriented interface
 * @export
 * @class CmsPageApi
 * @extends {BaseAPI}
 */
export class CmsPageApi extends BaseAPI {
    /**
     * Save page.
     * @summary cmsPage
     * @param {CmsPageRepositoryV1SavePostRequest} [cmsPageRepositoryV1SavePostBody] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CmsPageApi
     */
    public cmsPageRepositoryV1SavePost(cmsPageRepositoryV1SavePostBody?: CmsPageRepositoryV1SavePostRequest, options?: AxiosRequestConfig) {
        return CmsPageApiFp(this.configuration).cmsPageRepositoryV1SavePost(cmsPageRepositoryV1SavePostBody, options).then((request) => request(this.axios, this.basePath));
    }
}


/**
 * CmsPageIdApi - axios parameter creator
 * @export
 */
export const CmsPageIdApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Save page.
         * @summary cmsPage/{id}
         * @param {string} id 
         * @param {CmsPageRepositoryV1SavePostRequest} [cmsPageRepositoryV1SavePutBody] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        cmsPageRepositoryV1SavePut: async (id: string, cmsPageRepositoryV1SavePutBody?: CmsPageRepositoryV1SavePostRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('cmsPageRepositoryV1SavePut', 'id', id)
            const localVarPath = `/V1/cmsPage/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(cmsPageRepositoryV1SavePutBody, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * CmsPageIdApi - functional programming interface
 * @export
 */
export const CmsPageIdApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = CmsPageIdApiAxiosParamCreator(configuration)
    return {
        /**
         * Save page.
         * @summary cmsPage/{id}
         * @param {string} id 
         * @param {CmsPageRepositoryV1SavePostRequest} [cmsPageRepositoryV1SavePutBody] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async cmsPageRepositoryV1SavePut(id: string, cmsPageRepositoryV1SavePutBody?: CmsPageRepositoryV1SavePostRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<CmsDataPageInterface>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.cmsPageRepositoryV1SavePut(id, cmsPageRepositoryV1SavePutBody, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * CmsPageIdApi - factory interface
 * @export
 */
export const CmsPageIdApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = CmsPageIdApiFp(configuration)
    return {
        /**
         * Save page.
         * @summary cmsPage/{id}
         * @param {string} id 
         * @param {CmsPageRepositoryV1SavePostRequest} [cmsPageRepositoryV1SavePutBody] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        cmsPageRepositoryV1SavePut(id: string, cmsPageRepositoryV1SavePutBody?: CmsPageRepositoryV1SavePostRequest, options?: any): AxiosPromise<CmsDataPageInterface> {
            return localVarFp.cmsPageRepositoryV1SavePut(id, cmsPageRepositoryV1SavePutBody, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * CmsPageIdApi - object-oriented interface
 * @export
 * @class CmsPageIdApi
 * @extends {BaseAPI}
 */
export class CmsPageIdApi extends BaseAPI {
    /**
     * Save page.
     * @summary cmsPage/{id}
     * @param {string} id 
     * @param {CmsPageRepositoryV1SavePostRequest} [cmsPageRepositoryV1SavePutBody] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CmsPageIdApi
     */
    public cmsPageRepositoryV1SavePut(id: string, cmsPageRepositoryV1SavePutBody?: CmsPageRepositoryV1SavePostRequest, options?: AxiosRequestConfig) {
        return CmsPageIdApiFp(this.configuration).cmsPageRepositoryV1SavePut(id, cmsPageRepositoryV1SavePutBody, options).then((request) => request(this.axios, this.basePath));
    }
}


/**
 * CmsPagePageIdApi - axios parameter creator
 * @export
 */
export const CmsPagePageIdApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Delete page by ID.
         * @summary cmsPage/{pageId}
         * @param {number} pageId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        cmsPageRepositoryV1DeleteByIdDelete: async (pageId: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'pageId' is not null or undefined
            assertParamExists('cmsPageRepositoryV1DeleteByIdDelete', 'pageId', pageId)
            const localVarPath = `/V1/cmsPage/{pageId}`
                .replace(`{${"pageId"}}`, encodeURIComponent(String(pageId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Retrieve page.
         * @summary cmsPage/{pageId}
         * @param {number} pageId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        cmsPageRepositoryV1GetByIdGet: async (pageId: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'pageId' is not null or undefined
            assertParamExists('cmsPageRepositoryV1GetByIdGet', 'pageId', pageId)
            const localVarPath = `/V1/cmsPage/{pageId}`
                .replace(`{${"pageId"}}`, encodeURIComponent(String(pageId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * CmsPagePageIdApi - functional programming interface
 * @export
 */
export const CmsPagePageIdApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = CmsPagePageIdApiAxiosParamCreator(configuration)
    return {
        /**
         * Delete page by ID.
         * @summary cmsPage/{pageId}
         * @param {number} pageId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async cmsPageRepositoryV1DeleteByIdDelete(pageId: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<boolean>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.cmsPageRepositoryV1DeleteByIdDelete(pageId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Retrieve page.
         * @summary cmsPage/{pageId}
         * @param {number} pageId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async cmsPageRepositoryV1GetByIdGet(pageId: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<CmsDataPageInterface>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.cmsPageRepositoryV1GetByIdGet(pageId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * CmsPagePageIdApi - factory interface
 * @export
 */
export const CmsPagePageIdApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = CmsPagePageIdApiFp(configuration)
    return {
        /**
         * Delete page by ID.
         * @summary cmsPage/{pageId}
         * @param {number} pageId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        cmsPageRepositoryV1DeleteByIdDelete(pageId: number, options?: any): AxiosPromise<boolean> {
            return localVarFp.cmsPageRepositoryV1DeleteByIdDelete(pageId, options).then((request) => request(axios, basePath));
        },
        /**
         * Retrieve page.
         * @summary cmsPage/{pageId}
         * @param {number} pageId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        cmsPageRepositoryV1GetByIdGet(pageId: number, options?: any): AxiosPromise<CmsDataPageInterface> {
            return localVarFp.cmsPageRepositoryV1GetByIdGet(pageId, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * CmsPagePageIdApi - object-oriented interface
 * @export
 * @class CmsPagePageIdApi
 * @extends {BaseAPI}
 */
export class CmsPagePageIdApi extends BaseAPI {
    /**
     * Delete page by ID.
     * @summary cmsPage/{pageId}
     * @param {number} pageId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CmsPagePageIdApi
     */
    public cmsPageRepositoryV1DeleteByIdDelete(pageId: number, options?: AxiosRequestConfig) {
        return CmsPagePageIdApiFp(this.configuration).cmsPageRepositoryV1DeleteByIdDelete(pageId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Retrieve page.
     * @summary cmsPage/{pageId}
     * @param {number} pageId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CmsPagePageIdApi
     */
    public cmsPageRepositoryV1GetByIdGet(pageId: number, options?: AxiosRequestConfig) {
        return CmsPagePageIdApiFp(this.configuration).cmsPageRepositoryV1GetByIdGet(pageId, options).then((request) => request(this.axios, this.basePath));
    }
}


/**
 * CmsPageSearchApi - axios parameter creator
 * @export
 */
export const CmsPageSearchApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Retrieve pages matching the specified criteria.
         * @summary cmsPage/search
         * @param {string} [searchCriteriaFilterGroups0Filters0Field] Field
         * @param {string} [searchCriteriaFilterGroups0Filters0Value] Value
         * @param {string} [searchCriteriaFilterGroups0Filters0ConditionType] Condition type
         * @param {string} [searchCriteriaSortOrders0Field] Sorting field.
         * @param {string} [searchCriteriaSortOrders0Direction] Sorting direction.
         * @param {number} [searchCriteriaPageSize] Page size.
         * @param {number} [searchCriteriaCurrentPage] Current page.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        cmsPageRepositoryV1GetListGet: async (searchCriteriaFilterGroups0Filters0Field?: string, searchCriteriaFilterGroups0Filters0Value?: string, searchCriteriaFilterGroups0Filters0ConditionType?: string, searchCriteriaSortOrders0Field?: string, searchCriteriaSortOrders0Direction?: string, searchCriteriaPageSize?: number, searchCriteriaCurrentPage?: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/V1/cmsPage/search`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (searchCriteriaFilterGroups0Filters0Field !== undefined) {
                localVarQueryParameter['searchCriteria[filterGroups][0][filters][0][field]'] = searchCriteriaFilterGroups0Filters0Field;
            }

            if (searchCriteriaFilterGroups0Filters0Value !== undefined) {
                localVarQueryParameter['searchCriteria[filterGroups][0][filters][0][value]'] = searchCriteriaFilterGroups0Filters0Value;
            }

            if (searchCriteriaFilterGroups0Filters0ConditionType !== undefined) {
                localVarQueryParameter['searchCriteria[filterGroups][0][filters][0][conditionType]'] = searchCriteriaFilterGroups0Filters0ConditionType;
            }

            if (searchCriteriaSortOrders0Field !== undefined) {
                localVarQueryParameter['searchCriteria[sortOrders][0][field]'] = searchCriteriaSortOrders0Field;
            }

            if (searchCriteriaSortOrders0Direction !== undefined) {
                localVarQueryParameter['searchCriteria[sortOrders][0][direction]'] = searchCriteriaSortOrders0Direction;
            }

            if (searchCriteriaPageSize !== undefined) {
                localVarQueryParameter['searchCriteria[pageSize]'] = searchCriteriaPageSize;
            }

            if (searchCriteriaCurrentPage !== undefined) {
                localVarQueryParameter['searchCriteria[currentPage]'] = searchCriteriaCurrentPage;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * CmsPageSearchApi - functional programming interface
 * @export
 */
export const CmsPageSearchApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = CmsPageSearchApiAxiosParamCreator(configuration)
    return {
        /**
         * Retrieve pages matching the specified criteria.
         * @summary cmsPage/search
         * @param {string} [searchCriteriaFilterGroups0Filters0Field] Field
         * @param {string} [searchCriteriaFilterGroups0Filters0Value] Value
         * @param {string} [searchCriteriaFilterGroups0Filters0ConditionType] Condition type
         * @param {string} [searchCriteriaSortOrders0Field] Sorting field.
         * @param {string} [searchCriteriaSortOrders0Direction] Sorting direction.
         * @param {number} [searchCriteriaPageSize] Page size.
         * @param {number} [searchCriteriaCurrentPage] Current page.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async cmsPageRepositoryV1GetListGet(searchCriteriaFilterGroups0Filters0Field?: string, searchCriteriaFilterGroups0Filters0Value?: string, searchCriteriaFilterGroups0Filters0ConditionType?: string, searchCriteriaSortOrders0Field?: string, searchCriteriaSortOrders0Direction?: string, searchCriteriaPageSize?: number, searchCriteriaCurrentPage?: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<CmsDataPageSearchResultsInterface>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.cmsPageRepositoryV1GetListGet(searchCriteriaFilterGroups0Filters0Field, searchCriteriaFilterGroups0Filters0Value, searchCriteriaFilterGroups0Filters0ConditionType, searchCriteriaSortOrders0Field, searchCriteriaSortOrders0Direction, searchCriteriaPageSize, searchCriteriaCurrentPage, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * CmsPageSearchApi - factory interface
 * @export
 */
export const CmsPageSearchApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = CmsPageSearchApiFp(configuration)
    return {
        /**
         * Retrieve pages matching the specified criteria.
         * @summary cmsPage/search
         * @param {string} [searchCriteriaFilterGroups0Filters0Field] Field
         * @param {string} [searchCriteriaFilterGroups0Filters0Value] Value
         * @param {string} [searchCriteriaFilterGroups0Filters0ConditionType] Condition type
         * @param {string} [searchCriteriaSortOrders0Field] Sorting field.
         * @param {string} [searchCriteriaSortOrders0Direction] Sorting direction.
         * @param {number} [searchCriteriaPageSize] Page size.
         * @param {number} [searchCriteriaCurrentPage] Current page.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        cmsPageRepositoryV1GetListGet(searchCriteriaFilterGroups0Filters0Field?: string, searchCriteriaFilterGroups0Filters0Value?: string, searchCriteriaFilterGroups0Filters0ConditionType?: string, searchCriteriaSortOrders0Field?: string, searchCriteriaSortOrders0Direction?: string, searchCriteriaPageSize?: number, searchCriteriaCurrentPage?: number, options?: any): AxiosPromise<CmsDataPageSearchResultsInterface> {
            return localVarFp.cmsPageRepositoryV1GetListGet(searchCriteriaFilterGroups0Filters0Field, searchCriteriaFilterGroups0Filters0Value, searchCriteriaFilterGroups0Filters0ConditionType, searchCriteriaSortOrders0Field, searchCriteriaSortOrders0Direction, searchCriteriaPageSize, searchCriteriaCurrentPage, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * CmsPageSearchApi - object-oriented interface
 * @export
 * @class CmsPageSearchApi
 * @extends {BaseAPI}
 */
export class CmsPageSearchApi extends BaseAPI {
    /**
     * Retrieve pages matching the specified criteria.
     * @summary cmsPage/search
     * @param {string} [searchCriteriaFilterGroups0Filters0Field] Field
     * @param {string} [searchCriteriaFilterGroups0Filters0Value] Value
     * @param {string} [searchCriteriaFilterGroups0Filters0ConditionType] Condition type
     * @param {string} [searchCriteriaSortOrders0Field] Sorting field.
     * @param {string} [searchCriteriaSortOrders0Direction] Sorting direction.
     * @param {number} [searchCriteriaPageSize] Page size.
     * @param {number} [searchCriteriaCurrentPage] Current page.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CmsPageSearchApi
     */
    public cmsPageRepositoryV1GetListGet(searchCriteriaFilterGroups0Filters0Field?: string, searchCriteriaFilterGroups0Filters0Value?: string, searchCriteriaFilterGroups0Filters0ConditionType?: string, searchCriteriaSortOrders0Field?: string, searchCriteriaSortOrders0Direction?: string, searchCriteriaPageSize?: number, searchCriteriaCurrentPage?: number, options?: AxiosRequestConfig) {
        return CmsPageSearchApiFp(this.configuration).cmsPageRepositoryV1GetListGet(searchCriteriaFilterGroups0Filters0Field, searchCriteriaFilterGroups0Filters0Value, searchCriteriaFilterGroups0Filters0ConditionType, searchCriteriaSortOrders0Field, searchCriteriaSortOrders0Direction, searchCriteriaPageSize, searchCriteriaCurrentPage, options).then((request) => request(this.axios, this.basePath));
    }
}


/**
 * CompanyApi - axios parameter creator
 * @export
 */
export const CompanyApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Returns the list of companies. The list is an array of objects, and detailed information about item attributes might not be included.
         * @summary company/
         * @param {string} [searchCriteriaFilterGroups0Filters0Field] Field
         * @param {string} [searchCriteriaFilterGroups0Filters0Value] Value
         * @param {string} [searchCriteriaFilterGroups0Filters0ConditionType] Condition type
         * @param {string} [searchCriteriaSortOrders0Field] Sorting field.
         * @param {string} [searchCriteriaSortOrders0Direction] Sorting direction.
         * @param {number} [searchCriteriaPageSize] Page size.
         * @param {number} [searchCriteriaCurrentPage] Current page.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        companyCompanyRepositoryV1GetListGet: async (searchCriteriaFilterGroups0Filters0Field?: string, searchCriteriaFilterGroups0Filters0Value?: string, searchCriteriaFilterGroups0Filters0ConditionType?: string, searchCriteriaSortOrders0Field?: string, searchCriteriaSortOrders0Direction?: string, searchCriteriaPageSize?: number, searchCriteriaCurrentPage?: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/V1/company/`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (searchCriteriaFilterGroups0Filters0Field !== undefined) {
                localVarQueryParameter['searchCriteria[filterGroups][0][filters][0][field]'] = searchCriteriaFilterGroups0Filters0Field;
            }

            if (searchCriteriaFilterGroups0Filters0Value !== undefined) {
                localVarQueryParameter['searchCriteria[filterGroups][0][filters][0][value]'] = searchCriteriaFilterGroups0Filters0Value;
            }

            if (searchCriteriaFilterGroups0Filters0ConditionType !== undefined) {
                localVarQueryParameter['searchCriteria[filterGroups][0][filters][0][conditionType]'] = searchCriteriaFilterGroups0Filters0ConditionType;
            }

            if (searchCriteriaSortOrders0Field !== undefined) {
                localVarQueryParameter['searchCriteria[sortOrders][0][field]'] = searchCriteriaSortOrders0Field;
            }

            if (searchCriteriaSortOrders0Direction !== undefined) {
                localVarQueryParameter['searchCriteria[sortOrders][0][direction]'] = searchCriteriaSortOrders0Direction;
            }

            if (searchCriteriaPageSize !== undefined) {
                localVarQueryParameter['searchCriteria[pageSize]'] = searchCriteriaPageSize;
            }

            if (searchCriteriaCurrentPage !== undefined) {
                localVarQueryParameter['searchCriteria[currentPage]'] = searchCriteriaCurrentPage;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Create or update a company account.
         * @summary company/
         * @param {CompanyCompanyRepositoryV1SavePostRequest} [companyCompanyRepositoryV1SavePostBody] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        companyCompanyRepositoryV1SavePost: async (companyCompanyRepositoryV1SavePostBody?: CompanyCompanyRepositoryV1SavePostRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/V1/company/`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(companyCompanyRepositoryV1SavePostBody, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * CompanyApi - functional programming interface
 * @export
 */
export const CompanyApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = CompanyApiAxiosParamCreator(configuration)
    return {
        /**
         * Returns the list of companies. The list is an array of objects, and detailed information about item attributes might not be included.
         * @summary company/
         * @param {string} [searchCriteriaFilterGroups0Filters0Field] Field
         * @param {string} [searchCriteriaFilterGroups0Filters0Value] Value
         * @param {string} [searchCriteriaFilterGroups0Filters0ConditionType] Condition type
         * @param {string} [searchCriteriaSortOrders0Field] Sorting field.
         * @param {string} [searchCriteriaSortOrders0Direction] Sorting direction.
         * @param {number} [searchCriteriaPageSize] Page size.
         * @param {number} [searchCriteriaCurrentPage] Current page.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async companyCompanyRepositoryV1GetListGet(searchCriteriaFilterGroups0Filters0Field?: string, searchCriteriaFilterGroups0Filters0Value?: string, searchCriteriaFilterGroups0Filters0ConditionType?: string, searchCriteriaSortOrders0Field?: string, searchCriteriaSortOrders0Direction?: string, searchCriteriaPageSize?: number, searchCriteriaCurrentPage?: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<CompanyDataCompanySearchResultsInterface>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.companyCompanyRepositoryV1GetListGet(searchCriteriaFilterGroups0Filters0Field, searchCriteriaFilterGroups0Filters0Value, searchCriteriaFilterGroups0Filters0ConditionType, searchCriteriaSortOrders0Field, searchCriteriaSortOrders0Direction, searchCriteriaPageSize, searchCriteriaCurrentPage, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Create or update a company account.
         * @summary company/
         * @param {CompanyCompanyRepositoryV1SavePostRequest} [companyCompanyRepositoryV1SavePostBody] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async companyCompanyRepositoryV1SavePost(companyCompanyRepositoryV1SavePostBody?: CompanyCompanyRepositoryV1SavePostRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<CompanyDataCompanyInterface>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.companyCompanyRepositoryV1SavePost(companyCompanyRepositoryV1SavePostBody, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * CompanyApi - factory interface
 * @export
 */
export const CompanyApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = CompanyApiFp(configuration)
    return {
        /**
         * Returns the list of companies. The list is an array of objects, and detailed information about item attributes might not be included.
         * @summary company/
         * @param {string} [searchCriteriaFilterGroups0Filters0Field] Field
         * @param {string} [searchCriteriaFilterGroups0Filters0Value] Value
         * @param {string} [searchCriteriaFilterGroups0Filters0ConditionType] Condition type
         * @param {string} [searchCriteriaSortOrders0Field] Sorting field.
         * @param {string} [searchCriteriaSortOrders0Direction] Sorting direction.
         * @param {number} [searchCriteriaPageSize] Page size.
         * @param {number} [searchCriteriaCurrentPage] Current page.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        companyCompanyRepositoryV1GetListGet(searchCriteriaFilterGroups0Filters0Field?: string, searchCriteriaFilterGroups0Filters0Value?: string, searchCriteriaFilterGroups0Filters0ConditionType?: string, searchCriteriaSortOrders0Field?: string, searchCriteriaSortOrders0Direction?: string, searchCriteriaPageSize?: number, searchCriteriaCurrentPage?: number, options?: any): AxiosPromise<CompanyDataCompanySearchResultsInterface> {
            return localVarFp.companyCompanyRepositoryV1GetListGet(searchCriteriaFilterGroups0Filters0Field, searchCriteriaFilterGroups0Filters0Value, searchCriteriaFilterGroups0Filters0ConditionType, searchCriteriaSortOrders0Field, searchCriteriaSortOrders0Direction, searchCriteriaPageSize, searchCriteriaCurrentPage, options).then((request) => request(axios, basePath));
        },
        /**
         * Create or update a company account.
         * @summary company/
         * @param {CompanyCompanyRepositoryV1SavePostRequest} [companyCompanyRepositoryV1SavePostBody] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        companyCompanyRepositoryV1SavePost(companyCompanyRepositoryV1SavePostBody?: CompanyCompanyRepositoryV1SavePostRequest, options?: any): AxiosPromise<CompanyDataCompanyInterface> {
            return localVarFp.companyCompanyRepositoryV1SavePost(companyCompanyRepositoryV1SavePostBody, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * CompanyApi - object-oriented interface
 * @export
 * @class CompanyApi
 * @extends {BaseAPI}
 */
export class CompanyApi extends BaseAPI {
    /**
     * Returns the list of companies. The list is an array of objects, and detailed information about item attributes might not be included.
     * @summary company/
     * @param {string} [searchCriteriaFilterGroups0Filters0Field] Field
     * @param {string} [searchCriteriaFilterGroups0Filters0Value] Value
     * @param {string} [searchCriteriaFilterGroups0Filters0ConditionType] Condition type
     * @param {string} [searchCriteriaSortOrders0Field] Sorting field.
     * @param {string} [searchCriteriaSortOrders0Direction] Sorting direction.
     * @param {number} [searchCriteriaPageSize] Page size.
     * @param {number} [searchCriteriaCurrentPage] Current page.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CompanyApi
     */
    public companyCompanyRepositoryV1GetListGet(searchCriteriaFilterGroups0Filters0Field?: string, searchCriteriaFilterGroups0Filters0Value?: string, searchCriteriaFilterGroups0Filters0ConditionType?: string, searchCriteriaSortOrders0Field?: string, searchCriteriaSortOrders0Direction?: string, searchCriteriaPageSize?: number, searchCriteriaCurrentPage?: number, options?: AxiosRequestConfig) {
        return CompanyApiFp(this.configuration).companyCompanyRepositoryV1GetListGet(searchCriteriaFilterGroups0Filters0Field, searchCriteriaFilterGroups0Filters0Value, searchCriteriaFilterGroups0Filters0ConditionType, searchCriteriaSortOrders0Field, searchCriteriaSortOrders0Direction, searchCriteriaPageSize, searchCriteriaCurrentPage, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Create or update a company account.
     * @summary company/
     * @param {CompanyCompanyRepositoryV1SavePostRequest} [companyCompanyRepositoryV1SavePostBody] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CompanyApi
     */
    public companyCompanyRepositoryV1SavePost(companyCompanyRepositoryV1SavePostBody?: CompanyCompanyRepositoryV1SavePostRequest, options?: AxiosRequestConfig) {
        return CompanyApiFp(this.configuration).companyCompanyRepositoryV1SavePost(companyCompanyRepositoryV1SavePostBody, options).then((request) => request(this.axios, this.basePath));
    }
}


/**
 * CompanyAssignRolesApi - axios parameter creator
 * @export
 */
export const CompanyAssignRolesApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Change a role for a company user.
         * @summary company/assignRoles
         * @param {CompanyAclV1AssignRolesPutRequest} [companyAclV1AssignRolesPutBody] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        companyAclV1AssignRolesPut: async (companyAclV1AssignRolesPutBody?: CompanyAclV1AssignRolesPutRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/V1/company/assignRoles`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(companyAclV1AssignRolesPutBody, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * CompanyAssignRolesApi - functional programming interface
 * @export
 */
export const CompanyAssignRolesApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = CompanyAssignRolesApiAxiosParamCreator(configuration)
    return {
        /**
         * Change a role for a company user.
         * @summary company/assignRoles
         * @param {CompanyAclV1AssignRolesPutRequest} [companyAclV1AssignRolesPutBody] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async companyAclV1AssignRolesPut(companyAclV1AssignRolesPutBody?: CompanyAclV1AssignRolesPutRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<boolean>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.companyAclV1AssignRolesPut(companyAclV1AssignRolesPutBody, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * CompanyAssignRolesApi - factory interface
 * @export
 */
export const CompanyAssignRolesApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = CompanyAssignRolesApiFp(configuration)
    return {
        /**
         * Change a role for a company user.
         * @summary company/assignRoles
         * @param {CompanyAclV1AssignRolesPutRequest} [companyAclV1AssignRolesPutBody] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        companyAclV1AssignRolesPut(companyAclV1AssignRolesPutBody?: CompanyAclV1AssignRolesPutRequest, options?: any): AxiosPromise<boolean> {
            return localVarFp.companyAclV1AssignRolesPut(companyAclV1AssignRolesPutBody, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * CompanyAssignRolesApi - object-oriented interface
 * @export
 * @class CompanyAssignRolesApi
 * @extends {BaseAPI}
 */
export class CompanyAssignRolesApi extends BaseAPI {
    /**
     * Change a role for a company user.
     * @summary company/assignRoles
     * @param {CompanyAclV1AssignRolesPutRequest} [companyAclV1AssignRolesPutBody] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CompanyAssignRolesApi
     */
    public companyAclV1AssignRolesPut(companyAclV1AssignRolesPutBody?: CompanyAclV1AssignRolesPutRequest, options?: AxiosRequestConfig) {
        return CompanyAssignRolesApiFp(this.configuration).companyAclV1AssignRolesPut(companyAclV1AssignRolesPutBody, options).then((request) => request(this.axios, this.basePath));
    }
}


/**
 * CompanyCompanyIdApi - axios parameter creator
 * @export
 */
export const CompanyCompanyIdApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Delete a company. Customers belonging to a company are not deleted with this request.
         * @summary company/{companyId}
         * @param {number} companyId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        companyCompanyRepositoryV1DeleteByIdDelete: async (companyId: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'companyId' is not null or undefined
            assertParamExists('companyCompanyRepositoryV1DeleteByIdDelete', 'companyId', companyId)
            const localVarPath = `/V1/company/{companyId}`
                .replace(`{${"companyId"}}`, encodeURIComponent(String(companyId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Returns company details.
         * @summary company/{companyId}
         * @param {number} companyId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        companyCompanyRepositoryV1GetGet: async (companyId: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'companyId' is not null or undefined
            assertParamExists('companyCompanyRepositoryV1GetGet', 'companyId', companyId)
            const localVarPath = `/V1/company/{companyId}`
                .replace(`{${"companyId"}}`, encodeURIComponent(String(companyId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Create or update a company account.
         * @summary company/{companyId}
         * @param {string} companyId 
         * @param {CompanyCompanyRepositoryV1SavePostRequest} [companyCompanyRepositoryV1SavePutBody] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        companyCompanyRepositoryV1SavePut: async (companyId: string, companyCompanyRepositoryV1SavePutBody?: CompanyCompanyRepositoryV1SavePostRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'companyId' is not null or undefined
            assertParamExists('companyCompanyRepositoryV1SavePut', 'companyId', companyId)
            const localVarPath = `/V1/company/{companyId}`
                .replace(`{${"companyId"}}`, encodeURIComponent(String(companyId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(companyCompanyRepositoryV1SavePutBody, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * CompanyCompanyIdApi - functional programming interface
 * @export
 */
export const CompanyCompanyIdApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = CompanyCompanyIdApiAxiosParamCreator(configuration)
    return {
        /**
         * Delete a company. Customers belonging to a company are not deleted with this request.
         * @summary company/{companyId}
         * @param {number} companyId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async companyCompanyRepositoryV1DeleteByIdDelete(companyId: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<boolean>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.companyCompanyRepositoryV1DeleteByIdDelete(companyId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Returns company details.
         * @summary company/{companyId}
         * @param {number} companyId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async companyCompanyRepositoryV1GetGet(companyId: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<CompanyDataCompanyInterface>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.companyCompanyRepositoryV1GetGet(companyId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Create or update a company account.
         * @summary company/{companyId}
         * @param {string} companyId 
         * @param {CompanyCompanyRepositoryV1SavePostRequest} [companyCompanyRepositoryV1SavePutBody] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async companyCompanyRepositoryV1SavePut(companyId: string, companyCompanyRepositoryV1SavePutBody?: CompanyCompanyRepositoryV1SavePostRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<CompanyDataCompanyInterface>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.companyCompanyRepositoryV1SavePut(companyId, companyCompanyRepositoryV1SavePutBody, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * CompanyCompanyIdApi - factory interface
 * @export
 */
export const CompanyCompanyIdApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = CompanyCompanyIdApiFp(configuration)
    return {
        /**
         * Delete a company. Customers belonging to a company are not deleted with this request.
         * @summary company/{companyId}
         * @param {number} companyId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        companyCompanyRepositoryV1DeleteByIdDelete(companyId: number, options?: any): AxiosPromise<boolean> {
            return localVarFp.companyCompanyRepositoryV1DeleteByIdDelete(companyId, options).then((request) => request(axios, basePath));
        },
        /**
         * Returns company details.
         * @summary company/{companyId}
         * @param {number} companyId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        companyCompanyRepositoryV1GetGet(companyId: number, options?: any): AxiosPromise<CompanyDataCompanyInterface> {
            return localVarFp.companyCompanyRepositoryV1GetGet(companyId, options).then((request) => request(axios, basePath));
        },
        /**
         * Create or update a company account.
         * @summary company/{companyId}
         * @param {string} companyId 
         * @param {CompanyCompanyRepositoryV1SavePostRequest} [companyCompanyRepositoryV1SavePutBody] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        companyCompanyRepositoryV1SavePut(companyId: string, companyCompanyRepositoryV1SavePutBody?: CompanyCompanyRepositoryV1SavePostRequest, options?: any): AxiosPromise<CompanyDataCompanyInterface> {
            return localVarFp.companyCompanyRepositoryV1SavePut(companyId, companyCompanyRepositoryV1SavePutBody, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * CompanyCompanyIdApi - object-oriented interface
 * @export
 * @class CompanyCompanyIdApi
 * @extends {BaseAPI}
 */
export class CompanyCompanyIdApi extends BaseAPI {
    /**
     * Delete a company. Customers belonging to a company are not deleted with this request.
     * @summary company/{companyId}
     * @param {number} companyId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CompanyCompanyIdApi
     */
    public companyCompanyRepositoryV1DeleteByIdDelete(companyId: number, options?: AxiosRequestConfig) {
        return CompanyCompanyIdApiFp(this.configuration).companyCompanyRepositoryV1DeleteByIdDelete(companyId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Returns company details.
     * @summary company/{companyId}
     * @param {number} companyId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CompanyCompanyIdApi
     */
    public companyCompanyRepositoryV1GetGet(companyId: number, options?: AxiosRequestConfig) {
        return CompanyCompanyIdApiFp(this.configuration).companyCompanyRepositoryV1GetGet(companyId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Create or update a company account.
     * @summary company/{companyId}
     * @param {string} companyId 
     * @param {CompanyCompanyRepositoryV1SavePostRequest} [companyCompanyRepositoryV1SavePutBody] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CompanyCompanyIdApi
     */
    public companyCompanyRepositoryV1SavePut(companyId: string, companyCompanyRepositoryV1SavePutBody?: CompanyCompanyRepositoryV1SavePostRequest, options?: AxiosRequestConfig) {
        return CompanyCompanyIdApiFp(this.configuration).companyCompanyRepositoryV1SavePut(companyId, companyCompanyRepositoryV1SavePutBody, options).then((request) => request(this.axios, this.basePath));
    }
}


/**
 * CompanyCreditsApi - axios parameter creator
 * @export
 */
export const CompanyCreditsApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Returns the list of credits for specified companies.
         * @summary companyCredits/
         * @param {string} [searchCriteriaFilterGroups0Filters0Field] Field
         * @param {string} [searchCriteriaFilterGroups0Filters0Value] Value
         * @param {string} [searchCriteriaFilterGroups0Filters0ConditionType] Condition type
         * @param {string} [searchCriteriaSortOrders0Field] Sorting field.
         * @param {string} [searchCriteriaSortOrders0Direction] Sorting direction.
         * @param {number} [searchCriteriaPageSize] Page size.
         * @param {number} [searchCriteriaCurrentPage] Current page.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        companyCreditCreditLimitRepositoryV1GetListGet: async (searchCriteriaFilterGroups0Filters0Field?: string, searchCriteriaFilterGroups0Filters0Value?: string, searchCriteriaFilterGroups0Filters0ConditionType?: string, searchCriteriaSortOrders0Field?: string, searchCriteriaSortOrders0Direction?: string, searchCriteriaPageSize?: number, searchCriteriaCurrentPage?: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/V1/companyCredits/`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (searchCriteriaFilterGroups0Filters0Field !== undefined) {
                localVarQueryParameter['searchCriteria[filterGroups][0][filters][0][field]'] = searchCriteriaFilterGroups0Filters0Field;
            }

            if (searchCriteriaFilterGroups0Filters0Value !== undefined) {
                localVarQueryParameter['searchCriteria[filterGroups][0][filters][0][value]'] = searchCriteriaFilterGroups0Filters0Value;
            }

            if (searchCriteriaFilterGroups0Filters0ConditionType !== undefined) {
                localVarQueryParameter['searchCriteria[filterGroups][0][filters][0][conditionType]'] = searchCriteriaFilterGroups0Filters0ConditionType;
            }

            if (searchCriteriaSortOrders0Field !== undefined) {
                localVarQueryParameter['searchCriteria[sortOrders][0][field]'] = searchCriteriaSortOrders0Field;
            }

            if (searchCriteriaSortOrders0Direction !== undefined) {
                localVarQueryParameter['searchCriteria[sortOrders][0][direction]'] = searchCriteriaSortOrders0Direction;
            }

            if (searchCriteriaPageSize !== undefined) {
                localVarQueryParameter['searchCriteria[pageSize]'] = searchCriteriaPageSize;
            }

            if (searchCriteriaCurrentPage !== undefined) {
                localVarQueryParameter['searchCriteria[currentPage]'] = searchCriteriaCurrentPage;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * CompanyCreditsApi - functional programming interface
 * @export
 */
export const CompanyCreditsApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = CompanyCreditsApiAxiosParamCreator(configuration)
    return {
        /**
         * Returns the list of credits for specified companies.
         * @summary companyCredits/
         * @param {string} [searchCriteriaFilterGroups0Filters0Field] Field
         * @param {string} [searchCriteriaFilterGroups0Filters0Value] Value
         * @param {string} [searchCriteriaFilterGroups0Filters0ConditionType] Condition type
         * @param {string} [searchCriteriaSortOrders0Field] Sorting field.
         * @param {string} [searchCriteriaSortOrders0Direction] Sorting direction.
         * @param {number} [searchCriteriaPageSize] Page size.
         * @param {number} [searchCriteriaCurrentPage] Current page.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async companyCreditCreditLimitRepositoryV1GetListGet(searchCriteriaFilterGroups0Filters0Field?: string, searchCriteriaFilterGroups0Filters0Value?: string, searchCriteriaFilterGroups0Filters0ConditionType?: string, searchCriteriaSortOrders0Field?: string, searchCriteriaSortOrders0Direction?: string, searchCriteriaPageSize?: number, searchCriteriaCurrentPage?: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<CompanyCreditDataCreditLimitSearchResultsInterface>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.companyCreditCreditLimitRepositoryV1GetListGet(searchCriteriaFilterGroups0Filters0Field, searchCriteriaFilterGroups0Filters0Value, searchCriteriaFilterGroups0Filters0ConditionType, searchCriteriaSortOrders0Field, searchCriteriaSortOrders0Direction, searchCriteriaPageSize, searchCriteriaCurrentPage, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * CompanyCreditsApi - factory interface
 * @export
 */
export const CompanyCreditsApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = CompanyCreditsApiFp(configuration)
    return {
        /**
         * Returns the list of credits for specified companies.
         * @summary companyCredits/
         * @param {string} [searchCriteriaFilterGroups0Filters0Field] Field
         * @param {string} [searchCriteriaFilterGroups0Filters0Value] Value
         * @param {string} [searchCriteriaFilterGroups0Filters0ConditionType] Condition type
         * @param {string} [searchCriteriaSortOrders0Field] Sorting field.
         * @param {string} [searchCriteriaSortOrders0Direction] Sorting direction.
         * @param {number} [searchCriteriaPageSize] Page size.
         * @param {number} [searchCriteriaCurrentPage] Current page.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        companyCreditCreditLimitRepositoryV1GetListGet(searchCriteriaFilterGroups0Filters0Field?: string, searchCriteriaFilterGroups0Filters0Value?: string, searchCriteriaFilterGroups0Filters0ConditionType?: string, searchCriteriaSortOrders0Field?: string, searchCriteriaSortOrders0Direction?: string, searchCriteriaPageSize?: number, searchCriteriaCurrentPage?: number, options?: any): AxiosPromise<CompanyCreditDataCreditLimitSearchResultsInterface> {
            return localVarFp.companyCreditCreditLimitRepositoryV1GetListGet(searchCriteriaFilterGroups0Filters0Field, searchCriteriaFilterGroups0Filters0Value, searchCriteriaFilterGroups0Filters0ConditionType, searchCriteriaSortOrders0Field, searchCriteriaSortOrders0Direction, searchCriteriaPageSize, searchCriteriaCurrentPage, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * CompanyCreditsApi - object-oriented interface
 * @export
 * @class CompanyCreditsApi
 * @extends {BaseAPI}
 */
export class CompanyCreditsApi extends BaseAPI {
    /**
     * Returns the list of credits for specified companies.
     * @summary companyCredits/
     * @param {string} [searchCriteriaFilterGroups0Filters0Field] Field
     * @param {string} [searchCriteriaFilterGroups0Filters0Value] Value
     * @param {string} [searchCriteriaFilterGroups0Filters0ConditionType] Condition type
     * @param {string} [searchCriteriaSortOrders0Field] Sorting field.
     * @param {string} [searchCriteriaSortOrders0Direction] Sorting direction.
     * @param {number} [searchCriteriaPageSize] Page size.
     * @param {number} [searchCriteriaCurrentPage] Current page.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CompanyCreditsApi
     */
    public companyCreditCreditLimitRepositoryV1GetListGet(searchCriteriaFilterGroups0Filters0Field?: string, searchCriteriaFilterGroups0Filters0Value?: string, searchCriteriaFilterGroups0Filters0ConditionType?: string, searchCriteriaSortOrders0Field?: string, searchCriteriaSortOrders0Direction?: string, searchCriteriaPageSize?: number, searchCriteriaCurrentPage?: number, options?: AxiosRequestConfig) {
        return CompanyCreditsApiFp(this.configuration).companyCreditCreditLimitRepositoryV1GetListGet(searchCriteriaFilterGroups0Filters0Field, searchCriteriaFilterGroups0Filters0Value, searchCriteriaFilterGroups0Filters0ConditionType, searchCriteriaSortOrders0Field, searchCriteriaSortOrders0Direction, searchCriteriaPageSize, searchCriteriaCurrentPage, options).then((request) => request(this.axios, this.basePath));
    }
}


/**
 * CompanyCreditsCompanyCompanyIdApi - axios parameter creator
 * @export
 */
export const CompanyCreditsCompanyCompanyIdApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Returns data on the credit limit for a specified company.
         * @summary companyCredits/company/{companyId}
         * @param {number} companyId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        companyCreditCreditLimitManagementV1GetCreditByCompanyIdGet: async (companyId: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'companyId' is not null or undefined
            assertParamExists('companyCreditCreditLimitManagementV1GetCreditByCompanyIdGet', 'companyId', companyId)
            const localVarPath = `/V1/companyCredits/company/{companyId}`
                .replace(`{${"companyId"}}`, encodeURIComponent(String(companyId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * CompanyCreditsCompanyCompanyIdApi - functional programming interface
 * @export
 */
export const CompanyCreditsCompanyCompanyIdApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = CompanyCreditsCompanyCompanyIdApiAxiosParamCreator(configuration)
    return {
        /**
         * Returns data on the credit limit for a specified company.
         * @summary companyCredits/company/{companyId}
         * @param {number} companyId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async companyCreditCreditLimitManagementV1GetCreditByCompanyIdGet(companyId: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<CompanyCreditDataCreditLimitInterface>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.companyCreditCreditLimitManagementV1GetCreditByCompanyIdGet(companyId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * CompanyCreditsCompanyCompanyIdApi - factory interface
 * @export
 */
export const CompanyCreditsCompanyCompanyIdApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = CompanyCreditsCompanyCompanyIdApiFp(configuration)
    return {
        /**
         * Returns data on the credit limit for a specified company.
         * @summary companyCredits/company/{companyId}
         * @param {number} companyId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        companyCreditCreditLimitManagementV1GetCreditByCompanyIdGet(companyId: number, options?: any): AxiosPromise<CompanyCreditDataCreditLimitInterface> {
            return localVarFp.companyCreditCreditLimitManagementV1GetCreditByCompanyIdGet(companyId, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * CompanyCreditsCompanyCompanyIdApi - object-oriented interface
 * @export
 * @class CompanyCreditsCompanyCompanyIdApi
 * @extends {BaseAPI}
 */
export class CompanyCreditsCompanyCompanyIdApi extends BaseAPI {
    /**
     * Returns data on the credit limit for a specified company.
     * @summary companyCredits/company/{companyId}
     * @param {number} companyId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CompanyCreditsCompanyCompanyIdApi
     */
    public companyCreditCreditLimitManagementV1GetCreditByCompanyIdGet(companyId: number, options?: AxiosRequestConfig) {
        return CompanyCreditsCompanyCompanyIdApiFp(this.configuration).companyCreditCreditLimitManagementV1GetCreditByCompanyIdGet(companyId, options).then((request) => request(this.axios, this.basePath));
    }
}


/**
 * CompanyCreditsCreditIdApi - axios parameter creator
 * @export
 */
export const CompanyCreditsCreditIdApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Returns data on the credit limit for a specified credit limit ID.
         * @summary companyCredits/{creditId}
         * @param {number} creditId 
         * @param {boolean} [reload] [optional]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        companyCreditCreditLimitRepositoryV1GetGet: async (creditId: number, reload?: boolean, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'creditId' is not null or undefined
            assertParamExists('companyCreditCreditLimitRepositoryV1GetGet', 'creditId', creditId)
            const localVarPath = `/V1/companyCredits/{creditId}`
                .replace(`{${"creditId"}}`, encodeURIComponent(String(creditId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (reload !== undefined) {
                localVarQueryParameter['reload'] = reload;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * CompanyCreditsCreditIdApi - functional programming interface
 * @export
 */
export const CompanyCreditsCreditIdApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = CompanyCreditsCreditIdApiAxiosParamCreator(configuration)
    return {
        /**
         * Returns data on the credit limit for a specified credit limit ID.
         * @summary companyCredits/{creditId}
         * @param {number} creditId 
         * @param {boolean} [reload] [optional]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async companyCreditCreditLimitRepositoryV1GetGet(creditId: number, reload?: boolean, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<CompanyCreditDataCreditLimitInterface>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.companyCreditCreditLimitRepositoryV1GetGet(creditId, reload, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * CompanyCreditsCreditIdApi - factory interface
 * @export
 */
export const CompanyCreditsCreditIdApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = CompanyCreditsCreditIdApiFp(configuration)
    return {
        /**
         * Returns data on the credit limit for a specified credit limit ID.
         * @summary companyCredits/{creditId}
         * @param {number} creditId 
         * @param {boolean} [reload] [optional]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        companyCreditCreditLimitRepositoryV1GetGet(creditId: number, reload?: boolean, options?: any): AxiosPromise<CompanyCreditDataCreditLimitInterface> {
            return localVarFp.companyCreditCreditLimitRepositoryV1GetGet(creditId, reload, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * CompanyCreditsCreditIdApi - object-oriented interface
 * @export
 * @class CompanyCreditsCreditIdApi
 * @extends {BaseAPI}
 */
export class CompanyCreditsCreditIdApi extends BaseAPI {
    /**
     * Returns data on the credit limit for a specified credit limit ID.
     * @summary companyCredits/{creditId}
     * @param {number} creditId 
     * @param {boolean} [reload] [optional]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CompanyCreditsCreditIdApi
     */
    public companyCreditCreditLimitRepositoryV1GetGet(creditId: number, reload?: boolean, options?: AxiosRequestConfig) {
        return CompanyCreditsCreditIdApiFp(this.configuration).companyCreditCreditLimitRepositoryV1GetGet(creditId, reload, options).then((request) => request(this.axios, this.basePath));
    }
}


/**
 * CompanyCreditsCreditIdDecreaseBalanceApi - axios parameter creator
 * @export
 */
export const CompanyCreditsCreditIdDecreaseBalanceApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Decreases the company credit with an Update, Reimburse, or Purchase transaction. This transaction increases company\'s outstanding balance and decreases company\'s available credit.
         * @summary companyCredits/{creditId}/decreaseBalance
         * @param {number} creditId 
         * @param {CompanyCreditCreditBalanceManagementV1DecreasePostRequest} [companyCreditCreditBalanceManagementV1DecreasePostBody] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        companyCreditCreditBalanceManagementV1DecreasePost: async (creditId: number, companyCreditCreditBalanceManagementV1DecreasePostBody?: CompanyCreditCreditBalanceManagementV1DecreasePostRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'creditId' is not null or undefined
            assertParamExists('companyCreditCreditBalanceManagementV1DecreasePost', 'creditId', creditId)
            const localVarPath = `/V1/companyCredits/{creditId}/decreaseBalance`
                .replace(`{${"creditId"}}`, encodeURIComponent(String(creditId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(companyCreditCreditBalanceManagementV1DecreasePostBody, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * CompanyCreditsCreditIdDecreaseBalanceApi - functional programming interface
 * @export
 */
export const CompanyCreditsCreditIdDecreaseBalanceApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = CompanyCreditsCreditIdDecreaseBalanceApiAxiosParamCreator(configuration)
    return {
        /**
         * Decreases the company credit with an Update, Reimburse, or Purchase transaction. This transaction increases company\'s outstanding balance and decreases company\'s available credit.
         * @summary companyCredits/{creditId}/decreaseBalance
         * @param {number} creditId 
         * @param {CompanyCreditCreditBalanceManagementV1DecreasePostRequest} [companyCreditCreditBalanceManagementV1DecreasePostBody] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async companyCreditCreditBalanceManagementV1DecreasePost(creditId: number, companyCreditCreditBalanceManagementV1DecreasePostBody?: CompanyCreditCreditBalanceManagementV1DecreasePostRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<boolean>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.companyCreditCreditBalanceManagementV1DecreasePost(creditId, companyCreditCreditBalanceManagementV1DecreasePostBody, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * CompanyCreditsCreditIdDecreaseBalanceApi - factory interface
 * @export
 */
export const CompanyCreditsCreditIdDecreaseBalanceApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = CompanyCreditsCreditIdDecreaseBalanceApiFp(configuration)
    return {
        /**
         * Decreases the company credit with an Update, Reimburse, or Purchase transaction. This transaction increases company\'s outstanding balance and decreases company\'s available credit.
         * @summary companyCredits/{creditId}/decreaseBalance
         * @param {number} creditId 
         * @param {CompanyCreditCreditBalanceManagementV1DecreasePostRequest} [companyCreditCreditBalanceManagementV1DecreasePostBody] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        companyCreditCreditBalanceManagementV1DecreasePost(creditId: number, companyCreditCreditBalanceManagementV1DecreasePostBody?: CompanyCreditCreditBalanceManagementV1DecreasePostRequest, options?: any): AxiosPromise<boolean> {
            return localVarFp.companyCreditCreditBalanceManagementV1DecreasePost(creditId, companyCreditCreditBalanceManagementV1DecreasePostBody, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * CompanyCreditsCreditIdDecreaseBalanceApi - object-oriented interface
 * @export
 * @class CompanyCreditsCreditIdDecreaseBalanceApi
 * @extends {BaseAPI}
 */
export class CompanyCreditsCreditIdDecreaseBalanceApi extends BaseAPI {
    /**
     * Decreases the company credit with an Update, Reimburse, or Purchase transaction. This transaction increases company\'s outstanding balance and decreases company\'s available credit.
     * @summary companyCredits/{creditId}/decreaseBalance
     * @param {number} creditId 
     * @param {CompanyCreditCreditBalanceManagementV1DecreasePostRequest} [companyCreditCreditBalanceManagementV1DecreasePostBody] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CompanyCreditsCreditIdDecreaseBalanceApi
     */
    public companyCreditCreditBalanceManagementV1DecreasePost(creditId: number, companyCreditCreditBalanceManagementV1DecreasePostBody?: CompanyCreditCreditBalanceManagementV1DecreasePostRequest, options?: AxiosRequestConfig) {
        return CompanyCreditsCreditIdDecreaseBalanceApiFp(this.configuration).companyCreditCreditBalanceManagementV1DecreasePost(creditId, companyCreditCreditBalanceManagementV1DecreasePostBody, options).then((request) => request(this.axios, this.basePath));
    }
}


/**
 * CompanyCreditsCreditIdIncreaseBalanceApi - axios parameter creator
 * @export
 */
export const CompanyCreditsCreditIdIncreaseBalanceApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Increases the company credit with an Allocate, Update, Refund, Revert, or Reimburse transaction. This transaction decreases company\'s outstanding balance and increases company\'s available credit.
         * @summary companyCredits/{creditId}/increaseBalance
         * @param {number} creditId 
         * @param {CompanyCreditCreditBalanceManagementV1DecreasePostRequest} [companyCreditCreditBalanceManagementV1IncreasePostBody] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        companyCreditCreditBalanceManagementV1IncreasePost: async (creditId: number, companyCreditCreditBalanceManagementV1IncreasePostBody?: CompanyCreditCreditBalanceManagementV1DecreasePostRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'creditId' is not null or undefined
            assertParamExists('companyCreditCreditBalanceManagementV1IncreasePost', 'creditId', creditId)
            const localVarPath = `/V1/companyCredits/{creditId}/increaseBalance`
                .replace(`{${"creditId"}}`, encodeURIComponent(String(creditId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(companyCreditCreditBalanceManagementV1IncreasePostBody, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * CompanyCreditsCreditIdIncreaseBalanceApi - functional programming interface
 * @export
 */
export const CompanyCreditsCreditIdIncreaseBalanceApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = CompanyCreditsCreditIdIncreaseBalanceApiAxiosParamCreator(configuration)
    return {
        /**
         * Increases the company credit with an Allocate, Update, Refund, Revert, or Reimburse transaction. This transaction decreases company\'s outstanding balance and increases company\'s available credit.
         * @summary companyCredits/{creditId}/increaseBalance
         * @param {number} creditId 
         * @param {CompanyCreditCreditBalanceManagementV1DecreasePostRequest} [companyCreditCreditBalanceManagementV1IncreasePostBody] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async companyCreditCreditBalanceManagementV1IncreasePost(creditId: number, companyCreditCreditBalanceManagementV1IncreasePostBody?: CompanyCreditCreditBalanceManagementV1DecreasePostRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<boolean>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.companyCreditCreditBalanceManagementV1IncreasePost(creditId, companyCreditCreditBalanceManagementV1IncreasePostBody, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * CompanyCreditsCreditIdIncreaseBalanceApi - factory interface
 * @export
 */
export const CompanyCreditsCreditIdIncreaseBalanceApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = CompanyCreditsCreditIdIncreaseBalanceApiFp(configuration)
    return {
        /**
         * Increases the company credit with an Allocate, Update, Refund, Revert, or Reimburse transaction. This transaction decreases company\'s outstanding balance and increases company\'s available credit.
         * @summary companyCredits/{creditId}/increaseBalance
         * @param {number} creditId 
         * @param {CompanyCreditCreditBalanceManagementV1DecreasePostRequest} [companyCreditCreditBalanceManagementV1IncreasePostBody] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        companyCreditCreditBalanceManagementV1IncreasePost(creditId: number, companyCreditCreditBalanceManagementV1IncreasePostBody?: CompanyCreditCreditBalanceManagementV1DecreasePostRequest, options?: any): AxiosPromise<boolean> {
            return localVarFp.companyCreditCreditBalanceManagementV1IncreasePost(creditId, companyCreditCreditBalanceManagementV1IncreasePostBody, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * CompanyCreditsCreditIdIncreaseBalanceApi - object-oriented interface
 * @export
 * @class CompanyCreditsCreditIdIncreaseBalanceApi
 * @extends {BaseAPI}
 */
export class CompanyCreditsCreditIdIncreaseBalanceApi extends BaseAPI {
    /**
     * Increases the company credit with an Allocate, Update, Refund, Revert, or Reimburse transaction. This transaction decreases company\'s outstanding balance and increases company\'s available credit.
     * @summary companyCredits/{creditId}/increaseBalance
     * @param {number} creditId 
     * @param {CompanyCreditCreditBalanceManagementV1DecreasePostRequest} [companyCreditCreditBalanceManagementV1IncreasePostBody] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CompanyCreditsCreditIdIncreaseBalanceApi
     */
    public companyCreditCreditBalanceManagementV1IncreasePost(creditId: number, companyCreditCreditBalanceManagementV1IncreasePostBody?: CompanyCreditCreditBalanceManagementV1DecreasePostRequest, options?: AxiosRequestConfig) {
        return CompanyCreditsCreditIdIncreaseBalanceApiFp(this.configuration).companyCreditCreditBalanceManagementV1IncreasePost(creditId, companyCreditCreditBalanceManagementV1IncreasePostBody, options).then((request) => request(this.axios, this.basePath));
    }
}


/**
 * CompanyCreditsHistoryApi - axios parameter creator
 * @export
 */
export const CompanyCreditsHistoryApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Returns the credit history for one or more companies.
         * @summary companyCredits/history
         * @param {string} [searchCriteriaFilterGroups0Filters0Field] Field
         * @param {string} [searchCriteriaFilterGroups0Filters0Value] Value
         * @param {string} [searchCriteriaFilterGroups0Filters0ConditionType] Condition type
         * @param {string} [searchCriteriaSortOrders0Field] Sorting field.
         * @param {string} [searchCriteriaSortOrders0Direction] Sorting direction.
         * @param {number} [searchCriteriaPageSize] Page size.
         * @param {number} [searchCriteriaCurrentPage] Current page.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        companyCreditCreditHistoryManagementV1GetListGet: async (searchCriteriaFilterGroups0Filters0Field?: string, searchCriteriaFilterGroups0Filters0Value?: string, searchCriteriaFilterGroups0Filters0ConditionType?: string, searchCriteriaSortOrders0Field?: string, searchCriteriaSortOrders0Direction?: string, searchCriteriaPageSize?: number, searchCriteriaCurrentPage?: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/V1/companyCredits/history`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (searchCriteriaFilterGroups0Filters0Field !== undefined) {
                localVarQueryParameter['searchCriteria[filterGroups][0][filters][0][field]'] = searchCriteriaFilterGroups0Filters0Field;
            }

            if (searchCriteriaFilterGroups0Filters0Value !== undefined) {
                localVarQueryParameter['searchCriteria[filterGroups][0][filters][0][value]'] = searchCriteriaFilterGroups0Filters0Value;
            }

            if (searchCriteriaFilterGroups0Filters0ConditionType !== undefined) {
                localVarQueryParameter['searchCriteria[filterGroups][0][filters][0][conditionType]'] = searchCriteriaFilterGroups0Filters0ConditionType;
            }

            if (searchCriteriaSortOrders0Field !== undefined) {
                localVarQueryParameter['searchCriteria[sortOrders][0][field]'] = searchCriteriaSortOrders0Field;
            }

            if (searchCriteriaSortOrders0Direction !== undefined) {
                localVarQueryParameter['searchCriteria[sortOrders][0][direction]'] = searchCriteriaSortOrders0Direction;
            }

            if (searchCriteriaPageSize !== undefined) {
                localVarQueryParameter['searchCriteria[pageSize]'] = searchCriteriaPageSize;
            }

            if (searchCriteriaCurrentPage !== undefined) {
                localVarQueryParameter['searchCriteria[currentPage]'] = searchCriteriaCurrentPage;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * CompanyCreditsHistoryApi - functional programming interface
 * @export
 */
export const CompanyCreditsHistoryApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = CompanyCreditsHistoryApiAxiosParamCreator(configuration)
    return {
        /**
         * Returns the credit history for one or more companies.
         * @summary companyCredits/history
         * @param {string} [searchCriteriaFilterGroups0Filters0Field] Field
         * @param {string} [searchCriteriaFilterGroups0Filters0Value] Value
         * @param {string} [searchCriteriaFilterGroups0Filters0ConditionType] Condition type
         * @param {string} [searchCriteriaSortOrders0Field] Sorting field.
         * @param {string} [searchCriteriaSortOrders0Direction] Sorting direction.
         * @param {number} [searchCriteriaPageSize] Page size.
         * @param {number} [searchCriteriaCurrentPage] Current page.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async companyCreditCreditHistoryManagementV1GetListGet(searchCriteriaFilterGroups0Filters0Field?: string, searchCriteriaFilterGroups0Filters0Value?: string, searchCriteriaFilterGroups0Filters0ConditionType?: string, searchCriteriaSortOrders0Field?: string, searchCriteriaSortOrders0Direction?: string, searchCriteriaPageSize?: number, searchCriteriaCurrentPage?: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<CompanyCreditDataHistorySearchResultsInterface>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.companyCreditCreditHistoryManagementV1GetListGet(searchCriteriaFilterGroups0Filters0Field, searchCriteriaFilterGroups0Filters0Value, searchCriteriaFilterGroups0Filters0ConditionType, searchCriteriaSortOrders0Field, searchCriteriaSortOrders0Direction, searchCriteriaPageSize, searchCriteriaCurrentPage, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * CompanyCreditsHistoryApi - factory interface
 * @export
 */
export const CompanyCreditsHistoryApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = CompanyCreditsHistoryApiFp(configuration)
    return {
        /**
         * Returns the credit history for one or more companies.
         * @summary companyCredits/history
         * @param {string} [searchCriteriaFilterGroups0Filters0Field] Field
         * @param {string} [searchCriteriaFilterGroups0Filters0Value] Value
         * @param {string} [searchCriteriaFilterGroups0Filters0ConditionType] Condition type
         * @param {string} [searchCriteriaSortOrders0Field] Sorting field.
         * @param {string} [searchCriteriaSortOrders0Direction] Sorting direction.
         * @param {number} [searchCriteriaPageSize] Page size.
         * @param {number} [searchCriteriaCurrentPage] Current page.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        companyCreditCreditHistoryManagementV1GetListGet(searchCriteriaFilterGroups0Filters0Field?: string, searchCriteriaFilterGroups0Filters0Value?: string, searchCriteriaFilterGroups0Filters0ConditionType?: string, searchCriteriaSortOrders0Field?: string, searchCriteriaSortOrders0Direction?: string, searchCriteriaPageSize?: number, searchCriteriaCurrentPage?: number, options?: any): AxiosPromise<CompanyCreditDataHistorySearchResultsInterface> {
            return localVarFp.companyCreditCreditHistoryManagementV1GetListGet(searchCriteriaFilterGroups0Filters0Field, searchCriteriaFilterGroups0Filters0Value, searchCriteriaFilterGroups0Filters0ConditionType, searchCriteriaSortOrders0Field, searchCriteriaSortOrders0Direction, searchCriteriaPageSize, searchCriteriaCurrentPage, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * CompanyCreditsHistoryApi - object-oriented interface
 * @export
 * @class CompanyCreditsHistoryApi
 * @extends {BaseAPI}
 */
export class CompanyCreditsHistoryApi extends BaseAPI {
    /**
     * Returns the credit history for one or more companies.
     * @summary companyCredits/history
     * @param {string} [searchCriteriaFilterGroups0Filters0Field] Field
     * @param {string} [searchCriteriaFilterGroups0Filters0Value] Value
     * @param {string} [searchCriteriaFilterGroups0Filters0ConditionType] Condition type
     * @param {string} [searchCriteriaSortOrders0Field] Sorting field.
     * @param {string} [searchCriteriaSortOrders0Direction] Sorting direction.
     * @param {number} [searchCriteriaPageSize] Page size.
     * @param {number} [searchCriteriaCurrentPage] Current page.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CompanyCreditsHistoryApi
     */
    public companyCreditCreditHistoryManagementV1GetListGet(searchCriteriaFilterGroups0Filters0Field?: string, searchCriteriaFilterGroups0Filters0Value?: string, searchCriteriaFilterGroups0Filters0ConditionType?: string, searchCriteriaSortOrders0Field?: string, searchCriteriaSortOrders0Direction?: string, searchCriteriaPageSize?: number, searchCriteriaCurrentPage?: number, options?: AxiosRequestConfig) {
        return CompanyCreditsHistoryApiFp(this.configuration).companyCreditCreditHistoryManagementV1GetListGet(searchCriteriaFilterGroups0Filters0Field, searchCriteriaFilterGroups0Filters0Value, searchCriteriaFilterGroups0Filters0ConditionType, searchCriteriaSortOrders0Field, searchCriteriaSortOrders0Direction, searchCriteriaPageSize, searchCriteriaCurrentPage, options).then((request) => request(this.axios, this.basePath));
    }
}


/**
 * CompanyCreditsHistoryHistoryIdApi - axios parameter creator
 * @export
 */
export const CompanyCreditsHistoryHistoryIdApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Update the PO Number and/or comment for a Reimburse transaction.
         * @summary companyCredits/history/{historyId}
         * @param {number} historyId 
         * @param {CompanyCreditCreditHistoryManagementV1UpdatePutRequest} [companyCreditCreditHistoryManagementV1UpdatePutBody] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        companyCreditCreditHistoryManagementV1UpdatePut: async (historyId: number, companyCreditCreditHistoryManagementV1UpdatePutBody?: CompanyCreditCreditHistoryManagementV1UpdatePutRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'historyId' is not null or undefined
            assertParamExists('companyCreditCreditHistoryManagementV1UpdatePut', 'historyId', historyId)
            const localVarPath = `/V1/companyCredits/history/{historyId}`
                .replace(`{${"historyId"}}`, encodeURIComponent(String(historyId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(companyCreditCreditHistoryManagementV1UpdatePutBody, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * CompanyCreditsHistoryHistoryIdApi - functional programming interface
 * @export
 */
export const CompanyCreditsHistoryHistoryIdApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = CompanyCreditsHistoryHistoryIdApiAxiosParamCreator(configuration)
    return {
        /**
         * Update the PO Number and/or comment for a Reimburse transaction.
         * @summary companyCredits/history/{historyId}
         * @param {number} historyId 
         * @param {CompanyCreditCreditHistoryManagementV1UpdatePutRequest} [companyCreditCreditHistoryManagementV1UpdatePutBody] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async companyCreditCreditHistoryManagementV1UpdatePut(historyId: number, companyCreditCreditHistoryManagementV1UpdatePutBody?: CompanyCreditCreditHistoryManagementV1UpdatePutRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<boolean>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.companyCreditCreditHistoryManagementV1UpdatePut(historyId, companyCreditCreditHistoryManagementV1UpdatePutBody, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * CompanyCreditsHistoryHistoryIdApi - factory interface
 * @export
 */
export const CompanyCreditsHistoryHistoryIdApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = CompanyCreditsHistoryHistoryIdApiFp(configuration)
    return {
        /**
         * Update the PO Number and/or comment for a Reimburse transaction.
         * @summary companyCredits/history/{historyId}
         * @param {number} historyId 
         * @param {CompanyCreditCreditHistoryManagementV1UpdatePutRequest} [companyCreditCreditHistoryManagementV1UpdatePutBody] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        companyCreditCreditHistoryManagementV1UpdatePut(historyId: number, companyCreditCreditHistoryManagementV1UpdatePutBody?: CompanyCreditCreditHistoryManagementV1UpdatePutRequest, options?: any): AxiosPromise<boolean> {
            return localVarFp.companyCreditCreditHistoryManagementV1UpdatePut(historyId, companyCreditCreditHistoryManagementV1UpdatePutBody, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * CompanyCreditsHistoryHistoryIdApi - object-oriented interface
 * @export
 * @class CompanyCreditsHistoryHistoryIdApi
 * @extends {BaseAPI}
 */
export class CompanyCreditsHistoryHistoryIdApi extends BaseAPI {
    /**
     * Update the PO Number and/or comment for a Reimburse transaction.
     * @summary companyCredits/history/{historyId}
     * @param {number} historyId 
     * @param {CompanyCreditCreditHistoryManagementV1UpdatePutRequest} [companyCreditCreditHistoryManagementV1UpdatePutBody] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CompanyCreditsHistoryHistoryIdApi
     */
    public companyCreditCreditHistoryManagementV1UpdatePut(historyId: number, companyCreditCreditHistoryManagementV1UpdatePutBody?: CompanyCreditCreditHistoryManagementV1UpdatePutRequest, options?: AxiosRequestConfig) {
        return CompanyCreditsHistoryHistoryIdApiFp(this.configuration).companyCreditCreditHistoryManagementV1UpdatePut(historyId, companyCreditCreditHistoryManagementV1UpdatePutBody, options).then((request) => request(this.axios, this.basePath));
    }
}


/**
 * CompanyCreditsIdApi - axios parameter creator
 * @export
 */
export const CompanyCreditsIdApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Update the following company credit attributes: credit currency, credit limit and setting to exceed credit.
         * @summary companyCredits/{id}
         * @param {string} id 
         * @param {CompanyCreditCreditLimitRepositoryV1SavePutRequest} [companyCreditCreditLimitRepositoryV1SavePutBody] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        companyCreditCreditLimitRepositoryV1SavePut: async (id: string, companyCreditCreditLimitRepositoryV1SavePutBody?: CompanyCreditCreditLimitRepositoryV1SavePutRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('companyCreditCreditLimitRepositoryV1SavePut', 'id', id)
            const localVarPath = `/V1/companyCredits/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(companyCreditCreditLimitRepositoryV1SavePutBody, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * CompanyCreditsIdApi - functional programming interface
 * @export
 */
export const CompanyCreditsIdApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = CompanyCreditsIdApiAxiosParamCreator(configuration)
    return {
        /**
         * Update the following company credit attributes: credit currency, credit limit and setting to exceed credit.
         * @summary companyCredits/{id}
         * @param {string} id 
         * @param {CompanyCreditCreditLimitRepositoryV1SavePutRequest} [companyCreditCreditLimitRepositoryV1SavePutBody] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async companyCreditCreditLimitRepositoryV1SavePut(id: string, companyCreditCreditLimitRepositoryV1SavePutBody?: CompanyCreditCreditLimitRepositoryV1SavePutRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<CompanyCreditDataCreditLimitInterface>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.companyCreditCreditLimitRepositoryV1SavePut(id, companyCreditCreditLimitRepositoryV1SavePutBody, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * CompanyCreditsIdApi - factory interface
 * @export
 */
export const CompanyCreditsIdApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = CompanyCreditsIdApiFp(configuration)
    return {
        /**
         * Update the following company credit attributes: credit currency, credit limit and setting to exceed credit.
         * @summary companyCredits/{id}
         * @param {string} id 
         * @param {CompanyCreditCreditLimitRepositoryV1SavePutRequest} [companyCreditCreditLimitRepositoryV1SavePutBody] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        companyCreditCreditLimitRepositoryV1SavePut(id: string, companyCreditCreditLimitRepositoryV1SavePutBody?: CompanyCreditCreditLimitRepositoryV1SavePutRequest, options?: any): AxiosPromise<CompanyCreditDataCreditLimitInterface> {
            return localVarFp.companyCreditCreditLimitRepositoryV1SavePut(id, companyCreditCreditLimitRepositoryV1SavePutBody, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * CompanyCreditsIdApi - object-oriented interface
 * @export
 * @class CompanyCreditsIdApi
 * @extends {BaseAPI}
 */
export class CompanyCreditsIdApi extends BaseAPI {
    /**
     * Update the following company credit attributes: credit currency, credit limit and setting to exceed credit.
     * @summary companyCredits/{id}
     * @param {string} id 
     * @param {CompanyCreditCreditLimitRepositoryV1SavePutRequest} [companyCreditCreditLimitRepositoryV1SavePutBody] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CompanyCreditsIdApi
     */
    public companyCreditCreditLimitRepositoryV1SavePut(id: string, companyCreditCreditLimitRepositoryV1SavePutBody?: CompanyCreditCreditLimitRepositoryV1SavePutRequest, options?: AxiosRequestConfig) {
        return CompanyCreditsIdApiFp(this.configuration).companyCreditCreditLimitRepositoryV1SavePut(id, companyCreditCreditLimitRepositoryV1SavePutBody, options).then((request) => request(this.axios, this.basePath));
    }
}


/**
 * CompanyRoleApi - axios parameter creator
 * @export
 */
export const CompanyRoleApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Returns the list of roles and permissions for a specified company.
         * @summary company/role/
         * @param {string} [searchCriteriaFilterGroups0Filters0Field] Field
         * @param {string} [searchCriteriaFilterGroups0Filters0Value] Value
         * @param {string} [searchCriteriaFilterGroups0Filters0ConditionType] Condition type
         * @param {string} [searchCriteriaSortOrders0Field] Sorting field.
         * @param {string} [searchCriteriaSortOrders0Direction] Sorting direction.
         * @param {number} [searchCriteriaPageSize] Page size.
         * @param {number} [searchCriteriaCurrentPage] Current page.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        companyRoleRepositoryV1GetListGet: async (searchCriteriaFilterGroups0Filters0Field?: string, searchCriteriaFilterGroups0Filters0Value?: string, searchCriteriaFilterGroups0Filters0ConditionType?: string, searchCriteriaSortOrders0Field?: string, searchCriteriaSortOrders0Direction?: string, searchCriteriaPageSize?: number, searchCriteriaCurrentPage?: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/V1/company/role/`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (searchCriteriaFilterGroups0Filters0Field !== undefined) {
                localVarQueryParameter['searchCriteria[filterGroups][0][filters][0][field]'] = searchCriteriaFilterGroups0Filters0Field;
            }

            if (searchCriteriaFilterGroups0Filters0Value !== undefined) {
                localVarQueryParameter['searchCriteria[filterGroups][0][filters][0][value]'] = searchCriteriaFilterGroups0Filters0Value;
            }

            if (searchCriteriaFilterGroups0Filters0ConditionType !== undefined) {
                localVarQueryParameter['searchCriteria[filterGroups][0][filters][0][conditionType]'] = searchCriteriaFilterGroups0Filters0ConditionType;
            }

            if (searchCriteriaSortOrders0Field !== undefined) {
                localVarQueryParameter['searchCriteria[sortOrders][0][field]'] = searchCriteriaSortOrders0Field;
            }

            if (searchCriteriaSortOrders0Direction !== undefined) {
                localVarQueryParameter['searchCriteria[sortOrders][0][direction]'] = searchCriteriaSortOrders0Direction;
            }

            if (searchCriteriaPageSize !== undefined) {
                localVarQueryParameter['searchCriteria[pageSize]'] = searchCriteriaPageSize;
            }

            if (searchCriteriaCurrentPage !== undefined) {
                localVarQueryParameter['searchCriteria[currentPage]'] = searchCriteriaCurrentPage;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Create or update a role for a selected company.
         * @summary company/role/
         * @param {CompanyRoleRepositoryV1SavePostRequest} [companyRoleRepositoryV1SavePostBody] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        companyRoleRepositoryV1SavePost: async (companyRoleRepositoryV1SavePostBody?: CompanyRoleRepositoryV1SavePostRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/V1/company/role/`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(companyRoleRepositoryV1SavePostBody, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * CompanyRoleApi - functional programming interface
 * @export
 */
export const CompanyRoleApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = CompanyRoleApiAxiosParamCreator(configuration)
    return {
        /**
         * Returns the list of roles and permissions for a specified company.
         * @summary company/role/
         * @param {string} [searchCriteriaFilterGroups0Filters0Field] Field
         * @param {string} [searchCriteriaFilterGroups0Filters0Value] Value
         * @param {string} [searchCriteriaFilterGroups0Filters0ConditionType] Condition type
         * @param {string} [searchCriteriaSortOrders0Field] Sorting field.
         * @param {string} [searchCriteriaSortOrders0Direction] Sorting direction.
         * @param {number} [searchCriteriaPageSize] Page size.
         * @param {number} [searchCriteriaCurrentPage] Current page.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async companyRoleRepositoryV1GetListGet(searchCriteriaFilterGroups0Filters0Field?: string, searchCriteriaFilterGroups0Filters0Value?: string, searchCriteriaFilterGroups0Filters0ConditionType?: string, searchCriteriaSortOrders0Field?: string, searchCriteriaSortOrders0Direction?: string, searchCriteriaPageSize?: number, searchCriteriaCurrentPage?: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<CompanyDataRoleSearchResultsInterface>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.companyRoleRepositoryV1GetListGet(searchCriteriaFilterGroups0Filters0Field, searchCriteriaFilterGroups0Filters0Value, searchCriteriaFilterGroups0Filters0ConditionType, searchCriteriaSortOrders0Field, searchCriteriaSortOrders0Direction, searchCriteriaPageSize, searchCriteriaCurrentPage, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Create or update a role for a selected company.
         * @summary company/role/
         * @param {CompanyRoleRepositoryV1SavePostRequest} [companyRoleRepositoryV1SavePostBody] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async companyRoleRepositoryV1SavePost(companyRoleRepositoryV1SavePostBody?: CompanyRoleRepositoryV1SavePostRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<CompanyDataRoleInterface>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.companyRoleRepositoryV1SavePost(companyRoleRepositoryV1SavePostBody, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * CompanyRoleApi - factory interface
 * @export
 */
export const CompanyRoleApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = CompanyRoleApiFp(configuration)
    return {
        /**
         * Returns the list of roles and permissions for a specified company.
         * @summary company/role/
         * @param {string} [searchCriteriaFilterGroups0Filters0Field] Field
         * @param {string} [searchCriteriaFilterGroups0Filters0Value] Value
         * @param {string} [searchCriteriaFilterGroups0Filters0ConditionType] Condition type
         * @param {string} [searchCriteriaSortOrders0Field] Sorting field.
         * @param {string} [searchCriteriaSortOrders0Direction] Sorting direction.
         * @param {number} [searchCriteriaPageSize] Page size.
         * @param {number} [searchCriteriaCurrentPage] Current page.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        companyRoleRepositoryV1GetListGet(searchCriteriaFilterGroups0Filters0Field?: string, searchCriteriaFilterGroups0Filters0Value?: string, searchCriteriaFilterGroups0Filters0ConditionType?: string, searchCriteriaSortOrders0Field?: string, searchCriteriaSortOrders0Direction?: string, searchCriteriaPageSize?: number, searchCriteriaCurrentPage?: number, options?: any): AxiosPromise<CompanyDataRoleSearchResultsInterface> {
            return localVarFp.companyRoleRepositoryV1GetListGet(searchCriteriaFilterGroups0Filters0Field, searchCriteriaFilterGroups0Filters0Value, searchCriteriaFilterGroups0Filters0ConditionType, searchCriteriaSortOrders0Field, searchCriteriaSortOrders0Direction, searchCriteriaPageSize, searchCriteriaCurrentPage, options).then((request) => request(axios, basePath));
        },
        /**
         * Create or update a role for a selected company.
         * @summary company/role/
         * @param {CompanyRoleRepositoryV1SavePostRequest} [companyRoleRepositoryV1SavePostBody] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        companyRoleRepositoryV1SavePost(companyRoleRepositoryV1SavePostBody?: CompanyRoleRepositoryV1SavePostRequest, options?: any): AxiosPromise<CompanyDataRoleInterface> {
            return localVarFp.companyRoleRepositoryV1SavePost(companyRoleRepositoryV1SavePostBody, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * CompanyRoleApi - object-oriented interface
 * @export
 * @class CompanyRoleApi
 * @extends {BaseAPI}
 */
export class CompanyRoleApi extends BaseAPI {
    /**
     * Returns the list of roles and permissions for a specified company.
     * @summary company/role/
     * @param {string} [searchCriteriaFilterGroups0Filters0Field] Field
     * @param {string} [searchCriteriaFilterGroups0Filters0Value] Value
     * @param {string} [searchCriteriaFilterGroups0Filters0ConditionType] Condition type
     * @param {string} [searchCriteriaSortOrders0Field] Sorting field.
     * @param {string} [searchCriteriaSortOrders0Direction] Sorting direction.
     * @param {number} [searchCriteriaPageSize] Page size.
     * @param {number} [searchCriteriaCurrentPage] Current page.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CompanyRoleApi
     */
    public companyRoleRepositoryV1GetListGet(searchCriteriaFilterGroups0Filters0Field?: string, searchCriteriaFilterGroups0Filters0Value?: string, searchCriteriaFilterGroups0Filters0ConditionType?: string, searchCriteriaSortOrders0Field?: string, searchCriteriaSortOrders0Direction?: string, searchCriteriaPageSize?: number, searchCriteriaCurrentPage?: number, options?: AxiosRequestConfig) {
        return CompanyRoleApiFp(this.configuration).companyRoleRepositoryV1GetListGet(searchCriteriaFilterGroups0Filters0Field, searchCriteriaFilterGroups0Filters0Value, searchCriteriaFilterGroups0Filters0ConditionType, searchCriteriaSortOrders0Field, searchCriteriaSortOrders0Direction, searchCriteriaPageSize, searchCriteriaCurrentPage, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Create or update a role for a selected company.
     * @summary company/role/
     * @param {CompanyRoleRepositoryV1SavePostRequest} [companyRoleRepositoryV1SavePostBody] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CompanyRoleApi
     */
    public companyRoleRepositoryV1SavePost(companyRoleRepositoryV1SavePostBody?: CompanyRoleRepositoryV1SavePostRequest, options?: AxiosRequestConfig) {
        return CompanyRoleApiFp(this.configuration).companyRoleRepositoryV1SavePost(companyRoleRepositoryV1SavePostBody, options).then((request) => request(this.axios, this.basePath));
    }
}


/**
 * CompanyRoleIdApi - axios parameter creator
 * @export
 */
export const CompanyRoleIdApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Create or update a role for a selected company.
         * @summary company/role/{id}
         * @param {string} id 
         * @param {CompanyRoleRepositoryV1SavePostRequest} [companyRoleRepositoryV1SavePutBody] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        companyRoleRepositoryV1SavePut: async (id: string, companyRoleRepositoryV1SavePutBody?: CompanyRoleRepositoryV1SavePostRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('companyRoleRepositoryV1SavePut', 'id', id)
            const localVarPath = `/V1/company/role/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(companyRoleRepositoryV1SavePutBody, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * CompanyRoleIdApi - functional programming interface
 * @export
 */
export const CompanyRoleIdApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = CompanyRoleIdApiAxiosParamCreator(configuration)
    return {
        /**
         * Create or update a role for a selected company.
         * @summary company/role/{id}
         * @param {string} id 
         * @param {CompanyRoleRepositoryV1SavePostRequest} [companyRoleRepositoryV1SavePutBody] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async companyRoleRepositoryV1SavePut(id: string, companyRoleRepositoryV1SavePutBody?: CompanyRoleRepositoryV1SavePostRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<CompanyDataRoleInterface>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.companyRoleRepositoryV1SavePut(id, companyRoleRepositoryV1SavePutBody, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * CompanyRoleIdApi - factory interface
 * @export
 */
export const CompanyRoleIdApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = CompanyRoleIdApiFp(configuration)
    return {
        /**
         * Create or update a role for a selected company.
         * @summary company/role/{id}
         * @param {string} id 
         * @param {CompanyRoleRepositoryV1SavePostRequest} [companyRoleRepositoryV1SavePutBody] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        companyRoleRepositoryV1SavePut(id: string, companyRoleRepositoryV1SavePutBody?: CompanyRoleRepositoryV1SavePostRequest, options?: any): AxiosPromise<CompanyDataRoleInterface> {
            return localVarFp.companyRoleRepositoryV1SavePut(id, companyRoleRepositoryV1SavePutBody, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * CompanyRoleIdApi - object-oriented interface
 * @export
 * @class CompanyRoleIdApi
 * @extends {BaseAPI}
 */
export class CompanyRoleIdApi extends BaseAPI {
    /**
     * Create or update a role for a selected company.
     * @summary company/role/{id}
     * @param {string} id 
     * @param {CompanyRoleRepositoryV1SavePostRequest} [companyRoleRepositoryV1SavePutBody] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CompanyRoleIdApi
     */
    public companyRoleRepositoryV1SavePut(id: string, companyRoleRepositoryV1SavePutBody?: CompanyRoleRepositoryV1SavePostRequest, options?: AxiosRequestConfig) {
        return CompanyRoleIdApiFp(this.configuration).companyRoleRepositoryV1SavePut(id, companyRoleRepositoryV1SavePutBody, options).then((request) => request(this.axios, this.basePath));
    }
}


/**
 * CompanyRoleRoleIdApi - axios parameter creator
 * @export
 */
export const CompanyRoleRoleIdApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Delete a role.
         * @summary company/role/{roleId}
         * @param {number} roleId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        companyRoleRepositoryV1DeleteDelete: async (roleId: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'roleId' is not null or undefined
            assertParamExists('companyRoleRepositoryV1DeleteDelete', 'roleId', roleId)
            const localVarPath = `/V1/company/role/{roleId}`
                .replace(`{${"roleId"}}`, encodeURIComponent(String(roleId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Returns the list of permissions for a specified role.
         * @summary company/role/{roleId}
         * @param {number} roleId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        companyRoleRepositoryV1GetGet: async (roleId: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'roleId' is not null or undefined
            assertParamExists('companyRoleRepositoryV1GetGet', 'roleId', roleId)
            const localVarPath = `/V1/company/role/{roleId}`
                .replace(`{${"roleId"}}`, encodeURIComponent(String(roleId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * CompanyRoleRoleIdApi - functional programming interface
 * @export
 */
export const CompanyRoleRoleIdApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = CompanyRoleRoleIdApiAxiosParamCreator(configuration)
    return {
        /**
         * Delete a role.
         * @summary company/role/{roleId}
         * @param {number} roleId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async companyRoleRepositoryV1DeleteDelete(roleId: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<boolean>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.companyRoleRepositoryV1DeleteDelete(roleId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Returns the list of permissions for a specified role.
         * @summary company/role/{roleId}
         * @param {number} roleId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async companyRoleRepositoryV1GetGet(roleId: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<CompanyDataRoleInterface>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.companyRoleRepositoryV1GetGet(roleId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * CompanyRoleRoleIdApi - factory interface
 * @export
 */
export const CompanyRoleRoleIdApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = CompanyRoleRoleIdApiFp(configuration)
    return {
        /**
         * Delete a role.
         * @summary company/role/{roleId}
         * @param {number} roleId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        companyRoleRepositoryV1DeleteDelete(roleId: number, options?: any): AxiosPromise<boolean> {
            return localVarFp.companyRoleRepositoryV1DeleteDelete(roleId, options).then((request) => request(axios, basePath));
        },
        /**
         * Returns the list of permissions for a specified role.
         * @summary company/role/{roleId}
         * @param {number} roleId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        companyRoleRepositoryV1GetGet(roleId: number, options?: any): AxiosPromise<CompanyDataRoleInterface> {
            return localVarFp.companyRoleRepositoryV1GetGet(roleId, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * CompanyRoleRoleIdApi - object-oriented interface
 * @export
 * @class CompanyRoleRoleIdApi
 * @extends {BaseAPI}
 */
export class CompanyRoleRoleIdApi extends BaseAPI {
    /**
     * Delete a role.
     * @summary company/role/{roleId}
     * @param {number} roleId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CompanyRoleRoleIdApi
     */
    public companyRoleRepositoryV1DeleteDelete(roleId: number, options?: AxiosRequestConfig) {
        return CompanyRoleRoleIdApiFp(this.configuration).companyRoleRepositoryV1DeleteDelete(roleId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Returns the list of permissions for a specified role.
     * @summary company/role/{roleId}
     * @param {number} roleId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CompanyRoleRoleIdApi
     */
    public companyRoleRepositoryV1GetGet(roleId: number, options?: AxiosRequestConfig) {
        return CompanyRoleRoleIdApiFp(this.configuration).companyRoleRepositoryV1GetGet(roleId, options).then((request) => request(this.axios, this.basePath));
    }
}


/**
 * CompanyRoleRoleIdUsersApi - axios parameter creator
 * @export
 */
export const CompanyRoleRoleIdUsersApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * View the list of company users assigned to a specified role.
         * @summary company/role/{roleId}/users
         * @param {number} roleId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        companyAclV1GetUsersByRoleIdGet: async (roleId: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'roleId' is not null or undefined
            assertParamExists('companyAclV1GetUsersByRoleIdGet', 'roleId', roleId)
            const localVarPath = `/V1/company/role/{roleId}/users`
                .replace(`{${"roleId"}}`, encodeURIComponent(String(roleId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * CompanyRoleRoleIdUsersApi - functional programming interface
 * @export
 */
export const CompanyRoleRoleIdUsersApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = CompanyRoleRoleIdUsersApiAxiosParamCreator(configuration)
    return {
        /**
         * View the list of company users assigned to a specified role.
         * @summary company/role/{roleId}/users
         * @param {number} roleId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async companyAclV1GetUsersByRoleIdGet(roleId: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<CustomerDataCustomerInterface>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.companyAclV1GetUsersByRoleIdGet(roleId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * CompanyRoleRoleIdUsersApi - factory interface
 * @export
 */
export const CompanyRoleRoleIdUsersApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = CompanyRoleRoleIdUsersApiFp(configuration)
    return {
        /**
         * View the list of company users assigned to a specified role.
         * @summary company/role/{roleId}/users
         * @param {number} roleId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        companyAclV1GetUsersByRoleIdGet(roleId: number, options?: any): AxiosPromise<Array<CustomerDataCustomerInterface>> {
            return localVarFp.companyAclV1GetUsersByRoleIdGet(roleId, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * CompanyRoleRoleIdUsersApi - object-oriented interface
 * @export
 * @class CompanyRoleRoleIdUsersApi
 * @extends {BaseAPI}
 */
export class CompanyRoleRoleIdUsersApi extends BaseAPI {
    /**
     * View the list of company users assigned to a specified role.
     * @summary company/role/{roleId}/users
     * @param {number} roleId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CompanyRoleRoleIdUsersApi
     */
    public companyAclV1GetUsersByRoleIdGet(roleId: number, options?: AxiosRequestConfig) {
        return CompanyRoleRoleIdUsersApiFp(this.configuration).companyAclV1GetUsersByRoleIdGet(roleId, options).then((request) => request(this.axios, this.basePath));
    }
}


/**
 * ConfigurableProductsSkuChildApi - axios parameter creator
 * @export
 */
export const ConfigurableProductsSkuChildApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary configurable-products/{sku}/child
         * @param {string} sku 
         * @param {ConfigurableProductLinkManagementV1AddChildPostRequest} [configurableProductLinkManagementV1AddChildPostBody] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        configurableProductLinkManagementV1AddChildPost: async (sku: string, configurableProductLinkManagementV1AddChildPostBody?: ConfigurableProductLinkManagementV1AddChildPostRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'sku' is not null or undefined
            assertParamExists('configurableProductLinkManagementV1AddChildPost', 'sku', sku)
            const localVarPath = `/V1/configurable-products/{sku}/child`
                .replace(`{${"sku"}}`, encodeURIComponent(String(sku)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(configurableProductLinkManagementV1AddChildPostBody, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * ConfigurableProductsSkuChildApi - functional programming interface
 * @export
 */
export const ConfigurableProductsSkuChildApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = ConfigurableProductsSkuChildApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @summary configurable-products/{sku}/child
         * @param {string} sku 
         * @param {ConfigurableProductLinkManagementV1AddChildPostRequest} [configurableProductLinkManagementV1AddChildPostBody] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async configurableProductLinkManagementV1AddChildPost(sku: string, configurableProductLinkManagementV1AddChildPostBody?: ConfigurableProductLinkManagementV1AddChildPostRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<boolean>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.configurableProductLinkManagementV1AddChildPost(sku, configurableProductLinkManagementV1AddChildPostBody, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * ConfigurableProductsSkuChildApi - factory interface
 * @export
 */
export const ConfigurableProductsSkuChildApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = ConfigurableProductsSkuChildApiFp(configuration)
    return {
        /**
         * 
         * @summary configurable-products/{sku}/child
         * @param {string} sku 
         * @param {ConfigurableProductLinkManagementV1AddChildPostRequest} [configurableProductLinkManagementV1AddChildPostBody] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        configurableProductLinkManagementV1AddChildPost(sku: string, configurableProductLinkManagementV1AddChildPostBody?: ConfigurableProductLinkManagementV1AddChildPostRequest, options?: any): AxiosPromise<boolean> {
            return localVarFp.configurableProductLinkManagementV1AddChildPost(sku, configurableProductLinkManagementV1AddChildPostBody, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * ConfigurableProductsSkuChildApi - object-oriented interface
 * @export
 * @class ConfigurableProductsSkuChildApi
 * @extends {BaseAPI}
 */
export class ConfigurableProductsSkuChildApi extends BaseAPI {
    /**
     * 
     * @summary configurable-products/{sku}/child
     * @param {string} sku 
     * @param {ConfigurableProductLinkManagementV1AddChildPostRequest} [configurableProductLinkManagementV1AddChildPostBody] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ConfigurableProductsSkuChildApi
     */
    public configurableProductLinkManagementV1AddChildPost(sku: string, configurableProductLinkManagementV1AddChildPostBody?: ConfigurableProductLinkManagementV1AddChildPostRequest, options?: AxiosRequestConfig) {
        return ConfigurableProductsSkuChildApiFp(this.configuration).configurableProductLinkManagementV1AddChildPost(sku, configurableProductLinkManagementV1AddChildPostBody, options).then((request) => request(this.axios, this.basePath));
    }
}


/**
 * ConfigurableProductsSkuChildrenApi - axios parameter creator
 * @export
 */
export const ConfigurableProductsSkuChildrenApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Get all children for Configurable product
         * @summary configurable-products/{sku}/children
         * @param {string} sku 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        configurableProductLinkManagementV1GetChildrenGet: async (sku: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'sku' is not null or undefined
            assertParamExists('configurableProductLinkManagementV1GetChildrenGet', 'sku', sku)
            const localVarPath = `/V1/configurable-products/{sku}/children`
                .replace(`{${"sku"}}`, encodeURIComponent(String(sku)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * ConfigurableProductsSkuChildrenApi - functional programming interface
 * @export
 */
export const ConfigurableProductsSkuChildrenApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = ConfigurableProductsSkuChildrenApiAxiosParamCreator(configuration)
    return {
        /**
         * Get all children for Configurable product
         * @summary configurable-products/{sku}/children
         * @param {string} sku 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async configurableProductLinkManagementV1GetChildrenGet(sku: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<CatalogDataProductInterface>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.configurableProductLinkManagementV1GetChildrenGet(sku, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * ConfigurableProductsSkuChildrenApi - factory interface
 * @export
 */
export const ConfigurableProductsSkuChildrenApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = ConfigurableProductsSkuChildrenApiFp(configuration)
    return {
        /**
         * Get all children for Configurable product
         * @summary configurable-products/{sku}/children
         * @param {string} sku 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        configurableProductLinkManagementV1GetChildrenGet(sku: string, options?: any): AxiosPromise<Array<CatalogDataProductInterface>> {
            return localVarFp.configurableProductLinkManagementV1GetChildrenGet(sku, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * ConfigurableProductsSkuChildrenApi - object-oriented interface
 * @export
 * @class ConfigurableProductsSkuChildrenApi
 * @extends {BaseAPI}
 */
export class ConfigurableProductsSkuChildrenApi extends BaseAPI {
    /**
     * Get all children for Configurable product
     * @summary configurable-products/{sku}/children
     * @param {string} sku 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ConfigurableProductsSkuChildrenApi
     */
    public configurableProductLinkManagementV1GetChildrenGet(sku: string, options?: AxiosRequestConfig) {
        return ConfigurableProductsSkuChildrenApiFp(this.configuration).configurableProductLinkManagementV1GetChildrenGet(sku, options).then((request) => request(this.axios, this.basePath));
    }
}


/**
 * ConfigurableProductsSkuChildrenChildSkuApi - axios parameter creator
 * @export
 */
export const ConfigurableProductsSkuChildrenChildSkuApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Remove configurable product option
         * @summary configurable-products/{sku}/children/{childSku}
         * @param {string} sku 
         * @param {string} childSku 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        configurableProductLinkManagementV1RemoveChildDelete: async (sku: string, childSku: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'sku' is not null or undefined
            assertParamExists('configurableProductLinkManagementV1RemoveChildDelete', 'sku', sku)
            // verify required parameter 'childSku' is not null or undefined
            assertParamExists('configurableProductLinkManagementV1RemoveChildDelete', 'childSku', childSku)
            const localVarPath = `/V1/configurable-products/{sku}/children/{childSku}`
                .replace(`{${"sku"}}`, encodeURIComponent(String(sku)))
                .replace(`{${"childSku"}}`, encodeURIComponent(String(childSku)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * ConfigurableProductsSkuChildrenChildSkuApi - functional programming interface
 * @export
 */
export const ConfigurableProductsSkuChildrenChildSkuApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = ConfigurableProductsSkuChildrenChildSkuApiAxiosParamCreator(configuration)
    return {
        /**
         * Remove configurable product option
         * @summary configurable-products/{sku}/children/{childSku}
         * @param {string} sku 
         * @param {string} childSku 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async configurableProductLinkManagementV1RemoveChildDelete(sku: string, childSku: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<boolean>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.configurableProductLinkManagementV1RemoveChildDelete(sku, childSku, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * ConfigurableProductsSkuChildrenChildSkuApi - factory interface
 * @export
 */
export const ConfigurableProductsSkuChildrenChildSkuApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = ConfigurableProductsSkuChildrenChildSkuApiFp(configuration)
    return {
        /**
         * Remove configurable product option
         * @summary configurable-products/{sku}/children/{childSku}
         * @param {string} sku 
         * @param {string} childSku 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        configurableProductLinkManagementV1RemoveChildDelete(sku: string, childSku: string, options?: any): AxiosPromise<boolean> {
            return localVarFp.configurableProductLinkManagementV1RemoveChildDelete(sku, childSku, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * ConfigurableProductsSkuChildrenChildSkuApi - object-oriented interface
 * @export
 * @class ConfigurableProductsSkuChildrenChildSkuApi
 * @extends {BaseAPI}
 */
export class ConfigurableProductsSkuChildrenChildSkuApi extends BaseAPI {
    /**
     * Remove configurable product option
     * @summary configurable-products/{sku}/children/{childSku}
     * @param {string} sku 
     * @param {string} childSku 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ConfigurableProductsSkuChildrenChildSkuApi
     */
    public configurableProductLinkManagementV1RemoveChildDelete(sku: string, childSku: string, options?: AxiosRequestConfig) {
        return ConfigurableProductsSkuChildrenChildSkuApiFp(this.configuration).configurableProductLinkManagementV1RemoveChildDelete(sku, childSku, options).then((request) => request(this.axios, this.basePath));
    }
}


/**
 * ConfigurableProductsSkuOptionsApi - axios parameter creator
 * @export
 */
export const ConfigurableProductsSkuOptionsApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Save option
         * @summary configurable-products/{sku}/options
         * @param {string} sku 
         * @param {ConfigurableProductOptionRepositoryV1SavePostRequest} [configurableProductOptionRepositoryV1SavePostBody] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        configurableProductOptionRepositoryV1SavePost: async (sku: string, configurableProductOptionRepositoryV1SavePostBody?: ConfigurableProductOptionRepositoryV1SavePostRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'sku' is not null or undefined
            assertParamExists('configurableProductOptionRepositoryV1SavePost', 'sku', sku)
            const localVarPath = `/V1/configurable-products/{sku}/options`
                .replace(`{${"sku"}}`, encodeURIComponent(String(sku)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(configurableProductOptionRepositoryV1SavePostBody, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * ConfigurableProductsSkuOptionsApi - functional programming interface
 * @export
 */
export const ConfigurableProductsSkuOptionsApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = ConfigurableProductsSkuOptionsApiAxiosParamCreator(configuration)
    return {
        /**
         * Save option
         * @summary configurable-products/{sku}/options
         * @param {string} sku 
         * @param {ConfigurableProductOptionRepositoryV1SavePostRequest} [configurableProductOptionRepositoryV1SavePostBody] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async configurableProductOptionRepositoryV1SavePost(sku: string, configurableProductOptionRepositoryV1SavePostBody?: ConfigurableProductOptionRepositoryV1SavePostRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<number>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.configurableProductOptionRepositoryV1SavePost(sku, configurableProductOptionRepositoryV1SavePostBody, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * ConfigurableProductsSkuOptionsApi - factory interface
 * @export
 */
export const ConfigurableProductsSkuOptionsApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = ConfigurableProductsSkuOptionsApiFp(configuration)
    return {
        /**
         * Save option
         * @summary configurable-products/{sku}/options
         * @param {string} sku 
         * @param {ConfigurableProductOptionRepositoryV1SavePostRequest} [configurableProductOptionRepositoryV1SavePostBody] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        configurableProductOptionRepositoryV1SavePost(sku: string, configurableProductOptionRepositoryV1SavePostBody?: ConfigurableProductOptionRepositoryV1SavePostRequest, options?: any): AxiosPromise<number> {
            return localVarFp.configurableProductOptionRepositoryV1SavePost(sku, configurableProductOptionRepositoryV1SavePostBody, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * ConfigurableProductsSkuOptionsApi - object-oriented interface
 * @export
 * @class ConfigurableProductsSkuOptionsApi
 * @extends {BaseAPI}
 */
export class ConfigurableProductsSkuOptionsApi extends BaseAPI {
    /**
     * Save option
     * @summary configurable-products/{sku}/options
     * @param {string} sku 
     * @param {ConfigurableProductOptionRepositoryV1SavePostRequest} [configurableProductOptionRepositoryV1SavePostBody] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ConfigurableProductsSkuOptionsApi
     */
    public configurableProductOptionRepositoryV1SavePost(sku: string, configurableProductOptionRepositoryV1SavePostBody?: ConfigurableProductOptionRepositoryV1SavePostRequest, options?: AxiosRequestConfig) {
        return ConfigurableProductsSkuOptionsApiFp(this.configuration).configurableProductOptionRepositoryV1SavePost(sku, configurableProductOptionRepositoryV1SavePostBody, options).then((request) => request(this.axios, this.basePath));
    }
}


/**
 * ConfigurableProductsSkuOptionsAllApi - axios parameter creator
 * @export
 */
export const ConfigurableProductsSkuOptionsAllApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Get all options for configurable product
         * @summary configurable-products/{sku}/options/all
         * @param {string} sku 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        configurableProductOptionRepositoryV1GetListGet: async (sku: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'sku' is not null or undefined
            assertParamExists('configurableProductOptionRepositoryV1GetListGet', 'sku', sku)
            const localVarPath = `/V1/configurable-products/{sku}/options/all`
                .replace(`{${"sku"}}`, encodeURIComponent(String(sku)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * ConfigurableProductsSkuOptionsAllApi - functional programming interface
 * @export
 */
export const ConfigurableProductsSkuOptionsAllApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = ConfigurableProductsSkuOptionsAllApiAxiosParamCreator(configuration)
    return {
        /**
         * Get all options for configurable product
         * @summary configurable-products/{sku}/options/all
         * @param {string} sku 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async configurableProductOptionRepositoryV1GetListGet(sku: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<ConfigurableProductDataOptionInterface>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.configurableProductOptionRepositoryV1GetListGet(sku, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * ConfigurableProductsSkuOptionsAllApi - factory interface
 * @export
 */
export const ConfigurableProductsSkuOptionsAllApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = ConfigurableProductsSkuOptionsAllApiFp(configuration)
    return {
        /**
         * Get all options for configurable product
         * @summary configurable-products/{sku}/options/all
         * @param {string} sku 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        configurableProductOptionRepositoryV1GetListGet(sku: string, options?: any): AxiosPromise<Array<ConfigurableProductDataOptionInterface>> {
            return localVarFp.configurableProductOptionRepositoryV1GetListGet(sku, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * ConfigurableProductsSkuOptionsAllApi - object-oriented interface
 * @export
 * @class ConfigurableProductsSkuOptionsAllApi
 * @extends {BaseAPI}
 */
export class ConfigurableProductsSkuOptionsAllApi extends BaseAPI {
    /**
     * Get all options for configurable product
     * @summary configurable-products/{sku}/options/all
     * @param {string} sku 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ConfigurableProductsSkuOptionsAllApi
     */
    public configurableProductOptionRepositoryV1GetListGet(sku: string, options?: AxiosRequestConfig) {
        return ConfigurableProductsSkuOptionsAllApiFp(this.configuration).configurableProductOptionRepositoryV1GetListGet(sku, options).then((request) => request(this.axios, this.basePath));
    }
}


/**
 * ConfigurableProductsSkuOptionsIdApi - axios parameter creator
 * @export
 */
export const ConfigurableProductsSkuOptionsIdApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Remove option from configurable product
         * @summary configurable-products/{sku}/options/{id}
         * @param {string} sku 
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        configurableProductOptionRepositoryV1DeleteByIdDelete: async (sku: string, id: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'sku' is not null or undefined
            assertParamExists('configurableProductOptionRepositoryV1DeleteByIdDelete', 'sku', sku)
            // verify required parameter 'id' is not null or undefined
            assertParamExists('configurableProductOptionRepositoryV1DeleteByIdDelete', 'id', id)
            const localVarPath = `/V1/configurable-products/{sku}/options/{id}`
                .replace(`{${"sku"}}`, encodeURIComponent(String(sku)))
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Get option for configurable product
         * @summary configurable-products/{sku}/options/{id}
         * @param {string} sku 
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        configurableProductOptionRepositoryV1GetGet: async (sku: string, id: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'sku' is not null or undefined
            assertParamExists('configurableProductOptionRepositoryV1GetGet', 'sku', sku)
            // verify required parameter 'id' is not null or undefined
            assertParamExists('configurableProductOptionRepositoryV1GetGet', 'id', id)
            const localVarPath = `/V1/configurable-products/{sku}/options/{id}`
                .replace(`{${"sku"}}`, encodeURIComponent(String(sku)))
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Save option
         * @summary configurable-products/{sku}/options/{id}
         * @param {string} sku 
         * @param {string} id 
         * @param {ConfigurableProductOptionRepositoryV1SavePostRequest} [configurableProductOptionRepositoryV1SavePutBody] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        configurableProductOptionRepositoryV1SavePut: async (sku: string, id: string, configurableProductOptionRepositoryV1SavePutBody?: ConfigurableProductOptionRepositoryV1SavePostRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'sku' is not null or undefined
            assertParamExists('configurableProductOptionRepositoryV1SavePut', 'sku', sku)
            // verify required parameter 'id' is not null or undefined
            assertParamExists('configurableProductOptionRepositoryV1SavePut', 'id', id)
            const localVarPath = `/V1/configurable-products/{sku}/options/{id}`
                .replace(`{${"sku"}}`, encodeURIComponent(String(sku)))
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(configurableProductOptionRepositoryV1SavePutBody, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * ConfigurableProductsSkuOptionsIdApi - functional programming interface
 * @export
 */
export const ConfigurableProductsSkuOptionsIdApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = ConfigurableProductsSkuOptionsIdApiAxiosParamCreator(configuration)
    return {
        /**
         * Remove option from configurable product
         * @summary configurable-products/{sku}/options/{id}
         * @param {string} sku 
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async configurableProductOptionRepositoryV1DeleteByIdDelete(sku: string, id: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<boolean>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.configurableProductOptionRepositoryV1DeleteByIdDelete(sku, id, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Get option for configurable product
         * @summary configurable-products/{sku}/options/{id}
         * @param {string} sku 
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async configurableProductOptionRepositoryV1GetGet(sku: string, id: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ConfigurableProductDataOptionInterface>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.configurableProductOptionRepositoryV1GetGet(sku, id, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Save option
         * @summary configurable-products/{sku}/options/{id}
         * @param {string} sku 
         * @param {string} id 
         * @param {ConfigurableProductOptionRepositoryV1SavePostRequest} [configurableProductOptionRepositoryV1SavePutBody] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async configurableProductOptionRepositoryV1SavePut(sku: string, id: string, configurableProductOptionRepositoryV1SavePutBody?: ConfigurableProductOptionRepositoryV1SavePostRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<number>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.configurableProductOptionRepositoryV1SavePut(sku, id, configurableProductOptionRepositoryV1SavePutBody, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * ConfigurableProductsSkuOptionsIdApi - factory interface
 * @export
 */
export const ConfigurableProductsSkuOptionsIdApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = ConfigurableProductsSkuOptionsIdApiFp(configuration)
    return {
        /**
         * Remove option from configurable product
         * @summary configurable-products/{sku}/options/{id}
         * @param {string} sku 
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        configurableProductOptionRepositoryV1DeleteByIdDelete(sku: string, id: number, options?: any): AxiosPromise<boolean> {
            return localVarFp.configurableProductOptionRepositoryV1DeleteByIdDelete(sku, id, options).then((request) => request(axios, basePath));
        },
        /**
         * Get option for configurable product
         * @summary configurable-products/{sku}/options/{id}
         * @param {string} sku 
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        configurableProductOptionRepositoryV1GetGet(sku: string, id: number, options?: any): AxiosPromise<ConfigurableProductDataOptionInterface> {
            return localVarFp.configurableProductOptionRepositoryV1GetGet(sku, id, options).then((request) => request(axios, basePath));
        },
        /**
         * Save option
         * @summary configurable-products/{sku}/options/{id}
         * @param {string} sku 
         * @param {string} id 
         * @param {ConfigurableProductOptionRepositoryV1SavePostRequest} [configurableProductOptionRepositoryV1SavePutBody] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        configurableProductOptionRepositoryV1SavePut(sku: string, id: string, configurableProductOptionRepositoryV1SavePutBody?: ConfigurableProductOptionRepositoryV1SavePostRequest, options?: any): AxiosPromise<number> {
            return localVarFp.configurableProductOptionRepositoryV1SavePut(sku, id, configurableProductOptionRepositoryV1SavePutBody, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * ConfigurableProductsSkuOptionsIdApi - object-oriented interface
 * @export
 * @class ConfigurableProductsSkuOptionsIdApi
 * @extends {BaseAPI}
 */
export class ConfigurableProductsSkuOptionsIdApi extends BaseAPI {
    /**
     * Remove option from configurable product
     * @summary configurable-products/{sku}/options/{id}
     * @param {string} sku 
     * @param {number} id 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ConfigurableProductsSkuOptionsIdApi
     */
    public configurableProductOptionRepositoryV1DeleteByIdDelete(sku: string, id: number, options?: AxiosRequestConfig) {
        return ConfigurableProductsSkuOptionsIdApiFp(this.configuration).configurableProductOptionRepositoryV1DeleteByIdDelete(sku, id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Get option for configurable product
     * @summary configurable-products/{sku}/options/{id}
     * @param {string} sku 
     * @param {number} id 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ConfigurableProductsSkuOptionsIdApi
     */
    public configurableProductOptionRepositoryV1GetGet(sku: string, id: number, options?: AxiosRequestConfig) {
        return ConfigurableProductsSkuOptionsIdApiFp(this.configuration).configurableProductOptionRepositoryV1GetGet(sku, id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Save option
     * @summary configurable-products/{sku}/options/{id}
     * @param {string} sku 
     * @param {string} id 
     * @param {ConfigurableProductOptionRepositoryV1SavePostRequest} [configurableProductOptionRepositoryV1SavePutBody] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ConfigurableProductsSkuOptionsIdApi
     */
    public configurableProductOptionRepositoryV1SavePut(sku: string, id: string, configurableProductOptionRepositoryV1SavePutBody?: ConfigurableProductOptionRepositoryV1SavePostRequest, options?: AxiosRequestConfig) {
        return ConfigurableProductsSkuOptionsIdApiFp(this.configuration).configurableProductOptionRepositoryV1SavePut(sku, id, configurableProductOptionRepositoryV1SavePutBody, options).then((request) => request(this.axios, this.basePath));
    }
}


/**
 * ConfigurableProductsVariationApi - axios parameter creator
 * @export
 */
export const ConfigurableProductsVariationApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Generate variation based on same product
         * @summary configurable-products/variation
         * @param {ConfigurableProductConfigurableProductManagementV1GenerateVariationPutRequest} [configurableProductConfigurableProductManagementV1GenerateVariationPutBody] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        configurableProductConfigurableProductManagementV1GenerateVariationPut: async (configurableProductConfigurableProductManagementV1GenerateVariationPutBody?: ConfigurableProductConfigurableProductManagementV1GenerateVariationPutRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/V1/configurable-products/variation`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(configurableProductConfigurableProductManagementV1GenerateVariationPutBody, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * ConfigurableProductsVariationApi - functional programming interface
 * @export
 */
export const ConfigurableProductsVariationApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = ConfigurableProductsVariationApiAxiosParamCreator(configuration)
    return {
        /**
         * Generate variation based on same product
         * @summary configurable-products/variation
         * @param {ConfigurableProductConfigurableProductManagementV1GenerateVariationPutRequest} [configurableProductConfigurableProductManagementV1GenerateVariationPutBody] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async configurableProductConfigurableProductManagementV1GenerateVariationPut(configurableProductConfigurableProductManagementV1GenerateVariationPutBody?: ConfigurableProductConfigurableProductManagementV1GenerateVariationPutRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<CatalogDataProductInterface>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.configurableProductConfigurableProductManagementV1GenerateVariationPut(configurableProductConfigurableProductManagementV1GenerateVariationPutBody, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * ConfigurableProductsVariationApi - factory interface
 * @export
 */
export const ConfigurableProductsVariationApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = ConfigurableProductsVariationApiFp(configuration)
    return {
        /**
         * Generate variation based on same product
         * @summary configurable-products/variation
         * @param {ConfigurableProductConfigurableProductManagementV1GenerateVariationPutRequest} [configurableProductConfigurableProductManagementV1GenerateVariationPutBody] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        configurableProductConfigurableProductManagementV1GenerateVariationPut(configurableProductConfigurableProductManagementV1GenerateVariationPutBody?: ConfigurableProductConfigurableProductManagementV1GenerateVariationPutRequest, options?: any): AxiosPromise<Array<CatalogDataProductInterface>> {
            return localVarFp.configurableProductConfigurableProductManagementV1GenerateVariationPut(configurableProductConfigurableProductManagementV1GenerateVariationPutBody, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * ConfigurableProductsVariationApi - object-oriented interface
 * @export
 * @class ConfigurableProductsVariationApi
 * @extends {BaseAPI}
 */
export class ConfigurableProductsVariationApi extends BaseAPI {
    /**
     * Generate variation based on same product
     * @summary configurable-products/variation
     * @param {ConfigurableProductConfigurableProductManagementV1GenerateVariationPutRequest} [configurableProductConfigurableProductManagementV1GenerateVariationPutBody] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ConfigurableProductsVariationApi
     */
    public configurableProductConfigurableProductManagementV1GenerateVariationPut(configurableProductConfigurableProductManagementV1GenerateVariationPutBody?: ConfigurableProductConfigurableProductManagementV1GenerateVariationPutRequest, options?: AxiosRequestConfig) {
        return ConfigurableProductsVariationApiFp(this.configuration).configurableProductConfigurableProductManagementV1GenerateVariationPut(configurableProductConfigurableProductManagementV1GenerateVariationPutBody, options).then((request) => request(this.axios, this.basePath));
    }
}


/**
 * CouponsApi - axios parameter creator
 * @export
 */
export const CouponsApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Save a coupon.
         * @summary coupons
         * @param {SalesRuleCouponRepositoryV1SavePostRequest} [salesRuleCouponRepositoryV1SavePostBody] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        salesRuleCouponRepositoryV1SavePost: async (salesRuleCouponRepositoryV1SavePostBody?: SalesRuleCouponRepositoryV1SavePostRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/V1/coupons`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(salesRuleCouponRepositoryV1SavePostBody, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * CouponsApi - functional programming interface
 * @export
 */
export const CouponsApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = CouponsApiAxiosParamCreator(configuration)
    return {
        /**
         * Save a coupon.
         * @summary coupons
         * @param {SalesRuleCouponRepositoryV1SavePostRequest} [salesRuleCouponRepositoryV1SavePostBody] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async salesRuleCouponRepositoryV1SavePost(salesRuleCouponRepositoryV1SavePostBody?: SalesRuleCouponRepositoryV1SavePostRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<SalesRuleDataCouponInterface>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.salesRuleCouponRepositoryV1SavePost(salesRuleCouponRepositoryV1SavePostBody, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * CouponsApi - factory interface
 * @export
 */
export const CouponsApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = CouponsApiFp(configuration)
    return {
        /**
         * Save a coupon.
         * @summary coupons
         * @param {SalesRuleCouponRepositoryV1SavePostRequest} [salesRuleCouponRepositoryV1SavePostBody] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        salesRuleCouponRepositoryV1SavePost(salesRuleCouponRepositoryV1SavePostBody?: SalesRuleCouponRepositoryV1SavePostRequest, options?: any): AxiosPromise<SalesRuleDataCouponInterface> {
            return localVarFp.salesRuleCouponRepositoryV1SavePost(salesRuleCouponRepositoryV1SavePostBody, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * CouponsApi - object-oriented interface
 * @export
 * @class CouponsApi
 * @extends {BaseAPI}
 */
export class CouponsApi extends BaseAPI {
    /**
     * Save a coupon.
     * @summary coupons
     * @param {SalesRuleCouponRepositoryV1SavePostRequest} [salesRuleCouponRepositoryV1SavePostBody] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CouponsApi
     */
    public salesRuleCouponRepositoryV1SavePost(salesRuleCouponRepositoryV1SavePostBody?: SalesRuleCouponRepositoryV1SavePostRequest, options?: AxiosRequestConfig) {
        return CouponsApiFp(this.configuration).salesRuleCouponRepositoryV1SavePost(salesRuleCouponRepositoryV1SavePostBody, options).then((request) => request(this.axios, this.basePath));
    }
}


/**
 * CouponsCouponIdApi - axios parameter creator
 * @export
 */
export const CouponsCouponIdApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Delete coupon by coupon id.
         * @summary coupons/{couponId}
         * @param {number} couponId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        salesRuleCouponRepositoryV1DeleteByIdDelete: async (couponId: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'couponId' is not null or undefined
            assertParamExists('salesRuleCouponRepositoryV1DeleteByIdDelete', 'couponId', couponId)
            const localVarPath = `/V1/coupons/{couponId}`
                .replace(`{${"couponId"}}`, encodeURIComponent(String(couponId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Get coupon by coupon id.
         * @summary coupons/{couponId}
         * @param {number} couponId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        salesRuleCouponRepositoryV1GetByIdGet: async (couponId: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'couponId' is not null or undefined
            assertParamExists('salesRuleCouponRepositoryV1GetByIdGet', 'couponId', couponId)
            const localVarPath = `/V1/coupons/{couponId}`
                .replace(`{${"couponId"}}`, encodeURIComponent(String(couponId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Save a coupon.
         * @summary coupons/{couponId}
         * @param {string} couponId 
         * @param {SalesRuleCouponRepositoryV1SavePostRequest} [salesRuleCouponRepositoryV1SavePutBody] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        salesRuleCouponRepositoryV1SavePut: async (couponId: string, salesRuleCouponRepositoryV1SavePutBody?: SalesRuleCouponRepositoryV1SavePostRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'couponId' is not null or undefined
            assertParamExists('salesRuleCouponRepositoryV1SavePut', 'couponId', couponId)
            const localVarPath = `/V1/coupons/{couponId}`
                .replace(`{${"couponId"}}`, encodeURIComponent(String(couponId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(salesRuleCouponRepositoryV1SavePutBody, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * CouponsCouponIdApi - functional programming interface
 * @export
 */
export const CouponsCouponIdApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = CouponsCouponIdApiAxiosParamCreator(configuration)
    return {
        /**
         * Delete coupon by coupon id.
         * @summary coupons/{couponId}
         * @param {number} couponId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async salesRuleCouponRepositoryV1DeleteByIdDelete(couponId: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<boolean>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.salesRuleCouponRepositoryV1DeleteByIdDelete(couponId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Get coupon by coupon id.
         * @summary coupons/{couponId}
         * @param {number} couponId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async salesRuleCouponRepositoryV1GetByIdGet(couponId: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<SalesRuleDataCouponInterface>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.salesRuleCouponRepositoryV1GetByIdGet(couponId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Save a coupon.
         * @summary coupons/{couponId}
         * @param {string} couponId 
         * @param {SalesRuleCouponRepositoryV1SavePostRequest} [salesRuleCouponRepositoryV1SavePutBody] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async salesRuleCouponRepositoryV1SavePut(couponId: string, salesRuleCouponRepositoryV1SavePutBody?: SalesRuleCouponRepositoryV1SavePostRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<SalesRuleDataCouponInterface>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.salesRuleCouponRepositoryV1SavePut(couponId, salesRuleCouponRepositoryV1SavePutBody, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * CouponsCouponIdApi - factory interface
 * @export
 */
export const CouponsCouponIdApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = CouponsCouponIdApiFp(configuration)
    return {
        /**
         * Delete coupon by coupon id.
         * @summary coupons/{couponId}
         * @param {number} couponId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        salesRuleCouponRepositoryV1DeleteByIdDelete(couponId: number, options?: any): AxiosPromise<boolean> {
            return localVarFp.salesRuleCouponRepositoryV1DeleteByIdDelete(couponId, options).then((request) => request(axios, basePath));
        },
        /**
         * Get coupon by coupon id.
         * @summary coupons/{couponId}
         * @param {number} couponId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        salesRuleCouponRepositoryV1GetByIdGet(couponId: number, options?: any): AxiosPromise<SalesRuleDataCouponInterface> {
            return localVarFp.salesRuleCouponRepositoryV1GetByIdGet(couponId, options).then((request) => request(axios, basePath));
        },
        /**
         * Save a coupon.
         * @summary coupons/{couponId}
         * @param {string} couponId 
         * @param {SalesRuleCouponRepositoryV1SavePostRequest} [salesRuleCouponRepositoryV1SavePutBody] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        salesRuleCouponRepositoryV1SavePut(couponId: string, salesRuleCouponRepositoryV1SavePutBody?: SalesRuleCouponRepositoryV1SavePostRequest, options?: any): AxiosPromise<SalesRuleDataCouponInterface> {
            return localVarFp.salesRuleCouponRepositoryV1SavePut(couponId, salesRuleCouponRepositoryV1SavePutBody, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * CouponsCouponIdApi - object-oriented interface
 * @export
 * @class CouponsCouponIdApi
 * @extends {BaseAPI}
 */
export class CouponsCouponIdApi extends BaseAPI {
    /**
     * Delete coupon by coupon id.
     * @summary coupons/{couponId}
     * @param {number} couponId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CouponsCouponIdApi
     */
    public salesRuleCouponRepositoryV1DeleteByIdDelete(couponId: number, options?: AxiosRequestConfig) {
        return CouponsCouponIdApiFp(this.configuration).salesRuleCouponRepositoryV1DeleteByIdDelete(couponId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Get coupon by coupon id.
     * @summary coupons/{couponId}
     * @param {number} couponId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CouponsCouponIdApi
     */
    public salesRuleCouponRepositoryV1GetByIdGet(couponId: number, options?: AxiosRequestConfig) {
        return CouponsCouponIdApiFp(this.configuration).salesRuleCouponRepositoryV1GetByIdGet(couponId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Save a coupon.
     * @summary coupons/{couponId}
     * @param {string} couponId 
     * @param {SalesRuleCouponRepositoryV1SavePostRequest} [salesRuleCouponRepositoryV1SavePutBody] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CouponsCouponIdApi
     */
    public salesRuleCouponRepositoryV1SavePut(couponId: string, salesRuleCouponRepositoryV1SavePutBody?: SalesRuleCouponRepositoryV1SavePostRequest, options?: AxiosRequestConfig) {
        return CouponsCouponIdApiFp(this.configuration).salesRuleCouponRepositoryV1SavePut(couponId, salesRuleCouponRepositoryV1SavePutBody, options).then((request) => request(this.axios, this.basePath));
    }
}


/**
 * CouponsDeleteByCodesApi - axios parameter creator
 * @export
 */
export const CouponsDeleteByCodesApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Delete coupon by coupon codes.
         * @summary coupons/deleteByCodes
         * @param {SalesRuleCouponManagementV1DeleteByCodesPostRequest} [salesRuleCouponManagementV1DeleteByCodesPostBody] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        salesRuleCouponManagementV1DeleteByCodesPost: async (salesRuleCouponManagementV1DeleteByCodesPostBody?: SalesRuleCouponManagementV1DeleteByCodesPostRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/V1/coupons/deleteByCodes`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(salesRuleCouponManagementV1DeleteByCodesPostBody, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * CouponsDeleteByCodesApi - functional programming interface
 * @export
 */
export const CouponsDeleteByCodesApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = CouponsDeleteByCodesApiAxiosParamCreator(configuration)
    return {
        /**
         * Delete coupon by coupon codes.
         * @summary coupons/deleteByCodes
         * @param {SalesRuleCouponManagementV1DeleteByCodesPostRequest} [salesRuleCouponManagementV1DeleteByCodesPostBody] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async salesRuleCouponManagementV1DeleteByCodesPost(salesRuleCouponManagementV1DeleteByCodesPostBody?: SalesRuleCouponManagementV1DeleteByCodesPostRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<SalesRuleDataCouponMassDeleteResultInterface>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.salesRuleCouponManagementV1DeleteByCodesPost(salesRuleCouponManagementV1DeleteByCodesPostBody, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * CouponsDeleteByCodesApi - factory interface
 * @export
 */
export const CouponsDeleteByCodesApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = CouponsDeleteByCodesApiFp(configuration)
    return {
        /**
         * Delete coupon by coupon codes.
         * @summary coupons/deleteByCodes
         * @param {SalesRuleCouponManagementV1DeleteByCodesPostRequest} [salesRuleCouponManagementV1DeleteByCodesPostBody] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        salesRuleCouponManagementV1DeleteByCodesPost(salesRuleCouponManagementV1DeleteByCodesPostBody?: SalesRuleCouponManagementV1DeleteByCodesPostRequest, options?: any): AxiosPromise<SalesRuleDataCouponMassDeleteResultInterface> {
            return localVarFp.salesRuleCouponManagementV1DeleteByCodesPost(salesRuleCouponManagementV1DeleteByCodesPostBody, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * CouponsDeleteByCodesApi - object-oriented interface
 * @export
 * @class CouponsDeleteByCodesApi
 * @extends {BaseAPI}
 */
export class CouponsDeleteByCodesApi extends BaseAPI {
    /**
     * Delete coupon by coupon codes.
     * @summary coupons/deleteByCodes
     * @param {SalesRuleCouponManagementV1DeleteByCodesPostRequest} [salesRuleCouponManagementV1DeleteByCodesPostBody] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CouponsDeleteByCodesApi
     */
    public salesRuleCouponManagementV1DeleteByCodesPost(salesRuleCouponManagementV1DeleteByCodesPostBody?: SalesRuleCouponManagementV1DeleteByCodesPostRequest, options?: AxiosRequestConfig) {
        return CouponsDeleteByCodesApiFp(this.configuration).salesRuleCouponManagementV1DeleteByCodesPost(salesRuleCouponManagementV1DeleteByCodesPostBody, options).then((request) => request(this.axios, this.basePath));
    }
}


/**
 * CouponsDeleteByIdsApi - axios parameter creator
 * @export
 */
export const CouponsDeleteByIdsApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Delete coupon by coupon ids.
         * @summary coupons/deleteByIds
         * @param {SalesRuleCouponManagementV1DeleteByIdsPostRequest} [salesRuleCouponManagementV1DeleteByIdsPostBody] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        salesRuleCouponManagementV1DeleteByIdsPost: async (salesRuleCouponManagementV1DeleteByIdsPostBody?: SalesRuleCouponManagementV1DeleteByIdsPostRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/V1/coupons/deleteByIds`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(salesRuleCouponManagementV1DeleteByIdsPostBody, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * CouponsDeleteByIdsApi - functional programming interface
 * @export
 */
export const CouponsDeleteByIdsApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = CouponsDeleteByIdsApiAxiosParamCreator(configuration)
    return {
        /**
         * Delete coupon by coupon ids.
         * @summary coupons/deleteByIds
         * @param {SalesRuleCouponManagementV1DeleteByIdsPostRequest} [salesRuleCouponManagementV1DeleteByIdsPostBody] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async salesRuleCouponManagementV1DeleteByIdsPost(salesRuleCouponManagementV1DeleteByIdsPostBody?: SalesRuleCouponManagementV1DeleteByIdsPostRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<SalesRuleDataCouponMassDeleteResultInterface>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.salesRuleCouponManagementV1DeleteByIdsPost(salesRuleCouponManagementV1DeleteByIdsPostBody, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * CouponsDeleteByIdsApi - factory interface
 * @export
 */
export const CouponsDeleteByIdsApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = CouponsDeleteByIdsApiFp(configuration)
    return {
        /**
         * Delete coupon by coupon ids.
         * @summary coupons/deleteByIds
         * @param {SalesRuleCouponManagementV1DeleteByIdsPostRequest} [salesRuleCouponManagementV1DeleteByIdsPostBody] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        salesRuleCouponManagementV1DeleteByIdsPost(salesRuleCouponManagementV1DeleteByIdsPostBody?: SalesRuleCouponManagementV1DeleteByIdsPostRequest, options?: any): AxiosPromise<SalesRuleDataCouponMassDeleteResultInterface> {
            return localVarFp.salesRuleCouponManagementV1DeleteByIdsPost(salesRuleCouponManagementV1DeleteByIdsPostBody, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * CouponsDeleteByIdsApi - object-oriented interface
 * @export
 * @class CouponsDeleteByIdsApi
 * @extends {BaseAPI}
 */
export class CouponsDeleteByIdsApi extends BaseAPI {
    /**
     * Delete coupon by coupon ids.
     * @summary coupons/deleteByIds
     * @param {SalesRuleCouponManagementV1DeleteByIdsPostRequest} [salesRuleCouponManagementV1DeleteByIdsPostBody] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CouponsDeleteByIdsApi
     */
    public salesRuleCouponManagementV1DeleteByIdsPost(salesRuleCouponManagementV1DeleteByIdsPostBody?: SalesRuleCouponManagementV1DeleteByIdsPostRequest, options?: AxiosRequestConfig) {
        return CouponsDeleteByIdsApiFp(this.configuration).salesRuleCouponManagementV1DeleteByIdsPost(salesRuleCouponManagementV1DeleteByIdsPostBody, options).then((request) => request(this.axios, this.basePath));
    }
}


/**
 * CouponsGenerateApi - axios parameter creator
 * @export
 */
export const CouponsGenerateApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Generate coupon for a rule
         * @summary coupons/generate
         * @param {SalesRuleCouponManagementV1GeneratePostRequest} [salesRuleCouponManagementV1GeneratePostBody] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        salesRuleCouponManagementV1GeneratePost: async (salesRuleCouponManagementV1GeneratePostBody?: SalesRuleCouponManagementV1GeneratePostRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/V1/coupons/generate`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(salesRuleCouponManagementV1GeneratePostBody, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * CouponsGenerateApi - functional programming interface
 * @export
 */
export const CouponsGenerateApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = CouponsGenerateApiAxiosParamCreator(configuration)
    return {
        /**
         * Generate coupon for a rule
         * @summary coupons/generate
         * @param {SalesRuleCouponManagementV1GeneratePostRequest} [salesRuleCouponManagementV1GeneratePostBody] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async salesRuleCouponManagementV1GeneratePost(salesRuleCouponManagementV1GeneratePostBody?: SalesRuleCouponManagementV1GeneratePostRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<string>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.salesRuleCouponManagementV1GeneratePost(salesRuleCouponManagementV1GeneratePostBody, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * CouponsGenerateApi - factory interface
 * @export
 */
export const CouponsGenerateApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = CouponsGenerateApiFp(configuration)
    return {
        /**
         * Generate coupon for a rule
         * @summary coupons/generate
         * @param {SalesRuleCouponManagementV1GeneratePostRequest} [salesRuleCouponManagementV1GeneratePostBody] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        salesRuleCouponManagementV1GeneratePost(salesRuleCouponManagementV1GeneratePostBody?: SalesRuleCouponManagementV1GeneratePostRequest, options?: any): AxiosPromise<Array<string>> {
            return localVarFp.salesRuleCouponManagementV1GeneratePost(salesRuleCouponManagementV1GeneratePostBody, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * CouponsGenerateApi - object-oriented interface
 * @export
 * @class CouponsGenerateApi
 * @extends {BaseAPI}
 */
export class CouponsGenerateApi extends BaseAPI {
    /**
     * Generate coupon for a rule
     * @summary coupons/generate
     * @param {SalesRuleCouponManagementV1GeneratePostRequest} [salesRuleCouponManagementV1GeneratePostBody] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CouponsGenerateApi
     */
    public salesRuleCouponManagementV1GeneratePost(salesRuleCouponManagementV1GeneratePostBody?: SalesRuleCouponManagementV1GeneratePostRequest, options?: AxiosRequestConfig) {
        return CouponsGenerateApiFp(this.configuration).salesRuleCouponManagementV1GeneratePost(salesRuleCouponManagementV1GeneratePostBody, options).then((request) => request(this.axios, this.basePath));
    }
}


/**
 * CouponsSearchApi - axios parameter creator
 * @export
 */
export const CouponsSearchApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Retrieve a coupon using the specified search criteria. This call returns an array of objects, but detailed information about each object’s attributes might not be included. See http://devdocs.magento.com/codelinks/attributes.html#CouponRepositoryInterface to determine which call to use to get detailed information about all attributes for an object.
         * @summary coupons/search
         * @param {string} [searchCriteriaFilterGroups0Filters0Field] Field
         * @param {string} [searchCriteriaFilterGroups0Filters0Value] Value
         * @param {string} [searchCriteriaFilterGroups0Filters0ConditionType] Condition type
         * @param {string} [searchCriteriaSortOrders0Field] Sorting field.
         * @param {string} [searchCriteriaSortOrders0Direction] Sorting direction.
         * @param {number} [searchCriteriaPageSize] Page size.
         * @param {number} [searchCriteriaCurrentPage] Current page.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        salesRuleCouponRepositoryV1GetListGet: async (searchCriteriaFilterGroups0Filters0Field?: string, searchCriteriaFilterGroups0Filters0Value?: string, searchCriteriaFilterGroups0Filters0ConditionType?: string, searchCriteriaSortOrders0Field?: string, searchCriteriaSortOrders0Direction?: string, searchCriteriaPageSize?: number, searchCriteriaCurrentPage?: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/V1/coupons/search`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (searchCriteriaFilterGroups0Filters0Field !== undefined) {
                localVarQueryParameter['searchCriteria[filterGroups][0][filters][0][field]'] = searchCriteriaFilterGroups0Filters0Field;
            }

            if (searchCriteriaFilterGroups0Filters0Value !== undefined) {
                localVarQueryParameter['searchCriteria[filterGroups][0][filters][0][value]'] = searchCriteriaFilterGroups0Filters0Value;
            }

            if (searchCriteriaFilterGroups0Filters0ConditionType !== undefined) {
                localVarQueryParameter['searchCriteria[filterGroups][0][filters][0][conditionType]'] = searchCriteriaFilterGroups0Filters0ConditionType;
            }

            if (searchCriteriaSortOrders0Field !== undefined) {
                localVarQueryParameter['searchCriteria[sortOrders][0][field]'] = searchCriteriaSortOrders0Field;
            }

            if (searchCriteriaSortOrders0Direction !== undefined) {
                localVarQueryParameter['searchCriteria[sortOrders][0][direction]'] = searchCriteriaSortOrders0Direction;
            }

            if (searchCriteriaPageSize !== undefined) {
                localVarQueryParameter['searchCriteria[pageSize]'] = searchCriteriaPageSize;
            }

            if (searchCriteriaCurrentPage !== undefined) {
                localVarQueryParameter['searchCriteria[currentPage]'] = searchCriteriaCurrentPage;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * CouponsSearchApi - functional programming interface
 * @export
 */
export const CouponsSearchApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = CouponsSearchApiAxiosParamCreator(configuration)
    return {
        /**
         * Retrieve a coupon using the specified search criteria. This call returns an array of objects, but detailed information about each object’s attributes might not be included. See http://devdocs.magento.com/codelinks/attributes.html#CouponRepositoryInterface to determine which call to use to get detailed information about all attributes for an object.
         * @summary coupons/search
         * @param {string} [searchCriteriaFilterGroups0Filters0Field] Field
         * @param {string} [searchCriteriaFilterGroups0Filters0Value] Value
         * @param {string} [searchCriteriaFilterGroups0Filters0ConditionType] Condition type
         * @param {string} [searchCriteriaSortOrders0Field] Sorting field.
         * @param {string} [searchCriteriaSortOrders0Direction] Sorting direction.
         * @param {number} [searchCriteriaPageSize] Page size.
         * @param {number} [searchCriteriaCurrentPage] Current page.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async salesRuleCouponRepositoryV1GetListGet(searchCriteriaFilterGroups0Filters0Field?: string, searchCriteriaFilterGroups0Filters0Value?: string, searchCriteriaFilterGroups0Filters0ConditionType?: string, searchCriteriaSortOrders0Field?: string, searchCriteriaSortOrders0Direction?: string, searchCriteriaPageSize?: number, searchCriteriaCurrentPage?: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<SalesRuleDataCouponSearchResultInterface>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.salesRuleCouponRepositoryV1GetListGet(searchCriteriaFilterGroups0Filters0Field, searchCriteriaFilterGroups0Filters0Value, searchCriteriaFilterGroups0Filters0ConditionType, searchCriteriaSortOrders0Field, searchCriteriaSortOrders0Direction, searchCriteriaPageSize, searchCriteriaCurrentPage, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * CouponsSearchApi - factory interface
 * @export
 */
export const CouponsSearchApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = CouponsSearchApiFp(configuration)
    return {
        /**
         * Retrieve a coupon using the specified search criteria. This call returns an array of objects, but detailed information about each object’s attributes might not be included. See http://devdocs.magento.com/codelinks/attributes.html#CouponRepositoryInterface to determine which call to use to get detailed information about all attributes for an object.
         * @summary coupons/search
         * @param {string} [searchCriteriaFilterGroups0Filters0Field] Field
         * @param {string} [searchCriteriaFilterGroups0Filters0Value] Value
         * @param {string} [searchCriteriaFilterGroups0Filters0ConditionType] Condition type
         * @param {string} [searchCriteriaSortOrders0Field] Sorting field.
         * @param {string} [searchCriteriaSortOrders0Direction] Sorting direction.
         * @param {number} [searchCriteriaPageSize] Page size.
         * @param {number} [searchCriteriaCurrentPage] Current page.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        salesRuleCouponRepositoryV1GetListGet(searchCriteriaFilterGroups0Filters0Field?: string, searchCriteriaFilterGroups0Filters0Value?: string, searchCriteriaFilterGroups0Filters0ConditionType?: string, searchCriteriaSortOrders0Field?: string, searchCriteriaSortOrders0Direction?: string, searchCriteriaPageSize?: number, searchCriteriaCurrentPage?: number, options?: any): AxiosPromise<SalesRuleDataCouponSearchResultInterface> {
            return localVarFp.salesRuleCouponRepositoryV1GetListGet(searchCriteriaFilterGroups0Filters0Field, searchCriteriaFilterGroups0Filters0Value, searchCriteriaFilterGroups0Filters0ConditionType, searchCriteriaSortOrders0Field, searchCriteriaSortOrders0Direction, searchCriteriaPageSize, searchCriteriaCurrentPage, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * CouponsSearchApi - object-oriented interface
 * @export
 * @class CouponsSearchApi
 * @extends {BaseAPI}
 */
export class CouponsSearchApi extends BaseAPI {
    /**
     * Retrieve a coupon using the specified search criteria. This call returns an array of objects, but detailed information about each object’s attributes might not be included. See http://devdocs.magento.com/codelinks/attributes.html#CouponRepositoryInterface to determine which call to use to get detailed information about all attributes for an object.
     * @summary coupons/search
     * @param {string} [searchCriteriaFilterGroups0Filters0Field] Field
     * @param {string} [searchCriteriaFilterGroups0Filters0Value] Value
     * @param {string} [searchCriteriaFilterGroups0Filters0ConditionType] Condition type
     * @param {string} [searchCriteriaSortOrders0Field] Sorting field.
     * @param {string} [searchCriteriaSortOrders0Direction] Sorting direction.
     * @param {number} [searchCriteriaPageSize] Page size.
     * @param {number} [searchCriteriaCurrentPage] Current page.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CouponsSearchApi
     */
    public salesRuleCouponRepositoryV1GetListGet(searchCriteriaFilterGroups0Filters0Field?: string, searchCriteriaFilterGroups0Filters0Value?: string, searchCriteriaFilterGroups0Filters0ConditionType?: string, searchCriteriaSortOrders0Field?: string, searchCriteriaSortOrders0Direction?: string, searchCriteriaPageSize?: number, searchCriteriaCurrentPage?: number, options?: AxiosRequestConfig) {
        return CouponsSearchApiFp(this.configuration).salesRuleCouponRepositoryV1GetListGet(searchCriteriaFilterGroups0Filters0Field, searchCriteriaFilterGroups0Filters0Value, searchCriteriaFilterGroups0Filters0ConditionType, searchCriteriaSortOrders0Field, searchCriteriaSortOrders0Direction, searchCriteriaPageSize, searchCriteriaCurrentPage, options).then((request) => request(this.axios, this.basePath));
    }
}


/**
 * CreditmemoApi - axios parameter creator
 * @export
 */
export const CreditmemoApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Performs persist operations for a specified credit memo.
         * @summary creditmemo
         * @param {SalesCreditmemoRepositoryV1SavePostRequest} [salesCreditmemoRepositoryV1SavePostBody] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        salesCreditmemoRepositoryV1SavePost: async (salesCreditmemoRepositoryV1SavePostBody?: SalesCreditmemoRepositoryV1SavePostRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/V1/creditmemo`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(salesCreditmemoRepositoryV1SavePostBody, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * CreditmemoApi - functional programming interface
 * @export
 */
export const CreditmemoApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = CreditmemoApiAxiosParamCreator(configuration)
    return {
        /**
         * Performs persist operations for a specified credit memo.
         * @summary creditmemo
         * @param {SalesCreditmemoRepositoryV1SavePostRequest} [salesCreditmemoRepositoryV1SavePostBody] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async salesCreditmemoRepositoryV1SavePost(salesCreditmemoRepositoryV1SavePostBody?: SalesCreditmemoRepositoryV1SavePostRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<SalesDataCreditmemoInterface>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.salesCreditmemoRepositoryV1SavePost(salesCreditmemoRepositoryV1SavePostBody, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * CreditmemoApi - factory interface
 * @export
 */
export const CreditmemoApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = CreditmemoApiFp(configuration)
    return {
        /**
         * Performs persist operations for a specified credit memo.
         * @summary creditmemo
         * @param {SalesCreditmemoRepositoryV1SavePostRequest} [salesCreditmemoRepositoryV1SavePostBody] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        salesCreditmemoRepositoryV1SavePost(salesCreditmemoRepositoryV1SavePostBody?: SalesCreditmemoRepositoryV1SavePostRequest, options?: any): AxiosPromise<SalesDataCreditmemoInterface> {
            return localVarFp.salesCreditmemoRepositoryV1SavePost(salesCreditmemoRepositoryV1SavePostBody, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * CreditmemoApi - object-oriented interface
 * @export
 * @class CreditmemoApi
 * @extends {BaseAPI}
 */
export class CreditmemoApi extends BaseAPI {
    /**
     * Performs persist operations for a specified credit memo.
     * @summary creditmemo
     * @param {SalesCreditmemoRepositoryV1SavePostRequest} [salesCreditmemoRepositoryV1SavePostBody] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CreditmemoApi
     */
    public salesCreditmemoRepositoryV1SavePost(salesCreditmemoRepositoryV1SavePostBody?: SalesCreditmemoRepositoryV1SavePostRequest, options?: AxiosRequestConfig) {
        return CreditmemoApiFp(this.configuration).salesCreditmemoRepositoryV1SavePost(salesCreditmemoRepositoryV1SavePostBody, options).then((request) => request(this.axios, this.basePath));
    }
}


/**
 * CreditmemoIdApi - axios parameter creator
 * @export
 */
export const CreditmemoIdApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Cancels a specified credit memo.
         * @summary creditmemo/{id}
         * @param {number} id The credit memo ID.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        salesCreditmemoManagementV1CancelPut: async (id: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('salesCreditmemoManagementV1CancelPut', 'id', id)
            const localVarPath = `/V1/creditmemo/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Loads a specified credit memo.
         * @summary creditmemo/{id}
         * @param {number} id The credit memo ID.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        salesCreditmemoRepositoryV1GetGet: async (id: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('salesCreditmemoRepositoryV1GetGet', 'id', id)
            const localVarPath = `/V1/creditmemo/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * CreditmemoIdApi - functional programming interface
 * @export
 */
export const CreditmemoIdApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = CreditmemoIdApiAxiosParamCreator(configuration)
    return {
        /**
         * Cancels a specified credit memo.
         * @summary creditmemo/{id}
         * @param {number} id The credit memo ID.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async salesCreditmemoManagementV1CancelPut(id: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<boolean>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.salesCreditmemoManagementV1CancelPut(id, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Loads a specified credit memo.
         * @summary creditmemo/{id}
         * @param {number} id The credit memo ID.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async salesCreditmemoRepositoryV1GetGet(id: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<SalesDataCreditmemoInterface>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.salesCreditmemoRepositoryV1GetGet(id, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * CreditmemoIdApi - factory interface
 * @export
 */
export const CreditmemoIdApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = CreditmemoIdApiFp(configuration)
    return {
        /**
         * Cancels a specified credit memo.
         * @summary creditmemo/{id}
         * @param {number} id The credit memo ID.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        salesCreditmemoManagementV1CancelPut(id: number, options?: any): AxiosPromise<boolean> {
            return localVarFp.salesCreditmemoManagementV1CancelPut(id, options).then((request) => request(axios, basePath));
        },
        /**
         * Loads a specified credit memo.
         * @summary creditmemo/{id}
         * @param {number} id The credit memo ID.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        salesCreditmemoRepositoryV1GetGet(id: number, options?: any): AxiosPromise<SalesDataCreditmemoInterface> {
            return localVarFp.salesCreditmemoRepositoryV1GetGet(id, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * CreditmemoIdApi - object-oriented interface
 * @export
 * @class CreditmemoIdApi
 * @extends {BaseAPI}
 */
export class CreditmemoIdApi extends BaseAPI {
    /**
     * Cancels a specified credit memo.
     * @summary creditmemo/{id}
     * @param {number} id The credit memo ID.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CreditmemoIdApi
     */
    public salesCreditmemoManagementV1CancelPut(id: number, options?: AxiosRequestConfig) {
        return CreditmemoIdApiFp(this.configuration).salesCreditmemoManagementV1CancelPut(id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Loads a specified credit memo.
     * @summary creditmemo/{id}
     * @param {number} id The credit memo ID.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CreditmemoIdApi
     */
    public salesCreditmemoRepositoryV1GetGet(id: number, options?: AxiosRequestConfig) {
        return CreditmemoIdApiFp(this.configuration).salesCreditmemoRepositoryV1GetGet(id, options).then((request) => request(this.axios, this.basePath));
    }
}


/**
 * CreditmemoIdCommentsApi - axios parameter creator
 * @export
 */
export const CreditmemoIdCommentsApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Performs persist operations for a specified entity.
         * @summary creditmemo/{id}/comments
         * @param {string} id 
         * @param {SalesCreditmemoCommentRepositoryV1SavePostRequest} [salesCreditmemoCommentRepositoryV1SavePostBody] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        salesCreditmemoCommentRepositoryV1SavePost: async (id: string, salesCreditmemoCommentRepositoryV1SavePostBody?: SalesCreditmemoCommentRepositoryV1SavePostRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('salesCreditmemoCommentRepositoryV1SavePost', 'id', id)
            const localVarPath = `/V1/creditmemo/{id}/comments`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(salesCreditmemoCommentRepositoryV1SavePostBody, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Lists comments for a specified credit memo.
         * @summary creditmemo/{id}/comments
         * @param {number} id The credit memo ID.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        salesCreditmemoManagementV1GetCommentsListGet: async (id: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('salesCreditmemoManagementV1GetCommentsListGet', 'id', id)
            const localVarPath = `/V1/creditmemo/{id}/comments`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * CreditmemoIdCommentsApi - functional programming interface
 * @export
 */
export const CreditmemoIdCommentsApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = CreditmemoIdCommentsApiAxiosParamCreator(configuration)
    return {
        /**
         * Performs persist operations for a specified entity.
         * @summary creditmemo/{id}/comments
         * @param {string} id 
         * @param {SalesCreditmemoCommentRepositoryV1SavePostRequest} [salesCreditmemoCommentRepositoryV1SavePostBody] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async salesCreditmemoCommentRepositoryV1SavePost(id: string, salesCreditmemoCommentRepositoryV1SavePostBody?: SalesCreditmemoCommentRepositoryV1SavePostRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<SalesDataCreditmemoCommentInterface>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.salesCreditmemoCommentRepositoryV1SavePost(id, salesCreditmemoCommentRepositoryV1SavePostBody, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Lists comments for a specified credit memo.
         * @summary creditmemo/{id}/comments
         * @param {number} id The credit memo ID.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async salesCreditmemoManagementV1GetCommentsListGet(id: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<SalesDataCreditmemoCommentSearchResultInterface>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.salesCreditmemoManagementV1GetCommentsListGet(id, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * CreditmemoIdCommentsApi - factory interface
 * @export
 */
export const CreditmemoIdCommentsApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = CreditmemoIdCommentsApiFp(configuration)
    return {
        /**
         * Performs persist operations for a specified entity.
         * @summary creditmemo/{id}/comments
         * @param {string} id 
         * @param {SalesCreditmemoCommentRepositoryV1SavePostRequest} [salesCreditmemoCommentRepositoryV1SavePostBody] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        salesCreditmemoCommentRepositoryV1SavePost(id: string, salesCreditmemoCommentRepositoryV1SavePostBody?: SalesCreditmemoCommentRepositoryV1SavePostRequest, options?: any): AxiosPromise<SalesDataCreditmemoCommentInterface> {
            return localVarFp.salesCreditmemoCommentRepositoryV1SavePost(id, salesCreditmemoCommentRepositoryV1SavePostBody, options).then((request) => request(axios, basePath));
        },
        /**
         * Lists comments for a specified credit memo.
         * @summary creditmemo/{id}/comments
         * @param {number} id The credit memo ID.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        salesCreditmemoManagementV1GetCommentsListGet(id: number, options?: any): AxiosPromise<SalesDataCreditmemoCommentSearchResultInterface> {
            return localVarFp.salesCreditmemoManagementV1GetCommentsListGet(id, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * CreditmemoIdCommentsApi - object-oriented interface
 * @export
 * @class CreditmemoIdCommentsApi
 * @extends {BaseAPI}
 */
export class CreditmemoIdCommentsApi extends BaseAPI {
    /**
     * Performs persist operations for a specified entity.
     * @summary creditmemo/{id}/comments
     * @param {string} id 
     * @param {SalesCreditmemoCommentRepositoryV1SavePostRequest} [salesCreditmemoCommentRepositoryV1SavePostBody] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CreditmemoIdCommentsApi
     */
    public salesCreditmemoCommentRepositoryV1SavePost(id: string, salesCreditmemoCommentRepositoryV1SavePostBody?: SalesCreditmemoCommentRepositoryV1SavePostRequest, options?: AxiosRequestConfig) {
        return CreditmemoIdCommentsApiFp(this.configuration).salesCreditmemoCommentRepositoryV1SavePost(id, salesCreditmemoCommentRepositoryV1SavePostBody, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Lists comments for a specified credit memo.
     * @summary creditmemo/{id}/comments
     * @param {number} id The credit memo ID.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CreditmemoIdCommentsApi
     */
    public salesCreditmemoManagementV1GetCommentsListGet(id: number, options?: AxiosRequestConfig) {
        return CreditmemoIdCommentsApiFp(this.configuration).salesCreditmemoManagementV1GetCommentsListGet(id, options).then((request) => request(this.axios, this.basePath));
    }
}


/**
 * CreditmemoIdEmailsApi - axios parameter creator
 * @export
 */
export const CreditmemoIdEmailsApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Emails a user a specified credit memo.
         * @summary creditmemo/{id}/emails
         * @param {number} id The credit memo ID.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        salesCreditmemoManagementV1NotifyPost: async (id: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('salesCreditmemoManagementV1NotifyPost', 'id', id)
            const localVarPath = `/V1/creditmemo/{id}/emails`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * CreditmemoIdEmailsApi - functional programming interface
 * @export
 */
export const CreditmemoIdEmailsApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = CreditmemoIdEmailsApiAxiosParamCreator(configuration)
    return {
        /**
         * Emails a user a specified credit memo.
         * @summary creditmemo/{id}/emails
         * @param {number} id The credit memo ID.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async salesCreditmemoManagementV1NotifyPost(id: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<boolean>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.salesCreditmemoManagementV1NotifyPost(id, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * CreditmemoIdEmailsApi - factory interface
 * @export
 */
export const CreditmemoIdEmailsApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = CreditmemoIdEmailsApiFp(configuration)
    return {
        /**
         * Emails a user a specified credit memo.
         * @summary creditmemo/{id}/emails
         * @param {number} id The credit memo ID.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        salesCreditmemoManagementV1NotifyPost(id: number, options?: any): AxiosPromise<boolean> {
            return localVarFp.salesCreditmemoManagementV1NotifyPost(id, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * CreditmemoIdEmailsApi - object-oriented interface
 * @export
 * @class CreditmemoIdEmailsApi
 * @extends {BaseAPI}
 */
export class CreditmemoIdEmailsApi extends BaseAPI {
    /**
     * Emails a user a specified credit memo.
     * @summary creditmemo/{id}/emails
     * @param {number} id The credit memo ID.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CreditmemoIdEmailsApi
     */
    public salesCreditmemoManagementV1NotifyPost(id: number, options?: AxiosRequestConfig) {
        return CreditmemoIdEmailsApiFp(this.configuration).salesCreditmemoManagementV1NotifyPost(id, options).then((request) => request(this.axios, this.basePath));
    }
}


/**
 * CreditmemoRefundApi - axios parameter creator
 * @export
 */
export const CreditmemoRefundApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Prepare creditmemo to refund and save it.
         * @summary creditmemo/refund
         * @param {SalesCreditmemoManagementV1RefundPostRequest} [salesCreditmemoManagementV1RefundPostBody] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        salesCreditmemoManagementV1RefundPost: async (salesCreditmemoManagementV1RefundPostBody?: SalesCreditmemoManagementV1RefundPostRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/V1/creditmemo/refund`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(salesCreditmemoManagementV1RefundPostBody, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * CreditmemoRefundApi - functional programming interface
 * @export
 */
export const CreditmemoRefundApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = CreditmemoRefundApiAxiosParamCreator(configuration)
    return {
        /**
         * Prepare creditmemo to refund and save it.
         * @summary creditmemo/refund
         * @param {SalesCreditmemoManagementV1RefundPostRequest} [salesCreditmemoManagementV1RefundPostBody] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async salesCreditmemoManagementV1RefundPost(salesCreditmemoManagementV1RefundPostBody?: SalesCreditmemoManagementV1RefundPostRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<SalesDataCreditmemoInterface>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.salesCreditmemoManagementV1RefundPost(salesCreditmemoManagementV1RefundPostBody, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * CreditmemoRefundApi - factory interface
 * @export
 */
export const CreditmemoRefundApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = CreditmemoRefundApiFp(configuration)
    return {
        /**
         * Prepare creditmemo to refund and save it.
         * @summary creditmemo/refund
         * @param {SalesCreditmemoManagementV1RefundPostRequest} [salesCreditmemoManagementV1RefundPostBody] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        salesCreditmemoManagementV1RefundPost(salesCreditmemoManagementV1RefundPostBody?: SalesCreditmemoManagementV1RefundPostRequest, options?: any): AxiosPromise<SalesDataCreditmemoInterface> {
            return localVarFp.salesCreditmemoManagementV1RefundPost(salesCreditmemoManagementV1RefundPostBody, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * CreditmemoRefundApi - object-oriented interface
 * @export
 * @class CreditmemoRefundApi
 * @extends {BaseAPI}
 */
export class CreditmemoRefundApi extends BaseAPI {
    /**
     * Prepare creditmemo to refund and save it.
     * @summary creditmemo/refund
     * @param {SalesCreditmemoManagementV1RefundPostRequest} [salesCreditmemoManagementV1RefundPostBody] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CreditmemoRefundApi
     */
    public salesCreditmemoManagementV1RefundPost(salesCreditmemoManagementV1RefundPostBody?: SalesCreditmemoManagementV1RefundPostRequest, options?: AxiosRequestConfig) {
        return CreditmemoRefundApiFp(this.configuration).salesCreditmemoManagementV1RefundPost(salesCreditmemoManagementV1RefundPostBody, options).then((request) => request(this.axios, this.basePath));
    }
}


/**
 * CreditmemosApi - axios parameter creator
 * @export
 */
export const CreditmemosApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Lists credit memos that match specified search criteria. This call returns an array of objects, but detailed information about each object’s attributes might not be included. See http://devdocs.magento.com/codelinks/attributes.html#CreditmemoRepositoryInterface to determine which call to use to get detailed information about all attributes for an object.
         * @summary creditmemos
         * @param {string} [searchCriteriaFilterGroups0Filters0Field] Field
         * @param {string} [searchCriteriaFilterGroups0Filters0Value] Value
         * @param {string} [searchCriteriaFilterGroups0Filters0ConditionType] Condition type
         * @param {string} [searchCriteriaSortOrders0Field] Sorting field.
         * @param {string} [searchCriteriaSortOrders0Direction] Sorting direction.
         * @param {number} [searchCriteriaPageSize] Page size.
         * @param {number} [searchCriteriaCurrentPage] Current page.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        salesCreditmemoRepositoryV1GetListGet: async (searchCriteriaFilterGroups0Filters0Field?: string, searchCriteriaFilterGroups0Filters0Value?: string, searchCriteriaFilterGroups0Filters0ConditionType?: string, searchCriteriaSortOrders0Field?: string, searchCriteriaSortOrders0Direction?: string, searchCriteriaPageSize?: number, searchCriteriaCurrentPage?: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/V1/creditmemos`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (searchCriteriaFilterGroups0Filters0Field !== undefined) {
                localVarQueryParameter['searchCriteria[filterGroups][0][filters][0][field]'] = searchCriteriaFilterGroups0Filters0Field;
            }

            if (searchCriteriaFilterGroups0Filters0Value !== undefined) {
                localVarQueryParameter['searchCriteria[filterGroups][0][filters][0][value]'] = searchCriteriaFilterGroups0Filters0Value;
            }

            if (searchCriteriaFilterGroups0Filters0ConditionType !== undefined) {
                localVarQueryParameter['searchCriteria[filterGroups][0][filters][0][conditionType]'] = searchCriteriaFilterGroups0Filters0ConditionType;
            }

            if (searchCriteriaSortOrders0Field !== undefined) {
                localVarQueryParameter['searchCriteria[sortOrders][0][field]'] = searchCriteriaSortOrders0Field;
            }

            if (searchCriteriaSortOrders0Direction !== undefined) {
                localVarQueryParameter['searchCriteria[sortOrders][0][direction]'] = searchCriteriaSortOrders0Direction;
            }

            if (searchCriteriaPageSize !== undefined) {
                localVarQueryParameter['searchCriteria[pageSize]'] = searchCriteriaPageSize;
            }

            if (searchCriteriaCurrentPage !== undefined) {
                localVarQueryParameter['searchCriteria[currentPage]'] = searchCriteriaCurrentPage;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * CreditmemosApi - functional programming interface
 * @export
 */
export const CreditmemosApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = CreditmemosApiAxiosParamCreator(configuration)
    return {
        /**
         * Lists credit memos that match specified search criteria. This call returns an array of objects, but detailed information about each object’s attributes might not be included. See http://devdocs.magento.com/codelinks/attributes.html#CreditmemoRepositoryInterface to determine which call to use to get detailed information about all attributes for an object.
         * @summary creditmemos
         * @param {string} [searchCriteriaFilterGroups0Filters0Field] Field
         * @param {string} [searchCriteriaFilterGroups0Filters0Value] Value
         * @param {string} [searchCriteriaFilterGroups0Filters0ConditionType] Condition type
         * @param {string} [searchCriteriaSortOrders0Field] Sorting field.
         * @param {string} [searchCriteriaSortOrders0Direction] Sorting direction.
         * @param {number} [searchCriteriaPageSize] Page size.
         * @param {number} [searchCriteriaCurrentPage] Current page.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async salesCreditmemoRepositoryV1GetListGet(searchCriteriaFilterGroups0Filters0Field?: string, searchCriteriaFilterGroups0Filters0Value?: string, searchCriteriaFilterGroups0Filters0ConditionType?: string, searchCriteriaSortOrders0Field?: string, searchCriteriaSortOrders0Direction?: string, searchCriteriaPageSize?: number, searchCriteriaCurrentPage?: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<SalesDataCreditmemoSearchResultInterface>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.salesCreditmemoRepositoryV1GetListGet(searchCriteriaFilterGroups0Filters0Field, searchCriteriaFilterGroups0Filters0Value, searchCriteriaFilterGroups0Filters0ConditionType, searchCriteriaSortOrders0Field, searchCriteriaSortOrders0Direction, searchCriteriaPageSize, searchCriteriaCurrentPage, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * CreditmemosApi - factory interface
 * @export
 */
export const CreditmemosApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = CreditmemosApiFp(configuration)
    return {
        /**
         * Lists credit memos that match specified search criteria. This call returns an array of objects, but detailed information about each object’s attributes might not be included. See http://devdocs.magento.com/codelinks/attributes.html#CreditmemoRepositoryInterface to determine which call to use to get detailed information about all attributes for an object.
         * @summary creditmemos
         * @param {string} [searchCriteriaFilterGroups0Filters0Field] Field
         * @param {string} [searchCriteriaFilterGroups0Filters0Value] Value
         * @param {string} [searchCriteriaFilterGroups0Filters0ConditionType] Condition type
         * @param {string} [searchCriteriaSortOrders0Field] Sorting field.
         * @param {string} [searchCriteriaSortOrders0Direction] Sorting direction.
         * @param {number} [searchCriteriaPageSize] Page size.
         * @param {number} [searchCriteriaCurrentPage] Current page.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        salesCreditmemoRepositoryV1GetListGet(searchCriteriaFilterGroups0Filters0Field?: string, searchCriteriaFilterGroups0Filters0Value?: string, searchCriteriaFilterGroups0Filters0ConditionType?: string, searchCriteriaSortOrders0Field?: string, searchCriteriaSortOrders0Direction?: string, searchCriteriaPageSize?: number, searchCriteriaCurrentPage?: number, options?: any): AxiosPromise<SalesDataCreditmemoSearchResultInterface> {
            return localVarFp.salesCreditmemoRepositoryV1GetListGet(searchCriteriaFilterGroups0Filters0Field, searchCriteriaFilterGroups0Filters0Value, searchCriteriaFilterGroups0Filters0ConditionType, searchCriteriaSortOrders0Field, searchCriteriaSortOrders0Direction, searchCriteriaPageSize, searchCriteriaCurrentPage, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * CreditmemosApi - object-oriented interface
 * @export
 * @class CreditmemosApi
 * @extends {BaseAPI}
 */
export class CreditmemosApi extends BaseAPI {
    /**
     * Lists credit memos that match specified search criteria. This call returns an array of objects, but detailed information about each object’s attributes might not be included. See http://devdocs.magento.com/codelinks/attributes.html#CreditmemoRepositoryInterface to determine which call to use to get detailed information about all attributes for an object.
     * @summary creditmemos
     * @param {string} [searchCriteriaFilterGroups0Filters0Field] Field
     * @param {string} [searchCriteriaFilterGroups0Filters0Value] Value
     * @param {string} [searchCriteriaFilterGroups0Filters0ConditionType] Condition type
     * @param {string} [searchCriteriaSortOrders0Field] Sorting field.
     * @param {string} [searchCriteriaSortOrders0Direction] Sorting direction.
     * @param {number} [searchCriteriaPageSize] Page size.
     * @param {number} [searchCriteriaCurrentPage] Current page.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CreditmemosApi
     */
    public salesCreditmemoRepositoryV1GetListGet(searchCriteriaFilterGroups0Filters0Field?: string, searchCriteriaFilterGroups0Filters0Value?: string, searchCriteriaFilterGroups0Filters0ConditionType?: string, searchCriteriaSortOrders0Field?: string, searchCriteriaSortOrders0Direction?: string, searchCriteriaPageSize?: number, searchCriteriaCurrentPage?: number, options?: AxiosRequestConfig) {
        return CreditmemosApiFp(this.configuration).salesCreditmemoRepositoryV1GetListGet(searchCriteriaFilterGroups0Filters0Field, searchCriteriaFilterGroups0Filters0Value, searchCriteriaFilterGroups0Filters0ConditionType, searchCriteriaSortOrders0Field, searchCriteriaSortOrders0Direction, searchCriteriaPageSize, searchCriteriaCurrentPage, options).then((request) => request(this.axios, this.basePath));
    }
}


/**
 * CustomerGroupsApi - axios parameter creator
 * @export
 */
export const CustomerGroupsApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Save customer group.
         * @summary customerGroups
         * @param {CustomerGroupRepositoryV1SavePostRequest} [customerGroupRepositoryV1SavePostBody] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        customerGroupRepositoryV1SavePost: async (customerGroupRepositoryV1SavePostBody?: CustomerGroupRepositoryV1SavePostRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/V1/customerGroups`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(customerGroupRepositoryV1SavePostBody, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * CustomerGroupsApi - functional programming interface
 * @export
 */
export const CustomerGroupsApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = CustomerGroupsApiAxiosParamCreator(configuration)
    return {
        /**
         * Save customer group.
         * @summary customerGroups
         * @param {CustomerGroupRepositoryV1SavePostRequest} [customerGroupRepositoryV1SavePostBody] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async customerGroupRepositoryV1SavePost(customerGroupRepositoryV1SavePostBody?: CustomerGroupRepositoryV1SavePostRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<CustomerDataGroupInterface>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.customerGroupRepositoryV1SavePost(customerGroupRepositoryV1SavePostBody, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * CustomerGroupsApi - factory interface
 * @export
 */
export const CustomerGroupsApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = CustomerGroupsApiFp(configuration)
    return {
        /**
         * Save customer group.
         * @summary customerGroups
         * @param {CustomerGroupRepositoryV1SavePostRequest} [customerGroupRepositoryV1SavePostBody] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        customerGroupRepositoryV1SavePost(customerGroupRepositoryV1SavePostBody?: CustomerGroupRepositoryV1SavePostRequest, options?: any): AxiosPromise<CustomerDataGroupInterface> {
            return localVarFp.customerGroupRepositoryV1SavePost(customerGroupRepositoryV1SavePostBody, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * CustomerGroupsApi - object-oriented interface
 * @export
 * @class CustomerGroupsApi
 * @extends {BaseAPI}
 */
export class CustomerGroupsApi extends BaseAPI {
    /**
     * Save customer group.
     * @summary customerGroups
     * @param {CustomerGroupRepositoryV1SavePostRequest} [customerGroupRepositoryV1SavePostBody] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CustomerGroupsApi
     */
    public customerGroupRepositoryV1SavePost(customerGroupRepositoryV1SavePostBody?: CustomerGroupRepositoryV1SavePostRequest, options?: AxiosRequestConfig) {
        return CustomerGroupsApiFp(this.configuration).customerGroupRepositoryV1SavePost(customerGroupRepositoryV1SavePostBody, options).then((request) => request(this.axios, this.basePath));
    }
}


/**
 * CustomerGroupsDefaultApi - axios parameter creator
 * @export
 */
export const CustomerGroupsDefaultApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Get default customer group.
         * @summary customerGroups/default
         * @param {number} [storeId] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        customerGroupManagementV1GetDefaultGroupGet: async (storeId?: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/V1/customerGroups/default`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (storeId !== undefined) {
                localVarQueryParameter['storeId'] = storeId;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * CustomerGroupsDefaultApi - functional programming interface
 * @export
 */
export const CustomerGroupsDefaultApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = CustomerGroupsDefaultApiAxiosParamCreator(configuration)
    return {
        /**
         * Get default customer group.
         * @summary customerGroups/default
         * @param {number} [storeId] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async customerGroupManagementV1GetDefaultGroupGet(storeId?: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<CustomerDataGroupInterface>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.customerGroupManagementV1GetDefaultGroupGet(storeId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * CustomerGroupsDefaultApi - factory interface
 * @export
 */
export const CustomerGroupsDefaultApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = CustomerGroupsDefaultApiFp(configuration)
    return {
        /**
         * Get default customer group.
         * @summary customerGroups/default
         * @param {number} [storeId] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        customerGroupManagementV1GetDefaultGroupGet(storeId?: number, options?: any): AxiosPromise<CustomerDataGroupInterface> {
            return localVarFp.customerGroupManagementV1GetDefaultGroupGet(storeId, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * CustomerGroupsDefaultApi - object-oriented interface
 * @export
 * @class CustomerGroupsDefaultApi
 * @extends {BaseAPI}
 */
export class CustomerGroupsDefaultApi extends BaseAPI {
    /**
     * Get default customer group.
     * @summary customerGroups/default
     * @param {number} [storeId] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CustomerGroupsDefaultApi
     */
    public customerGroupManagementV1GetDefaultGroupGet(storeId?: number, options?: AxiosRequestConfig) {
        return CustomerGroupsDefaultApiFp(this.configuration).customerGroupManagementV1GetDefaultGroupGet(storeId, options).then((request) => request(this.axios, this.basePath));
    }
}


/**
 * CustomerGroupsDefaultIdApi - axios parameter creator
 * @export
 */
export const CustomerGroupsDefaultIdApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Set system default customer group.
         * @summary customerGroups/default/{id}
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        customerCustomerGroupConfigV1SetDefaultCustomerGroupPut: async (id: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('customerCustomerGroupConfigV1SetDefaultCustomerGroupPut', 'id', id)
            const localVarPath = `/V1/customerGroups/default/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * CustomerGroupsDefaultIdApi - functional programming interface
 * @export
 */
export const CustomerGroupsDefaultIdApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = CustomerGroupsDefaultIdApiAxiosParamCreator(configuration)
    return {
        /**
         * Set system default customer group.
         * @summary customerGroups/default/{id}
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async customerCustomerGroupConfigV1SetDefaultCustomerGroupPut(id: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<number>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.customerCustomerGroupConfigV1SetDefaultCustomerGroupPut(id, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * CustomerGroupsDefaultIdApi - factory interface
 * @export
 */
export const CustomerGroupsDefaultIdApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = CustomerGroupsDefaultIdApiFp(configuration)
    return {
        /**
         * Set system default customer group.
         * @summary customerGroups/default/{id}
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        customerCustomerGroupConfigV1SetDefaultCustomerGroupPut(id: number, options?: any): AxiosPromise<number> {
            return localVarFp.customerCustomerGroupConfigV1SetDefaultCustomerGroupPut(id, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * CustomerGroupsDefaultIdApi - object-oriented interface
 * @export
 * @class CustomerGroupsDefaultIdApi
 * @extends {BaseAPI}
 */
export class CustomerGroupsDefaultIdApi extends BaseAPI {
    /**
     * Set system default customer group.
     * @summary customerGroups/default/{id}
     * @param {number} id 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CustomerGroupsDefaultIdApi
     */
    public customerCustomerGroupConfigV1SetDefaultCustomerGroupPut(id: number, options?: AxiosRequestConfig) {
        return CustomerGroupsDefaultIdApiFp(this.configuration).customerCustomerGroupConfigV1SetDefaultCustomerGroupPut(id, options).then((request) => request(this.axios, this.basePath));
    }
}


/**
 * CustomerGroupsDefaultStoreIdApi - axios parameter creator
 * @export
 */
export const CustomerGroupsDefaultStoreIdApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Get default customer group.
         * @summary customerGroups/default/{storeId}
         * @param {number} storeId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        customerGroupManagementV1GetDefaultGroupGet: async (storeId: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'storeId' is not null or undefined
            assertParamExists('customerGroupManagementV1GetDefaultGroupGet', 'storeId', storeId)
            const localVarPath = `/V1/customerGroups/default/{storeId}`
                .replace(`{${"storeId"}}`, encodeURIComponent(String(storeId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * CustomerGroupsDefaultStoreIdApi - functional programming interface
 * @export
 */
export const CustomerGroupsDefaultStoreIdApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = CustomerGroupsDefaultStoreIdApiAxiosParamCreator(configuration)
    return {
        /**
         * Get default customer group.
         * @summary customerGroups/default/{storeId}
         * @param {number} storeId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async customerGroupManagementV1GetDefaultGroupGet(storeId: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<CustomerDataGroupInterface>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.customerGroupManagementV1GetDefaultGroupGet(storeId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * CustomerGroupsDefaultStoreIdApi - factory interface
 * @export
 */
export const CustomerGroupsDefaultStoreIdApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = CustomerGroupsDefaultStoreIdApiFp(configuration)
    return {
        /**
         * Get default customer group.
         * @summary customerGroups/default/{storeId}
         * @param {number} storeId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        customerGroupManagementV1GetDefaultGroupGet(storeId: number, options?: any): AxiosPromise<CustomerDataGroupInterface> {
            return localVarFp.customerGroupManagementV1GetDefaultGroupGet(storeId, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * CustomerGroupsDefaultStoreIdApi - object-oriented interface
 * @export
 * @class CustomerGroupsDefaultStoreIdApi
 * @extends {BaseAPI}
 */
export class CustomerGroupsDefaultStoreIdApi extends BaseAPI {
    /**
     * Get default customer group.
     * @summary customerGroups/default/{storeId}
     * @param {number} storeId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CustomerGroupsDefaultStoreIdApi
     */
    public customerGroupManagementV1GetDefaultGroupGet(storeId: number, options?: AxiosRequestConfig) {
        return CustomerGroupsDefaultStoreIdApiFp(this.configuration).customerGroupManagementV1GetDefaultGroupGet(storeId, options).then((request) => request(this.axios, this.basePath));
    }
}


/**
 * CustomerGroupsIdApi - axios parameter creator
 * @export
 */
export const CustomerGroupsIdApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Delete customer group by ID.
         * @summary customerGroups/{id}
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        customerGroupRepositoryV1DeleteByIdDelete: async (id: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('customerGroupRepositoryV1DeleteByIdDelete', 'id', id)
            const localVarPath = `/V1/customerGroups/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Get customer group by group ID.
         * @summary customerGroups/{id}
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        customerGroupRepositoryV1GetByIdGet: async (id: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('customerGroupRepositoryV1GetByIdGet', 'id', id)
            const localVarPath = `/V1/customerGroups/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Save customer group.
         * @summary customerGroups/{id}
         * @param {string} id 
         * @param {CustomerGroupRepositoryV1SavePostRequest} [customerGroupRepositoryV1SavePutBody] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        customerGroupRepositoryV1SavePut: async (id: string, customerGroupRepositoryV1SavePutBody?: CustomerGroupRepositoryV1SavePostRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('customerGroupRepositoryV1SavePut', 'id', id)
            const localVarPath = `/V1/customerGroups/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(customerGroupRepositoryV1SavePutBody, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * CustomerGroupsIdApi - functional programming interface
 * @export
 */
export const CustomerGroupsIdApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = CustomerGroupsIdApiAxiosParamCreator(configuration)
    return {
        /**
         * Delete customer group by ID.
         * @summary customerGroups/{id}
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async customerGroupRepositoryV1DeleteByIdDelete(id: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<boolean>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.customerGroupRepositoryV1DeleteByIdDelete(id, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Get customer group by group ID.
         * @summary customerGroups/{id}
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async customerGroupRepositoryV1GetByIdGet(id: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<CustomerDataGroupInterface>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.customerGroupRepositoryV1GetByIdGet(id, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Save customer group.
         * @summary customerGroups/{id}
         * @param {string} id 
         * @param {CustomerGroupRepositoryV1SavePostRequest} [customerGroupRepositoryV1SavePutBody] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async customerGroupRepositoryV1SavePut(id: string, customerGroupRepositoryV1SavePutBody?: CustomerGroupRepositoryV1SavePostRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<CustomerDataGroupInterface>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.customerGroupRepositoryV1SavePut(id, customerGroupRepositoryV1SavePutBody, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * CustomerGroupsIdApi - factory interface
 * @export
 */
export const CustomerGroupsIdApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = CustomerGroupsIdApiFp(configuration)
    return {
        /**
         * Delete customer group by ID.
         * @summary customerGroups/{id}
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        customerGroupRepositoryV1DeleteByIdDelete(id: number, options?: any): AxiosPromise<boolean> {
            return localVarFp.customerGroupRepositoryV1DeleteByIdDelete(id, options).then((request) => request(axios, basePath));
        },
        /**
         * Get customer group by group ID.
         * @summary customerGroups/{id}
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        customerGroupRepositoryV1GetByIdGet(id: number, options?: any): AxiosPromise<CustomerDataGroupInterface> {
            return localVarFp.customerGroupRepositoryV1GetByIdGet(id, options).then((request) => request(axios, basePath));
        },
        /**
         * Save customer group.
         * @summary customerGroups/{id}
         * @param {string} id 
         * @param {CustomerGroupRepositoryV1SavePostRequest} [customerGroupRepositoryV1SavePutBody] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        customerGroupRepositoryV1SavePut(id: string, customerGroupRepositoryV1SavePutBody?: CustomerGroupRepositoryV1SavePostRequest, options?: any): AxiosPromise<CustomerDataGroupInterface> {
            return localVarFp.customerGroupRepositoryV1SavePut(id, customerGroupRepositoryV1SavePutBody, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * CustomerGroupsIdApi - object-oriented interface
 * @export
 * @class CustomerGroupsIdApi
 * @extends {BaseAPI}
 */
export class CustomerGroupsIdApi extends BaseAPI {
    /**
     * Delete customer group by ID.
     * @summary customerGroups/{id}
     * @param {number} id 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CustomerGroupsIdApi
     */
    public customerGroupRepositoryV1DeleteByIdDelete(id: number, options?: AxiosRequestConfig) {
        return CustomerGroupsIdApiFp(this.configuration).customerGroupRepositoryV1DeleteByIdDelete(id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Get customer group by group ID.
     * @summary customerGroups/{id}
     * @param {number} id 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CustomerGroupsIdApi
     */
    public customerGroupRepositoryV1GetByIdGet(id: number, options?: AxiosRequestConfig) {
        return CustomerGroupsIdApiFp(this.configuration).customerGroupRepositoryV1GetByIdGet(id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Save customer group.
     * @summary customerGroups/{id}
     * @param {string} id 
     * @param {CustomerGroupRepositoryV1SavePostRequest} [customerGroupRepositoryV1SavePutBody] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CustomerGroupsIdApi
     */
    public customerGroupRepositoryV1SavePut(id: string, customerGroupRepositoryV1SavePutBody?: CustomerGroupRepositoryV1SavePostRequest, options?: AxiosRequestConfig) {
        return CustomerGroupsIdApiFp(this.configuration).customerGroupRepositoryV1SavePut(id, customerGroupRepositoryV1SavePutBody, options).then((request) => request(this.axios, this.basePath));
    }
}


/**
 * CustomerGroupsIdPermissionsApi - axios parameter creator
 * @export
 */
export const CustomerGroupsIdPermissionsApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Check if customer group can be deleted.
         * @summary customerGroups/{id}/permissions
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        customerGroupManagementV1IsReadonlyGet: async (id: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('customerGroupManagementV1IsReadonlyGet', 'id', id)
            const localVarPath = `/V1/customerGroups/{id}/permissions`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * CustomerGroupsIdPermissionsApi - functional programming interface
 * @export
 */
export const CustomerGroupsIdPermissionsApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = CustomerGroupsIdPermissionsApiAxiosParamCreator(configuration)
    return {
        /**
         * Check if customer group can be deleted.
         * @summary customerGroups/{id}/permissions
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async customerGroupManagementV1IsReadonlyGet(id: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<boolean>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.customerGroupManagementV1IsReadonlyGet(id, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * CustomerGroupsIdPermissionsApi - factory interface
 * @export
 */
export const CustomerGroupsIdPermissionsApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = CustomerGroupsIdPermissionsApiFp(configuration)
    return {
        /**
         * Check if customer group can be deleted.
         * @summary customerGroups/{id}/permissions
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        customerGroupManagementV1IsReadonlyGet(id: number, options?: any): AxiosPromise<boolean> {
            return localVarFp.customerGroupManagementV1IsReadonlyGet(id, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * CustomerGroupsIdPermissionsApi - object-oriented interface
 * @export
 * @class CustomerGroupsIdPermissionsApi
 * @extends {BaseAPI}
 */
export class CustomerGroupsIdPermissionsApi extends BaseAPI {
    /**
     * Check if customer group can be deleted.
     * @summary customerGroups/{id}/permissions
     * @param {number} id 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CustomerGroupsIdPermissionsApi
     */
    public customerGroupManagementV1IsReadonlyGet(id: number, options?: AxiosRequestConfig) {
        return CustomerGroupsIdPermissionsApiFp(this.configuration).customerGroupManagementV1IsReadonlyGet(id, options).then((request) => request(this.axios, this.basePath));
    }
}


/**
 * CustomerGroupsSearchApi - axios parameter creator
 * @export
 */
export const CustomerGroupsSearchApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Retrieve customer groups. The list of groups can be filtered to exclude the NOT_LOGGED_IN group using the first parameter and/or it can be filtered by tax class. This call returns an array of objects, but detailed information about each object’s attributes might not be included. See http://devdocs.magento.com/codelinks/attributes.html#GroupRepositoryInterface to determine which call to use to get detailed information about all attributes for an object.
         * @summary customerGroups/search
         * @param {string} [searchCriteriaFilterGroups0Filters0Field] Field
         * @param {string} [searchCriteriaFilterGroups0Filters0Value] Value
         * @param {string} [searchCriteriaFilterGroups0Filters0ConditionType] Condition type
         * @param {string} [searchCriteriaSortOrders0Field] Sorting field.
         * @param {string} [searchCriteriaSortOrders0Direction] Sorting direction.
         * @param {number} [searchCriteriaPageSize] Page size.
         * @param {number} [searchCriteriaCurrentPage] Current page.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        customerGroupRepositoryV1GetListGet: async (searchCriteriaFilterGroups0Filters0Field?: string, searchCriteriaFilterGroups0Filters0Value?: string, searchCriteriaFilterGroups0Filters0ConditionType?: string, searchCriteriaSortOrders0Field?: string, searchCriteriaSortOrders0Direction?: string, searchCriteriaPageSize?: number, searchCriteriaCurrentPage?: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/V1/customerGroups/search`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (searchCriteriaFilterGroups0Filters0Field !== undefined) {
                localVarQueryParameter['searchCriteria[filterGroups][0][filters][0][field]'] = searchCriteriaFilterGroups0Filters0Field;
            }

            if (searchCriteriaFilterGroups0Filters0Value !== undefined) {
                localVarQueryParameter['searchCriteria[filterGroups][0][filters][0][value]'] = searchCriteriaFilterGroups0Filters0Value;
            }

            if (searchCriteriaFilterGroups0Filters0ConditionType !== undefined) {
                localVarQueryParameter['searchCriteria[filterGroups][0][filters][0][conditionType]'] = searchCriteriaFilterGroups0Filters0ConditionType;
            }

            if (searchCriteriaSortOrders0Field !== undefined) {
                localVarQueryParameter['searchCriteria[sortOrders][0][field]'] = searchCriteriaSortOrders0Field;
            }

            if (searchCriteriaSortOrders0Direction !== undefined) {
                localVarQueryParameter['searchCriteria[sortOrders][0][direction]'] = searchCriteriaSortOrders0Direction;
            }

            if (searchCriteriaPageSize !== undefined) {
                localVarQueryParameter['searchCriteria[pageSize]'] = searchCriteriaPageSize;
            }

            if (searchCriteriaCurrentPage !== undefined) {
                localVarQueryParameter['searchCriteria[currentPage]'] = searchCriteriaCurrentPage;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * CustomerGroupsSearchApi - functional programming interface
 * @export
 */
export const CustomerGroupsSearchApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = CustomerGroupsSearchApiAxiosParamCreator(configuration)
    return {
        /**
         * Retrieve customer groups. The list of groups can be filtered to exclude the NOT_LOGGED_IN group using the first parameter and/or it can be filtered by tax class. This call returns an array of objects, but detailed information about each object’s attributes might not be included. See http://devdocs.magento.com/codelinks/attributes.html#GroupRepositoryInterface to determine which call to use to get detailed information about all attributes for an object.
         * @summary customerGroups/search
         * @param {string} [searchCriteriaFilterGroups0Filters0Field] Field
         * @param {string} [searchCriteriaFilterGroups0Filters0Value] Value
         * @param {string} [searchCriteriaFilterGroups0Filters0ConditionType] Condition type
         * @param {string} [searchCriteriaSortOrders0Field] Sorting field.
         * @param {string} [searchCriteriaSortOrders0Direction] Sorting direction.
         * @param {number} [searchCriteriaPageSize] Page size.
         * @param {number} [searchCriteriaCurrentPage] Current page.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async customerGroupRepositoryV1GetListGet(searchCriteriaFilterGroups0Filters0Field?: string, searchCriteriaFilterGroups0Filters0Value?: string, searchCriteriaFilterGroups0Filters0ConditionType?: string, searchCriteriaSortOrders0Field?: string, searchCriteriaSortOrders0Direction?: string, searchCriteriaPageSize?: number, searchCriteriaCurrentPage?: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<CustomerDataGroupSearchResultsInterface>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.customerGroupRepositoryV1GetListGet(searchCriteriaFilterGroups0Filters0Field, searchCriteriaFilterGroups0Filters0Value, searchCriteriaFilterGroups0Filters0ConditionType, searchCriteriaSortOrders0Field, searchCriteriaSortOrders0Direction, searchCriteriaPageSize, searchCriteriaCurrentPage, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * CustomerGroupsSearchApi - factory interface
 * @export
 */
export const CustomerGroupsSearchApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = CustomerGroupsSearchApiFp(configuration)
    return {
        /**
         * Retrieve customer groups. The list of groups can be filtered to exclude the NOT_LOGGED_IN group using the first parameter and/or it can be filtered by tax class. This call returns an array of objects, but detailed information about each object’s attributes might not be included. See http://devdocs.magento.com/codelinks/attributes.html#GroupRepositoryInterface to determine which call to use to get detailed information about all attributes for an object.
         * @summary customerGroups/search
         * @param {string} [searchCriteriaFilterGroups0Filters0Field] Field
         * @param {string} [searchCriteriaFilterGroups0Filters0Value] Value
         * @param {string} [searchCriteriaFilterGroups0Filters0ConditionType] Condition type
         * @param {string} [searchCriteriaSortOrders0Field] Sorting field.
         * @param {string} [searchCriteriaSortOrders0Direction] Sorting direction.
         * @param {number} [searchCriteriaPageSize] Page size.
         * @param {number} [searchCriteriaCurrentPage] Current page.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        customerGroupRepositoryV1GetListGet(searchCriteriaFilterGroups0Filters0Field?: string, searchCriteriaFilterGroups0Filters0Value?: string, searchCriteriaFilterGroups0Filters0ConditionType?: string, searchCriteriaSortOrders0Field?: string, searchCriteriaSortOrders0Direction?: string, searchCriteriaPageSize?: number, searchCriteriaCurrentPage?: number, options?: any): AxiosPromise<CustomerDataGroupSearchResultsInterface> {
            return localVarFp.customerGroupRepositoryV1GetListGet(searchCriteriaFilterGroups0Filters0Field, searchCriteriaFilterGroups0Filters0Value, searchCriteriaFilterGroups0Filters0ConditionType, searchCriteriaSortOrders0Field, searchCriteriaSortOrders0Direction, searchCriteriaPageSize, searchCriteriaCurrentPage, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * CustomerGroupsSearchApi - object-oriented interface
 * @export
 * @class CustomerGroupsSearchApi
 * @extends {BaseAPI}
 */
export class CustomerGroupsSearchApi extends BaseAPI {
    /**
     * Retrieve customer groups. The list of groups can be filtered to exclude the NOT_LOGGED_IN group using the first parameter and/or it can be filtered by tax class. This call returns an array of objects, but detailed information about each object’s attributes might not be included. See http://devdocs.magento.com/codelinks/attributes.html#GroupRepositoryInterface to determine which call to use to get detailed information about all attributes for an object.
     * @summary customerGroups/search
     * @param {string} [searchCriteriaFilterGroups0Filters0Field] Field
     * @param {string} [searchCriteriaFilterGroups0Filters0Value] Value
     * @param {string} [searchCriteriaFilterGroups0Filters0ConditionType] Condition type
     * @param {string} [searchCriteriaSortOrders0Field] Sorting field.
     * @param {string} [searchCriteriaSortOrders0Direction] Sorting direction.
     * @param {number} [searchCriteriaPageSize] Page size.
     * @param {number} [searchCriteriaCurrentPage] Current page.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CustomerGroupsSearchApi
     */
    public customerGroupRepositoryV1GetListGet(searchCriteriaFilterGroups0Filters0Field?: string, searchCriteriaFilterGroups0Filters0Value?: string, searchCriteriaFilterGroups0Filters0ConditionType?: string, searchCriteriaSortOrders0Field?: string, searchCriteriaSortOrders0Direction?: string, searchCriteriaPageSize?: number, searchCriteriaCurrentPage?: number, options?: AxiosRequestConfig) {
        return CustomerGroupsSearchApiFp(this.configuration).customerGroupRepositoryV1GetListGet(searchCriteriaFilterGroups0Filters0Field, searchCriteriaFilterGroups0Filters0Value, searchCriteriaFilterGroups0Filters0ConditionType, searchCriteriaSortOrders0Field, searchCriteriaSortOrders0Direction, searchCriteriaPageSize, searchCriteriaCurrentPage, options).then((request) => request(this.axios, this.basePath));
    }
}


/**
 * CustomersApi - axios parameter creator
 * @export
 */
export const CustomersApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Create customer account. Perform necessary business operations like sending email.
         * @summary customers
         * @param {CustomerAccountManagementV1CreateAccountPostRequest} [customerAccountManagementV1CreateAccountPostBody] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        customerAccountManagementV1CreateAccountPost: async (customerAccountManagementV1CreateAccountPostBody?: CustomerAccountManagementV1CreateAccountPostRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/V1/customers`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(customerAccountManagementV1CreateAccountPostBody, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * CustomersApi - functional programming interface
 * @export
 */
export const CustomersApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = CustomersApiAxiosParamCreator(configuration)
    return {
        /**
         * Create customer account. Perform necessary business operations like sending email.
         * @summary customers
         * @param {CustomerAccountManagementV1CreateAccountPostRequest} [customerAccountManagementV1CreateAccountPostBody] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async customerAccountManagementV1CreateAccountPost(customerAccountManagementV1CreateAccountPostBody?: CustomerAccountManagementV1CreateAccountPostRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<CustomerDataCustomerInterface>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.customerAccountManagementV1CreateAccountPost(customerAccountManagementV1CreateAccountPostBody, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * CustomersApi - factory interface
 * @export
 */
export const CustomersApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = CustomersApiFp(configuration)
    return {
        /**
         * Create customer account. Perform necessary business operations like sending email.
         * @summary customers
         * @param {CustomerAccountManagementV1CreateAccountPostRequest} [customerAccountManagementV1CreateAccountPostBody] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        customerAccountManagementV1CreateAccountPost(customerAccountManagementV1CreateAccountPostBody?: CustomerAccountManagementV1CreateAccountPostRequest, options?: any): AxiosPromise<CustomerDataCustomerInterface> {
            return localVarFp.customerAccountManagementV1CreateAccountPost(customerAccountManagementV1CreateAccountPostBody, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * CustomersApi - object-oriented interface
 * @export
 * @class CustomersApi
 * @extends {BaseAPI}
 */
export class CustomersApi extends BaseAPI {
    /**
     * Create customer account. Perform necessary business operations like sending email.
     * @summary customers
     * @param {CustomerAccountManagementV1CreateAccountPostRequest} [customerAccountManagementV1CreateAccountPostBody] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CustomersApi
     */
    public customerAccountManagementV1CreateAccountPost(customerAccountManagementV1CreateAccountPostBody?: CustomerAccountManagementV1CreateAccountPostRequest, options?: AxiosRequestConfig) {
        return CustomersApiFp(this.configuration).customerAccountManagementV1CreateAccountPost(customerAccountManagementV1CreateAccountPostBody, options).then((request) => request(this.axios, this.basePath));
    }
}


/**
 * CustomersAddressesAddressIdApi - axios parameter creator
 * @export
 */
export const CustomersAddressesAddressIdApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Retrieve customer address.
         * @summary customers/addresses/{addressId}
         * @param {number} addressId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        customerAddressRepositoryV1GetByIdGet: async (addressId: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'addressId' is not null or undefined
            assertParamExists('customerAddressRepositoryV1GetByIdGet', 'addressId', addressId)
            const localVarPath = `/V1/customers/addresses/{addressId}`
                .replace(`{${"addressId"}}`, encodeURIComponent(String(addressId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * CustomersAddressesAddressIdApi - functional programming interface
 * @export
 */
export const CustomersAddressesAddressIdApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = CustomersAddressesAddressIdApiAxiosParamCreator(configuration)
    return {
        /**
         * Retrieve customer address.
         * @summary customers/addresses/{addressId}
         * @param {number} addressId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async customerAddressRepositoryV1GetByIdGet(addressId: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<CustomerDataAddressInterface>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.customerAddressRepositoryV1GetByIdGet(addressId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * CustomersAddressesAddressIdApi - factory interface
 * @export
 */
export const CustomersAddressesAddressIdApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = CustomersAddressesAddressIdApiFp(configuration)
    return {
        /**
         * Retrieve customer address.
         * @summary customers/addresses/{addressId}
         * @param {number} addressId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        customerAddressRepositoryV1GetByIdGet(addressId: number, options?: any): AxiosPromise<CustomerDataAddressInterface> {
            return localVarFp.customerAddressRepositoryV1GetByIdGet(addressId, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * CustomersAddressesAddressIdApi - object-oriented interface
 * @export
 * @class CustomersAddressesAddressIdApi
 * @extends {BaseAPI}
 */
export class CustomersAddressesAddressIdApi extends BaseAPI {
    /**
     * Retrieve customer address.
     * @summary customers/addresses/{addressId}
     * @param {number} addressId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CustomersAddressesAddressIdApi
     */
    public customerAddressRepositoryV1GetByIdGet(addressId: number, options?: AxiosRequestConfig) {
        return CustomersAddressesAddressIdApiFp(this.configuration).customerAddressRepositoryV1GetByIdGet(addressId, options).then((request) => request(this.axios, this.basePath));
    }
}


/**
 * CustomersConfirmApi - axios parameter creator
 * @export
 */
export const CustomersConfirmApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Resend confirmation email.
         * @summary customers/confirm
         * @param {CustomerAccountManagementV1ResendConfirmationPostRequest} [customerAccountManagementV1ResendConfirmationPostBody] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        customerAccountManagementV1ResendConfirmationPost: async (customerAccountManagementV1ResendConfirmationPostBody?: CustomerAccountManagementV1ResendConfirmationPostRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/V1/customers/confirm`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(customerAccountManagementV1ResendConfirmationPostBody, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * CustomersConfirmApi - functional programming interface
 * @export
 */
export const CustomersConfirmApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = CustomersConfirmApiAxiosParamCreator(configuration)
    return {
        /**
         * Resend confirmation email.
         * @summary customers/confirm
         * @param {CustomerAccountManagementV1ResendConfirmationPostRequest} [customerAccountManagementV1ResendConfirmationPostBody] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async customerAccountManagementV1ResendConfirmationPost(customerAccountManagementV1ResendConfirmationPostBody?: CustomerAccountManagementV1ResendConfirmationPostRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<boolean>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.customerAccountManagementV1ResendConfirmationPost(customerAccountManagementV1ResendConfirmationPostBody, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * CustomersConfirmApi - factory interface
 * @export
 */
export const CustomersConfirmApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = CustomersConfirmApiFp(configuration)
    return {
        /**
         * Resend confirmation email.
         * @summary customers/confirm
         * @param {CustomerAccountManagementV1ResendConfirmationPostRequest} [customerAccountManagementV1ResendConfirmationPostBody] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        customerAccountManagementV1ResendConfirmationPost(customerAccountManagementV1ResendConfirmationPostBody?: CustomerAccountManagementV1ResendConfirmationPostRequest, options?: any): AxiosPromise<boolean> {
            return localVarFp.customerAccountManagementV1ResendConfirmationPost(customerAccountManagementV1ResendConfirmationPostBody, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * CustomersConfirmApi - object-oriented interface
 * @export
 * @class CustomersConfirmApi
 * @extends {BaseAPI}
 */
export class CustomersConfirmApi extends BaseAPI {
    /**
     * Resend confirmation email.
     * @summary customers/confirm
     * @param {CustomerAccountManagementV1ResendConfirmationPostRequest} [customerAccountManagementV1ResendConfirmationPostBody] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CustomersConfirmApi
     */
    public customerAccountManagementV1ResendConfirmationPost(customerAccountManagementV1ResendConfirmationPostBody?: CustomerAccountManagementV1ResendConfirmationPostRequest, options?: AxiosRequestConfig) {
        return CustomersConfirmApiFp(this.configuration).customerAccountManagementV1ResendConfirmationPost(customerAccountManagementV1ResendConfirmationPostBody, options).then((request) => request(this.axios, this.basePath));
    }
}


/**
 * CustomersCustomerIdApi - axios parameter creator
 * @export
 */
export const CustomersCustomerIdApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Delete customer by Customer ID.
         * @summary customers/{customerId}
         * @param {number} customerId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        customerCustomerRepositoryV1DeleteByIdDelete: async (customerId: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'customerId' is not null or undefined
            assertParamExists('customerCustomerRepositoryV1DeleteByIdDelete', 'customerId', customerId)
            const localVarPath = `/V1/customers/{customerId}`
                .replace(`{${"customerId"}}`, encodeURIComponent(String(customerId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Get customer by Customer ID.
         * @summary customers/{customerId}
         * @param {number} customerId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        customerCustomerRepositoryV1GetByIdGet: async (customerId: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'customerId' is not null or undefined
            assertParamExists('customerCustomerRepositoryV1GetByIdGet', 'customerId', customerId)
            const localVarPath = `/V1/customers/{customerId}`
                .replace(`{${"customerId"}}`, encodeURIComponent(String(customerId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Create or update a customer.
         * @summary customers/{customerId}
         * @param {string} customerId 
         * @param {CustomerCustomerRepositoryV1SavePutRequest} [customerCustomerRepositoryV1SavePutBody] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        customerCustomerRepositoryV1SavePut: async (customerId: string, customerCustomerRepositoryV1SavePutBody?: CustomerCustomerRepositoryV1SavePutRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'customerId' is not null or undefined
            assertParamExists('customerCustomerRepositoryV1SavePut', 'customerId', customerId)
            const localVarPath = `/V1/customers/{customerId}`
                .replace(`{${"customerId"}}`, encodeURIComponent(String(customerId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(customerCustomerRepositoryV1SavePutBody, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * CustomersCustomerIdApi - functional programming interface
 * @export
 */
export const CustomersCustomerIdApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = CustomersCustomerIdApiAxiosParamCreator(configuration)
    return {
        /**
         * Delete customer by Customer ID.
         * @summary customers/{customerId}
         * @param {number} customerId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async customerCustomerRepositoryV1DeleteByIdDelete(customerId: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<boolean>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.customerCustomerRepositoryV1DeleteByIdDelete(customerId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Get customer by Customer ID.
         * @summary customers/{customerId}
         * @param {number} customerId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async customerCustomerRepositoryV1GetByIdGet(customerId: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<CustomerDataCustomerInterface>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.customerCustomerRepositoryV1GetByIdGet(customerId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Create or update a customer.
         * @summary customers/{customerId}
         * @param {string} customerId 
         * @param {CustomerCustomerRepositoryV1SavePutRequest} [customerCustomerRepositoryV1SavePutBody] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async customerCustomerRepositoryV1SavePut(customerId: string, customerCustomerRepositoryV1SavePutBody?: CustomerCustomerRepositoryV1SavePutRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<CustomerDataCustomerInterface>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.customerCustomerRepositoryV1SavePut(customerId, customerCustomerRepositoryV1SavePutBody, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * CustomersCustomerIdApi - factory interface
 * @export
 */
export const CustomersCustomerIdApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = CustomersCustomerIdApiFp(configuration)
    return {
        /**
         * Delete customer by Customer ID.
         * @summary customers/{customerId}
         * @param {number} customerId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        customerCustomerRepositoryV1DeleteByIdDelete(customerId: number, options?: any): AxiosPromise<boolean> {
            return localVarFp.customerCustomerRepositoryV1DeleteByIdDelete(customerId, options).then((request) => request(axios, basePath));
        },
        /**
         * Get customer by Customer ID.
         * @summary customers/{customerId}
         * @param {number} customerId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        customerCustomerRepositoryV1GetByIdGet(customerId: number, options?: any): AxiosPromise<CustomerDataCustomerInterface> {
            return localVarFp.customerCustomerRepositoryV1GetByIdGet(customerId, options).then((request) => request(axios, basePath));
        },
        /**
         * Create or update a customer.
         * @summary customers/{customerId}
         * @param {string} customerId 
         * @param {CustomerCustomerRepositoryV1SavePutRequest} [customerCustomerRepositoryV1SavePutBody] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        customerCustomerRepositoryV1SavePut(customerId: string, customerCustomerRepositoryV1SavePutBody?: CustomerCustomerRepositoryV1SavePutRequest, options?: any): AxiosPromise<CustomerDataCustomerInterface> {
            return localVarFp.customerCustomerRepositoryV1SavePut(customerId, customerCustomerRepositoryV1SavePutBody, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * CustomersCustomerIdApi - object-oriented interface
 * @export
 * @class CustomersCustomerIdApi
 * @extends {BaseAPI}
 */
export class CustomersCustomerIdApi extends BaseAPI {
    /**
     * Delete customer by Customer ID.
     * @summary customers/{customerId}
     * @param {number} customerId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CustomersCustomerIdApi
     */
    public customerCustomerRepositoryV1DeleteByIdDelete(customerId: number, options?: AxiosRequestConfig) {
        return CustomersCustomerIdApiFp(this.configuration).customerCustomerRepositoryV1DeleteByIdDelete(customerId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Get customer by Customer ID.
     * @summary customers/{customerId}
     * @param {number} customerId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CustomersCustomerIdApi
     */
    public customerCustomerRepositoryV1GetByIdGet(customerId: number, options?: AxiosRequestConfig) {
        return CustomersCustomerIdApiFp(this.configuration).customerCustomerRepositoryV1GetByIdGet(customerId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Create or update a customer.
     * @summary customers/{customerId}
     * @param {string} customerId 
     * @param {CustomerCustomerRepositoryV1SavePutRequest} [customerCustomerRepositoryV1SavePutBody] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CustomersCustomerIdApi
     */
    public customerCustomerRepositoryV1SavePut(customerId: string, customerCustomerRepositoryV1SavePutBody?: CustomerCustomerRepositoryV1SavePutRequest, options?: AxiosRequestConfig) {
        return CustomersCustomerIdApiFp(this.configuration).customerCustomerRepositoryV1SavePut(customerId, customerCustomerRepositoryV1SavePutBody, options).then((request) => request(this.axios, this.basePath));
    }
}


/**
 * CustomersCustomerIdBillingAddressApi - axios parameter creator
 * @export
 */
export const CustomersCustomerIdBillingAddressApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Retrieve default billing address for the given customerId.
         * @summary customers/{customerId}/billingAddress
         * @param {number} customerId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        customerAccountManagementV1GetDefaultBillingAddressGet: async (customerId: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'customerId' is not null or undefined
            assertParamExists('customerAccountManagementV1GetDefaultBillingAddressGet', 'customerId', customerId)
            const localVarPath = `/V1/customers/{customerId}/billingAddress`
                .replace(`{${"customerId"}}`, encodeURIComponent(String(customerId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * CustomersCustomerIdBillingAddressApi - functional programming interface
 * @export
 */
export const CustomersCustomerIdBillingAddressApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = CustomersCustomerIdBillingAddressApiAxiosParamCreator(configuration)
    return {
        /**
         * Retrieve default billing address for the given customerId.
         * @summary customers/{customerId}/billingAddress
         * @param {number} customerId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async customerAccountManagementV1GetDefaultBillingAddressGet(customerId: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<CustomerDataAddressInterface>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.customerAccountManagementV1GetDefaultBillingAddressGet(customerId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * CustomersCustomerIdBillingAddressApi - factory interface
 * @export
 */
export const CustomersCustomerIdBillingAddressApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = CustomersCustomerIdBillingAddressApiFp(configuration)
    return {
        /**
         * Retrieve default billing address for the given customerId.
         * @summary customers/{customerId}/billingAddress
         * @param {number} customerId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        customerAccountManagementV1GetDefaultBillingAddressGet(customerId: number, options?: any): AxiosPromise<CustomerDataAddressInterface> {
            return localVarFp.customerAccountManagementV1GetDefaultBillingAddressGet(customerId, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * CustomersCustomerIdBillingAddressApi - object-oriented interface
 * @export
 * @class CustomersCustomerIdBillingAddressApi
 * @extends {BaseAPI}
 */
export class CustomersCustomerIdBillingAddressApi extends BaseAPI {
    /**
     * Retrieve default billing address for the given customerId.
     * @summary customers/{customerId}/billingAddress
     * @param {number} customerId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CustomersCustomerIdBillingAddressApi
     */
    public customerAccountManagementV1GetDefaultBillingAddressGet(customerId: number, options?: AxiosRequestConfig) {
        return CustomersCustomerIdBillingAddressApiFp(this.configuration).customerAccountManagementV1GetDefaultBillingAddressGet(customerId, options).then((request) => request(this.axios, this.basePath));
    }
}


/**
 * CustomersCustomerIdCartsApi - axios parameter creator
 * @export
 */
export const CustomersCustomerIdCartsApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Creates an empty cart and quote for a specified customer if customer does not have a cart yet.
         * @summary customers/{customerId}/carts
         * @param {number} customerId The customer ID.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        quoteCartManagementV1CreateEmptyCartForCustomerPost: async (customerId: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'customerId' is not null or undefined
            assertParamExists('quoteCartManagementV1CreateEmptyCartForCustomerPost', 'customerId', customerId)
            const localVarPath = `/V1/customers/{customerId}/carts`
                .replace(`{${"customerId"}}`, encodeURIComponent(String(customerId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * CustomersCustomerIdCartsApi - functional programming interface
 * @export
 */
export const CustomersCustomerIdCartsApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = CustomersCustomerIdCartsApiAxiosParamCreator(configuration)
    return {
        /**
         * Creates an empty cart and quote for a specified customer if customer does not have a cart yet.
         * @summary customers/{customerId}/carts
         * @param {number} customerId The customer ID.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async quoteCartManagementV1CreateEmptyCartForCustomerPost(customerId: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<number>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.quoteCartManagementV1CreateEmptyCartForCustomerPost(customerId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * CustomersCustomerIdCartsApi - factory interface
 * @export
 */
export const CustomersCustomerIdCartsApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = CustomersCustomerIdCartsApiFp(configuration)
    return {
        /**
         * Creates an empty cart and quote for a specified customer if customer does not have a cart yet.
         * @summary customers/{customerId}/carts
         * @param {number} customerId The customer ID.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        quoteCartManagementV1CreateEmptyCartForCustomerPost(customerId: number, options?: any): AxiosPromise<number> {
            return localVarFp.quoteCartManagementV1CreateEmptyCartForCustomerPost(customerId, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * CustomersCustomerIdCartsApi - object-oriented interface
 * @export
 * @class CustomersCustomerIdCartsApi
 * @extends {BaseAPI}
 */
export class CustomersCustomerIdCartsApi extends BaseAPI {
    /**
     * Creates an empty cart and quote for a specified customer if customer does not have a cart yet.
     * @summary customers/{customerId}/carts
     * @param {number} customerId The customer ID.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CustomersCustomerIdCartsApi
     */
    public quoteCartManagementV1CreateEmptyCartForCustomerPost(customerId: number, options?: AxiosRequestConfig) {
        return CustomersCustomerIdCartsApiFp(this.configuration).quoteCartManagementV1CreateEmptyCartForCustomerPost(customerId, options).then((request) => request(this.axios, this.basePath));
    }
}


/**
 * CustomersCustomerIdConfirmApi - axios parameter creator
 * @export
 */
export const CustomersCustomerIdConfirmApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Gets the account confirmation status.
         * @summary customers/{customerId}/confirm
         * @param {number} customerId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        customerAccountManagementV1GetConfirmationStatusGet: async (customerId: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'customerId' is not null or undefined
            assertParamExists('customerAccountManagementV1GetConfirmationStatusGet', 'customerId', customerId)
            const localVarPath = `/V1/customers/{customerId}/confirm`
                .replace(`{${"customerId"}}`, encodeURIComponent(String(customerId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * CustomersCustomerIdConfirmApi - functional programming interface
 * @export
 */
export const CustomersCustomerIdConfirmApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = CustomersCustomerIdConfirmApiAxiosParamCreator(configuration)
    return {
        /**
         * Gets the account confirmation status.
         * @summary customers/{customerId}/confirm
         * @param {number} customerId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async customerAccountManagementV1GetConfirmationStatusGet(customerId: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<string>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.customerAccountManagementV1GetConfirmationStatusGet(customerId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * CustomersCustomerIdConfirmApi - factory interface
 * @export
 */
export const CustomersCustomerIdConfirmApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = CustomersCustomerIdConfirmApiFp(configuration)
    return {
        /**
         * Gets the account confirmation status.
         * @summary customers/{customerId}/confirm
         * @param {number} customerId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        customerAccountManagementV1GetConfirmationStatusGet(customerId: number, options?: any): AxiosPromise<string> {
            return localVarFp.customerAccountManagementV1GetConfirmationStatusGet(customerId, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * CustomersCustomerIdConfirmApi - object-oriented interface
 * @export
 * @class CustomersCustomerIdConfirmApi
 * @extends {BaseAPI}
 */
export class CustomersCustomerIdConfirmApi extends BaseAPI {
    /**
     * Gets the account confirmation status.
     * @summary customers/{customerId}/confirm
     * @param {number} customerId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CustomersCustomerIdConfirmApi
     */
    public customerAccountManagementV1GetConfirmationStatusGet(customerId: number, options?: AxiosRequestConfig) {
        return CustomersCustomerIdConfirmApiFp(this.configuration).customerAccountManagementV1GetConfirmationStatusGet(customerId, options).then((request) => request(this.axios, this.basePath));
    }
}


/**
 * CustomersCustomerIdPasswordResetLinkTokenResetPasswordLinkTokenApi - axios parameter creator
 * @export
 */
export const CustomersCustomerIdPasswordResetLinkTokenResetPasswordLinkTokenApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Check if password reset token is valid.
         * @summary customers/{customerId}/password/resetLinkToken/{resetPasswordLinkToken}
         * @param {number} customerId If 0 is given then a customer will be matched by the RP token.
         * @param {string} resetPasswordLinkToken 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        customerAccountManagementV1ValidateResetPasswordLinkTokenGet: async (customerId: number, resetPasswordLinkToken: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'customerId' is not null or undefined
            assertParamExists('customerAccountManagementV1ValidateResetPasswordLinkTokenGet', 'customerId', customerId)
            // verify required parameter 'resetPasswordLinkToken' is not null or undefined
            assertParamExists('customerAccountManagementV1ValidateResetPasswordLinkTokenGet', 'resetPasswordLinkToken', resetPasswordLinkToken)
            const localVarPath = `/V1/customers/{customerId}/password/resetLinkToken/{resetPasswordLinkToken}`
                .replace(`{${"customerId"}}`, encodeURIComponent(String(customerId)))
                .replace(`{${"resetPasswordLinkToken"}}`, encodeURIComponent(String(resetPasswordLinkToken)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * CustomersCustomerIdPasswordResetLinkTokenResetPasswordLinkTokenApi - functional programming interface
 * @export
 */
export const CustomersCustomerIdPasswordResetLinkTokenResetPasswordLinkTokenApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = CustomersCustomerIdPasswordResetLinkTokenResetPasswordLinkTokenApiAxiosParamCreator(configuration)
    return {
        /**
         * Check if password reset token is valid.
         * @summary customers/{customerId}/password/resetLinkToken/{resetPasswordLinkToken}
         * @param {number} customerId If 0 is given then a customer will be matched by the RP token.
         * @param {string} resetPasswordLinkToken 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async customerAccountManagementV1ValidateResetPasswordLinkTokenGet(customerId: number, resetPasswordLinkToken: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<boolean>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.customerAccountManagementV1ValidateResetPasswordLinkTokenGet(customerId, resetPasswordLinkToken, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * CustomersCustomerIdPasswordResetLinkTokenResetPasswordLinkTokenApi - factory interface
 * @export
 */
export const CustomersCustomerIdPasswordResetLinkTokenResetPasswordLinkTokenApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = CustomersCustomerIdPasswordResetLinkTokenResetPasswordLinkTokenApiFp(configuration)
    return {
        /**
         * Check if password reset token is valid.
         * @summary customers/{customerId}/password/resetLinkToken/{resetPasswordLinkToken}
         * @param {number} customerId If 0 is given then a customer will be matched by the RP token.
         * @param {string} resetPasswordLinkToken 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        customerAccountManagementV1ValidateResetPasswordLinkTokenGet(customerId: number, resetPasswordLinkToken: string, options?: any): AxiosPromise<boolean> {
            return localVarFp.customerAccountManagementV1ValidateResetPasswordLinkTokenGet(customerId, resetPasswordLinkToken, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * CustomersCustomerIdPasswordResetLinkTokenResetPasswordLinkTokenApi - object-oriented interface
 * @export
 * @class CustomersCustomerIdPasswordResetLinkTokenResetPasswordLinkTokenApi
 * @extends {BaseAPI}
 */
export class CustomersCustomerIdPasswordResetLinkTokenResetPasswordLinkTokenApi extends BaseAPI {
    /**
     * Check if password reset token is valid.
     * @summary customers/{customerId}/password/resetLinkToken/{resetPasswordLinkToken}
     * @param {number} customerId If 0 is given then a customer will be matched by the RP token.
     * @param {string} resetPasswordLinkToken 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CustomersCustomerIdPasswordResetLinkTokenResetPasswordLinkTokenApi
     */
    public customerAccountManagementV1ValidateResetPasswordLinkTokenGet(customerId: number, resetPasswordLinkToken: string, options?: AxiosRequestConfig) {
        return CustomersCustomerIdPasswordResetLinkTokenResetPasswordLinkTokenApiFp(this.configuration).customerAccountManagementV1ValidateResetPasswordLinkTokenGet(customerId, resetPasswordLinkToken, options).then((request) => request(this.axios, this.basePath));
    }
}


/**
 * CustomersCustomerIdPermissionsReadonlyApi - axios parameter creator
 * @export
 */
export const CustomersCustomerIdPermissionsReadonlyApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Check if customer can be deleted.
         * @summary customers/{customerId}/permissions/readonly
         * @param {number} customerId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        customerAccountManagementV1IsReadonlyGet: async (customerId: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'customerId' is not null or undefined
            assertParamExists('customerAccountManagementV1IsReadonlyGet', 'customerId', customerId)
            const localVarPath = `/V1/customers/{customerId}/permissions/readonly`
                .replace(`{${"customerId"}}`, encodeURIComponent(String(customerId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * CustomersCustomerIdPermissionsReadonlyApi - functional programming interface
 * @export
 */
export const CustomersCustomerIdPermissionsReadonlyApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = CustomersCustomerIdPermissionsReadonlyApiAxiosParamCreator(configuration)
    return {
        /**
         * Check if customer can be deleted.
         * @summary customers/{customerId}/permissions/readonly
         * @param {number} customerId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async customerAccountManagementV1IsReadonlyGet(customerId: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<boolean>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.customerAccountManagementV1IsReadonlyGet(customerId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * CustomersCustomerIdPermissionsReadonlyApi - factory interface
 * @export
 */
export const CustomersCustomerIdPermissionsReadonlyApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = CustomersCustomerIdPermissionsReadonlyApiFp(configuration)
    return {
        /**
         * Check if customer can be deleted.
         * @summary customers/{customerId}/permissions/readonly
         * @param {number} customerId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        customerAccountManagementV1IsReadonlyGet(customerId: number, options?: any): AxiosPromise<boolean> {
            return localVarFp.customerAccountManagementV1IsReadonlyGet(customerId, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * CustomersCustomerIdPermissionsReadonlyApi - object-oriented interface
 * @export
 * @class CustomersCustomerIdPermissionsReadonlyApi
 * @extends {BaseAPI}
 */
export class CustomersCustomerIdPermissionsReadonlyApi extends BaseAPI {
    /**
     * Check if customer can be deleted.
     * @summary customers/{customerId}/permissions/readonly
     * @param {number} customerId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CustomersCustomerIdPermissionsReadonlyApi
     */
    public customerAccountManagementV1IsReadonlyGet(customerId: number, options?: AxiosRequestConfig) {
        return CustomersCustomerIdPermissionsReadonlyApiFp(this.configuration).customerAccountManagementV1IsReadonlyGet(customerId, options).then((request) => request(this.axios, this.basePath));
    }
}


/**
 * CustomersCustomerIdShippingAddressApi - axios parameter creator
 * @export
 */
export const CustomersCustomerIdShippingAddressApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Retrieve default shipping address for the given customerId.
         * @summary customers/{customerId}/shippingAddress
         * @param {number} customerId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        customerAccountManagementV1GetDefaultShippingAddressGet: async (customerId: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'customerId' is not null or undefined
            assertParamExists('customerAccountManagementV1GetDefaultShippingAddressGet', 'customerId', customerId)
            const localVarPath = `/V1/customers/{customerId}/shippingAddress`
                .replace(`{${"customerId"}}`, encodeURIComponent(String(customerId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * CustomersCustomerIdShippingAddressApi - functional programming interface
 * @export
 */
export const CustomersCustomerIdShippingAddressApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = CustomersCustomerIdShippingAddressApiAxiosParamCreator(configuration)
    return {
        /**
         * Retrieve default shipping address for the given customerId.
         * @summary customers/{customerId}/shippingAddress
         * @param {number} customerId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async customerAccountManagementV1GetDefaultShippingAddressGet(customerId: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<CustomerDataAddressInterface>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.customerAccountManagementV1GetDefaultShippingAddressGet(customerId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * CustomersCustomerIdShippingAddressApi - factory interface
 * @export
 */
export const CustomersCustomerIdShippingAddressApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = CustomersCustomerIdShippingAddressApiFp(configuration)
    return {
        /**
         * Retrieve default shipping address for the given customerId.
         * @summary customers/{customerId}/shippingAddress
         * @param {number} customerId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        customerAccountManagementV1GetDefaultShippingAddressGet(customerId: number, options?: any): AxiosPromise<CustomerDataAddressInterface> {
            return localVarFp.customerAccountManagementV1GetDefaultShippingAddressGet(customerId, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * CustomersCustomerIdShippingAddressApi - object-oriented interface
 * @export
 * @class CustomersCustomerIdShippingAddressApi
 * @extends {BaseAPI}
 */
export class CustomersCustomerIdShippingAddressApi extends BaseAPI {
    /**
     * Retrieve default shipping address for the given customerId.
     * @summary customers/{customerId}/shippingAddress
     * @param {number} customerId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CustomersCustomerIdShippingAddressApi
     */
    public customerAccountManagementV1GetDefaultShippingAddressGet(customerId: number, options?: AxiosRequestConfig) {
        return CustomersCustomerIdShippingAddressApiFp(this.configuration).customerAccountManagementV1GetDefaultShippingAddressGet(customerId, options).then((request) => request(this.axios, this.basePath));
    }
}


/**
 * CustomersEmailActivateApi - axios parameter creator
 * @export
 */
export const CustomersEmailActivateApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Activate a customer account using a key that was sent in a confirmation email.
         * @summary customers/{email}/activate
         * @param {string} email 
         * @param {CustomerAccountManagementV1ActivateByIdPutRequest} [customerAccountManagementV1ActivatePutBody] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        customerAccountManagementV1ActivatePut: async (email: string, customerAccountManagementV1ActivatePutBody?: CustomerAccountManagementV1ActivateByIdPutRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'email' is not null or undefined
            assertParamExists('customerAccountManagementV1ActivatePut', 'email', email)
            const localVarPath = `/V1/customers/{email}/activate`
                .replace(`{${"email"}}`, encodeURIComponent(String(email)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(customerAccountManagementV1ActivatePutBody, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * CustomersEmailActivateApi - functional programming interface
 * @export
 */
export const CustomersEmailActivateApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = CustomersEmailActivateApiAxiosParamCreator(configuration)
    return {
        /**
         * Activate a customer account using a key that was sent in a confirmation email.
         * @summary customers/{email}/activate
         * @param {string} email 
         * @param {CustomerAccountManagementV1ActivateByIdPutRequest} [customerAccountManagementV1ActivatePutBody] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async customerAccountManagementV1ActivatePut(email: string, customerAccountManagementV1ActivatePutBody?: CustomerAccountManagementV1ActivateByIdPutRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<CustomerDataCustomerInterface>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.customerAccountManagementV1ActivatePut(email, customerAccountManagementV1ActivatePutBody, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * CustomersEmailActivateApi - factory interface
 * @export
 */
export const CustomersEmailActivateApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = CustomersEmailActivateApiFp(configuration)
    return {
        /**
         * Activate a customer account using a key that was sent in a confirmation email.
         * @summary customers/{email}/activate
         * @param {string} email 
         * @param {CustomerAccountManagementV1ActivateByIdPutRequest} [customerAccountManagementV1ActivatePutBody] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        customerAccountManagementV1ActivatePut(email: string, customerAccountManagementV1ActivatePutBody?: CustomerAccountManagementV1ActivateByIdPutRequest, options?: any): AxiosPromise<CustomerDataCustomerInterface> {
            return localVarFp.customerAccountManagementV1ActivatePut(email, customerAccountManagementV1ActivatePutBody, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * CustomersEmailActivateApi - object-oriented interface
 * @export
 * @class CustomersEmailActivateApi
 * @extends {BaseAPI}
 */
export class CustomersEmailActivateApi extends BaseAPI {
    /**
     * Activate a customer account using a key that was sent in a confirmation email.
     * @summary customers/{email}/activate
     * @param {string} email 
     * @param {CustomerAccountManagementV1ActivateByIdPutRequest} [customerAccountManagementV1ActivatePutBody] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CustomersEmailActivateApi
     */
    public customerAccountManagementV1ActivatePut(email: string, customerAccountManagementV1ActivatePutBody?: CustomerAccountManagementV1ActivateByIdPutRequest, options?: AxiosRequestConfig) {
        return CustomersEmailActivateApiFp(this.configuration).customerAccountManagementV1ActivatePut(email, customerAccountManagementV1ActivatePutBody, options).then((request) => request(this.axios, this.basePath));
    }
}


/**
 * CustomersIsEmailAvailableApi - axios parameter creator
 * @export
 */
export const CustomersIsEmailAvailableApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Check if given email is associated with a customer account in given website.
         * @summary customers/isEmailAvailable
         * @param {CustomerAccountManagementV1IsEmailAvailablePostRequest} [customerAccountManagementV1IsEmailAvailablePostBody] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        customerAccountManagementV1IsEmailAvailablePost: async (customerAccountManagementV1IsEmailAvailablePostBody?: CustomerAccountManagementV1IsEmailAvailablePostRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/V1/customers/isEmailAvailable`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(customerAccountManagementV1IsEmailAvailablePostBody, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * CustomersIsEmailAvailableApi - functional programming interface
 * @export
 */
export const CustomersIsEmailAvailableApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = CustomersIsEmailAvailableApiAxiosParamCreator(configuration)
    return {
        /**
         * Check if given email is associated with a customer account in given website.
         * @summary customers/isEmailAvailable
         * @param {CustomerAccountManagementV1IsEmailAvailablePostRequest} [customerAccountManagementV1IsEmailAvailablePostBody] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async customerAccountManagementV1IsEmailAvailablePost(customerAccountManagementV1IsEmailAvailablePostBody?: CustomerAccountManagementV1IsEmailAvailablePostRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<boolean>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.customerAccountManagementV1IsEmailAvailablePost(customerAccountManagementV1IsEmailAvailablePostBody, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * CustomersIsEmailAvailableApi - factory interface
 * @export
 */
export const CustomersIsEmailAvailableApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = CustomersIsEmailAvailableApiFp(configuration)
    return {
        /**
         * Check if given email is associated with a customer account in given website.
         * @summary customers/isEmailAvailable
         * @param {CustomerAccountManagementV1IsEmailAvailablePostRequest} [customerAccountManagementV1IsEmailAvailablePostBody] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        customerAccountManagementV1IsEmailAvailablePost(customerAccountManagementV1IsEmailAvailablePostBody?: CustomerAccountManagementV1IsEmailAvailablePostRequest, options?: any): AxiosPromise<boolean> {
            return localVarFp.customerAccountManagementV1IsEmailAvailablePost(customerAccountManagementV1IsEmailAvailablePostBody, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * CustomersIsEmailAvailableApi - object-oriented interface
 * @export
 * @class CustomersIsEmailAvailableApi
 * @extends {BaseAPI}
 */
export class CustomersIsEmailAvailableApi extends BaseAPI {
    /**
     * Check if given email is associated with a customer account in given website.
     * @summary customers/isEmailAvailable
     * @param {CustomerAccountManagementV1IsEmailAvailablePostRequest} [customerAccountManagementV1IsEmailAvailablePostBody] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CustomersIsEmailAvailableApi
     */
    public customerAccountManagementV1IsEmailAvailablePost(customerAccountManagementV1IsEmailAvailablePostBody?: CustomerAccountManagementV1IsEmailAvailablePostRequest, options?: AxiosRequestConfig) {
        return CustomersIsEmailAvailableApiFp(this.configuration).customerAccountManagementV1IsEmailAvailablePost(customerAccountManagementV1IsEmailAvailablePostBody, options).then((request) => request(this.axios, this.basePath));
    }
}


/**
 * CustomersMeApi - axios parameter creator
 * @export
 */
export const CustomersMeApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Get customer by Customer ID.
         * @summary customers/me
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        customerCustomerRepositoryV1GetByIdGet: async (options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/V1/customers/me`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Create or update a customer.
         * @summary customers/me
         * @param {CustomerCustomerRepositoryV1SavePutRequest} [customerCustomerRepositoryV1SavePutBody] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        customerCustomerRepositoryV1SavePut: async (customerCustomerRepositoryV1SavePutBody?: CustomerCustomerRepositoryV1SavePutRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/V1/customers/me`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(customerCustomerRepositoryV1SavePutBody, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * CustomersMeApi - functional programming interface
 * @export
 */
export const CustomersMeApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = CustomersMeApiAxiosParamCreator(configuration)
    return {
        /**
         * Get customer by Customer ID.
         * @summary customers/me
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async customerCustomerRepositoryV1GetByIdGet(options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<CustomerDataCustomerInterface>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.customerCustomerRepositoryV1GetByIdGet(options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Create or update a customer.
         * @summary customers/me
         * @param {CustomerCustomerRepositoryV1SavePutRequest} [customerCustomerRepositoryV1SavePutBody] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async customerCustomerRepositoryV1SavePut(customerCustomerRepositoryV1SavePutBody?: CustomerCustomerRepositoryV1SavePutRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<CustomerDataCustomerInterface>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.customerCustomerRepositoryV1SavePut(customerCustomerRepositoryV1SavePutBody, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * CustomersMeApi - factory interface
 * @export
 */
export const CustomersMeApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = CustomersMeApiFp(configuration)
    return {
        /**
         * Get customer by Customer ID.
         * @summary customers/me
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        customerCustomerRepositoryV1GetByIdGet(options?: any): AxiosPromise<CustomerDataCustomerInterface> {
            return localVarFp.customerCustomerRepositoryV1GetByIdGet(options).then((request) => request(axios, basePath));
        },
        /**
         * Create or update a customer.
         * @summary customers/me
         * @param {CustomerCustomerRepositoryV1SavePutRequest} [customerCustomerRepositoryV1SavePutBody] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        customerCustomerRepositoryV1SavePut(customerCustomerRepositoryV1SavePutBody?: CustomerCustomerRepositoryV1SavePutRequest, options?: any): AxiosPromise<CustomerDataCustomerInterface> {
            return localVarFp.customerCustomerRepositoryV1SavePut(customerCustomerRepositoryV1SavePutBody, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * CustomersMeApi - object-oriented interface
 * @export
 * @class CustomersMeApi
 * @extends {BaseAPI}
 */
export class CustomersMeApi extends BaseAPI {
    /**
     * Get customer by Customer ID.
     * @summary customers/me
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CustomersMeApi
     */
    public customerCustomerRepositoryV1GetByIdGet(options?: AxiosRequestConfig) {
        return CustomersMeApiFp(this.configuration).customerCustomerRepositoryV1GetByIdGet(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Create or update a customer.
     * @summary customers/me
     * @param {CustomerCustomerRepositoryV1SavePutRequest} [customerCustomerRepositoryV1SavePutBody] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CustomersMeApi
     */
    public customerCustomerRepositoryV1SavePut(customerCustomerRepositoryV1SavePutBody?: CustomerCustomerRepositoryV1SavePutRequest, options?: AxiosRequestConfig) {
        return CustomersMeApiFp(this.configuration).customerCustomerRepositoryV1SavePut(customerCustomerRepositoryV1SavePutBody, options).then((request) => request(this.axios, this.basePath));
    }
}


/**
 * CustomersMeActivateApi - axios parameter creator
 * @export
 */
export const CustomersMeActivateApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Activate a customer account using a key that was sent in a confirmation email.
         * @summary customers/me/activate
         * @param {CustomerAccountManagementV1ActivateByIdPutRequest} [customerAccountManagementV1ActivateByIdPutBody] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        customerAccountManagementV1ActivateByIdPut: async (customerAccountManagementV1ActivateByIdPutBody?: CustomerAccountManagementV1ActivateByIdPutRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/V1/customers/me/activate`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(customerAccountManagementV1ActivateByIdPutBody, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * CustomersMeActivateApi - functional programming interface
 * @export
 */
export const CustomersMeActivateApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = CustomersMeActivateApiAxiosParamCreator(configuration)
    return {
        /**
         * Activate a customer account using a key that was sent in a confirmation email.
         * @summary customers/me/activate
         * @param {CustomerAccountManagementV1ActivateByIdPutRequest} [customerAccountManagementV1ActivateByIdPutBody] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async customerAccountManagementV1ActivateByIdPut(customerAccountManagementV1ActivateByIdPutBody?: CustomerAccountManagementV1ActivateByIdPutRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<CustomerDataCustomerInterface>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.customerAccountManagementV1ActivateByIdPut(customerAccountManagementV1ActivateByIdPutBody, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * CustomersMeActivateApi - factory interface
 * @export
 */
export const CustomersMeActivateApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = CustomersMeActivateApiFp(configuration)
    return {
        /**
         * Activate a customer account using a key that was sent in a confirmation email.
         * @summary customers/me/activate
         * @param {CustomerAccountManagementV1ActivateByIdPutRequest} [customerAccountManagementV1ActivateByIdPutBody] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        customerAccountManagementV1ActivateByIdPut(customerAccountManagementV1ActivateByIdPutBody?: CustomerAccountManagementV1ActivateByIdPutRequest, options?: any): AxiosPromise<CustomerDataCustomerInterface> {
            return localVarFp.customerAccountManagementV1ActivateByIdPut(customerAccountManagementV1ActivateByIdPutBody, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * CustomersMeActivateApi - object-oriented interface
 * @export
 * @class CustomersMeActivateApi
 * @extends {BaseAPI}
 */
export class CustomersMeActivateApi extends BaseAPI {
    /**
     * Activate a customer account using a key that was sent in a confirmation email.
     * @summary customers/me/activate
     * @param {CustomerAccountManagementV1ActivateByIdPutRequest} [customerAccountManagementV1ActivateByIdPutBody] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CustomersMeActivateApi
     */
    public customerAccountManagementV1ActivateByIdPut(customerAccountManagementV1ActivateByIdPutBody?: CustomerAccountManagementV1ActivateByIdPutRequest, options?: AxiosRequestConfig) {
        return CustomersMeActivateApiFp(this.configuration).customerAccountManagementV1ActivateByIdPut(customerAccountManagementV1ActivateByIdPutBody, options).then((request) => request(this.axios, this.basePath));
    }
}


/**
 * CustomersMeBillingAddressApi - axios parameter creator
 * @export
 */
export const CustomersMeBillingAddressApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Retrieve default billing address for the given customerId.
         * @summary customers/me/billingAddress
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        customerAccountManagementV1GetDefaultBillingAddressGet: async (options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/V1/customers/me/billingAddress`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * CustomersMeBillingAddressApi - functional programming interface
 * @export
 */
export const CustomersMeBillingAddressApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = CustomersMeBillingAddressApiAxiosParamCreator(configuration)
    return {
        /**
         * Retrieve default billing address for the given customerId.
         * @summary customers/me/billingAddress
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async customerAccountManagementV1GetDefaultBillingAddressGet(options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<CustomerDataAddressInterface>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.customerAccountManagementV1GetDefaultBillingAddressGet(options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * CustomersMeBillingAddressApi - factory interface
 * @export
 */
export const CustomersMeBillingAddressApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = CustomersMeBillingAddressApiFp(configuration)
    return {
        /**
         * Retrieve default billing address for the given customerId.
         * @summary customers/me/billingAddress
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        customerAccountManagementV1GetDefaultBillingAddressGet(options?: any): AxiosPromise<CustomerDataAddressInterface> {
            return localVarFp.customerAccountManagementV1GetDefaultBillingAddressGet(options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * CustomersMeBillingAddressApi - object-oriented interface
 * @export
 * @class CustomersMeBillingAddressApi
 * @extends {BaseAPI}
 */
export class CustomersMeBillingAddressApi extends BaseAPI {
    /**
     * Retrieve default billing address for the given customerId.
     * @summary customers/me/billingAddress
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CustomersMeBillingAddressApi
     */
    public customerAccountManagementV1GetDefaultBillingAddressGet(options?: AxiosRequestConfig) {
        return CustomersMeBillingAddressApiFp(this.configuration).customerAccountManagementV1GetDefaultBillingAddressGet(options).then((request) => request(this.axios, this.basePath));
    }
}


/**
 * CustomersMePasswordApi - axios parameter creator
 * @export
 */
export const CustomersMePasswordApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Change customer password.
         * @summary customers/me/password
         * @param {CustomerAccountManagementV1ChangePasswordByIdPutRequest} [customerAccountManagementV1ChangePasswordByIdPutBody] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        customerAccountManagementV1ChangePasswordByIdPut: async (customerAccountManagementV1ChangePasswordByIdPutBody?: CustomerAccountManagementV1ChangePasswordByIdPutRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/V1/customers/me/password`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(customerAccountManagementV1ChangePasswordByIdPutBody, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * CustomersMePasswordApi - functional programming interface
 * @export
 */
export const CustomersMePasswordApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = CustomersMePasswordApiAxiosParamCreator(configuration)
    return {
        /**
         * Change customer password.
         * @summary customers/me/password
         * @param {CustomerAccountManagementV1ChangePasswordByIdPutRequest} [customerAccountManagementV1ChangePasswordByIdPutBody] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async customerAccountManagementV1ChangePasswordByIdPut(customerAccountManagementV1ChangePasswordByIdPutBody?: CustomerAccountManagementV1ChangePasswordByIdPutRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<boolean>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.customerAccountManagementV1ChangePasswordByIdPut(customerAccountManagementV1ChangePasswordByIdPutBody, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * CustomersMePasswordApi - factory interface
 * @export
 */
export const CustomersMePasswordApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = CustomersMePasswordApiFp(configuration)
    return {
        /**
         * Change customer password.
         * @summary customers/me/password
         * @param {CustomerAccountManagementV1ChangePasswordByIdPutRequest} [customerAccountManagementV1ChangePasswordByIdPutBody] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        customerAccountManagementV1ChangePasswordByIdPut(customerAccountManagementV1ChangePasswordByIdPutBody?: CustomerAccountManagementV1ChangePasswordByIdPutRequest, options?: any): AxiosPromise<boolean> {
            return localVarFp.customerAccountManagementV1ChangePasswordByIdPut(customerAccountManagementV1ChangePasswordByIdPutBody, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * CustomersMePasswordApi - object-oriented interface
 * @export
 * @class CustomersMePasswordApi
 * @extends {BaseAPI}
 */
export class CustomersMePasswordApi extends BaseAPI {
    /**
     * Change customer password.
     * @summary customers/me/password
     * @param {CustomerAccountManagementV1ChangePasswordByIdPutRequest} [customerAccountManagementV1ChangePasswordByIdPutBody] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CustomersMePasswordApi
     */
    public customerAccountManagementV1ChangePasswordByIdPut(customerAccountManagementV1ChangePasswordByIdPutBody?: CustomerAccountManagementV1ChangePasswordByIdPutRequest, options?: AxiosRequestConfig) {
        return CustomersMePasswordApiFp(this.configuration).customerAccountManagementV1ChangePasswordByIdPut(customerAccountManagementV1ChangePasswordByIdPutBody, options).then((request) => request(this.axios, this.basePath));
    }
}


/**
 * CustomersMeShippingAddressApi - axios parameter creator
 * @export
 */
export const CustomersMeShippingAddressApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Retrieve default shipping address for the given customerId.
         * @summary customers/me/shippingAddress
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        customerAccountManagementV1GetDefaultShippingAddressGet: async (options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/V1/customers/me/shippingAddress`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * CustomersMeShippingAddressApi - functional programming interface
 * @export
 */
export const CustomersMeShippingAddressApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = CustomersMeShippingAddressApiAxiosParamCreator(configuration)
    return {
        /**
         * Retrieve default shipping address for the given customerId.
         * @summary customers/me/shippingAddress
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async customerAccountManagementV1GetDefaultShippingAddressGet(options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<CustomerDataAddressInterface>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.customerAccountManagementV1GetDefaultShippingAddressGet(options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * CustomersMeShippingAddressApi - factory interface
 * @export
 */
export const CustomersMeShippingAddressApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = CustomersMeShippingAddressApiFp(configuration)
    return {
        /**
         * Retrieve default shipping address for the given customerId.
         * @summary customers/me/shippingAddress
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        customerAccountManagementV1GetDefaultShippingAddressGet(options?: any): AxiosPromise<CustomerDataAddressInterface> {
            return localVarFp.customerAccountManagementV1GetDefaultShippingAddressGet(options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * CustomersMeShippingAddressApi - object-oriented interface
 * @export
 * @class CustomersMeShippingAddressApi
 * @extends {BaseAPI}
 */
export class CustomersMeShippingAddressApi extends BaseAPI {
    /**
     * Retrieve default shipping address for the given customerId.
     * @summary customers/me/shippingAddress
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CustomersMeShippingAddressApi
     */
    public customerAccountManagementV1GetDefaultShippingAddressGet(options?: AxiosRequestConfig) {
        return CustomersMeShippingAddressApiFp(this.configuration).customerAccountManagementV1GetDefaultShippingAddressGet(options).then((request) => request(this.axios, this.basePath));
    }
}


/**
 * CustomersPasswordApi - axios parameter creator
 * @export
 */
export const CustomersPasswordApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Send an email to the customer with a password reset link.
         * @summary customers/password
         * @param {CustomerAccountManagementV1InitiatePasswordResetPutRequest} [customerAccountManagementV1InitiatePasswordResetPutBody] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        customerAccountManagementV1InitiatePasswordResetPut: async (customerAccountManagementV1InitiatePasswordResetPutBody?: CustomerAccountManagementV1InitiatePasswordResetPutRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/V1/customers/password`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(customerAccountManagementV1InitiatePasswordResetPutBody, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * CustomersPasswordApi - functional programming interface
 * @export
 */
export const CustomersPasswordApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = CustomersPasswordApiAxiosParamCreator(configuration)
    return {
        /**
         * Send an email to the customer with a password reset link.
         * @summary customers/password
         * @param {CustomerAccountManagementV1InitiatePasswordResetPutRequest} [customerAccountManagementV1InitiatePasswordResetPutBody] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async customerAccountManagementV1InitiatePasswordResetPut(customerAccountManagementV1InitiatePasswordResetPutBody?: CustomerAccountManagementV1InitiatePasswordResetPutRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<boolean>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.customerAccountManagementV1InitiatePasswordResetPut(customerAccountManagementV1InitiatePasswordResetPutBody, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * CustomersPasswordApi - factory interface
 * @export
 */
export const CustomersPasswordApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = CustomersPasswordApiFp(configuration)
    return {
        /**
         * Send an email to the customer with a password reset link.
         * @summary customers/password
         * @param {CustomerAccountManagementV1InitiatePasswordResetPutRequest} [customerAccountManagementV1InitiatePasswordResetPutBody] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        customerAccountManagementV1InitiatePasswordResetPut(customerAccountManagementV1InitiatePasswordResetPutBody?: CustomerAccountManagementV1InitiatePasswordResetPutRequest, options?: any): AxiosPromise<boolean> {
            return localVarFp.customerAccountManagementV1InitiatePasswordResetPut(customerAccountManagementV1InitiatePasswordResetPutBody, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * CustomersPasswordApi - object-oriented interface
 * @export
 * @class CustomersPasswordApi
 * @extends {BaseAPI}
 */
export class CustomersPasswordApi extends BaseAPI {
    /**
     * Send an email to the customer with a password reset link.
     * @summary customers/password
     * @param {CustomerAccountManagementV1InitiatePasswordResetPutRequest} [customerAccountManagementV1InitiatePasswordResetPutBody] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CustomersPasswordApi
     */
    public customerAccountManagementV1InitiatePasswordResetPut(customerAccountManagementV1InitiatePasswordResetPutBody?: CustomerAccountManagementV1InitiatePasswordResetPutRequest, options?: AxiosRequestConfig) {
        return CustomersPasswordApiFp(this.configuration).customerAccountManagementV1InitiatePasswordResetPut(customerAccountManagementV1InitiatePasswordResetPutBody, options).then((request) => request(this.axios, this.basePath));
    }
}


/**
 * CustomersResetPasswordApi - axios parameter creator
 * @export
 */
export const CustomersResetPasswordApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Reset customer password.
         * @summary customers/resetPassword
         * @param {CustomerAccountManagementV1ResetPasswordPostRequest} [customerAccountManagementV1ResetPasswordPostBody] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        customerAccountManagementV1ResetPasswordPost: async (customerAccountManagementV1ResetPasswordPostBody?: CustomerAccountManagementV1ResetPasswordPostRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/V1/customers/resetPassword`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(customerAccountManagementV1ResetPasswordPostBody, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * CustomersResetPasswordApi - functional programming interface
 * @export
 */
export const CustomersResetPasswordApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = CustomersResetPasswordApiAxiosParamCreator(configuration)
    return {
        /**
         * Reset customer password.
         * @summary customers/resetPassword
         * @param {CustomerAccountManagementV1ResetPasswordPostRequest} [customerAccountManagementV1ResetPasswordPostBody] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async customerAccountManagementV1ResetPasswordPost(customerAccountManagementV1ResetPasswordPostBody?: CustomerAccountManagementV1ResetPasswordPostRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<boolean>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.customerAccountManagementV1ResetPasswordPost(customerAccountManagementV1ResetPasswordPostBody, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * CustomersResetPasswordApi - factory interface
 * @export
 */
export const CustomersResetPasswordApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = CustomersResetPasswordApiFp(configuration)
    return {
        /**
         * Reset customer password.
         * @summary customers/resetPassword
         * @param {CustomerAccountManagementV1ResetPasswordPostRequest} [customerAccountManagementV1ResetPasswordPostBody] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        customerAccountManagementV1ResetPasswordPost(customerAccountManagementV1ResetPasswordPostBody?: CustomerAccountManagementV1ResetPasswordPostRequest, options?: any): AxiosPromise<boolean> {
            return localVarFp.customerAccountManagementV1ResetPasswordPost(customerAccountManagementV1ResetPasswordPostBody, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * CustomersResetPasswordApi - object-oriented interface
 * @export
 * @class CustomersResetPasswordApi
 * @extends {BaseAPI}
 */
export class CustomersResetPasswordApi extends BaseAPI {
    /**
     * Reset customer password.
     * @summary customers/resetPassword
     * @param {CustomerAccountManagementV1ResetPasswordPostRequest} [customerAccountManagementV1ResetPasswordPostBody] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CustomersResetPasswordApi
     */
    public customerAccountManagementV1ResetPasswordPost(customerAccountManagementV1ResetPasswordPostBody?: CustomerAccountManagementV1ResetPasswordPostRequest, options?: AxiosRequestConfig) {
        return CustomersResetPasswordApiFp(this.configuration).customerAccountManagementV1ResetPasswordPost(customerAccountManagementV1ResetPasswordPostBody, options).then((request) => request(this.axios, this.basePath));
    }
}


/**
 * CustomersSearchApi - axios parameter creator
 * @export
 */
export const CustomersSearchApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Retrieve customers which match a specified criteria. This call returns an array of objects, but detailed information about each object’s attributes might not be included. See http://devdocs.magento.com/codelinks/attributes.html#CustomerRepositoryInterface to determine which call to use to get detailed information about all attributes for an object.
         * @summary customers/search
         * @param {string} [searchCriteriaFilterGroups0Filters0Field] Field
         * @param {string} [searchCriteriaFilterGroups0Filters0Value] Value
         * @param {string} [searchCriteriaFilterGroups0Filters0ConditionType] Condition type
         * @param {string} [searchCriteriaSortOrders0Field] Sorting field.
         * @param {string} [searchCriteriaSortOrders0Direction] Sorting direction.
         * @param {number} [searchCriteriaPageSize] Page size.
         * @param {number} [searchCriteriaCurrentPage] Current page.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        customerCustomerRepositoryV1GetListGet: async (searchCriteriaFilterGroups0Filters0Field?: string, searchCriteriaFilterGroups0Filters0Value?: string, searchCriteriaFilterGroups0Filters0ConditionType?: string, searchCriteriaSortOrders0Field?: string, searchCriteriaSortOrders0Direction?: string, searchCriteriaPageSize?: number, searchCriteriaCurrentPage?: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/V1/customers/search`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (searchCriteriaFilterGroups0Filters0Field !== undefined) {
                localVarQueryParameter['searchCriteria[filterGroups][0][filters][0][field]'] = searchCriteriaFilterGroups0Filters0Field;
            }

            if (searchCriteriaFilterGroups0Filters0Value !== undefined) {
                localVarQueryParameter['searchCriteria[filterGroups][0][filters][0][value]'] = searchCriteriaFilterGroups0Filters0Value;
            }

            if (searchCriteriaFilterGroups0Filters0ConditionType !== undefined) {
                localVarQueryParameter['searchCriteria[filterGroups][0][filters][0][conditionType]'] = searchCriteriaFilterGroups0Filters0ConditionType;
            }

            if (searchCriteriaSortOrders0Field !== undefined) {
                localVarQueryParameter['searchCriteria[sortOrders][0][field]'] = searchCriteriaSortOrders0Field;
            }

            if (searchCriteriaSortOrders0Direction !== undefined) {
                localVarQueryParameter['searchCriteria[sortOrders][0][direction]'] = searchCriteriaSortOrders0Direction;
            }

            if (searchCriteriaPageSize !== undefined) {
                localVarQueryParameter['searchCriteria[pageSize]'] = searchCriteriaPageSize;
            }

            if (searchCriteriaCurrentPage !== undefined) {
                localVarQueryParameter['searchCriteria[currentPage]'] = searchCriteriaCurrentPage;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * CustomersSearchApi - functional programming interface
 * @export
 */
export const CustomersSearchApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = CustomersSearchApiAxiosParamCreator(configuration)
    return {
        /**
         * Retrieve customers which match a specified criteria. This call returns an array of objects, but detailed information about each object’s attributes might not be included. See http://devdocs.magento.com/codelinks/attributes.html#CustomerRepositoryInterface to determine which call to use to get detailed information about all attributes for an object.
         * @summary customers/search
         * @param {string} [searchCriteriaFilterGroups0Filters0Field] Field
         * @param {string} [searchCriteriaFilterGroups0Filters0Value] Value
         * @param {string} [searchCriteriaFilterGroups0Filters0ConditionType] Condition type
         * @param {string} [searchCriteriaSortOrders0Field] Sorting field.
         * @param {string} [searchCriteriaSortOrders0Direction] Sorting direction.
         * @param {number} [searchCriteriaPageSize] Page size.
         * @param {number} [searchCriteriaCurrentPage] Current page.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async customerCustomerRepositoryV1GetListGet(searchCriteriaFilterGroups0Filters0Field?: string, searchCriteriaFilterGroups0Filters0Value?: string, searchCriteriaFilterGroups0Filters0ConditionType?: string, searchCriteriaSortOrders0Field?: string, searchCriteriaSortOrders0Direction?: string, searchCriteriaPageSize?: number, searchCriteriaCurrentPage?: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<CustomerDataCustomerSearchResultsInterface>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.customerCustomerRepositoryV1GetListGet(searchCriteriaFilterGroups0Filters0Field, searchCriteriaFilterGroups0Filters0Value, searchCriteriaFilterGroups0Filters0ConditionType, searchCriteriaSortOrders0Field, searchCriteriaSortOrders0Direction, searchCriteriaPageSize, searchCriteriaCurrentPage, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * CustomersSearchApi - factory interface
 * @export
 */
export const CustomersSearchApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = CustomersSearchApiFp(configuration)
    return {
        /**
         * Retrieve customers which match a specified criteria. This call returns an array of objects, but detailed information about each object’s attributes might not be included. See http://devdocs.magento.com/codelinks/attributes.html#CustomerRepositoryInterface to determine which call to use to get detailed information about all attributes for an object.
         * @summary customers/search
         * @param {string} [searchCriteriaFilterGroups0Filters0Field] Field
         * @param {string} [searchCriteriaFilterGroups0Filters0Value] Value
         * @param {string} [searchCriteriaFilterGroups0Filters0ConditionType] Condition type
         * @param {string} [searchCriteriaSortOrders0Field] Sorting field.
         * @param {string} [searchCriteriaSortOrders0Direction] Sorting direction.
         * @param {number} [searchCriteriaPageSize] Page size.
         * @param {number} [searchCriteriaCurrentPage] Current page.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        customerCustomerRepositoryV1GetListGet(searchCriteriaFilterGroups0Filters0Field?: string, searchCriteriaFilterGroups0Filters0Value?: string, searchCriteriaFilterGroups0Filters0ConditionType?: string, searchCriteriaSortOrders0Field?: string, searchCriteriaSortOrders0Direction?: string, searchCriteriaPageSize?: number, searchCriteriaCurrentPage?: number, options?: any): AxiosPromise<CustomerDataCustomerSearchResultsInterface> {
            return localVarFp.customerCustomerRepositoryV1GetListGet(searchCriteriaFilterGroups0Filters0Field, searchCriteriaFilterGroups0Filters0Value, searchCriteriaFilterGroups0Filters0ConditionType, searchCriteriaSortOrders0Field, searchCriteriaSortOrders0Direction, searchCriteriaPageSize, searchCriteriaCurrentPage, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * CustomersSearchApi - object-oriented interface
 * @export
 * @class CustomersSearchApi
 * @extends {BaseAPI}
 */
export class CustomersSearchApi extends BaseAPI {
    /**
     * Retrieve customers which match a specified criteria. This call returns an array of objects, but detailed information about each object’s attributes might not be included. See http://devdocs.magento.com/codelinks/attributes.html#CustomerRepositoryInterface to determine which call to use to get detailed information about all attributes for an object.
     * @summary customers/search
     * @param {string} [searchCriteriaFilterGroups0Filters0Field] Field
     * @param {string} [searchCriteriaFilterGroups0Filters0Value] Value
     * @param {string} [searchCriteriaFilterGroups0Filters0ConditionType] Condition type
     * @param {string} [searchCriteriaSortOrders0Field] Sorting field.
     * @param {string} [searchCriteriaSortOrders0Direction] Sorting direction.
     * @param {number} [searchCriteriaPageSize] Page size.
     * @param {number} [searchCriteriaCurrentPage] Current page.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CustomersSearchApi
     */
    public customerCustomerRepositoryV1GetListGet(searchCriteriaFilterGroups0Filters0Field?: string, searchCriteriaFilterGroups0Filters0Value?: string, searchCriteriaFilterGroups0Filters0ConditionType?: string, searchCriteriaSortOrders0Field?: string, searchCriteriaSortOrders0Direction?: string, searchCriteriaPageSize?: number, searchCriteriaCurrentPage?: number, options?: AxiosRequestConfig) {
        return CustomersSearchApiFp(this.configuration).customerCustomerRepositoryV1GetListGet(searchCriteriaFilterGroups0Filters0Field, searchCriteriaFilterGroups0Filters0Value, searchCriteriaFilterGroups0Filters0ConditionType, searchCriteriaSortOrders0Field, searchCriteriaSortOrders0Direction, searchCriteriaPageSize, searchCriteriaCurrentPage, options).then((request) => request(this.axios, this.basePath));
    }
}


/**
 * CustomersValidateApi - axios parameter creator
 * @export
 */
export const CustomersValidateApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Validate customer data.
         * @summary customers/validate
         * @param {CustomerAccountManagementV1ValidatePutRequest} [customerAccountManagementV1ValidatePutBody] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        customerAccountManagementV1ValidatePut: async (customerAccountManagementV1ValidatePutBody?: CustomerAccountManagementV1ValidatePutRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/V1/customers/validate`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(customerAccountManagementV1ValidatePutBody, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * CustomersValidateApi - functional programming interface
 * @export
 */
export const CustomersValidateApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = CustomersValidateApiAxiosParamCreator(configuration)
    return {
        /**
         * Validate customer data.
         * @summary customers/validate
         * @param {CustomerAccountManagementV1ValidatePutRequest} [customerAccountManagementV1ValidatePutBody] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async customerAccountManagementV1ValidatePut(customerAccountManagementV1ValidatePutBody?: CustomerAccountManagementV1ValidatePutRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<CustomerDataValidationResultsInterface>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.customerAccountManagementV1ValidatePut(customerAccountManagementV1ValidatePutBody, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * CustomersValidateApi - factory interface
 * @export
 */
export const CustomersValidateApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = CustomersValidateApiFp(configuration)
    return {
        /**
         * Validate customer data.
         * @summary customers/validate
         * @param {CustomerAccountManagementV1ValidatePutRequest} [customerAccountManagementV1ValidatePutBody] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        customerAccountManagementV1ValidatePut(customerAccountManagementV1ValidatePutBody?: CustomerAccountManagementV1ValidatePutRequest, options?: any): AxiosPromise<CustomerDataValidationResultsInterface> {
            return localVarFp.customerAccountManagementV1ValidatePut(customerAccountManagementV1ValidatePutBody, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * CustomersValidateApi - object-oriented interface
 * @export
 * @class CustomersValidateApi
 * @extends {BaseAPI}
 */
export class CustomersValidateApi extends BaseAPI {
    /**
     * Validate customer data.
     * @summary customers/validate
     * @param {CustomerAccountManagementV1ValidatePutRequest} [customerAccountManagementV1ValidatePutBody] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CustomersValidateApi
     */
    public customerAccountManagementV1ValidatePut(customerAccountManagementV1ValidatePutBody?: CustomerAccountManagementV1ValidatePutRequest, options?: AxiosRequestConfig) {
        return CustomersValidateApiFp(this.configuration).customerAccountManagementV1ValidatePut(customerAccountManagementV1ValidatePutBody, options).then((request) => request(this.axios, this.basePath));
    }
}


/**
 * DirectoryCountriesApi - axios parameter creator
 * @export
 */
export const DirectoryCountriesApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Get all countries and regions information for the store.
         * @summary directory/countries
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        directoryCountryInformationAcquirerV1GetCountriesInfoGet: async (options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/V1/directory/countries`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * DirectoryCountriesApi - functional programming interface
 * @export
 */
export const DirectoryCountriesApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = DirectoryCountriesApiAxiosParamCreator(configuration)
    return {
        /**
         * Get all countries and regions information for the store.
         * @summary directory/countries
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async directoryCountryInformationAcquirerV1GetCountriesInfoGet(options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<DirectoryDataCountryInformationInterface>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.directoryCountryInformationAcquirerV1GetCountriesInfoGet(options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * DirectoryCountriesApi - factory interface
 * @export
 */
export const DirectoryCountriesApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = DirectoryCountriesApiFp(configuration)
    return {
        /**
         * Get all countries and regions information for the store.
         * @summary directory/countries
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        directoryCountryInformationAcquirerV1GetCountriesInfoGet(options?: any): AxiosPromise<Array<DirectoryDataCountryInformationInterface>> {
            return localVarFp.directoryCountryInformationAcquirerV1GetCountriesInfoGet(options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * DirectoryCountriesApi - object-oriented interface
 * @export
 * @class DirectoryCountriesApi
 * @extends {BaseAPI}
 */
export class DirectoryCountriesApi extends BaseAPI {
    /**
     * Get all countries and regions information for the store.
     * @summary directory/countries
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DirectoryCountriesApi
     */
    public directoryCountryInformationAcquirerV1GetCountriesInfoGet(options?: AxiosRequestConfig) {
        return DirectoryCountriesApiFp(this.configuration).directoryCountryInformationAcquirerV1GetCountriesInfoGet(options).then((request) => request(this.axios, this.basePath));
    }
}


/**
 * DirectoryCountriesCountryIdApi - axios parameter creator
 * @export
 */
export const DirectoryCountriesCountryIdApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Get country and region information for the store.
         * @summary directory/countries/{countryId}
         * @param {string} countryId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        directoryCountryInformationAcquirerV1GetCountryInfoGet: async (countryId: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'countryId' is not null or undefined
            assertParamExists('directoryCountryInformationAcquirerV1GetCountryInfoGet', 'countryId', countryId)
            const localVarPath = `/V1/directory/countries/{countryId}`
                .replace(`{${"countryId"}}`, encodeURIComponent(String(countryId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * DirectoryCountriesCountryIdApi - functional programming interface
 * @export
 */
export const DirectoryCountriesCountryIdApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = DirectoryCountriesCountryIdApiAxiosParamCreator(configuration)
    return {
        /**
         * Get country and region information for the store.
         * @summary directory/countries/{countryId}
         * @param {string} countryId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async directoryCountryInformationAcquirerV1GetCountryInfoGet(countryId: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<DirectoryDataCountryInformationInterface>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.directoryCountryInformationAcquirerV1GetCountryInfoGet(countryId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * DirectoryCountriesCountryIdApi - factory interface
 * @export
 */
export const DirectoryCountriesCountryIdApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = DirectoryCountriesCountryIdApiFp(configuration)
    return {
        /**
         * Get country and region information for the store.
         * @summary directory/countries/{countryId}
         * @param {string} countryId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        directoryCountryInformationAcquirerV1GetCountryInfoGet(countryId: string, options?: any): AxiosPromise<DirectoryDataCountryInformationInterface> {
            return localVarFp.directoryCountryInformationAcquirerV1GetCountryInfoGet(countryId, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * DirectoryCountriesCountryIdApi - object-oriented interface
 * @export
 * @class DirectoryCountriesCountryIdApi
 * @extends {BaseAPI}
 */
export class DirectoryCountriesCountryIdApi extends BaseAPI {
    /**
     * Get country and region information for the store.
     * @summary directory/countries/{countryId}
     * @param {string} countryId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DirectoryCountriesCountryIdApi
     */
    public directoryCountryInformationAcquirerV1GetCountryInfoGet(countryId: string, options?: AxiosRequestConfig) {
        return DirectoryCountriesCountryIdApiFp(this.configuration).directoryCountryInformationAcquirerV1GetCountryInfoGet(countryId, options).then((request) => request(this.axios, this.basePath));
    }
}


/**
 * DirectoryCurrencyApi - axios parameter creator
 * @export
 */
export const DirectoryCurrencyApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Get currency information for the store.
         * @summary directory/currency
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        directoryCurrencyInformationAcquirerV1GetCurrencyInfoGet: async (options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/V1/directory/currency`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * DirectoryCurrencyApi - functional programming interface
 * @export
 */
export const DirectoryCurrencyApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = DirectoryCurrencyApiAxiosParamCreator(configuration)
    return {
        /**
         * Get currency information for the store.
         * @summary directory/currency
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async directoryCurrencyInformationAcquirerV1GetCurrencyInfoGet(options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<DirectoryDataCurrencyInformationInterface>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.directoryCurrencyInformationAcquirerV1GetCurrencyInfoGet(options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * DirectoryCurrencyApi - factory interface
 * @export
 */
export const DirectoryCurrencyApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = DirectoryCurrencyApiFp(configuration)
    return {
        /**
         * Get currency information for the store.
         * @summary directory/currency
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        directoryCurrencyInformationAcquirerV1GetCurrencyInfoGet(options?: any): AxiosPromise<DirectoryDataCurrencyInformationInterface> {
            return localVarFp.directoryCurrencyInformationAcquirerV1GetCurrencyInfoGet(options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * DirectoryCurrencyApi - object-oriented interface
 * @export
 * @class DirectoryCurrencyApi
 * @extends {BaseAPI}
 */
export class DirectoryCurrencyApi extends BaseAPI {
    /**
     * Get currency information for the store.
     * @summary directory/currency
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DirectoryCurrencyApi
     */
    public directoryCurrencyInformationAcquirerV1GetCurrencyInfoGet(options?: AxiosRequestConfig) {
        return DirectoryCurrencyApiFp(this.configuration).directoryCurrencyInformationAcquirerV1GetCurrencyInfoGet(options).then((request) => request(this.axios, this.basePath));
    }
}


/**
 * EavAttributeSetsApi - axios parameter creator
 * @export
 */
export const EavAttributeSetsApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Create attribute set from data
         * @summary eav/attribute-sets
         * @param {EavAttributeSetManagementV1CreatePostRequest} [eavAttributeSetManagementV1CreatePostBody] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        eavAttributeSetManagementV1CreatePost: async (eavAttributeSetManagementV1CreatePostBody?: EavAttributeSetManagementV1CreatePostRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/V1/eav/attribute-sets`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(eavAttributeSetManagementV1CreatePostBody, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * EavAttributeSetsApi - functional programming interface
 * @export
 */
export const EavAttributeSetsApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = EavAttributeSetsApiAxiosParamCreator(configuration)
    return {
        /**
         * Create attribute set from data
         * @summary eav/attribute-sets
         * @param {EavAttributeSetManagementV1CreatePostRequest} [eavAttributeSetManagementV1CreatePostBody] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async eavAttributeSetManagementV1CreatePost(eavAttributeSetManagementV1CreatePostBody?: EavAttributeSetManagementV1CreatePostRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<EavDataAttributeSetInterface>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.eavAttributeSetManagementV1CreatePost(eavAttributeSetManagementV1CreatePostBody, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * EavAttributeSetsApi - factory interface
 * @export
 */
export const EavAttributeSetsApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = EavAttributeSetsApiFp(configuration)
    return {
        /**
         * Create attribute set from data
         * @summary eav/attribute-sets
         * @param {EavAttributeSetManagementV1CreatePostRequest} [eavAttributeSetManagementV1CreatePostBody] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        eavAttributeSetManagementV1CreatePost(eavAttributeSetManagementV1CreatePostBody?: EavAttributeSetManagementV1CreatePostRequest, options?: any): AxiosPromise<EavDataAttributeSetInterface> {
            return localVarFp.eavAttributeSetManagementV1CreatePost(eavAttributeSetManagementV1CreatePostBody, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * EavAttributeSetsApi - object-oriented interface
 * @export
 * @class EavAttributeSetsApi
 * @extends {BaseAPI}
 */
export class EavAttributeSetsApi extends BaseAPI {
    /**
     * Create attribute set from data
     * @summary eav/attribute-sets
     * @param {EavAttributeSetManagementV1CreatePostRequest} [eavAttributeSetManagementV1CreatePostBody] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EavAttributeSetsApi
     */
    public eavAttributeSetManagementV1CreatePost(eavAttributeSetManagementV1CreatePostBody?: EavAttributeSetManagementV1CreatePostRequest, options?: AxiosRequestConfig) {
        return EavAttributeSetsApiFp(this.configuration).eavAttributeSetManagementV1CreatePost(eavAttributeSetManagementV1CreatePostBody, options).then((request) => request(this.axios, this.basePath));
    }
}


/**
 * EavAttributeSetsAttributeSetIdApi - axios parameter creator
 * @export
 */
export const EavAttributeSetsAttributeSetIdApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Remove attribute set by given ID
         * @summary eav/attribute-sets/{attributeSetId}
         * @param {number} attributeSetId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        eavAttributeSetRepositoryV1DeleteByIdDelete: async (attributeSetId: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'attributeSetId' is not null or undefined
            assertParamExists('eavAttributeSetRepositoryV1DeleteByIdDelete', 'attributeSetId', attributeSetId)
            const localVarPath = `/V1/eav/attribute-sets/{attributeSetId}`
                .replace(`{${"attributeSetId"}}`, encodeURIComponent(String(attributeSetId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Retrieve attribute set information based on given ID
         * @summary eav/attribute-sets/{attributeSetId}
         * @param {number} attributeSetId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        eavAttributeSetRepositoryV1GetGet: async (attributeSetId: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'attributeSetId' is not null or undefined
            assertParamExists('eavAttributeSetRepositoryV1GetGet', 'attributeSetId', attributeSetId)
            const localVarPath = `/V1/eav/attribute-sets/{attributeSetId}`
                .replace(`{${"attributeSetId"}}`, encodeURIComponent(String(attributeSetId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Save attribute set data
         * @summary eav/attribute-sets/{attributeSetId}
         * @param {string} attributeSetId 
         * @param {EavAttributeSetRepositoryV1SavePutRequest} [eavAttributeSetRepositoryV1SavePutBody] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        eavAttributeSetRepositoryV1SavePut: async (attributeSetId: string, eavAttributeSetRepositoryV1SavePutBody?: EavAttributeSetRepositoryV1SavePutRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'attributeSetId' is not null or undefined
            assertParamExists('eavAttributeSetRepositoryV1SavePut', 'attributeSetId', attributeSetId)
            const localVarPath = `/V1/eav/attribute-sets/{attributeSetId}`
                .replace(`{${"attributeSetId"}}`, encodeURIComponent(String(attributeSetId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(eavAttributeSetRepositoryV1SavePutBody, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * EavAttributeSetsAttributeSetIdApi - functional programming interface
 * @export
 */
export const EavAttributeSetsAttributeSetIdApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = EavAttributeSetsAttributeSetIdApiAxiosParamCreator(configuration)
    return {
        /**
         * Remove attribute set by given ID
         * @summary eav/attribute-sets/{attributeSetId}
         * @param {number} attributeSetId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async eavAttributeSetRepositoryV1DeleteByIdDelete(attributeSetId: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<boolean>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.eavAttributeSetRepositoryV1DeleteByIdDelete(attributeSetId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Retrieve attribute set information based on given ID
         * @summary eav/attribute-sets/{attributeSetId}
         * @param {number} attributeSetId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async eavAttributeSetRepositoryV1GetGet(attributeSetId: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<EavDataAttributeSetInterface>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.eavAttributeSetRepositoryV1GetGet(attributeSetId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Save attribute set data
         * @summary eav/attribute-sets/{attributeSetId}
         * @param {string} attributeSetId 
         * @param {EavAttributeSetRepositoryV1SavePutRequest} [eavAttributeSetRepositoryV1SavePutBody] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async eavAttributeSetRepositoryV1SavePut(attributeSetId: string, eavAttributeSetRepositoryV1SavePutBody?: EavAttributeSetRepositoryV1SavePutRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<EavDataAttributeSetInterface>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.eavAttributeSetRepositoryV1SavePut(attributeSetId, eavAttributeSetRepositoryV1SavePutBody, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * EavAttributeSetsAttributeSetIdApi - factory interface
 * @export
 */
export const EavAttributeSetsAttributeSetIdApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = EavAttributeSetsAttributeSetIdApiFp(configuration)
    return {
        /**
         * Remove attribute set by given ID
         * @summary eav/attribute-sets/{attributeSetId}
         * @param {number} attributeSetId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        eavAttributeSetRepositoryV1DeleteByIdDelete(attributeSetId: number, options?: any): AxiosPromise<boolean> {
            return localVarFp.eavAttributeSetRepositoryV1DeleteByIdDelete(attributeSetId, options).then((request) => request(axios, basePath));
        },
        /**
         * Retrieve attribute set information based on given ID
         * @summary eav/attribute-sets/{attributeSetId}
         * @param {number} attributeSetId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        eavAttributeSetRepositoryV1GetGet(attributeSetId: number, options?: any): AxiosPromise<EavDataAttributeSetInterface> {
            return localVarFp.eavAttributeSetRepositoryV1GetGet(attributeSetId, options).then((request) => request(axios, basePath));
        },
        /**
         * Save attribute set data
         * @summary eav/attribute-sets/{attributeSetId}
         * @param {string} attributeSetId 
         * @param {EavAttributeSetRepositoryV1SavePutRequest} [eavAttributeSetRepositoryV1SavePutBody] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        eavAttributeSetRepositoryV1SavePut(attributeSetId: string, eavAttributeSetRepositoryV1SavePutBody?: EavAttributeSetRepositoryV1SavePutRequest, options?: any): AxiosPromise<EavDataAttributeSetInterface> {
            return localVarFp.eavAttributeSetRepositoryV1SavePut(attributeSetId, eavAttributeSetRepositoryV1SavePutBody, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * EavAttributeSetsAttributeSetIdApi - object-oriented interface
 * @export
 * @class EavAttributeSetsAttributeSetIdApi
 * @extends {BaseAPI}
 */
export class EavAttributeSetsAttributeSetIdApi extends BaseAPI {
    /**
     * Remove attribute set by given ID
     * @summary eav/attribute-sets/{attributeSetId}
     * @param {number} attributeSetId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EavAttributeSetsAttributeSetIdApi
     */
    public eavAttributeSetRepositoryV1DeleteByIdDelete(attributeSetId: number, options?: AxiosRequestConfig) {
        return EavAttributeSetsAttributeSetIdApiFp(this.configuration).eavAttributeSetRepositoryV1DeleteByIdDelete(attributeSetId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Retrieve attribute set information based on given ID
     * @summary eav/attribute-sets/{attributeSetId}
     * @param {number} attributeSetId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EavAttributeSetsAttributeSetIdApi
     */
    public eavAttributeSetRepositoryV1GetGet(attributeSetId: number, options?: AxiosRequestConfig) {
        return EavAttributeSetsAttributeSetIdApiFp(this.configuration).eavAttributeSetRepositoryV1GetGet(attributeSetId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Save attribute set data
     * @summary eav/attribute-sets/{attributeSetId}
     * @param {string} attributeSetId 
     * @param {EavAttributeSetRepositoryV1SavePutRequest} [eavAttributeSetRepositoryV1SavePutBody] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EavAttributeSetsAttributeSetIdApi
     */
    public eavAttributeSetRepositoryV1SavePut(attributeSetId: string, eavAttributeSetRepositoryV1SavePutBody?: EavAttributeSetRepositoryV1SavePutRequest, options?: AxiosRequestConfig) {
        return EavAttributeSetsAttributeSetIdApiFp(this.configuration).eavAttributeSetRepositoryV1SavePut(attributeSetId, eavAttributeSetRepositoryV1SavePutBody, options).then((request) => request(this.axios, this.basePath));
    }
}


/**
 * EavAttributeSetsListApi - axios parameter creator
 * @export
 */
export const EavAttributeSetsListApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Retrieve list of Attribute Sets This call returns an array of objects, but detailed information about each object’s attributes might not be included. See http://devdocs.magento.com/codelinks/attributes.html#AttributeSetRepositoryInterface to determine which call to use to get detailed information about all attributes for an object.
         * @summary eav/attribute-sets/list
         * @param {string} [searchCriteriaFilterGroups0Filters0Field] Field
         * @param {string} [searchCriteriaFilterGroups0Filters0Value] Value
         * @param {string} [searchCriteriaFilterGroups0Filters0ConditionType] Condition type
         * @param {string} [searchCriteriaSortOrders0Field] Sorting field.
         * @param {string} [searchCriteriaSortOrders0Direction] Sorting direction.
         * @param {number} [searchCriteriaPageSize] Page size.
         * @param {number} [searchCriteriaCurrentPage] Current page.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        eavAttributeSetRepositoryV1GetListGet: async (searchCriteriaFilterGroups0Filters0Field?: string, searchCriteriaFilterGroups0Filters0Value?: string, searchCriteriaFilterGroups0Filters0ConditionType?: string, searchCriteriaSortOrders0Field?: string, searchCriteriaSortOrders0Direction?: string, searchCriteriaPageSize?: number, searchCriteriaCurrentPage?: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/V1/eav/attribute-sets/list`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (searchCriteriaFilterGroups0Filters0Field !== undefined) {
                localVarQueryParameter['searchCriteria[filterGroups][0][filters][0][field]'] = searchCriteriaFilterGroups0Filters0Field;
            }

            if (searchCriteriaFilterGroups0Filters0Value !== undefined) {
                localVarQueryParameter['searchCriteria[filterGroups][0][filters][0][value]'] = searchCriteriaFilterGroups0Filters0Value;
            }

            if (searchCriteriaFilterGroups0Filters0ConditionType !== undefined) {
                localVarQueryParameter['searchCriteria[filterGroups][0][filters][0][conditionType]'] = searchCriteriaFilterGroups0Filters0ConditionType;
            }

            if (searchCriteriaSortOrders0Field !== undefined) {
                localVarQueryParameter['searchCriteria[sortOrders][0][field]'] = searchCriteriaSortOrders0Field;
            }

            if (searchCriteriaSortOrders0Direction !== undefined) {
                localVarQueryParameter['searchCriteria[sortOrders][0][direction]'] = searchCriteriaSortOrders0Direction;
            }

            if (searchCriteriaPageSize !== undefined) {
                localVarQueryParameter['searchCriteria[pageSize]'] = searchCriteriaPageSize;
            }

            if (searchCriteriaCurrentPage !== undefined) {
                localVarQueryParameter['searchCriteria[currentPage]'] = searchCriteriaCurrentPage;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * EavAttributeSetsListApi - functional programming interface
 * @export
 */
export const EavAttributeSetsListApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = EavAttributeSetsListApiAxiosParamCreator(configuration)
    return {
        /**
         * Retrieve list of Attribute Sets This call returns an array of objects, but detailed information about each object’s attributes might not be included. See http://devdocs.magento.com/codelinks/attributes.html#AttributeSetRepositoryInterface to determine which call to use to get detailed information about all attributes for an object.
         * @summary eav/attribute-sets/list
         * @param {string} [searchCriteriaFilterGroups0Filters0Field] Field
         * @param {string} [searchCriteriaFilterGroups0Filters0Value] Value
         * @param {string} [searchCriteriaFilterGroups0Filters0ConditionType] Condition type
         * @param {string} [searchCriteriaSortOrders0Field] Sorting field.
         * @param {string} [searchCriteriaSortOrders0Direction] Sorting direction.
         * @param {number} [searchCriteriaPageSize] Page size.
         * @param {number} [searchCriteriaCurrentPage] Current page.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async eavAttributeSetRepositoryV1GetListGet(searchCriteriaFilterGroups0Filters0Field?: string, searchCriteriaFilterGroups0Filters0Value?: string, searchCriteriaFilterGroups0Filters0ConditionType?: string, searchCriteriaSortOrders0Field?: string, searchCriteriaSortOrders0Direction?: string, searchCriteriaPageSize?: number, searchCriteriaCurrentPage?: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<EavDataAttributeSetSearchResultsInterface>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.eavAttributeSetRepositoryV1GetListGet(searchCriteriaFilterGroups0Filters0Field, searchCriteriaFilterGroups0Filters0Value, searchCriteriaFilterGroups0Filters0ConditionType, searchCriteriaSortOrders0Field, searchCriteriaSortOrders0Direction, searchCriteriaPageSize, searchCriteriaCurrentPage, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * EavAttributeSetsListApi - factory interface
 * @export
 */
export const EavAttributeSetsListApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = EavAttributeSetsListApiFp(configuration)
    return {
        /**
         * Retrieve list of Attribute Sets This call returns an array of objects, but detailed information about each object’s attributes might not be included. See http://devdocs.magento.com/codelinks/attributes.html#AttributeSetRepositoryInterface to determine which call to use to get detailed information about all attributes for an object.
         * @summary eav/attribute-sets/list
         * @param {string} [searchCriteriaFilterGroups0Filters0Field] Field
         * @param {string} [searchCriteriaFilterGroups0Filters0Value] Value
         * @param {string} [searchCriteriaFilterGroups0Filters0ConditionType] Condition type
         * @param {string} [searchCriteriaSortOrders0Field] Sorting field.
         * @param {string} [searchCriteriaSortOrders0Direction] Sorting direction.
         * @param {number} [searchCriteriaPageSize] Page size.
         * @param {number} [searchCriteriaCurrentPage] Current page.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        eavAttributeSetRepositoryV1GetListGet(searchCriteriaFilterGroups0Filters0Field?: string, searchCriteriaFilterGroups0Filters0Value?: string, searchCriteriaFilterGroups0Filters0ConditionType?: string, searchCriteriaSortOrders0Field?: string, searchCriteriaSortOrders0Direction?: string, searchCriteriaPageSize?: number, searchCriteriaCurrentPage?: number, options?: any): AxiosPromise<EavDataAttributeSetSearchResultsInterface> {
            return localVarFp.eavAttributeSetRepositoryV1GetListGet(searchCriteriaFilterGroups0Filters0Field, searchCriteriaFilterGroups0Filters0Value, searchCriteriaFilterGroups0Filters0ConditionType, searchCriteriaSortOrders0Field, searchCriteriaSortOrders0Direction, searchCriteriaPageSize, searchCriteriaCurrentPage, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * EavAttributeSetsListApi - object-oriented interface
 * @export
 * @class EavAttributeSetsListApi
 * @extends {BaseAPI}
 */
export class EavAttributeSetsListApi extends BaseAPI {
    /**
     * Retrieve list of Attribute Sets This call returns an array of objects, but detailed information about each object’s attributes might not be included. See http://devdocs.magento.com/codelinks/attributes.html#AttributeSetRepositoryInterface to determine which call to use to get detailed information about all attributes for an object.
     * @summary eav/attribute-sets/list
     * @param {string} [searchCriteriaFilterGroups0Filters0Field] Field
     * @param {string} [searchCriteriaFilterGroups0Filters0Value] Value
     * @param {string} [searchCriteriaFilterGroups0Filters0ConditionType] Condition type
     * @param {string} [searchCriteriaSortOrders0Field] Sorting field.
     * @param {string} [searchCriteriaSortOrders0Direction] Sorting direction.
     * @param {number} [searchCriteriaPageSize] Page size.
     * @param {number} [searchCriteriaCurrentPage] Current page.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EavAttributeSetsListApi
     */
    public eavAttributeSetRepositoryV1GetListGet(searchCriteriaFilterGroups0Filters0Field?: string, searchCriteriaFilterGroups0Filters0Value?: string, searchCriteriaFilterGroups0Filters0ConditionType?: string, searchCriteriaSortOrders0Field?: string, searchCriteriaSortOrders0Direction?: string, searchCriteriaPageSize?: number, searchCriteriaCurrentPage?: number, options?: AxiosRequestConfig) {
        return EavAttributeSetsListApiFp(this.configuration).eavAttributeSetRepositoryV1GetListGet(searchCriteriaFilterGroups0Filters0Field, searchCriteriaFilterGroups0Filters0Value, searchCriteriaFilterGroups0Filters0ConditionType, searchCriteriaSortOrders0Field, searchCriteriaSortOrders0Direction, searchCriteriaPageSize, searchCriteriaCurrentPage, options).then((request) => request(this.axios, this.basePath));
    }
}


/**
 * GiftWrappingsApi - axios parameter creator
 * @export
 */
export const GiftWrappingsApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Return list of gift wrapping data objects based on search criteria
         * @summary gift-wrappings
         * @param {string} [searchCriteriaFilterGroups0Filters0Field] Field
         * @param {string} [searchCriteriaFilterGroups0Filters0Value] Value
         * @param {string} [searchCriteriaFilterGroups0Filters0ConditionType] Condition type
         * @param {string} [searchCriteriaSortOrders0Field] Sorting field.
         * @param {string} [searchCriteriaSortOrders0Direction] Sorting direction.
         * @param {number} [searchCriteriaPageSize] Page size.
         * @param {number} [searchCriteriaCurrentPage] Current page.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        giftWrappingWrappingRepositoryV1GetListGet: async (searchCriteriaFilterGroups0Filters0Field?: string, searchCriteriaFilterGroups0Filters0Value?: string, searchCriteriaFilterGroups0Filters0ConditionType?: string, searchCriteriaSortOrders0Field?: string, searchCriteriaSortOrders0Direction?: string, searchCriteriaPageSize?: number, searchCriteriaCurrentPage?: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/V1/gift-wrappings`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (searchCriteriaFilterGroups0Filters0Field !== undefined) {
                localVarQueryParameter['searchCriteria[filterGroups][0][filters][0][field]'] = searchCriteriaFilterGroups0Filters0Field;
            }

            if (searchCriteriaFilterGroups0Filters0Value !== undefined) {
                localVarQueryParameter['searchCriteria[filterGroups][0][filters][0][value]'] = searchCriteriaFilterGroups0Filters0Value;
            }

            if (searchCriteriaFilterGroups0Filters0ConditionType !== undefined) {
                localVarQueryParameter['searchCriteria[filterGroups][0][filters][0][conditionType]'] = searchCriteriaFilterGroups0Filters0ConditionType;
            }

            if (searchCriteriaSortOrders0Field !== undefined) {
                localVarQueryParameter['searchCriteria[sortOrders][0][field]'] = searchCriteriaSortOrders0Field;
            }

            if (searchCriteriaSortOrders0Direction !== undefined) {
                localVarQueryParameter['searchCriteria[sortOrders][0][direction]'] = searchCriteriaSortOrders0Direction;
            }

            if (searchCriteriaPageSize !== undefined) {
                localVarQueryParameter['searchCriteria[pageSize]'] = searchCriteriaPageSize;
            }

            if (searchCriteriaCurrentPage !== undefined) {
                localVarQueryParameter['searchCriteria[currentPage]'] = searchCriteriaCurrentPage;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Create/Update new gift wrapping with data object values
         * @summary gift-wrappings
         * @param {GiftWrappingWrappingRepositoryV1SavePostRequest} [giftWrappingWrappingRepositoryV1SavePostBody] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        giftWrappingWrappingRepositoryV1SavePost: async (giftWrappingWrappingRepositoryV1SavePostBody?: GiftWrappingWrappingRepositoryV1SavePostRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/V1/gift-wrappings`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(giftWrappingWrappingRepositoryV1SavePostBody, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * GiftWrappingsApi - functional programming interface
 * @export
 */
export const GiftWrappingsApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = GiftWrappingsApiAxiosParamCreator(configuration)
    return {
        /**
         * Return list of gift wrapping data objects based on search criteria
         * @summary gift-wrappings
         * @param {string} [searchCriteriaFilterGroups0Filters0Field] Field
         * @param {string} [searchCriteriaFilterGroups0Filters0Value] Value
         * @param {string} [searchCriteriaFilterGroups0Filters0ConditionType] Condition type
         * @param {string} [searchCriteriaSortOrders0Field] Sorting field.
         * @param {string} [searchCriteriaSortOrders0Direction] Sorting direction.
         * @param {number} [searchCriteriaPageSize] Page size.
         * @param {number} [searchCriteriaCurrentPage] Current page.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async giftWrappingWrappingRepositoryV1GetListGet(searchCriteriaFilterGroups0Filters0Field?: string, searchCriteriaFilterGroups0Filters0Value?: string, searchCriteriaFilterGroups0Filters0ConditionType?: string, searchCriteriaSortOrders0Field?: string, searchCriteriaSortOrders0Direction?: string, searchCriteriaPageSize?: number, searchCriteriaCurrentPage?: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<GiftWrappingDataWrappingSearchResultsInterface>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.giftWrappingWrappingRepositoryV1GetListGet(searchCriteriaFilterGroups0Filters0Field, searchCriteriaFilterGroups0Filters0Value, searchCriteriaFilterGroups0Filters0ConditionType, searchCriteriaSortOrders0Field, searchCriteriaSortOrders0Direction, searchCriteriaPageSize, searchCriteriaCurrentPage, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Create/Update new gift wrapping with data object values
         * @summary gift-wrappings
         * @param {GiftWrappingWrappingRepositoryV1SavePostRequest} [giftWrappingWrappingRepositoryV1SavePostBody] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async giftWrappingWrappingRepositoryV1SavePost(giftWrappingWrappingRepositoryV1SavePostBody?: GiftWrappingWrappingRepositoryV1SavePostRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<GiftWrappingDataWrappingInterface>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.giftWrappingWrappingRepositoryV1SavePost(giftWrappingWrappingRepositoryV1SavePostBody, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * GiftWrappingsApi - factory interface
 * @export
 */
export const GiftWrappingsApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = GiftWrappingsApiFp(configuration)
    return {
        /**
         * Return list of gift wrapping data objects based on search criteria
         * @summary gift-wrappings
         * @param {string} [searchCriteriaFilterGroups0Filters0Field] Field
         * @param {string} [searchCriteriaFilterGroups0Filters0Value] Value
         * @param {string} [searchCriteriaFilterGroups0Filters0ConditionType] Condition type
         * @param {string} [searchCriteriaSortOrders0Field] Sorting field.
         * @param {string} [searchCriteriaSortOrders0Direction] Sorting direction.
         * @param {number} [searchCriteriaPageSize] Page size.
         * @param {number} [searchCriteriaCurrentPage] Current page.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        giftWrappingWrappingRepositoryV1GetListGet(searchCriteriaFilterGroups0Filters0Field?: string, searchCriteriaFilterGroups0Filters0Value?: string, searchCriteriaFilterGroups0Filters0ConditionType?: string, searchCriteriaSortOrders0Field?: string, searchCriteriaSortOrders0Direction?: string, searchCriteriaPageSize?: number, searchCriteriaCurrentPage?: number, options?: any): AxiosPromise<GiftWrappingDataWrappingSearchResultsInterface> {
            return localVarFp.giftWrappingWrappingRepositoryV1GetListGet(searchCriteriaFilterGroups0Filters0Field, searchCriteriaFilterGroups0Filters0Value, searchCriteriaFilterGroups0Filters0ConditionType, searchCriteriaSortOrders0Field, searchCriteriaSortOrders0Direction, searchCriteriaPageSize, searchCriteriaCurrentPage, options).then((request) => request(axios, basePath));
        },
        /**
         * Create/Update new gift wrapping with data object values
         * @summary gift-wrappings
         * @param {GiftWrappingWrappingRepositoryV1SavePostRequest} [giftWrappingWrappingRepositoryV1SavePostBody] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        giftWrappingWrappingRepositoryV1SavePost(giftWrappingWrappingRepositoryV1SavePostBody?: GiftWrappingWrappingRepositoryV1SavePostRequest, options?: any): AxiosPromise<GiftWrappingDataWrappingInterface> {
            return localVarFp.giftWrappingWrappingRepositoryV1SavePost(giftWrappingWrappingRepositoryV1SavePostBody, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * GiftWrappingsApi - object-oriented interface
 * @export
 * @class GiftWrappingsApi
 * @extends {BaseAPI}
 */
export class GiftWrappingsApi extends BaseAPI {
    /**
     * Return list of gift wrapping data objects based on search criteria
     * @summary gift-wrappings
     * @param {string} [searchCriteriaFilterGroups0Filters0Field] Field
     * @param {string} [searchCriteriaFilterGroups0Filters0Value] Value
     * @param {string} [searchCriteriaFilterGroups0Filters0ConditionType] Condition type
     * @param {string} [searchCriteriaSortOrders0Field] Sorting field.
     * @param {string} [searchCriteriaSortOrders0Direction] Sorting direction.
     * @param {number} [searchCriteriaPageSize] Page size.
     * @param {number} [searchCriteriaCurrentPage] Current page.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof GiftWrappingsApi
     */
    public giftWrappingWrappingRepositoryV1GetListGet(searchCriteriaFilterGroups0Filters0Field?: string, searchCriteriaFilterGroups0Filters0Value?: string, searchCriteriaFilterGroups0Filters0ConditionType?: string, searchCriteriaSortOrders0Field?: string, searchCriteriaSortOrders0Direction?: string, searchCriteriaPageSize?: number, searchCriteriaCurrentPage?: number, options?: AxiosRequestConfig) {
        return GiftWrappingsApiFp(this.configuration).giftWrappingWrappingRepositoryV1GetListGet(searchCriteriaFilterGroups0Filters0Field, searchCriteriaFilterGroups0Filters0Value, searchCriteriaFilterGroups0Filters0ConditionType, searchCriteriaSortOrders0Field, searchCriteriaSortOrders0Direction, searchCriteriaPageSize, searchCriteriaCurrentPage, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Create/Update new gift wrapping with data object values
     * @summary gift-wrappings
     * @param {GiftWrappingWrappingRepositoryV1SavePostRequest} [giftWrappingWrappingRepositoryV1SavePostBody] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof GiftWrappingsApi
     */
    public giftWrappingWrappingRepositoryV1SavePost(giftWrappingWrappingRepositoryV1SavePostBody?: GiftWrappingWrappingRepositoryV1SavePostRequest, options?: AxiosRequestConfig) {
        return GiftWrappingsApiFp(this.configuration).giftWrappingWrappingRepositoryV1SavePost(giftWrappingWrappingRepositoryV1SavePostBody, options).then((request) => request(this.axios, this.basePath));
    }
}


/**
 * GiftWrappingsIdApi - axios parameter creator
 * @export
 */
export const GiftWrappingsIdApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Delete gift wrapping
         * @summary gift-wrappings/{id}
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        giftWrappingWrappingRepositoryV1DeleteByIdDelete: async (id: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('giftWrappingWrappingRepositoryV1DeleteByIdDelete', 'id', id)
            const localVarPath = `/V1/gift-wrappings/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Return data object for specified wrapping ID and store.
         * @summary gift-wrappings/{id}
         * @param {number} id 
         * @param {number} [storeId] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        giftWrappingWrappingRepositoryV1GetGet: async (id: number, storeId?: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('giftWrappingWrappingRepositoryV1GetGet', 'id', id)
            const localVarPath = `/V1/gift-wrappings/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (storeId !== undefined) {
                localVarQueryParameter['storeId'] = storeId;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * GiftWrappingsIdApi - functional programming interface
 * @export
 */
export const GiftWrappingsIdApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = GiftWrappingsIdApiAxiosParamCreator(configuration)
    return {
        /**
         * Delete gift wrapping
         * @summary gift-wrappings/{id}
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async giftWrappingWrappingRepositoryV1DeleteByIdDelete(id: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<boolean>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.giftWrappingWrappingRepositoryV1DeleteByIdDelete(id, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Return data object for specified wrapping ID and store.
         * @summary gift-wrappings/{id}
         * @param {number} id 
         * @param {number} [storeId] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async giftWrappingWrappingRepositoryV1GetGet(id: number, storeId?: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<GiftWrappingDataWrappingInterface>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.giftWrappingWrappingRepositoryV1GetGet(id, storeId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * GiftWrappingsIdApi - factory interface
 * @export
 */
export const GiftWrappingsIdApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = GiftWrappingsIdApiFp(configuration)
    return {
        /**
         * Delete gift wrapping
         * @summary gift-wrappings/{id}
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        giftWrappingWrappingRepositoryV1DeleteByIdDelete(id: number, options?: any): AxiosPromise<boolean> {
            return localVarFp.giftWrappingWrappingRepositoryV1DeleteByIdDelete(id, options).then((request) => request(axios, basePath));
        },
        /**
         * Return data object for specified wrapping ID and store.
         * @summary gift-wrappings/{id}
         * @param {number} id 
         * @param {number} [storeId] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        giftWrappingWrappingRepositoryV1GetGet(id: number, storeId?: number, options?: any): AxiosPromise<GiftWrappingDataWrappingInterface> {
            return localVarFp.giftWrappingWrappingRepositoryV1GetGet(id, storeId, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * GiftWrappingsIdApi - object-oriented interface
 * @export
 * @class GiftWrappingsIdApi
 * @extends {BaseAPI}
 */
export class GiftWrappingsIdApi extends BaseAPI {
    /**
     * Delete gift wrapping
     * @summary gift-wrappings/{id}
     * @param {number} id 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof GiftWrappingsIdApi
     */
    public giftWrappingWrappingRepositoryV1DeleteByIdDelete(id: number, options?: AxiosRequestConfig) {
        return GiftWrappingsIdApiFp(this.configuration).giftWrappingWrappingRepositoryV1DeleteByIdDelete(id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Return data object for specified wrapping ID and store.
     * @summary gift-wrappings/{id}
     * @param {number} id 
     * @param {number} [storeId] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof GiftWrappingsIdApi
     */
    public giftWrappingWrappingRepositoryV1GetGet(id: number, storeId?: number, options?: AxiosRequestConfig) {
        return GiftWrappingsIdApiFp(this.configuration).giftWrappingWrappingRepositoryV1GetGet(id, storeId, options).then((request) => request(this.axios, this.basePath));
    }
}


/**
 * GiftWrappingsWrappingIdApi - axios parameter creator
 * @export
 */
export const GiftWrappingsWrappingIdApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Create/Update new gift wrapping with data object values
         * @summary gift-wrappings/{wrappingId}
         * @param {string} wrappingId 
         * @param {GiftWrappingWrappingRepositoryV1SavePostRequest} [giftWrappingWrappingRepositoryV1SavePutBody] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        giftWrappingWrappingRepositoryV1SavePut: async (wrappingId: string, giftWrappingWrappingRepositoryV1SavePutBody?: GiftWrappingWrappingRepositoryV1SavePostRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'wrappingId' is not null or undefined
            assertParamExists('giftWrappingWrappingRepositoryV1SavePut', 'wrappingId', wrappingId)
            const localVarPath = `/V1/gift-wrappings/{wrappingId}`
                .replace(`{${"wrappingId"}}`, encodeURIComponent(String(wrappingId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(giftWrappingWrappingRepositoryV1SavePutBody, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * GiftWrappingsWrappingIdApi - functional programming interface
 * @export
 */
export const GiftWrappingsWrappingIdApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = GiftWrappingsWrappingIdApiAxiosParamCreator(configuration)
    return {
        /**
         * Create/Update new gift wrapping with data object values
         * @summary gift-wrappings/{wrappingId}
         * @param {string} wrappingId 
         * @param {GiftWrappingWrappingRepositoryV1SavePostRequest} [giftWrappingWrappingRepositoryV1SavePutBody] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async giftWrappingWrappingRepositoryV1SavePut(wrappingId: string, giftWrappingWrappingRepositoryV1SavePutBody?: GiftWrappingWrappingRepositoryV1SavePostRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<GiftWrappingDataWrappingInterface>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.giftWrappingWrappingRepositoryV1SavePut(wrappingId, giftWrappingWrappingRepositoryV1SavePutBody, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * GiftWrappingsWrappingIdApi - factory interface
 * @export
 */
export const GiftWrappingsWrappingIdApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = GiftWrappingsWrappingIdApiFp(configuration)
    return {
        /**
         * Create/Update new gift wrapping with data object values
         * @summary gift-wrappings/{wrappingId}
         * @param {string} wrappingId 
         * @param {GiftWrappingWrappingRepositoryV1SavePostRequest} [giftWrappingWrappingRepositoryV1SavePutBody] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        giftWrappingWrappingRepositoryV1SavePut(wrappingId: string, giftWrappingWrappingRepositoryV1SavePutBody?: GiftWrappingWrappingRepositoryV1SavePostRequest, options?: any): AxiosPromise<GiftWrappingDataWrappingInterface> {
            return localVarFp.giftWrappingWrappingRepositoryV1SavePut(wrappingId, giftWrappingWrappingRepositoryV1SavePutBody, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * GiftWrappingsWrappingIdApi - object-oriented interface
 * @export
 * @class GiftWrappingsWrappingIdApi
 * @extends {BaseAPI}
 */
export class GiftWrappingsWrappingIdApi extends BaseAPI {
    /**
     * Create/Update new gift wrapping with data object values
     * @summary gift-wrappings/{wrappingId}
     * @param {string} wrappingId 
     * @param {GiftWrappingWrappingRepositoryV1SavePostRequest} [giftWrappingWrappingRepositoryV1SavePutBody] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof GiftWrappingsWrappingIdApi
     */
    public giftWrappingWrappingRepositoryV1SavePut(wrappingId: string, giftWrappingWrappingRepositoryV1SavePutBody?: GiftWrappingWrappingRepositoryV1SavePostRequest, options?: AxiosRequestConfig) {
        return GiftWrappingsWrappingIdApiFp(this.configuration).giftWrappingWrappingRepositoryV1SavePut(wrappingId, giftWrappingWrappingRepositoryV1SavePutBody, options).then((request) => request(this.axios, this.basePath));
    }
}


/**
 * GiftregistryMineEstimateShippingMethodsApi - axios parameter creator
 * @export
 */
export const GiftregistryMineEstimateShippingMethodsApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Estimate shipping
         * @summary giftregistry/mine/estimate-shipping-methods
         * @param {GiftRegistryShippingMethodManagementV1EstimateByRegistryIdPostRequest} [giftRegistryShippingMethodManagementV1EstimateByRegistryIdPostBody] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        giftRegistryShippingMethodManagementV1EstimateByRegistryIdPost: async (giftRegistryShippingMethodManagementV1EstimateByRegistryIdPostBody?: GiftRegistryShippingMethodManagementV1EstimateByRegistryIdPostRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/V1/giftregistry/mine/estimate-shipping-methods`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(giftRegistryShippingMethodManagementV1EstimateByRegistryIdPostBody, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * GiftregistryMineEstimateShippingMethodsApi - functional programming interface
 * @export
 */
export const GiftregistryMineEstimateShippingMethodsApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = GiftregistryMineEstimateShippingMethodsApiAxiosParamCreator(configuration)
    return {
        /**
         * Estimate shipping
         * @summary giftregistry/mine/estimate-shipping-methods
         * @param {GiftRegistryShippingMethodManagementV1EstimateByRegistryIdPostRequest} [giftRegistryShippingMethodManagementV1EstimateByRegistryIdPostBody] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async giftRegistryShippingMethodManagementV1EstimateByRegistryIdPost(giftRegistryShippingMethodManagementV1EstimateByRegistryIdPostBody?: GiftRegistryShippingMethodManagementV1EstimateByRegistryIdPostRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<QuoteDataShippingMethodInterface>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.giftRegistryShippingMethodManagementV1EstimateByRegistryIdPost(giftRegistryShippingMethodManagementV1EstimateByRegistryIdPostBody, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * GiftregistryMineEstimateShippingMethodsApi - factory interface
 * @export
 */
export const GiftregistryMineEstimateShippingMethodsApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = GiftregistryMineEstimateShippingMethodsApiFp(configuration)
    return {
        /**
         * Estimate shipping
         * @summary giftregistry/mine/estimate-shipping-methods
         * @param {GiftRegistryShippingMethodManagementV1EstimateByRegistryIdPostRequest} [giftRegistryShippingMethodManagementV1EstimateByRegistryIdPostBody] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        giftRegistryShippingMethodManagementV1EstimateByRegistryIdPost(giftRegistryShippingMethodManagementV1EstimateByRegistryIdPostBody?: GiftRegistryShippingMethodManagementV1EstimateByRegistryIdPostRequest, options?: any): AxiosPromise<Array<QuoteDataShippingMethodInterface>> {
            return localVarFp.giftRegistryShippingMethodManagementV1EstimateByRegistryIdPost(giftRegistryShippingMethodManagementV1EstimateByRegistryIdPostBody, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * GiftregistryMineEstimateShippingMethodsApi - object-oriented interface
 * @export
 * @class GiftregistryMineEstimateShippingMethodsApi
 * @extends {BaseAPI}
 */
export class GiftregistryMineEstimateShippingMethodsApi extends BaseAPI {
    /**
     * Estimate shipping
     * @summary giftregistry/mine/estimate-shipping-methods
     * @param {GiftRegistryShippingMethodManagementV1EstimateByRegistryIdPostRequest} [giftRegistryShippingMethodManagementV1EstimateByRegistryIdPostBody] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof GiftregistryMineEstimateShippingMethodsApi
     */
    public giftRegistryShippingMethodManagementV1EstimateByRegistryIdPost(giftRegistryShippingMethodManagementV1EstimateByRegistryIdPostBody?: GiftRegistryShippingMethodManagementV1EstimateByRegistryIdPostRequest, options?: AxiosRequestConfig) {
        return GiftregistryMineEstimateShippingMethodsApiFp(this.configuration).giftRegistryShippingMethodManagementV1EstimateByRegistryIdPost(giftRegistryShippingMethodManagementV1EstimateByRegistryIdPostBody, options).then((request) => request(this.axios, this.basePath));
    }
}


/**
 * GuestCartsApi - axios parameter creator
 * @export
 */
export const GuestCartsApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Enable an customer or guest user to create an empty cart and quote for an anonymous customer.
         * @summary guest-carts
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        quoteGuestCartManagementV1CreateEmptyCartPost: async (options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/V1/guest-carts`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * GuestCartsApi - functional programming interface
 * @export
 */
export const GuestCartsApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = GuestCartsApiAxiosParamCreator(configuration)
    return {
        /**
         * Enable an customer or guest user to create an empty cart and quote for an anonymous customer.
         * @summary guest-carts
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async quoteGuestCartManagementV1CreateEmptyCartPost(options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<string>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.quoteGuestCartManagementV1CreateEmptyCartPost(options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * GuestCartsApi - factory interface
 * @export
 */
export const GuestCartsApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = GuestCartsApiFp(configuration)
    return {
        /**
         * Enable an customer or guest user to create an empty cart and quote for an anonymous customer.
         * @summary guest-carts
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        quoteGuestCartManagementV1CreateEmptyCartPost(options?: any): AxiosPromise<string> {
            return localVarFp.quoteGuestCartManagementV1CreateEmptyCartPost(options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * GuestCartsApi - object-oriented interface
 * @export
 * @class GuestCartsApi
 * @extends {BaseAPI}
 */
export class GuestCartsApi extends BaseAPI {
    /**
     * Enable an customer or guest user to create an empty cart and quote for an anonymous customer.
     * @summary guest-carts
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof GuestCartsApi
     */
    public quoteGuestCartManagementV1CreateEmptyCartPost(options?: AxiosRequestConfig) {
        return GuestCartsApiFp(this.configuration).quoteGuestCartManagementV1CreateEmptyCartPost(options).then((request) => request(this.axios, this.basePath));
    }
}


/**
 * GuestCartsCartIdApi - axios parameter creator
 * @export
 */
export const GuestCartsCartIdApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Assign a specified customer to a specified shopping cart.
         * @summary guest-carts/{cartId}
         * @param {string} cartId The cart ID.
         * @param {QuoteCartManagementV1AssignCustomerPutRequest} [quoteGuestCartManagementV1AssignCustomerPutBody] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        quoteGuestCartManagementV1AssignCustomerPut: async (cartId: string, quoteGuestCartManagementV1AssignCustomerPutBody?: QuoteCartManagementV1AssignCustomerPutRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'cartId' is not null or undefined
            assertParamExists('quoteGuestCartManagementV1AssignCustomerPut', 'cartId', cartId)
            const localVarPath = `/V1/guest-carts/{cartId}`
                .replace(`{${"cartId"}}`, encodeURIComponent(String(cartId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(quoteGuestCartManagementV1AssignCustomerPutBody, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Enable a guest user to return information for a specified cart.
         * @summary guest-carts/{cartId}
         * @param {string} cartId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        quoteGuestCartRepositoryV1GetGet: async (cartId: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'cartId' is not null or undefined
            assertParamExists('quoteGuestCartRepositoryV1GetGet', 'cartId', cartId)
            const localVarPath = `/V1/guest-carts/{cartId}`
                .replace(`{${"cartId"}}`, encodeURIComponent(String(cartId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * GuestCartsCartIdApi - functional programming interface
 * @export
 */
export const GuestCartsCartIdApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = GuestCartsCartIdApiAxiosParamCreator(configuration)
    return {
        /**
         * Assign a specified customer to a specified shopping cart.
         * @summary guest-carts/{cartId}
         * @param {string} cartId The cart ID.
         * @param {QuoteCartManagementV1AssignCustomerPutRequest} [quoteGuestCartManagementV1AssignCustomerPutBody] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async quoteGuestCartManagementV1AssignCustomerPut(cartId: string, quoteGuestCartManagementV1AssignCustomerPutBody?: QuoteCartManagementV1AssignCustomerPutRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<boolean>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.quoteGuestCartManagementV1AssignCustomerPut(cartId, quoteGuestCartManagementV1AssignCustomerPutBody, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Enable a guest user to return information for a specified cart.
         * @summary guest-carts/{cartId}
         * @param {string} cartId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async quoteGuestCartRepositoryV1GetGet(cartId: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<QuoteDataCartInterface>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.quoteGuestCartRepositoryV1GetGet(cartId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * GuestCartsCartIdApi - factory interface
 * @export
 */
export const GuestCartsCartIdApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = GuestCartsCartIdApiFp(configuration)
    return {
        /**
         * Assign a specified customer to a specified shopping cart.
         * @summary guest-carts/{cartId}
         * @param {string} cartId The cart ID.
         * @param {QuoteCartManagementV1AssignCustomerPutRequest} [quoteGuestCartManagementV1AssignCustomerPutBody] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        quoteGuestCartManagementV1AssignCustomerPut(cartId: string, quoteGuestCartManagementV1AssignCustomerPutBody?: QuoteCartManagementV1AssignCustomerPutRequest, options?: any): AxiosPromise<boolean> {
            return localVarFp.quoteGuestCartManagementV1AssignCustomerPut(cartId, quoteGuestCartManagementV1AssignCustomerPutBody, options).then((request) => request(axios, basePath));
        },
        /**
         * Enable a guest user to return information for a specified cart.
         * @summary guest-carts/{cartId}
         * @param {string} cartId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        quoteGuestCartRepositoryV1GetGet(cartId: string, options?: any): AxiosPromise<QuoteDataCartInterface> {
            return localVarFp.quoteGuestCartRepositoryV1GetGet(cartId, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * GuestCartsCartIdApi - object-oriented interface
 * @export
 * @class GuestCartsCartIdApi
 * @extends {BaseAPI}
 */
export class GuestCartsCartIdApi extends BaseAPI {
    /**
     * Assign a specified customer to a specified shopping cart.
     * @summary guest-carts/{cartId}
     * @param {string} cartId The cart ID.
     * @param {QuoteCartManagementV1AssignCustomerPutRequest} [quoteGuestCartManagementV1AssignCustomerPutBody] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof GuestCartsCartIdApi
     */
    public quoteGuestCartManagementV1AssignCustomerPut(cartId: string, quoteGuestCartManagementV1AssignCustomerPutBody?: QuoteCartManagementV1AssignCustomerPutRequest, options?: AxiosRequestConfig) {
        return GuestCartsCartIdApiFp(this.configuration).quoteGuestCartManagementV1AssignCustomerPut(cartId, quoteGuestCartManagementV1AssignCustomerPutBody, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Enable a guest user to return information for a specified cart.
     * @summary guest-carts/{cartId}
     * @param {string} cartId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof GuestCartsCartIdApi
     */
    public quoteGuestCartRepositoryV1GetGet(cartId: string, options?: AxiosRequestConfig) {
        return GuestCartsCartIdApiFp(this.configuration).quoteGuestCartRepositoryV1GetGet(cartId, options).then((request) => request(this.axios, this.basePath));
    }
}


/**
 * GuestCartsCartIdBillingAddressApi - axios parameter creator
 * @export
 */
export const GuestCartsCartIdBillingAddressApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Assign a specified billing address to a specified cart.
         * @summary guest-carts/{cartId}/billing-address
         * @param {string} cartId The cart ID.
         * @param {QuoteBillingAddressManagementV1AssignPostRequest} [quoteGuestBillingAddressManagementV1AssignPostBody] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        quoteGuestBillingAddressManagementV1AssignPost: async (cartId: string, quoteGuestBillingAddressManagementV1AssignPostBody?: QuoteBillingAddressManagementV1AssignPostRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'cartId' is not null or undefined
            assertParamExists('quoteGuestBillingAddressManagementV1AssignPost', 'cartId', cartId)
            const localVarPath = `/V1/guest-carts/{cartId}/billing-address`
                .replace(`{${"cartId"}}`, encodeURIComponent(String(cartId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(quoteGuestBillingAddressManagementV1AssignPostBody, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Return the billing address for a specified quote.
         * @summary guest-carts/{cartId}/billing-address
         * @param {string} cartId The cart ID.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        quoteGuestBillingAddressManagementV1GetGet: async (cartId: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'cartId' is not null or undefined
            assertParamExists('quoteGuestBillingAddressManagementV1GetGet', 'cartId', cartId)
            const localVarPath = `/V1/guest-carts/{cartId}/billing-address`
                .replace(`{${"cartId"}}`, encodeURIComponent(String(cartId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * GuestCartsCartIdBillingAddressApi - functional programming interface
 * @export
 */
export const GuestCartsCartIdBillingAddressApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = GuestCartsCartIdBillingAddressApiAxiosParamCreator(configuration)
    return {
        /**
         * Assign a specified billing address to a specified cart.
         * @summary guest-carts/{cartId}/billing-address
         * @param {string} cartId The cart ID.
         * @param {QuoteBillingAddressManagementV1AssignPostRequest} [quoteGuestBillingAddressManagementV1AssignPostBody] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async quoteGuestBillingAddressManagementV1AssignPost(cartId: string, quoteGuestBillingAddressManagementV1AssignPostBody?: QuoteBillingAddressManagementV1AssignPostRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<number>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.quoteGuestBillingAddressManagementV1AssignPost(cartId, quoteGuestBillingAddressManagementV1AssignPostBody, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Return the billing address for a specified quote.
         * @summary guest-carts/{cartId}/billing-address
         * @param {string} cartId The cart ID.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async quoteGuestBillingAddressManagementV1GetGet(cartId: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<QuoteDataAddressInterface>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.quoteGuestBillingAddressManagementV1GetGet(cartId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * GuestCartsCartIdBillingAddressApi - factory interface
 * @export
 */
export const GuestCartsCartIdBillingAddressApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = GuestCartsCartIdBillingAddressApiFp(configuration)
    return {
        /**
         * Assign a specified billing address to a specified cart.
         * @summary guest-carts/{cartId}/billing-address
         * @param {string} cartId The cart ID.
         * @param {QuoteBillingAddressManagementV1AssignPostRequest} [quoteGuestBillingAddressManagementV1AssignPostBody] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        quoteGuestBillingAddressManagementV1AssignPost(cartId: string, quoteGuestBillingAddressManagementV1AssignPostBody?: QuoteBillingAddressManagementV1AssignPostRequest, options?: any): AxiosPromise<number> {
            return localVarFp.quoteGuestBillingAddressManagementV1AssignPost(cartId, quoteGuestBillingAddressManagementV1AssignPostBody, options).then((request) => request(axios, basePath));
        },
        /**
         * Return the billing address for a specified quote.
         * @summary guest-carts/{cartId}/billing-address
         * @param {string} cartId The cart ID.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        quoteGuestBillingAddressManagementV1GetGet(cartId: string, options?: any): AxiosPromise<QuoteDataAddressInterface> {
            return localVarFp.quoteGuestBillingAddressManagementV1GetGet(cartId, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * GuestCartsCartIdBillingAddressApi - object-oriented interface
 * @export
 * @class GuestCartsCartIdBillingAddressApi
 * @extends {BaseAPI}
 */
export class GuestCartsCartIdBillingAddressApi extends BaseAPI {
    /**
     * Assign a specified billing address to a specified cart.
     * @summary guest-carts/{cartId}/billing-address
     * @param {string} cartId The cart ID.
     * @param {QuoteBillingAddressManagementV1AssignPostRequest} [quoteGuestBillingAddressManagementV1AssignPostBody] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof GuestCartsCartIdBillingAddressApi
     */
    public quoteGuestBillingAddressManagementV1AssignPost(cartId: string, quoteGuestBillingAddressManagementV1AssignPostBody?: QuoteBillingAddressManagementV1AssignPostRequest, options?: AxiosRequestConfig) {
        return GuestCartsCartIdBillingAddressApiFp(this.configuration).quoteGuestBillingAddressManagementV1AssignPost(cartId, quoteGuestBillingAddressManagementV1AssignPostBody, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Return the billing address for a specified quote.
     * @summary guest-carts/{cartId}/billing-address
     * @param {string} cartId The cart ID.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof GuestCartsCartIdBillingAddressApi
     */
    public quoteGuestBillingAddressManagementV1GetGet(cartId: string, options?: AxiosRequestConfig) {
        return GuestCartsCartIdBillingAddressApiFp(this.configuration).quoteGuestBillingAddressManagementV1GetGet(cartId, options).then((request) => request(this.axios, this.basePath));
    }
}


/**
 * GuestCartsCartIdCheckoutFieldsApi - axios parameter creator
 * @export
 */
export const GuestCartsCartIdCheckoutFieldsApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary guest-carts/{cartId}/checkout-fields
         * @param {string} cartId 
         * @param {TemandoShippingQuoteCartCheckoutFieldManagementV1SaveCheckoutFieldsPostRequest} [temandoShippingQuoteGuestCartCheckoutFieldManagementV1SaveCheckoutFieldsPostBody] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        temandoShippingQuoteGuestCartCheckoutFieldManagementV1SaveCheckoutFieldsPost: async (cartId: string, temandoShippingQuoteGuestCartCheckoutFieldManagementV1SaveCheckoutFieldsPostBody?: TemandoShippingQuoteCartCheckoutFieldManagementV1SaveCheckoutFieldsPostRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'cartId' is not null or undefined
            assertParamExists('temandoShippingQuoteGuestCartCheckoutFieldManagementV1SaveCheckoutFieldsPost', 'cartId', cartId)
            const localVarPath = `/V1/guest-carts/{cartId}/checkout-fields`
                .replace(`{${"cartId"}}`, encodeURIComponent(String(cartId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(temandoShippingQuoteGuestCartCheckoutFieldManagementV1SaveCheckoutFieldsPostBody, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * GuestCartsCartIdCheckoutFieldsApi - functional programming interface
 * @export
 */
export const GuestCartsCartIdCheckoutFieldsApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = GuestCartsCartIdCheckoutFieldsApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @summary guest-carts/{cartId}/checkout-fields
         * @param {string} cartId 
         * @param {TemandoShippingQuoteCartCheckoutFieldManagementV1SaveCheckoutFieldsPostRequest} [temandoShippingQuoteGuestCartCheckoutFieldManagementV1SaveCheckoutFieldsPostBody] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async temandoShippingQuoteGuestCartCheckoutFieldManagementV1SaveCheckoutFieldsPost(cartId: string, temandoShippingQuoteGuestCartCheckoutFieldManagementV1SaveCheckoutFieldsPostBody?: TemandoShippingQuoteCartCheckoutFieldManagementV1SaveCheckoutFieldsPostRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ErrorResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.temandoShippingQuoteGuestCartCheckoutFieldManagementV1SaveCheckoutFieldsPost(cartId, temandoShippingQuoteGuestCartCheckoutFieldManagementV1SaveCheckoutFieldsPostBody, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * GuestCartsCartIdCheckoutFieldsApi - factory interface
 * @export
 */
export const GuestCartsCartIdCheckoutFieldsApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = GuestCartsCartIdCheckoutFieldsApiFp(configuration)
    return {
        /**
         * 
         * @summary guest-carts/{cartId}/checkout-fields
         * @param {string} cartId 
         * @param {TemandoShippingQuoteCartCheckoutFieldManagementV1SaveCheckoutFieldsPostRequest} [temandoShippingQuoteGuestCartCheckoutFieldManagementV1SaveCheckoutFieldsPostBody] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        temandoShippingQuoteGuestCartCheckoutFieldManagementV1SaveCheckoutFieldsPost(cartId: string, temandoShippingQuoteGuestCartCheckoutFieldManagementV1SaveCheckoutFieldsPostBody?: TemandoShippingQuoteCartCheckoutFieldManagementV1SaveCheckoutFieldsPostRequest, options?: any): AxiosPromise<ErrorResponse> {
            return localVarFp.temandoShippingQuoteGuestCartCheckoutFieldManagementV1SaveCheckoutFieldsPost(cartId, temandoShippingQuoteGuestCartCheckoutFieldManagementV1SaveCheckoutFieldsPostBody, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * GuestCartsCartIdCheckoutFieldsApi - object-oriented interface
 * @export
 * @class GuestCartsCartIdCheckoutFieldsApi
 * @extends {BaseAPI}
 */
export class GuestCartsCartIdCheckoutFieldsApi extends BaseAPI {
    /**
     * 
     * @summary guest-carts/{cartId}/checkout-fields
     * @param {string} cartId 
     * @param {TemandoShippingQuoteCartCheckoutFieldManagementV1SaveCheckoutFieldsPostRequest} [temandoShippingQuoteGuestCartCheckoutFieldManagementV1SaveCheckoutFieldsPostBody] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof GuestCartsCartIdCheckoutFieldsApi
     */
    public temandoShippingQuoteGuestCartCheckoutFieldManagementV1SaveCheckoutFieldsPost(cartId: string, temandoShippingQuoteGuestCartCheckoutFieldManagementV1SaveCheckoutFieldsPostBody?: TemandoShippingQuoteCartCheckoutFieldManagementV1SaveCheckoutFieldsPostRequest, options?: AxiosRequestConfig) {
        return GuestCartsCartIdCheckoutFieldsApiFp(this.configuration).temandoShippingQuoteGuestCartCheckoutFieldManagementV1SaveCheckoutFieldsPost(cartId, temandoShippingQuoteGuestCartCheckoutFieldManagementV1SaveCheckoutFieldsPostBody, options).then((request) => request(this.axios, this.basePath));
    }
}


/**
 * GuestCartsCartIdCollectTotalsApi - axios parameter creator
 * @export
 */
export const GuestCartsCartIdCollectTotalsApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Set shipping/billing methods and additional data for cart and collect totals for guest.
         * @summary guest-carts/{cartId}/collect-totals
         * @param {string} cartId The cart ID.
         * @param {QuoteCartTotalManagementV1CollectTotalsPutRequest} [quoteGuestCartTotalManagementV1CollectTotalsPutBody] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        quoteGuestCartTotalManagementV1CollectTotalsPut: async (cartId: string, quoteGuestCartTotalManagementV1CollectTotalsPutBody?: QuoteCartTotalManagementV1CollectTotalsPutRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'cartId' is not null or undefined
            assertParamExists('quoteGuestCartTotalManagementV1CollectTotalsPut', 'cartId', cartId)
            const localVarPath = `/V1/guest-carts/{cartId}/collect-totals`
                .replace(`{${"cartId"}}`, encodeURIComponent(String(cartId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(quoteGuestCartTotalManagementV1CollectTotalsPutBody, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * GuestCartsCartIdCollectTotalsApi - functional programming interface
 * @export
 */
export const GuestCartsCartIdCollectTotalsApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = GuestCartsCartIdCollectTotalsApiAxiosParamCreator(configuration)
    return {
        /**
         * Set shipping/billing methods and additional data for cart and collect totals for guest.
         * @summary guest-carts/{cartId}/collect-totals
         * @param {string} cartId The cart ID.
         * @param {QuoteCartTotalManagementV1CollectTotalsPutRequest} [quoteGuestCartTotalManagementV1CollectTotalsPutBody] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async quoteGuestCartTotalManagementV1CollectTotalsPut(cartId: string, quoteGuestCartTotalManagementV1CollectTotalsPutBody?: QuoteCartTotalManagementV1CollectTotalsPutRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<QuoteDataTotalsInterface>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.quoteGuestCartTotalManagementV1CollectTotalsPut(cartId, quoteGuestCartTotalManagementV1CollectTotalsPutBody, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * GuestCartsCartIdCollectTotalsApi - factory interface
 * @export
 */
export const GuestCartsCartIdCollectTotalsApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = GuestCartsCartIdCollectTotalsApiFp(configuration)
    return {
        /**
         * Set shipping/billing methods and additional data for cart and collect totals for guest.
         * @summary guest-carts/{cartId}/collect-totals
         * @param {string} cartId The cart ID.
         * @param {QuoteCartTotalManagementV1CollectTotalsPutRequest} [quoteGuestCartTotalManagementV1CollectTotalsPutBody] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        quoteGuestCartTotalManagementV1CollectTotalsPut(cartId: string, quoteGuestCartTotalManagementV1CollectTotalsPutBody?: QuoteCartTotalManagementV1CollectTotalsPutRequest, options?: any): AxiosPromise<QuoteDataTotalsInterface> {
            return localVarFp.quoteGuestCartTotalManagementV1CollectTotalsPut(cartId, quoteGuestCartTotalManagementV1CollectTotalsPutBody, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * GuestCartsCartIdCollectTotalsApi - object-oriented interface
 * @export
 * @class GuestCartsCartIdCollectTotalsApi
 * @extends {BaseAPI}
 */
export class GuestCartsCartIdCollectTotalsApi extends BaseAPI {
    /**
     * Set shipping/billing methods and additional data for cart and collect totals for guest.
     * @summary guest-carts/{cartId}/collect-totals
     * @param {string} cartId The cart ID.
     * @param {QuoteCartTotalManagementV1CollectTotalsPutRequest} [quoteGuestCartTotalManagementV1CollectTotalsPutBody] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof GuestCartsCartIdCollectTotalsApi
     */
    public quoteGuestCartTotalManagementV1CollectTotalsPut(cartId: string, quoteGuestCartTotalManagementV1CollectTotalsPutBody?: QuoteCartTotalManagementV1CollectTotalsPutRequest, options?: AxiosRequestConfig) {
        return GuestCartsCartIdCollectTotalsApiFp(this.configuration).quoteGuestCartTotalManagementV1CollectTotalsPut(cartId, quoteGuestCartTotalManagementV1CollectTotalsPutBody, options).then((request) => request(this.axios, this.basePath));
    }
}


/**
 * GuestCartsCartIdCollectionPointSearchRequestApi - axios parameter creator
 * @export
 */
export const GuestCartsCartIdCollectionPointSearchRequestApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary guest-carts/{cartId}/collection-point/search-request
         * @param {string} cartId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        temandoShippingCollectionPointGuestCartCollectionPointManagementV1DeleteSearchRequestDelete: async (cartId: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'cartId' is not null or undefined
            assertParamExists('temandoShippingCollectionPointGuestCartCollectionPointManagementV1DeleteSearchRequestDelete', 'cartId', cartId)
            const localVarPath = `/V1/guest-carts/{cartId}/collection-point/search-request`
                .replace(`{${"cartId"}}`, encodeURIComponent(String(cartId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary guest-carts/{cartId}/collection-point/search-request
         * @param {string} cartId 
         * @param {TemandoShippingCollectionPointCartCollectionPointManagementV1SaveSearchRequestPutRequest} [temandoShippingCollectionPointGuestCartCollectionPointManagementV1SaveSearchRequestPutBody] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        temandoShippingCollectionPointGuestCartCollectionPointManagementV1SaveSearchRequestPut: async (cartId: string, temandoShippingCollectionPointGuestCartCollectionPointManagementV1SaveSearchRequestPutBody?: TemandoShippingCollectionPointCartCollectionPointManagementV1SaveSearchRequestPutRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'cartId' is not null or undefined
            assertParamExists('temandoShippingCollectionPointGuestCartCollectionPointManagementV1SaveSearchRequestPut', 'cartId', cartId)
            const localVarPath = `/V1/guest-carts/{cartId}/collection-point/search-request`
                .replace(`{${"cartId"}}`, encodeURIComponent(String(cartId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(temandoShippingCollectionPointGuestCartCollectionPointManagementV1SaveSearchRequestPutBody, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * GuestCartsCartIdCollectionPointSearchRequestApi - functional programming interface
 * @export
 */
export const GuestCartsCartIdCollectionPointSearchRequestApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = GuestCartsCartIdCollectionPointSearchRequestApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @summary guest-carts/{cartId}/collection-point/search-request
         * @param {string} cartId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async temandoShippingCollectionPointGuestCartCollectionPointManagementV1DeleteSearchRequestDelete(cartId: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<boolean>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.temandoShippingCollectionPointGuestCartCollectionPointManagementV1DeleteSearchRequestDelete(cartId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary guest-carts/{cartId}/collection-point/search-request
         * @param {string} cartId 
         * @param {TemandoShippingCollectionPointCartCollectionPointManagementV1SaveSearchRequestPutRequest} [temandoShippingCollectionPointGuestCartCollectionPointManagementV1SaveSearchRequestPutBody] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async temandoShippingCollectionPointGuestCartCollectionPointManagementV1SaveSearchRequestPut(cartId: string, temandoShippingCollectionPointGuestCartCollectionPointManagementV1SaveSearchRequestPutBody?: TemandoShippingCollectionPointCartCollectionPointManagementV1SaveSearchRequestPutRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<TemandoShippingDataCollectionPointSearchRequestInterface>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.temandoShippingCollectionPointGuestCartCollectionPointManagementV1SaveSearchRequestPut(cartId, temandoShippingCollectionPointGuestCartCollectionPointManagementV1SaveSearchRequestPutBody, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * GuestCartsCartIdCollectionPointSearchRequestApi - factory interface
 * @export
 */
export const GuestCartsCartIdCollectionPointSearchRequestApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = GuestCartsCartIdCollectionPointSearchRequestApiFp(configuration)
    return {
        /**
         * 
         * @summary guest-carts/{cartId}/collection-point/search-request
         * @param {string} cartId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        temandoShippingCollectionPointGuestCartCollectionPointManagementV1DeleteSearchRequestDelete(cartId: string, options?: any): AxiosPromise<boolean> {
            return localVarFp.temandoShippingCollectionPointGuestCartCollectionPointManagementV1DeleteSearchRequestDelete(cartId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary guest-carts/{cartId}/collection-point/search-request
         * @param {string} cartId 
         * @param {TemandoShippingCollectionPointCartCollectionPointManagementV1SaveSearchRequestPutRequest} [temandoShippingCollectionPointGuestCartCollectionPointManagementV1SaveSearchRequestPutBody] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        temandoShippingCollectionPointGuestCartCollectionPointManagementV1SaveSearchRequestPut(cartId: string, temandoShippingCollectionPointGuestCartCollectionPointManagementV1SaveSearchRequestPutBody?: TemandoShippingCollectionPointCartCollectionPointManagementV1SaveSearchRequestPutRequest, options?: any): AxiosPromise<TemandoShippingDataCollectionPointSearchRequestInterface> {
            return localVarFp.temandoShippingCollectionPointGuestCartCollectionPointManagementV1SaveSearchRequestPut(cartId, temandoShippingCollectionPointGuestCartCollectionPointManagementV1SaveSearchRequestPutBody, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * GuestCartsCartIdCollectionPointSearchRequestApi - object-oriented interface
 * @export
 * @class GuestCartsCartIdCollectionPointSearchRequestApi
 * @extends {BaseAPI}
 */
export class GuestCartsCartIdCollectionPointSearchRequestApi extends BaseAPI {
    /**
     * 
     * @summary guest-carts/{cartId}/collection-point/search-request
     * @param {string} cartId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof GuestCartsCartIdCollectionPointSearchRequestApi
     */
    public temandoShippingCollectionPointGuestCartCollectionPointManagementV1DeleteSearchRequestDelete(cartId: string, options?: AxiosRequestConfig) {
        return GuestCartsCartIdCollectionPointSearchRequestApiFp(this.configuration).temandoShippingCollectionPointGuestCartCollectionPointManagementV1DeleteSearchRequestDelete(cartId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary guest-carts/{cartId}/collection-point/search-request
     * @param {string} cartId 
     * @param {TemandoShippingCollectionPointCartCollectionPointManagementV1SaveSearchRequestPutRequest} [temandoShippingCollectionPointGuestCartCollectionPointManagementV1SaveSearchRequestPutBody] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof GuestCartsCartIdCollectionPointSearchRequestApi
     */
    public temandoShippingCollectionPointGuestCartCollectionPointManagementV1SaveSearchRequestPut(cartId: string, temandoShippingCollectionPointGuestCartCollectionPointManagementV1SaveSearchRequestPutBody?: TemandoShippingCollectionPointCartCollectionPointManagementV1SaveSearchRequestPutRequest, options?: AxiosRequestConfig) {
        return GuestCartsCartIdCollectionPointSearchRequestApiFp(this.configuration).temandoShippingCollectionPointGuestCartCollectionPointManagementV1SaveSearchRequestPut(cartId, temandoShippingCollectionPointGuestCartCollectionPointManagementV1SaveSearchRequestPutBody, options).then((request) => request(this.axios, this.basePath));
    }
}


/**
 * GuestCartsCartIdCollectionPointSearchResultApi - axios parameter creator
 * @export
 */
export const GuestCartsCartIdCollectionPointSearchResultApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary guest-carts/{cartId}/collection-point/search-result
         * @param {string} cartId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        temandoShippingCollectionPointGuestCartCollectionPointManagementV1GetCollectionPointsGet: async (cartId: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'cartId' is not null or undefined
            assertParamExists('temandoShippingCollectionPointGuestCartCollectionPointManagementV1GetCollectionPointsGet', 'cartId', cartId)
            const localVarPath = `/V1/guest-carts/{cartId}/collection-point/search-result`
                .replace(`{${"cartId"}}`, encodeURIComponent(String(cartId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * GuestCartsCartIdCollectionPointSearchResultApi - functional programming interface
 * @export
 */
export const GuestCartsCartIdCollectionPointSearchResultApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = GuestCartsCartIdCollectionPointSearchResultApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @summary guest-carts/{cartId}/collection-point/search-result
         * @param {string} cartId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async temandoShippingCollectionPointGuestCartCollectionPointManagementV1GetCollectionPointsGet(cartId: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<TemandoShippingDataCollectionPointQuoteCollectionPointInterface>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.temandoShippingCollectionPointGuestCartCollectionPointManagementV1GetCollectionPointsGet(cartId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * GuestCartsCartIdCollectionPointSearchResultApi - factory interface
 * @export
 */
export const GuestCartsCartIdCollectionPointSearchResultApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = GuestCartsCartIdCollectionPointSearchResultApiFp(configuration)
    return {
        /**
         * 
         * @summary guest-carts/{cartId}/collection-point/search-result
         * @param {string} cartId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        temandoShippingCollectionPointGuestCartCollectionPointManagementV1GetCollectionPointsGet(cartId: string, options?: any): AxiosPromise<Array<TemandoShippingDataCollectionPointQuoteCollectionPointInterface>> {
            return localVarFp.temandoShippingCollectionPointGuestCartCollectionPointManagementV1GetCollectionPointsGet(cartId, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * GuestCartsCartIdCollectionPointSearchResultApi - object-oriented interface
 * @export
 * @class GuestCartsCartIdCollectionPointSearchResultApi
 * @extends {BaseAPI}
 */
export class GuestCartsCartIdCollectionPointSearchResultApi extends BaseAPI {
    /**
     * 
     * @summary guest-carts/{cartId}/collection-point/search-result
     * @param {string} cartId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof GuestCartsCartIdCollectionPointSearchResultApi
     */
    public temandoShippingCollectionPointGuestCartCollectionPointManagementV1GetCollectionPointsGet(cartId: string, options?: AxiosRequestConfig) {
        return GuestCartsCartIdCollectionPointSearchResultApiFp(this.configuration).temandoShippingCollectionPointGuestCartCollectionPointManagementV1GetCollectionPointsGet(cartId, options).then((request) => request(this.axios, this.basePath));
    }
}


/**
 * GuestCartsCartIdCollectionPointSelectApi - axios parameter creator
 * @export
 */
export const GuestCartsCartIdCollectionPointSelectApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary guest-carts/{cartId}/collection-point/select
         * @param {string} cartId 
         * @param {TemandoShippingCollectionPointCartCollectionPointManagementV1SelectCollectionPointPostRequest} [temandoShippingCollectionPointGuestCartCollectionPointManagementV1SelectCollectionPointPostBody] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        temandoShippingCollectionPointGuestCartCollectionPointManagementV1SelectCollectionPointPost: async (cartId: string, temandoShippingCollectionPointGuestCartCollectionPointManagementV1SelectCollectionPointPostBody?: TemandoShippingCollectionPointCartCollectionPointManagementV1SelectCollectionPointPostRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'cartId' is not null or undefined
            assertParamExists('temandoShippingCollectionPointGuestCartCollectionPointManagementV1SelectCollectionPointPost', 'cartId', cartId)
            const localVarPath = `/V1/guest-carts/{cartId}/collection-point/select`
                .replace(`{${"cartId"}}`, encodeURIComponent(String(cartId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(temandoShippingCollectionPointGuestCartCollectionPointManagementV1SelectCollectionPointPostBody, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * GuestCartsCartIdCollectionPointSelectApi - functional programming interface
 * @export
 */
export const GuestCartsCartIdCollectionPointSelectApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = GuestCartsCartIdCollectionPointSelectApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @summary guest-carts/{cartId}/collection-point/select
         * @param {string} cartId 
         * @param {TemandoShippingCollectionPointCartCollectionPointManagementV1SelectCollectionPointPostRequest} [temandoShippingCollectionPointGuestCartCollectionPointManagementV1SelectCollectionPointPostBody] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async temandoShippingCollectionPointGuestCartCollectionPointManagementV1SelectCollectionPointPost(cartId: string, temandoShippingCollectionPointGuestCartCollectionPointManagementV1SelectCollectionPointPostBody?: TemandoShippingCollectionPointCartCollectionPointManagementV1SelectCollectionPointPostRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<boolean>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.temandoShippingCollectionPointGuestCartCollectionPointManagementV1SelectCollectionPointPost(cartId, temandoShippingCollectionPointGuestCartCollectionPointManagementV1SelectCollectionPointPostBody, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * GuestCartsCartIdCollectionPointSelectApi - factory interface
 * @export
 */
export const GuestCartsCartIdCollectionPointSelectApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = GuestCartsCartIdCollectionPointSelectApiFp(configuration)
    return {
        /**
         * 
         * @summary guest-carts/{cartId}/collection-point/select
         * @param {string} cartId 
         * @param {TemandoShippingCollectionPointCartCollectionPointManagementV1SelectCollectionPointPostRequest} [temandoShippingCollectionPointGuestCartCollectionPointManagementV1SelectCollectionPointPostBody] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        temandoShippingCollectionPointGuestCartCollectionPointManagementV1SelectCollectionPointPost(cartId: string, temandoShippingCollectionPointGuestCartCollectionPointManagementV1SelectCollectionPointPostBody?: TemandoShippingCollectionPointCartCollectionPointManagementV1SelectCollectionPointPostRequest, options?: any): AxiosPromise<boolean> {
            return localVarFp.temandoShippingCollectionPointGuestCartCollectionPointManagementV1SelectCollectionPointPost(cartId, temandoShippingCollectionPointGuestCartCollectionPointManagementV1SelectCollectionPointPostBody, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * GuestCartsCartIdCollectionPointSelectApi - object-oriented interface
 * @export
 * @class GuestCartsCartIdCollectionPointSelectApi
 * @extends {BaseAPI}
 */
export class GuestCartsCartIdCollectionPointSelectApi extends BaseAPI {
    /**
     * 
     * @summary guest-carts/{cartId}/collection-point/select
     * @param {string} cartId 
     * @param {TemandoShippingCollectionPointCartCollectionPointManagementV1SelectCollectionPointPostRequest} [temandoShippingCollectionPointGuestCartCollectionPointManagementV1SelectCollectionPointPostBody] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof GuestCartsCartIdCollectionPointSelectApi
     */
    public temandoShippingCollectionPointGuestCartCollectionPointManagementV1SelectCollectionPointPost(cartId: string, temandoShippingCollectionPointGuestCartCollectionPointManagementV1SelectCollectionPointPostBody?: TemandoShippingCollectionPointCartCollectionPointManagementV1SelectCollectionPointPostRequest, options?: AxiosRequestConfig) {
        return GuestCartsCartIdCollectionPointSelectApiFp(this.configuration).temandoShippingCollectionPointGuestCartCollectionPointManagementV1SelectCollectionPointPost(cartId, temandoShippingCollectionPointGuestCartCollectionPointManagementV1SelectCollectionPointPostBody, options).then((request) => request(this.axios, this.basePath));
    }
}


/**
 * GuestCartsCartIdCouponsApi - axios parameter creator
 * @export
 */
export const GuestCartsCartIdCouponsApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Return information for a coupon in a specified cart.
         * @summary guest-carts/{cartId}/coupons
         * @param {string} cartId The cart ID.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        quoteGuestCouponManagementV1GetGet: async (cartId: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'cartId' is not null or undefined
            assertParamExists('quoteGuestCouponManagementV1GetGet', 'cartId', cartId)
            const localVarPath = `/V1/guest-carts/{cartId}/coupons`
                .replace(`{${"cartId"}}`, encodeURIComponent(String(cartId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Delete a coupon from a specified cart.
         * @summary guest-carts/{cartId}/coupons
         * @param {string} cartId The cart ID.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        quoteGuestCouponManagementV1RemoveDelete: async (cartId: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'cartId' is not null or undefined
            assertParamExists('quoteGuestCouponManagementV1RemoveDelete', 'cartId', cartId)
            const localVarPath = `/V1/guest-carts/{cartId}/coupons`
                .replace(`{${"cartId"}}`, encodeURIComponent(String(cartId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * GuestCartsCartIdCouponsApi - functional programming interface
 * @export
 */
export const GuestCartsCartIdCouponsApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = GuestCartsCartIdCouponsApiAxiosParamCreator(configuration)
    return {
        /**
         * Return information for a coupon in a specified cart.
         * @summary guest-carts/{cartId}/coupons
         * @param {string} cartId The cart ID.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async quoteGuestCouponManagementV1GetGet(cartId: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<string>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.quoteGuestCouponManagementV1GetGet(cartId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Delete a coupon from a specified cart.
         * @summary guest-carts/{cartId}/coupons
         * @param {string} cartId The cart ID.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async quoteGuestCouponManagementV1RemoveDelete(cartId: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<boolean>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.quoteGuestCouponManagementV1RemoveDelete(cartId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * GuestCartsCartIdCouponsApi - factory interface
 * @export
 */
export const GuestCartsCartIdCouponsApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = GuestCartsCartIdCouponsApiFp(configuration)
    return {
        /**
         * Return information for a coupon in a specified cart.
         * @summary guest-carts/{cartId}/coupons
         * @param {string} cartId The cart ID.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        quoteGuestCouponManagementV1GetGet(cartId: string, options?: any): AxiosPromise<string> {
            return localVarFp.quoteGuestCouponManagementV1GetGet(cartId, options).then((request) => request(axios, basePath));
        },
        /**
         * Delete a coupon from a specified cart.
         * @summary guest-carts/{cartId}/coupons
         * @param {string} cartId The cart ID.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        quoteGuestCouponManagementV1RemoveDelete(cartId: string, options?: any): AxiosPromise<boolean> {
            return localVarFp.quoteGuestCouponManagementV1RemoveDelete(cartId, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * GuestCartsCartIdCouponsApi - object-oriented interface
 * @export
 * @class GuestCartsCartIdCouponsApi
 * @extends {BaseAPI}
 */
export class GuestCartsCartIdCouponsApi extends BaseAPI {
    /**
     * Return information for a coupon in a specified cart.
     * @summary guest-carts/{cartId}/coupons
     * @param {string} cartId The cart ID.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof GuestCartsCartIdCouponsApi
     */
    public quoteGuestCouponManagementV1GetGet(cartId: string, options?: AxiosRequestConfig) {
        return GuestCartsCartIdCouponsApiFp(this.configuration).quoteGuestCouponManagementV1GetGet(cartId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Delete a coupon from a specified cart.
     * @summary guest-carts/{cartId}/coupons
     * @param {string} cartId The cart ID.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof GuestCartsCartIdCouponsApi
     */
    public quoteGuestCouponManagementV1RemoveDelete(cartId: string, options?: AxiosRequestConfig) {
        return GuestCartsCartIdCouponsApiFp(this.configuration).quoteGuestCouponManagementV1RemoveDelete(cartId, options).then((request) => request(this.axios, this.basePath));
    }
}


/**
 * GuestCartsCartIdCouponsCouponCodeApi - axios parameter creator
 * @export
 */
export const GuestCartsCartIdCouponsCouponCodeApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Add a coupon by code to a specified cart.
         * @summary guest-carts/{cartId}/coupons/{couponCode}
         * @param {string} cartId The cart ID.
         * @param {string} couponCode The coupon code data.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        quoteGuestCouponManagementV1SetPut: async (cartId: string, couponCode: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'cartId' is not null or undefined
            assertParamExists('quoteGuestCouponManagementV1SetPut', 'cartId', cartId)
            // verify required parameter 'couponCode' is not null or undefined
            assertParamExists('quoteGuestCouponManagementV1SetPut', 'couponCode', couponCode)
            const localVarPath = `/V1/guest-carts/{cartId}/coupons/{couponCode}`
                .replace(`{${"cartId"}}`, encodeURIComponent(String(cartId)))
                .replace(`{${"couponCode"}}`, encodeURIComponent(String(couponCode)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * GuestCartsCartIdCouponsCouponCodeApi - functional programming interface
 * @export
 */
export const GuestCartsCartIdCouponsCouponCodeApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = GuestCartsCartIdCouponsCouponCodeApiAxiosParamCreator(configuration)
    return {
        /**
         * Add a coupon by code to a specified cart.
         * @summary guest-carts/{cartId}/coupons/{couponCode}
         * @param {string} cartId The cart ID.
         * @param {string} couponCode The coupon code data.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async quoteGuestCouponManagementV1SetPut(cartId: string, couponCode: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<boolean>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.quoteGuestCouponManagementV1SetPut(cartId, couponCode, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * GuestCartsCartIdCouponsCouponCodeApi - factory interface
 * @export
 */
export const GuestCartsCartIdCouponsCouponCodeApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = GuestCartsCartIdCouponsCouponCodeApiFp(configuration)
    return {
        /**
         * Add a coupon by code to a specified cart.
         * @summary guest-carts/{cartId}/coupons/{couponCode}
         * @param {string} cartId The cart ID.
         * @param {string} couponCode The coupon code data.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        quoteGuestCouponManagementV1SetPut(cartId: string, couponCode: string, options?: any): AxiosPromise<boolean> {
            return localVarFp.quoteGuestCouponManagementV1SetPut(cartId, couponCode, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * GuestCartsCartIdCouponsCouponCodeApi - object-oriented interface
 * @export
 * @class GuestCartsCartIdCouponsCouponCodeApi
 * @extends {BaseAPI}
 */
export class GuestCartsCartIdCouponsCouponCodeApi extends BaseAPI {
    /**
     * Add a coupon by code to a specified cart.
     * @summary guest-carts/{cartId}/coupons/{couponCode}
     * @param {string} cartId The cart ID.
     * @param {string} couponCode The coupon code data.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof GuestCartsCartIdCouponsCouponCodeApi
     */
    public quoteGuestCouponManagementV1SetPut(cartId: string, couponCode: string, options?: AxiosRequestConfig) {
        return GuestCartsCartIdCouponsCouponCodeApiFp(this.configuration).quoteGuestCouponManagementV1SetPut(cartId, couponCode, options).then((request) => request(this.axios, this.basePath));
    }
}


/**
 * GuestCartsCartIdDeliveryOptionApi - axios parameter creator
 * @export
 */
export const GuestCartsCartIdDeliveryOptionApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Handle selected delivery option.
         * @summary guest-carts/{cartId}/delivery-option
         * @param {string} cartId The shopping cart ID.
         * @param {TemandoShippingQuoteCartDeliveryOptionManagementV1SavePostRequest} [temandoShippingQuoteGuestCartDeliveryOptionManagementV1SavePostBody] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        temandoShippingQuoteGuestCartDeliveryOptionManagementV1SavePost: async (cartId: string, temandoShippingQuoteGuestCartDeliveryOptionManagementV1SavePostBody?: TemandoShippingQuoteCartDeliveryOptionManagementV1SavePostRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'cartId' is not null or undefined
            assertParamExists('temandoShippingQuoteGuestCartDeliveryOptionManagementV1SavePost', 'cartId', cartId)
            const localVarPath = `/V1/guest-carts/{cartId}/delivery-option`
                .replace(`{${"cartId"}}`, encodeURIComponent(String(cartId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(temandoShippingQuoteGuestCartDeliveryOptionManagementV1SavePostBody, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * GuestCartsCartIdDeliveryOptionApi - functional programming interface
 * @export
 */
export const GuestCartsCartIdDeliveryOptionApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = GuestCartsCartIdDeliveryOptionApiAxiosParamCreator(configuration)
    return {
        /**
         * Handle selected delivery option.
         * @summary guest-carts/{cartId}/delivery-option
         * @param {string} cartId The shopping cart ID.
         * @param {TemandoShippingQuoteCartDeliveryOptionManagementV1SavePostRequest} [temandoShippingQuoteGuestCartDeliveryOptionManagementV1SavePostBody] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async temandoShippingQuoteGuestCartDeliveryOptionManagementV1SavePost(cartId: string, temandoShippingQuoteGuestCartDeliveryOptionManagementV1SavePostBody?: TemandoShippingQuoteCartDeliveryOptionManagementV1SavePostRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ErrorResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.temandoShippingQuoteGuestCartDeliveryOptionManagementV1SavePost(cartId, temandoShippingQuoteGuestCartDeliveryOptionManagementV1SavePostBody, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * GuestCartsCartIdDeliveryOptionApi - factory interface
 * @export
 */
export const GuestCartsCartIdDeliveryOptionApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = GuestCartsCartIdDeliveryOptionApiFp(configuration)
    return {
        /**
         * Handle selected delivery option.
         * @summary guest-carts/{cartId}/delivery-option
         * @param {string} cartId The shopping cart ID.
         * @param {TemandoShippingQuoteCartDeliveryOptionManagementV1SavePostRequest} [temandoShippingQuoteGuestCartDeliveryOptionManagementV1SavePostBody] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        temandoShippingQuoteGuestCartDeliveryOptionManagementV1SavePost(cartId: string, temandoShippingQuoteGuestCartDeliveryOptionManagementV1SavePostBody?: TemandoShippingQuoteCartDeliveryOptionManagementV1SavePostRequest, options?: any): AxiosPromise<ErrorResponse> {
            return localVarFp.temandoShippingQuoteGuestCartDeliveryOptionManagementV1SavePost(cartId, temandoShippingQuoteGuestCartDeliveryOptionManagementV1SavePostBody, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * GuestCartsCartIdDeliveryOptionApi - object-oriented interface
 * @export
 * @class GuestCartsCartIdDeliveryOptionApi
 * @extends {BaseAPI}
 */
export class GuestCartsCartIdDeliveryOptionApi extends BaseAPI {
    /**
     * Handle selected delivery option.
     * @summary guest-carts/{cartId}/delivery-option
     * @param {string} cartId The shopping cart ID.
     * @param {TemandoShippingQuoteCartDeliveryOptionManagementV1SavePostRequest} [temandoShippingQuoteGuestCartDeliveryOptionManagementV1SavePostBody] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof GuestCartsCartIdDeliveryOptionApi
     */
    public temandoShippingQuoteGuestCartDeliveryOptionManagementV1SavePost(cartId: string, temandoShippingQuoteGuestCartDeliveryOptionManagementV1SavePostBody?: TemandoShippingQuoteCartDeliveryOptionManagementV1SavePostRequest, options?: AxiosRequestConfig) {
        return GuestCartsCartIdDeliveryOptionApiFp(this.configuration).temandoShippingQuoteGuestCartDeliveryOptionManagementV1SavePost(cartId, temandoShippingQuoteGuestCartDeliveryOptionManagementV1SavePostBody, options).then((request) => request(this.axios, this.basePath));
    }
}


/**
 * GuestCartsCartIdEstimateShippingMethodsApi - axios parameter creator
 * @export
 */
export const GuestCartsCartIdEstimateShippingMethodsApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Estimate shipping by address and return list of available shipping methods
         * @summary guest-carts/{cartId}/estimate-shipping-methods
         * @param {string} cartId 
         * @param {QuoteShipmentEstimationV1EstimateByExtendedAddressPostRequest} [quoteGuestShipmentEstimationV1EstimateByExtendedAddressPostBody] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        quoteGuestShipmentEstimationV1EstimateByExtendedAddressPost: async (cartId: string, quoteGuestShipmentEstimationV1EstimateByExtendedAddressPostBody?: QuoteShipmentEstimationV1EstimateByExtendedAddressPostRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'cartId' is not null or undefined
            assertParamExists('quoteGuestShipmentEstimationV1EstimateByExtendedAddressPost', 'cartId', cartId)
            const localVarPath = `/V1/guest-carts/{cartId}/estimate-shipping-methods`
                .replace(`{${"cartId"}}`, encodeURIComponent(String(cartId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(quoteGuestShipmentEstimationV1EstimateByExtendedAddressPostBody, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * GuestCartsCartIdEstimateShippingMethodsApi - functional programming interface
 * @export
 */
export const GuestCartsCartIdEstimateShippingMethodsApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = GuestCartsCartIdEstimateShippingMethodsApiAxiosParamCreator(configuration)
    return {
        /**
         * Estimate shipping by address and return list of available shipping methods
         * @summary guest-carts/{cartId}/estimate-shipping-methods
         * @param {string} cartId 
         * @param {QuoteShipmentEstimationV1EstimateByExtendedAddressPostRequest} [quoteGuestShipmentEstimationV1EstimateByExtendedAddressPostBody] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async quoteGuestShipmentEstimationV1EstimateByExtendedAddressPost(cartId: string, quoteGuestShipmentEstimationV1EstimateByExtendedAddressPostBody?: QuoteShipmentEstimationV1EstimateByExtendedAddressPostRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<QuoteDataShippingMethodInterface>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.quoteGuestShipmentEstimationV1EstimateByExtendedAddressPost(cartId, quoteGuestShipmentEstimationV1EstimateByExtendedAddressPostBody, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * GuestCartsCartIdEstimateShippingMethodsApi - factory interface
 * @export
 */
export const GuestCartsCartIdEstimateShippingMethodsApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = GuestCartsCartIdEstimateShippingMethodsApiFp(configuration)
    return {
        /**
         * Estimate shipping by address and return list of available shipping methods
         * @summary guest-carts/{cartId}/estimate-shipping-methods
         * @param {string} cartId 
         * @param {QuoteShipmentEstimationV1EstimateByExtendedAddressPostRequest} [quoteGuestShipmentEstimationV1EstimateByExtendedAddressPostBody] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        quoteGuestShipmentEstimationV1EstimateByExtendedAddressPost(cartId: string, quoteGuestShipmentEstimationV1EstimateByExtendedAddressPostBody?: QuoteShipmentEstimationV1EstimateByExtendedAddressPostRequest, options?: any): AxiosPromise<Array<QuoteDataShippingMethodInterface>> {
            return localVarFp.quoteGuestShipmentEstimationV1EstimateByExtendedAddressPost(cartId, quoteGuestShipmentEstimationV1EstimateByExtendedAddressPostBody, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * GuestCartsCartIdEstimateShippingMethodsApi - object-oriented interface
 * @export
 * @class GuestCartsCartIdEstimateShippingMethodsApi
 * @extends {BaseAPI}
 */
export class GuestCartsCartIdEstimateShippingMethodsApi extends BaseAPI {
    /**
     * Estimate shipping by address and return list of available shipping methods
     * @summary guest-carts/{cartId}/estimate-shipping-methods
     * @param {string} cartId 
     * @param {QuoteShipmentEstimationV1EstimateByExtendedAddressPostRequest} [quoteGuestShipmentEstimationV1EstimateByExtendedAddressPostBody] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof GuestCartsCartIdEstimateShippingMethodsApi
     */
    public quoteGuestShipmentEstimationV1EstimateByExtendedAddressPost(cartId: string, quoteGuestShipmentEstimationV1EstimateByExtendedAddressPostBody?: QuoteShipmentEstimationV1EstimateByExtendedAddressPostRequest, options?: AxiosRequestConfig) {
        return GuestCartsCartIdEstimateShippingMethodsApiFp(this.configuration).quoteGuestShipmentEstimationV1EstimateByExtendedAddressPost(cartId, quoteGuestShipmentEstimationV1EstimateByExtendedAddressPostBody, options).then((request) => request(this.axios, this.basePath));
    }
}


/**
 * GuestCartsCartIdGiftMessageApi - axios parameter creator
 * @export
 */
export const GuestCartsCartIdGiftMessageApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Return the gift message for a specified order.
         * @summary guest-carts/{cartId}/gift-message
         * @param {string} cartId The shopping cart ID.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        giftMessageGuestCartRepositoryV1GetGet: async (cartId: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'cartId' is not null or undefined
            assertParamExists('giftMessageGuestCartRepositoryV1GetGet', 'cartId', cartId)
            const localVarPath = `/V1/guest-carts/{cartId}/gift-message`
                .replace(`{${"cartId"}}`, encodeURIComponent(String(cartId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Set the gift message for an entire order.
         * @summary guest-carts/{cartId}/gift-message
         * @param {string} cartId The cart ID.
         * @param {GiftMessageCartRepositoryV1SavePostRequest} [giftMessageGuestCartRepositoryV1SavePostBody] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        giftMessageGuestCartRepositoryV1SavePost: async (cartId: string, giftMessageGuestCartRepositoryV1SavePostBody?: GiftMessageCartRepositoryV1SavePostRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'cartId' is not null or undefined
            assertParamExists('giftMessageGuestCartRepositoryV1SavePost', 'cartId', cartId)
            const localVarPath = `/V1/guest-carts/{cartId}/gift-message`
                .replace(`{${"cartId"}}`, encodeURIComponent(String(cartId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(giftMessageGuestCartRepositoryV1SavePostBody, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * GuestCartsCartIdGiftMessageApi - functional programming interface
 * @export
 */
export const GuestCartsCartIdGiftMessageApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = GuestCartsCartIdGiftMessageApiAxiosParamCreator(configuration)
    return {
        /**
         * Return the gift message for a specified order.
         * @summary guest-carts/{cartId}/gift-message
         * @param {string} cartId The shopping cart ID.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async giftMessageGuestCartRepositoryV1GetGet(cartId: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<GiftMessageDataMessageInterface>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.giftMessageGuestCartRepositoryV1GetGet(cartId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Set the gift message for an entire order.
         * @summary guest-carts/{cartId}/gift-message
         * @param {string} cartId The cart ID.
         * @param {GiftMessageCartRepositoryV1SavePostRequest} [giftMessageGuestCartRepositoryV1SavePostBody] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async giftMessageGuestCartRepositoryV1SavePost(cartId: string, giftMessageGuestCartRepositoryV1SavePostBody?: GiftMessageCartRepositoryV1SavePostRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<boolean>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.giftMessageGuestCartRepositoryV1SavePost(cartId, giftMessageGuestCartRepositoryV1SavePostBody, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * GuestCartsCartIdGiftMessageApi - factory interface
 * @export
 */
export const GuestCartsCartIdGiftMessageApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = GuestCartsCartIdGiftMessageApiFp(configuration)
    return {
        /**
         * Return the gift message for a specified order.
         * @summary guest-carts/{cartId}/gift-message
         * @param {string} cartId The shopping cart ID.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        giftMessageGuestCartRepositoryV1GetGet(cartId: string, options?: any): AxiosPromise<GiftMessageDataMessageInterface> {
            return localVarFp.giftMessageGuestCartRepositoryV1GetGet(cartId, options).then((request) => request(axios, basePath));
        },
        /**
         * Set the gift message for an entire order.
         * @summary guest-carts/{cartId}/gift-message
         * @param {string} cartId The cart ID.
         * @param {GiftMessageCartRepositoryV1SavePostRequest} [giftMessageGuestCartRepositoryV1SavePostBody] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        giftMessageGuestCartRepositoryV1SavePost(cartId: string, giftMessageGuestCartRepositoryV1SavePostBody?: GiftMessageCartRepositoryV1SavePostRequest, options?: any): AxiosPromise<boolean> {
            return localVarFp.giftMessageGuestCartRepositoryV1SavePost(cartId, giftMessageGuestCartRepositoryV1SavePostBody, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * GuestCartsCartIdGiftMessageApi - object-oriented interface
 * @export
 * @class GuestCartsCartIdGiftMessageApi
 * @extends {BaseAPI}
 */
export class GuestCartsCartIdGiftMessageApi extends BaseAPI {
    /**
     * Return the gift message for a specified order.
     * @summary guest-carts/{cartId}/gift-message
     * @param {string} cartId The shopping cart ID.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof GuestCartsCartIdGiftMessageApi
     */
    public giftMessageGuestCartRepositoryV1GetGet(cartId: string, options?: AxiosRequestConfig) {
        return GuestCartsCartIdGiftMessageApiFp(this.configuration).giftMessageGuestCartRepositoryV1GetGet(cartId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Set the gift message for an entire order.
     * @summary guest-carts/{cartId}/gift-message
     * @param {string} cartId The cart ID.
     * @param {GiftMessageCartRepositoryV1SavePostRequest} [giftMessageGuestCartRepositoryV1SavePostBody] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof GuestCartsCartIdGiftMessageApi
     */
    public giftMessageGuestCartRepositoryV1SavePost(cartId: string, giftMessageGuestCartRepositoryV1SavePostBody?: GiftMessageCartRepositoryV1SavePostRequest, options?: AxiosRequestConfig) {
        return GuestCartsCartIdGiftMessageApiFp(this.configuration).giftMessageGuestCartRepositoryV1SavePost(cartId, giftMessageGuestCartRepositoryV1SavePostBody, options).then((request) => request(this.axios, this.basePath));
    }
}


/**
 * GuestCartsCartIdGiftMessageItemIdApi - axios parameter creator
 * @export
 */
export const GuestCartsCartIdGiftMessageItemIdApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Return the gift message for a specified item in a specified shopping cart.
         * @summary guest-carts/{cartId}/gift-message/{itemId}
         * @param {string} cartId The shopping cart ID.
         * @param {number} itemId The item ID.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        giftMessageGuestItemRepositoryV1GetGet: async (cartId: string, itemId: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'cartId' is not null or undefined
            assertParamExists('giftMessageGuestItemRepositoryV1GetGet', 'cartId', cartId)
            // verify required parameter 'itemId' is not null or undefined
            assertParamExists('giftMessageGuestItemRepositoryV1GetGet', 'itemId', itemId)
            const localVarPath = `/V1/guest-carts/{cartId}/gift-message/{itemId}`
                .replace(`{${"cartId"}}`, encodeURIComponent(String(cartId)))
                .replace(`{${"itemId"}}`, encodeURIComponent(String(itemId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Set the gift message for a specified item in a specified shopping cart.
         * @summary guest-carts/{cartId}/gift-message/{itemId}
         * @param {string} cartId The cart ID.
         * @param {number} itemId The item ID.
         * @param {GiftMessageCartRepositoryV1SavePostRequest} [giftMessageGuestItemRepositoryV1SavePostBody] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        giftMessageGuestItemRepositoryV1SavePost: async (cartId: string, itemId: number, giftMessageGuestItemRepositoryV1SavePostBody?: GiftMessageCartRepositoryV1SavePostRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'cartId' is not null or undefined
            assertParamExists('giftMessageGuestItemRepositoryV1SavePost', 'cartId', cartId)
            // verify required parameter 'itemId' is not null or undefined
            assertParamExists('giftMessageGuestItemRepositoryV1SavePost', 'itemId', itemId)
            const localVarPath = `/V1/guest-carts/{cartId}/gift-message/{itemId}`
                .replace(`{${"cartId"}}`, encodeURIComponent(String(cartId)))
                .replace(`{${"itemId"}}`, encodeURIComponent(String(itemId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(giftMessageGuestItemRepositoryV1SavePostBody, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * GuestCartsCartIdGiftMessageItemIdApi - functional programming interface
 * @export
 */
export const GuestCartsCartIdGiftMessageItemIdApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = GuestCartsCartIdGiftMessageItemIdApiAxiosParamCreator(configuration)
    return {
        /**
         * Return the gift message for a specified item in a specified shopping cart.
         * @summary guest-carts/{cartId}/gift-message/{itemId}
         * @param {string} cartId The shopping cart ID.
         * @param {number} itemId The item ID.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async giftMessageGuestItemRepositoryV1GetGet(cartId: string, itemId: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<GiftMessageDataMessageInterface>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.giftMessageGuestItemRepositoryV1GetGet(cartId, itemId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Set the gift message for a specified item in a specified shopping cart.
         * @summary guest-carts/{cartId}/gift-message/{itemId}
         * @param {string} cartId The cart ID.
         * @param {number} itemId The item ID.
         * @param {GiftMessageCartRepositoryV1SavePostRequest} [giftMessageGuestItemRepositoryV1SavePostBody] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async giftMessageGuestItemRepositoryV1SavePost(cartId: string, itemId: number, giftMessageGuestItemRepositoryV1SavePostBody?: GiftMessageCartRepositoryV1SavePostRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<boolean>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.giftMessageGuestItemRepositoryV1SavePost(cartId, itemId, giftMessageGuestItemRepositoryV1SavePostBody, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * GuestCartsCartIdGiftMessageItemIdApi - factory interface
 * @export
 */
export const GuestCartsCartIdGiftMessageItemIdApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = GuestCartsCartIdGiftMessageItemIdApiFp(configuration)
    return {
        /**
         * Return the gift message for a specified item in a specified shopping cart.
         * @summary guest-carts/{cartId}/gift-message/{itemId}
         * @param {string} cartId The shopping cart ID.
         * @param {number} itemId The item ID.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        giftMessageGuestItemRepositoryV1GetGet(cartId: string, itemId: number, options?: any): AxiosPromise<GiftMessageDataMessageInterface> {
            return localVarFp.giftMessageGuestItemRepositoryV1GetGet(cartId, itemId, options).then((request) => request(axios, basePath));
        },
        /**
         * Set the gift message for a specified item in a specified shopping cart.
         * @summary guest-carts/{cartId}/gift-message/{itemId}
         * @param {string} cartId The cart ID.
         * @param {number} itemId The item ID.
         * @param {GiftMessageCartRepositoryV1SavePostRequest} [giftMessageGuestItemRepositoryV1SavePostBody] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        giftMessageGuestItemRepositoryV1SavePost(cartId: string, itemId: number, giftMessageGuestItemRepositoryV1SavePostBody?: GiftMessageCartRepositoryV1SavePostRequest, options?: any): AxiosPromise<boolean> {
            return localVarFp.giftMessageGuestItemRepositoryV1SavePost(cartId, itemId, giftMessageGuestItemRepositoryV1SavePostBody, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * GuestCartsCartIdGiftMessageItemIdApi - object-oriented interface
 * @export
 * @class GuestCartsCartIdGiftMessageItemIdApi
 * @extends {BaseAPI}
 */
export class GuestCartsCartIdGiftMessageItemIdApi extends BaseAPI {
    /**
     * Return the gift message for a specified item in a specified shopping cart.
     * @summary guest-carts/{cartId}/gift-message/{itemId}
     * @param {string} cartId The shopping cart ID.
     * @param {number} itemId The item ID.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof GuestCartsCartIdGiftMessageItemIdApi
     */
    public giftMessageGuestItemRepositoryV1GetGet(cartId: string, itemId: number, options?: AxiosRequestConfig) {
        return GuestCartsCartIdGiftMessageItemIdApiFp(this.configuration).giftMessageGuestItemRepositoryV1GetGet(cartId, itemId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Set the gift message for a specified item in a specified shopping cart.
     * @summary guest-carts/{cartId}/gift-message/{itemId}
     * @param {string} cartId The cart ID.
     * @param {number} itemId The item ID.
     * @param {GiftMessageCartRepositoryV1SavePostRequest} [giftMessageGuestItemRepositoryV1SavePostBody] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof GuestCartsCartIdGiftMessageItemIdApi
     */
    public giftMessageGuestItemRepositoryV1SavePost(cartId: string, itemId: number, giftMessageGuestItemRepositoryV1SavePostBody?: GiftMessageCartRepositoryV1SavePostRequest, options?: AxiosRequestConfig) {
        return GuestCartsCartIdGiftMessageItemIdApiFp(this.configuration).giftMessageGuestItemRepositoryV1SavePost(cartId, itemId, giftMessageGuestItemRepositoryV1SavePostBody, options).then((request) => request(this.axios, this.basePath));
    }
}


/**
 * GuestCartsCartIdItemsApi - axios parameter creator
 * @export
 */
export const GuestCartsCartIdItemsApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * List items that are assigned to a specified cart.
         * @summary guest-carts/{cartId}/items
         * @param {string} cartId The cart ID.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        quoteGuestCartItemRepositoryV1GetListGet: async (cartId: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'cartId' is not null or undefined
            assertParamExists('quoteGuestCartItemRepositoryV1GetListGet', 'cartId', cartId)
            const localVarPath = `/V1/guest-carts/{cartId}/items`
                .replace(`{${"cartId"}}`, encodeURIComponent(String(cartId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Add/update the specified cart item.
         * @summary guest-carts/{cartId}/items
         * @param {string} cartId 
         * @param {QuoteCartItemRepositoryV1SavePostRequest} [quoteGuestCartItemRepositoryV1SavePostBody] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        quoteGuestCartItemRepositoryV1SavePost: async (cartId: string, quoteGuestCartItemRepositoryV1SavePostBody?: QuoteCartItemRepositoryV1SavePostRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'cartId' is not null or undefined
            assertParamExists('quoteGuestCartItemRepositoryV1SavePost', 'cartId', cartId)
            const localVarPath = `/V1/guest-carts/{cartId}/items`
                .replace(`{${"cartId"}}`, encodeURIComponent(String(cartId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(quoteGuestCartItemRepositoryV1SavePostBody, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * GuestCartsCartIdItemsApi - functional programming interface
 * @export
 */
export const GuestCartsCartIdItemsApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = GuestCartsCartIdItemsApiAxiosParamCreator(configuration)
    return {
        /**
         * List items that are assigned to a specified cart.
         * @summary guest-carts/{cartId}/items
         * @param {string} cartId The cart ID.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async quoteGuestCartItemRepositoryV1GetListGet(cartId: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<QuoteDataCartItemInterface>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.quoteGuestCartItemRepositoryV1GetListGet(cartId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Add/update the specified cart item.
         * @summary guest-carts/{cartId}/items
         * @param {string} cartId 
         * @param {QuoteCartItemRepositoryV1SavePostRequest} [quoteGuestCartItemRepositoryV1SavePostBody] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async quoteGuestCartItemRepositoryV1SavePost(cartId: string, quoteGuestCartItemRepositoryV1SavePostBody?: QuoteCartItemRepositoryV1SavePostRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<QuoteDataCartItemInterface>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.quoteGuestCartItemRepositoryV1SavePost(cartId, quoteGuestCartItemRepositoryV1SavePostBody, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * GuestCartsCartIdItemsApi - factory interface
 * @export
 */
export const GuestCartsCartIdItemsApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = GuestCartsCartIdItemsApiFp(configuration)
    return {
        /**
         * List items that are assigned to a specified cart.
         * @summary guest-carts/{cartId}/items
         * @param {string} cartId The cart ID.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        quoteGuestCartItemRepositoryV1GetListGet(cartId: string, options?: any): AxiosPromise<Array<QuoteDataCartItemInterface>> {
            return localVarFp.quoteGuestCartItemRepositoryV1GetListGet(cartId, options).then((request) => request(axios, basePath));
        },
        /**
         * Add/update the specified cart item.
         * @summary guest-carts/{cartId}/items
         * @param {string} cartId 
         * @param {QuoteCartItemRepositoryV1SavePostRequest} [quoteGuestCartItemRepositoryV1SavePostBody] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        quoteGuestCartItemRepositoryV1SavePost(cartId: string, quoteGuestCartItemRepositoryV1SavePostBody?: QuoteCartItemRepositoryV1SavePostRequest, options?: any): AxiosPromise<QuoteDataCartItemInterface> {
            return localVarFp.quoteGuestCartItemRepositoryV1SavePost(cartId, quoteGuestCartItemRepositoryV1SavePostBody, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * GuestCartsCartIdItemsApi - object-oriented interface
 * @export
 * @class GuestCartsCartIdItemsApi
 * @extends {BaseAPI}
 */
export class GuestCartsCartIdItemsApi extends BaseAPI {
    /**
     * List items that are assigned to a specified cart.
     * @summary guest-carts/{cartId}/items
     * @param {string} cartId The cart ID.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof GuestCartsCartIdItemsApi
     */
    public quoteGuestCartItemRepositoryV1GetListGet(cartId: string, options?: AxiosRequestConfig) {
        return GuestCartsCartIdItemsApiFp(this.configuration).quoteGuestCartItemRepositoryV1GetListGet(cartId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Add/update the specified cart item.
     * @summary guest-carts/{cartId}/items
     * @param {string} cartId 
     * @param {QuoteCartItemRepositoryV1SavePostRequest} [quoteGuestCartItemRepositoryV1SavePostBody] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof GuestCartsCartIdItemsApi
     */
    public quoteGuestCartItemRepositoryV1SavePost(cartId: string, quoteGuestCartItemRepositoryV1SavePostBody?: QuoteCartItemRepositoryV1SavePostRequest, options?: AxiosRequestConfig) {
        return GuestCartsCartIdItemsApiFp(this.configuration).quoteGuestCartItemRepositoryV1SavePost(cartId, quoteGuestCartItemRepositoryV1SavePostBody, options).then((request) => request(this.axios, this.basePath));
    }
}


/**
 * GuestCartsCartIdItemsItemIdApi - axios parameter creator
 * @export
 */
export const GuestCartsCartIdItemsItemIdApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Remove the specified item from the specified cart.
         * @summary guest-carts/{cartId}/items/{itemId}
         * @param {string} cartId The cart ID.
         * @param {number} itemId The item ID of the item to be removed.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        quoteGuestCartItemRepositoryV1DeleteByIdDelete: async (cartId: string, itemId: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'cartId' is not null or undefined
            assertParamExists('quoteGuestCartItemRepositoryV1DeleteByIdDelete', 'cartId', cartId)
            // verify required parameter 'itemId' is not null or undefined
            assertParamExists('quoteGuestCartItemRepositoryV1DeleteByIdDelete', 'itemId', itemId)
            const localVarPath = `/V1/guest-carts/{cartId}/items/{itemId}`
                .replace(`{${"cartId"}}`, encodeURIComponent(String(cartId)))
                .replace(`{${"itemId"}}`, encodeURIComponent(String(itemId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Add/update the specified cart item.
         * @summary guest-carts/{cartId}/items/{itemId}
         * @param {string} cartId 
         * @param {string} itemId 
         * @param {QuoteCartItemRepositoryV1SavePostRequest} [quoteGuestCartItemRepositoryV1SavePutBody] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        quoteGuestCartItemRepositoryV1SavePut: async (cartId: string, itemId: string, quoteGuestCartItemRepositoryV1SavePutBody?: QuoteCartItemRepositoryV1SavePostRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'cartId' is not null or undefined
            assertParamExists('quoteGuestCartItemRepositoryV1SavePut', 'cartId', cartId)
            // verify required parameter 'itemId' is not null or undefined
            assertParamExists('quoteGuestCartItemRepositoryV1SavePut', 'itemId', itemId)
            const localVarPath = `/V1/guest-carts/{cartId}/items/{itemId}`
                .replace(`{${"cartId"}}`, encodeURIComponent(String(cartId)))
                .replace(`{${"itemId"}}`, encodeURIComponent(String(itemId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(quoteGuestCartItemRepositoryV1SavePutBody, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * GuestCartsCartIdItemsItemIdApi - functional programming interface
 * @export
 */
export const GuestCartsCartIdItemsItemIdApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = GuestCartsCartIdItemsItemIdApiAxiosParamCreator(configuration)
    return {
        /**
         * Remove the specified item from the specified cart.
         * @summary guest-carts/{cartId}/items/{itemId}
         * @param {string} cartId The cart ID.
         * @param {number} itemId The item ID of the item to be removed.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async quoteGuestCartItemRepositoryV1DeleteByIdDelete(cartId: string, itemId: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<boolean>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.quoteGuestCartItemRepositoryV1DeleteByIdDelete(cartId, itemId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Add/update the specified cart item.
         * @summary guest-carts/{cartId}/items/{itemId}
         * @param {string} cartId 
         * @param {string} itemId 
         * @param {QuoteCartItemRepositoryV1SavePostRequest} [quoteGuestCartItemRepositoryV1SavePutBody] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async quoteGuestCartItemRepositoryV1SavePut(cartId: string, itemId: string, quoteGuestCartItemRepositoryV1SavePutBody?: QuoteCartItemRepositoryV1SavePostRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<QuoteDataCartItemInterface>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.quoteGuestCartItemRepositoryV1SavePut(cartId, itemId, quoteGuestCartItemRepositoryV1SavePutBody, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * GuestCartsCartIdItemsItemIdApi - factory interface
 * @export
 */
export const GuestCartsCartIdItemsItemIdApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = GuestCartsCartIdItemsItemIdApiFp(configuration)
    return {
        /**
         * Remove the specified item from the specified cart.
         * @summary guest-carts/{cartId}/items/{itemId}
         * @param {string} cartId The cart ID.
         * @param {number} itemId The item ID of the item to be removed.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        quoteGuestCartItemRepositoryV1DeleteByIdDelete(cartId: string, itemId: number, options?: any): AxiosPromise<boolean> {
            return localVarFp.quoteGuestCartItemRepositoryV1DeleteByIdDelete(cartId, itemId, options).then((request) => request(axios, basePath));
        },
        /**
         * Add/update the specified cart item.
         * @summary guest-carts/{cartId}/items/{itemId}
         * @param {string} cartId 
         * @param {string} itemId 
         * @param {QuoteCartItemRepositoryV1SavePostRequest} [quoteGuestCartItemRepositoryV1SavePutBody] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        quoteGuestCartItemRepositoryV1SavePut(cartId: string, itemId: string, quoteGuestCartItemRepositoryV1SavePutBody?: QuoteCartItemRepositoryV1SavePostRequest, options?: any): AxiosPromise<QuoteDataCartItemInterface> {
            return localVarFp.quoteGuestCartItemRepositoryV1SavePut(cartId, itemId, quoteGuestCartItemRepositoryV1SavePutBody, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * GuestCartsCartIdItemsItemIdApi - object-oriented interface
 * @export
 * @class GuestCartsCartIdItemsItemIdApi
 * @extends {BaseAPI}
 */
export class GuestCartsCartIdItemsItemIdApi extends BaseAPI {
    /**
     * Remove the specified item from the specified cart.
     * @summary guest-carts/{cartId}/items/{itemId}
     * @param {string} cartId The cart ID.
     * @param {number} itemId The item ID of the item to be removed.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof GuestCartsCartIdItemsItemIdApi
     */
    public quoteGuestCartItemRepositoryV1DeleteByIdDelete(cartId: string, itemId: number, options?: AxiosRequestConfig) {
        return GuestCartsCartIdItemsItemIdApiFp(this.configuration).quoteGuestCartItemRepositoryV1DeleteByIdDelete(cartId, itemId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Add/update the specified cart item.
     * @summary guest-carts/{cartId}/items/{itemId}
     * @param {string} cartId 
     * @param {string} itemId 
     * @param {QuoteCartItemRepositoryV1SavePostRequest} [quoteGuestCartItemRepositoryV1SavePutBody] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof GuestCartsCartIdItemsItemIdApi
     */
    public quoteGuestCartItemRepositoryV1SavePut(cartId: string, itemId: string, quoteGuestCartItemRepositoryV1SavePutBody?: QuoteCartItemRepositoryV1SavePostRequest, options?: AxiosRequestConfig) {
        return GuestCartsCartIdItemsItemIdApiFp(this.configuration).quoteGuestCartItemRepositoryV1SavePut(cartId, itemId, quoteGuestCartItemRepositoryV1SavePutBody, options).then((request) => request(this.axios, this.basePath));
    }
}


/**
 * GuestCartsCartIdOrderApi - axios parameter creator
 * @export
 */
export const GuestCartsCartIdOrderApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Place an order for a specified cart.
         * @summary guest-carts/{cartId}/order
         * @param {string} cartId The cart ID.
         * @param {QuoteCartManagementV1PlaceOrderPutRequest} [quoteGuestCartManagementV1PlaceOrderPutBody] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        quoteGuestCartManagementV1PlaceOrderPut: async (cartId: string, quoteGuestCartManagementV1PlaceOrderPutBody?: QuoteCartManagementV1PlaceOrderPutRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'cartId' is not null or undefined
            assertParamExists('quoteGuestCartManagementV1PlaceOrderPut', 'cartId', cartId)
            const localVarPath = `/V1/guest-carts/{cartId}/order`
                .replace(`{${"cartId"}}`, encodeURIComponent(String(cartId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(quoteGuestCartManagementV1PlaceOrderPutBody, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * GuestCartsCartIdOrderApi - functional programming interface
 * @export
 */
export const GuestCartsCartIdOrderApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = GuestCartsCartIdOrderApiAxiosParamCreator(configuration)
    return {
        /**
         * Place an order for a specified cart.
         * @summary guest-carts/{cartId}/order
         * @param {string} cartId The cart ID.
         * @param {QuoteCartManagementV1PlaceOrderPutRequest} [quoteGuestCartManagementV1PlaceOrderPutBody] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async quoteGuestCartManagementV1PlaceOrderPut(cartId: string, quoteGuestCartManagementV1PlaceOrderPutBody?: QuoteCartManagementV1PlaceOrderPutRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<number>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.quoteGuestCartManagementV1PlaceOrderPut(cartId, quoteGuestCartManagementV1PlaceOrderPutBody, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * GuestCartsCartIdOrderApi - factory interface
 * @export
 */
export const GuestCartsCartIdOrderApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = GuestCartsCartIdOrderApiFp(configuration)
    return {
        /**
         * Place an order for a specified cart.
         * @summary guest-carts/{cartId}/order
         * @param {string} cartId The cart ID.
         * @param {QuoteCartManagementV1PlaceOrderPutRequest} [quoteGuestCartManagementV1PlaceOrderPutBody] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        quoteGuestCartManagementV1PlaceOrderPut(cartId: string, quoteGuestCartManagementV1PlaceOrderPutBody?: QuoteCartManagementV1PlaceOrderPutRequest, options?: any): AxiosPromise<number> {
            return localVarFp.quoteGuestCartManagementV1PlaceOrderPut(cartId, quoteGuestCartManagementV1PlaceOrderPutBody, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * GuestCartsCartIdOrderApi - object-oriented interface
 * @export
 * @class GuestCartsCartIdOrderApi
 * @extends {BaseAPI}
 */
export class GuestCartsCartIdOrderApi extends BaseAPI {
    /**
     * Place an order for a specified cart.
     * @summary guest-carts/{cartId}/order
     * @param {string} cartId The cart ID.
     * @param {QuoteCartManagementV1PlaceOrderPutRequest} [quoteGuestCartManagementV1PlaceOrderPutBody] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof GuestCartsCartIdOrderApi
     */
    public quoteGuestCartManagementV1PlaceOrderPut(cartId: string, quoteGuestCartManagementV1PlaceOrderPutBody?: QuoteCartManagementV1PlaceOrderPutRequest, options?: AxiosRequestConfig) {
        return GuestCartsCartIdOrderApiFp(this.configuration).quoteGuestCartManagementV1PlaceOrderPut(cartId, quoteGuestCartManagementV1PlaceOrderPutBody, options).then((request) => request(this.axios, this.basePath));
    }
}


/**
 * GuestCartsCartIdPaymentInformationApi - axios parameter creator
 * @export
 */
export const GuestCartsCartIdPaymentInformationApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Get payment information
         * @summary guest-carts/{cartId}/payment-information
         * @param {string} cartId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        checkoutGuestPaymentInformationManagementV1GetPaymentInformationGet: async (cartId: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'cartId' is not null or undefined
            assertParamExists('checkoutGuestPaymentInformationManagementV1GetPaymentInformationGet', 'cartId', cartId)
            const localVarPath = `/V1/guest-carts/{cartId}/payment-information`
                .replace(`{${"cartId"}}`, encodeURIComponent(String(cartId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Set payment information and place order for a specified cart.
         * @summary guest-carts/{cartId}/payment-information
         * @param {string} cartId 
         * @param {CheckoutGuestPaymentInformationManagementV1SavePaymentInformationAndPlaceOrderPostRequest} [checkoutGuestPaymentInformationManagementV1SavePaymentInformationAndPlaceOrderPostBody] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        checkoutGuestPaymentInformationManagementV1SavePaymentInformationAndPlaceOrderPost: async (cartId: string, checkoutGuestPaymentInformationManagementV1SavePaymentInformationAndPlaceOrderPostBody?: CheckoutGuestPaymentInformationManagementV1SavePaymentInformationAndPlaceOrderPostRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'cartId' is not null or undefined
            assertParamExists('checkoutGuestPaymentInformationManagementV1SavePaymentInformationAndPlaceOrderPost', 'cartId', cartId)
            const localVarPath = `/V1/guest-carts/{cartId}/payment-information`
                .replace(`{${"cartId"}}`, encodeURIComponent(String(cartId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(checkoutGuestPaymentInformationManagementV1SavePaymentInformationAndPlaceOrderPostBody, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * GuestCartsCartIdPaymentInformationApi - functional programming interface
 * @export
 */
export const GuestCartsCartIdPaymentInformationApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = GuestCartsCartIdPaymentInformationApiAxiosParamCreator(configuration)
    return {
        /**
         * Get payment information
         * @summary guest-carts/{cartId}/payment-information
         * @param {string} cartId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async checkoutGuestPaymentInformationManagementV1GetPaymentInformationGet(cartId: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<CheckoutDataPaymentDetailsInterface>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.checkoutGuestPaymentInformationManagementV1GetPaymentInformationGet(cartId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Set payment information and place order for a specified cart.
         * @summary guest-carts/{cartId}/payment-information
         * @param {string} cartId 
         * @param {CheckoutGuestPaymentInformationManagementV1SavePaymentInformationAndPlaceOrderPostRequest} [checkoutGuestPaymentInformationManagementV1SavePaymentInformationAndPlaceOrderPostBody] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async checkoutGuestPaymentInformationManagementV1SavePaymentInformationAndPlaceOrderPost(cartId: string, checkoutGuestPaymentInformationManagementV1SavePaymentInformationAndPlaceOrderPostBody?: CheckoutGuestPaymentInformationManagementV1SavePaymentInformationAndPlaceOrderPostRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<number>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.checkoutGuestPaymentInformationManagementV1SavePaymentInformationAndPlaceOrderPost(cartId, checkoutGuestPaymentInformationManagementV1SavePaymentInformationAndPlaceOrderPostBody, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * GuestCartsCartIdPaymentInformationApi - factory interface
 * @export
 */
export const GuestCartsCartIdPaymentInformationApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = GuestCartsCartIdPaymentInformationApiFp(configuration)
    return {
        /**
         * Get payment information
         * @summary guest-carts/{cartId}/payment-information
         * @param {string} cartId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        checkoutGuestPaymentInformationManagementV1GetPaymentInformationGet(cartId: string, options?: any): AxiosPromise<CheckoutDataPaymentDetailsInterface> {
            return localVarFp.checkoutGuestPaymentInformationManagementV1GetPaymentInformationGet(cartId, options).then((request) => request(axios, basePath));
        },
        /**
         * Set payment information and place order for a specified cart.
         * @summary guest-carts/{cartId}/payment-information
         * @param {string} cartId 
         * @param {CheckoutGuestPaymentInformationManagementV1SavePaymentInformationAndPlaceOrderPostRequest} [checkoutGuestPaymentInformationManagementV1SavePaymentInformationAndPlaceOrderPostBody] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        checkoutGuestPaymentInformationManagementV1SavePaymentInformationAndPlaceOrderPost(cartId: string, checkoutGuestPaymentInformationManagementV1SavePaymentInformationAndPlaceOrderPostBody?: CheckoutGuestPaymentInformationManagementV1SavePaymentInformationAndPlaceOrderPostRequest, options?: any): AxiosPromise<number> {
            return localVarFp.checkoutGuestPaymentInformationManagementV1SavePaymentInformationAndPlaceOrderPost(cartId, checkoutGuestPaymentInformationManagementV1SavePaymentInformationAndPlaceOrderPostBody, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * GuestCartsCartIdPaymentInformationApi - object-oriented interface
 * @export
 * @class GuestCartsCartIdPaymentInformationApi
 * @extends {BaseAPI}
 */
export class GuestCartsCartIdPaymentInformationApi extends BaseAPI {
    /**
     * Get payment information
     * @summary guest-carts/{cartId}/payment-information
     * @param {string} cartId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof GuestCartsCartIdPaymentInformationApi
     */
    public checkoutGuestPaymentInformationManagementV1GetPaymentInformationGet(cartId: string, options?: AxiosRequestConfig) {
        return GuestCartsCartIdPaymentInformationApiFp(this.configuration).checkoutGuestPaymentInformationManagementV1GetPaymentInformationGet(cartId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Set payment information and place order for a specified cart.
     * @summary guest-carts/{cartId}/payment-information
     * @param {string} cartId 
     * @param {CheckoutGuestPaymentInformationManagementV1SavePaymentInformationAndPlaceOrderPostRequest} [checkoutGuestPaymentInformationManagementV1SavePaymentInformationAndPlaceOrderPostBody] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof GuestCartsCartIdPaymentInformationApi
     */
    public checkoutGuestPaymentInformationManagementV1SavePaymentInformationAndPlaceOrderPost(cartId: string, checkoutGuestPaymentInformationManagementV1SavePaymentInformationAndPlaceOrderPostBody?: CheckoutGuestPaymentInformationManagementV1SavePaymentInformationAndPlaceOrderPostRequest, options?: AxiosRequestConfig) {
        return GuestCartsCartIdPaymentInformationApiFp(this.configuration).checkoutGuestPaymentInformationManagementV1SavePaymentInformationAndPlaceOrderPost(cartId, checkoutGuestPaymentInformationManagementV1SavePaymentInformationAndPlaceOrderPostBody, options).then((request) => request(this.axios, this.basePath));
    }
}


/**
 * GuestCartsCartIdPaymentMethodsApi - axios parameter creator
 * @export
 */
export const GuestCartsCartIdPaymentMethodsApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * List available payment methods for a specified shopping cart. This call returns an array of objects, but detailed information about each object’s attributes might not be included.  See http://devdocs.magento.com/codelinks/attributes.html#GuestPaymentMethodManagementInterface to determine which call to use to get detailed information about all attributes for an object.
         * @summary guest-carts/{cartId}/payment-methods
         * @param {string} cartId The cart ID.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        quoteGuestPaymentMethodManagementV1GetListGet: async (cartId: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'cartId' is not null or undefined
            assertParamExists('quoteGuestPaymentMethodManagementV1GetListGet', 'cartId', cartId)
            const localVarPath = `/V1/guest-carts/{cartId}/payment-methods`
                .replace(`{${"cartId"}}`, encodeURIComponent(String(cartId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * GuestCartsCartIdPaymentMethodsApi - functional programming interface
 * @export
 */
export const GuestCartsCartIdPaymentMethodsApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = GuestCartsCartIdPaymentMethodsApiAxiosParamCreator(configuration)
    return {
        /**
         * List available payment methods for a specified shopping cart. This call returns an array of objects, but detailed information about each object’s attributes might not be included.  See http://devdocs.magento.com/codelinks/attributes.html#GuestPaymentMethodManagementInterface to determine which call to use to get detailed information about all attributes for an object.
         * @summary guest-carts/{cartId}/payment-methods
         * @param {string} cartId The cart ID.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async quoteGuestPaymentMethodManagementV1GetListGet(cartId: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<QuoteDataPaymentMethodInterface>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.quoteGuestPaymentMethodManagementV1GetListGet(cartId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * GuestCartsCartIdPaymentMethodsApi - factory interface
 * @export
 */
export const GuestCartsCartIdPaymentMethodsApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = GuestCartsCartIdPaymentMethodsApiFp(configuration)
    return {
        /**
         * List available payment methods for a specified shopping cart. This call returns an array of objects, but detailed information about each object’s attributes might not be included.  See http://devdocs.magento.com/codelinks/attributes.html#GuestPaymentMethodManagementInterface to determine which call to use to get detailed information about all attributes for an object.
         * @summary guest-carts/{cartId}/payment-methods
         * @param {string} cartId The cart ID.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        quoteGuestPaymentMethodManagementV1GetListGet(cartId: string, options?: any): AxiosPromise<Array<QuoteDataPaymentMethodInterface>> {
            return localVarFp.quoteGuestPaymentMethodManagementV1GetListGet(cartId, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * GuestCartsCartIdPaymentMethodsApi - object-oriented interface
 * @export
 * @class GuestCartsCartIdPaymentMethodsApi
 * @extends {BaseAPI}
 */
export class GuestCartsCartIdPaymentMethodsApi extends BaseAPI {
    /**
     * List available payment methods for a specified shopping cart. This call returns an array of objects, but detailed information about each object’s attributes might not be included.  See http://devdocs.magento.com/codelinks/attributes.html#GuestPaymentMethodManagementInterface to determine which call to use to get detailed information about all attributes for an object.
     * @summary guest-carts/{cartId}/payment-methods
     * @param {string} cartId The cart ID.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof GuestCartsCartIdPaymentMethodsApi
     */
    public quoteGuestPaymentMethodManagementV1GetListGet(cartId: string, options?: AxiosRequestConfig) {
        return GuestCartsCartIdPaymentMethodsApiFp(this.configuration).quoteGuestPaymentMethodManagementV1GetListGet(cartId, options).then((request) => request(this.axios, this.basePath));
    }
}


/**
 * GuestCartsCartIdSelectedPaymentMethodApi - axios parameter creator
 * @export
 */
export const GuestCartsCartIdSelectedPaymentMethodApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Return the payment method for a specified shopping cart.
         * @summary guest-carts/{cartId}/selected-payment-method
         * @param {string} cartId The cart ID.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        quoteGuestPaymentMethodManagementV1GetGet: async (cartId: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'cartId' is not null or undefined
            assertParamExists('quoteGuestPaymentMethodManagementV1GetGet', 'cartId', cartId)
            const localVarPath = `/V1/guest-carts/{cartId}/selected-payment-method`
                .replace(`{${"cartId"}}`, encodeURIComponent(String(cartId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Add a specified payment method to a specified shopping cart.
         * @summary guest-carts/{cartId}/selected-payment-method
         * @param {string} cartId The cart ID.
         * @param {QuotePaymentMethodManagementV1SetPutRequest} [quoteGuestPaymentMethodManagementV1SetPutBody] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        quoteGuestPaymentMethodManagementV1SetPut: async (cartId: string, quoteGuestPaymentMethodManagementV1SetPutBody?: QuotePaymentMethodManagementV1SetPutRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'cartId' is not null or undefined
            assertParamExists('quoteGuestPaymentMethodManagementV1SetPut', 'cartId', cartId)
            const localVarPath = `/V1/guest-carts/{cartId}/selected-payment-method`
                .replace(`{${"cartId"}}`, encodeURIComponent(String(cartId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(quoteGuestPaymentMethodManagementV1SetPutBody, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * GuestCartsCartIdSelectedPaymentMethodApi - functional programming interface
 * @export
 */
export const GuestCartsCartIdSelectedPaymentMethodApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = GuestCartsCartIdSelectedPaymentMethodApiAxiosParamCreator(configuration)
    return {
        /**
         * Return the payment method for a specified shopping cart.
         * @summary guest-carts/{cartId}/selected-payment-method
         * @param {string} cartId The cart ID.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async quoteGuestPaymentMethodManagementV1GetGet(cartId: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<QuoteDataPaymentInterface>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.quoteGuestPaymentMethodManagementV1GetGet(cartId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Add a specified payment method to a specified shopping cart.
         * @summary guest-carts/{cartId}/selected-payment-method
         * @param {string} cartId The cart ID.
         * @param {QuotePaymentMethodManagementV1SetPutRequest} [quoteGuestPaymentMethodManagementV1SetPutBody] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async quoteGuestPaymentMethodManagementV1SetPut(cartId: string, quoteGuestPaymentMethodManagementV1SetPutBody?: QuotePaymentMethodManagementV1SetPutRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<number>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.quoteGuestPaymentMethodManagementV1SetPut(cartId, quoteGuestPaymentMethodManagementV1SetPutBody, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * GuestCartsCartIdSelectedPaymentMethodApi - factory interface
 * @export
 */
export const GuestCartsCartIdSelectedPaymentMethodApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = GuestCartsCartIdSelectedPaymentMethodApiFp(configuration)
    return {
        /**
         * Return the payment method for a specified shopping cart.
         * @summary guest-carts/{cartId}/selected-payment-method
         * @param {string} cartId The cart ID.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        quoteGuestPaymentMethodManagementV1GetGet(cartId: string, options?: any): AxiosPromise<QuoteDataPaymentInterface> {
            return localVarFp.quoteGuestPaymentMethodManagementV1GetGet(cartId, options).then((request) => request(axios, basePath));
        },
        /**
         * Add a specified payment method to a specified shopping cart.
         * @summary guest-carts/{cartId}/selected-payment-method
         * @param {string} cartId The cart ID.
         * @param {QuotePaymentMethodManagementV1SetPutRequest} [quoteGuestPaymentMethodManagementV1SetPutBody] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        quoteGuestPaymentMethodManagementV1SetPut(cartId: string, quoteGuestPaymentMethodManagementV1SetPutBody?: QuotePaymentMethodManagementV1SetPutRequest, options?: any): AxiosPromise<number> {
            return localVarFp.quoteGuestPaymentMethodManagementV1SetPut(cartId, quoteGuestPaymentMethodManagementV1SetPutBody, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * GuestCartsCartIdSelectedPaymentMethodApi - object-oriented interface
 * @export
 * @class GuestCartsCartIdSelectedPaymentMethodApi
 * @extends {BaseAPI}
 */
export class GuestCartsCartIdSelectedPaymentMethodApi extends BaseAPI {
    /**
     * Return the payment method for a specified shopping cart.
     * @summary guest-carts/{cartId}/selected-payment-method
     * @param {string} cartId The cart ID.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof GuestCartsCartIdSelectedPaymentMethodApi
     */
    public quoteGuestPaymentMethodManagementV1GetGet(cartId: string, options?: AxiosRequestConfig) {
        return GuestCartsCartIdSelectedPaymentMethodApiFp(this.configuration).quoteGuestPaymentMethodManagementV1GetGet(cartId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Add a specified payment method to a specified shopping cart.
     * @summary guest-carts/{cartId}/selected-payment-method
     * @param {string} cartId The cart ID.
     * @param {QuotePaymentMethodManagementV1SetPutRequest} [quoteGuestPaymentMethodManagementV1SetPutBody] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof GuestCartsCartIdSelectedPaymentMethodApi
     */
    public quoteGuestPaymentMethodManagementV1SetPut(cartId: string, quoteGuestPaymentMethodManagementV1SetPutBody?: QuotePaymentMethodManagementV1SetPutRequest, options?: AxiosRequestConfig) {
        return GuestCartsCartIdSelectedPaymentMethodApiFp(this.configuration).quoteGuestPaymentMethodManagementV1SetPut(cartId, quoteGuestPaymentMethodManagementV1SetPutBody, options).then((request) => request(this.axios, this.basePath));
    }
}


/**
 * GuestCartsCartIdSetPaymentInformationApi - axios parameter creator
 * @export
 */
export const GuestCartsCartIdSetPaymentInformationApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Set payment information for a specified cart.
         * @summary guest-carts/{cartId}/set-payment-information
         * @param {string} cartId 
         * @param {CheckoutGuestPaymentInformationManagementV1SavePaymentInformationAndPlaceOrderPostRequest} [checkoutGuestPaymentInformationManagementV1SavePaymentInformationPostBody] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        checkoutGuestPaymentInformationManagementV1SavePaymentInformationPost: async (cartId: string, checkoutGuestPaymentInformationManagementV1SavePaymentInformationPostBody?: CheckoutGuestPaymentInformationManagementV1SavePaymentInformationAndPlaceOrderPostRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'cartId' is not null or undefined
            assertParamExists('checkoutGuestPaymentInformationManagementV1SavePaymentInformationPost', 'cartId', cartId)
            const localVarPath = `/V1/guest-carts/{cartId}/set-payment-information`
                .replace(`{${"cartId"}}`, encodeURIComponent(String(cartId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(checkoutGuestPaymentInformationManagementV1SavePaymentInformationPostBody, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * GuestCartsCartIdSetPaymentInformationApi - functional programming interface
 * @export
 */
export const GuestCartsCartIdSetPaymentInformationApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = GuestCartsCartIdSetPaymentInformationApiAxiosParamCreator(configuration)
    return {
        /**
         * Set payment information for a specified cart.
         * @summary guest-carts/{cartId}/set-payment-information
         * @param {string} cartId 
         * @param {CheckoutGuestPaymentInformationManagementV1SavePaymentInformationAndPlaceOrderPostRequest} [checkoutGuestPaymentInformationManagementV1SavePaymentInformationPostBody] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async checkoutGuestPaymentInformationManagementV1SavePaymentInformationPost(cartId: string, checkoutGuestPaymentInformationManagementV1SavePaymentInformationPostBody?: CheckoutGuestPaymentInformationManagementV1SavePaymentInformationAndPlaceOrderPostRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<number>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.checkoutGuestPaymentInformationManagementV1SavePaymentInformationPost(cartId, checkoutGuestPaymentInformationManagementV1SavePaymentInformationPostBody, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * GuestCartsCartIdSetPaymentInformationApi - factory interface
 * @export
 */
export const GuestCartsCartIdSetPaymentInformationApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = GuestCartsCartIdSetPaymentInformationApiFp(configuration)
    return {
        /**
         * Set payment information for a specified cart.
         * @summary guest-carts/{cartId}/set-payment-information
         * @param {string} cartId 
         * @param {CheckoutGuestPaymentInformationManagementV1SavePaymentInformationAndPlaceOrderPostRequest} [checkoutGuestPaymentInformationManagementV1SavePaymentInformationPostBody] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        checkoutGuestPaymentInformationManagementV1SavePaymentInformationPost(cartId: string, checkoutGuestPaymentInformationManagementV1SavePaymentInformationPostBody?: CheckoutGuestPaymentInformationManagementV1SavePaymentInformationAndPlaceOrderPostRequest, options?: any): AxiosPromise<number> {
            return localVarFp.checkoutGuestPaymentInformationManagementV1SavePaymentInformationPost(cartId, checkoutGuestPaymentInformationManagementV1SavePaymentInformationPostBody, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * GuestCartsCartIdSetPaymentInformationApi - object-oriented interface
 * @export
 * @class GuestCartsCartIdSetPaymentInformationApi
 * @extends {BaseAPI}
 */
export class GuestCartsCartIdSetPaymentInformationApi extends BaseAPI {
    /**
     * Set payment information for a specified cart.
     * @summary guest-carts/{cartId}/set-payment-information
     * @param {string} cartId 
     * @param {CheckoutGuestPaymentInformationManagementV1SavePaymentInformationAndPlaceOrderPostRequest} [checkoutGuestPaymentInformationManagementV1SavePaymentInformationPostBody] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof GuestCartsCartIdSetPaymentInformationApi
     */
    public checkoutGuestPaymentInformationManagementV1SavePaymentInformationPost(cartId: string, checkoutGuestPaymentInformationManagementV1SavePaymentInformationPostBody?: CheckoutGuestPaymentInformationManagementV1SavePaymentInformationAndPlaceOrderPostRequest, options?: AxiosRequestConfig) {
        return GuestCartsCartIdSetPaymentInformationApiFp(this.configuration).checkoutGuestPaymentInformationManagementV1SavePaymentInformationPost(cartId, checkoutGuestPaymentInformationManagementV1SavePaymentInformationPostBody, options).then((request) => request(this.axios, this.basePath));
    }
}


/**
 * GuestCartsCartIdShippingInformationApi - axios parameter creator
 * @export
 */
export const GuestCartsCartIdShippingInformationApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary guest-carts/{cartId}/shipping-information
         * @param {string} cartId 
         * @param {CheckoutShippingInformationManagementV1SaveAddressInformationPostRequest} [checkoutGuestShippingInformationManagementV1SaveAddressInformationPostBody] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        checkoutGuestShippingInformationManagementV1SaveAddressInformationPost: async (cartId: string, checkoutGuestShippingInformationManagementV1SaveAddressInformationPostBody?: CheckoutShippingInformationManagementV1SaveAddressInformationPostRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'cartId' is not null or undefined
            assertParamExists('checkoutGuestShippingInformationManagementV1SaveAddressInformationPost', 'cartId', cartId)
            const localVarPath = `/V1/guest-carts/{cartId}/shipping-information`
                .replace(`{${"cartId"}}`, encodeURIComponent(String(cartId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(checkoutGuestShippingInformationManagementV1SaveAddressInformationPostBody, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * GuestCartsCartIdShippingInformationApi - functional programming interface
 * @export
 */
export const GuestCartsCartIdShippingInformationApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = GuestCartsCartIdShippingInformationApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @summary guest-carts/{cartId}/shipping-information
         * @param {string} cartId 
         * @param {CheckoutShippingInformationManagementV1SaveAddressInformationPostRequest} [checkoutGuestShippingInformationManagementV1SaveAddressInformationPostBody] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async checkoutGuestShippingInformationManagementV1SaveAddressInformationPost(cartId: string, checkoutGuestShippingInformationManagementV1SaveAddressInformationPostBody?: CheckoutShippingInformationManagementV1SaveAddressInformationPostRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<CheckoutDataPaymentDetailsInterface>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.checkoutGuestShippingInformationManagementV1SaveAddressInformationPost(cartId, checkoutGuestShippingInformationManagementV1SaveAddressInformationPostBody, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * GuestCartsCartIdShippingInformationApi - factory interface
 * @export
 */
export const GuestCartsCartIdShippingInformationApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = GuestCartsCartIdShippingInformationApiFp(configuration)
    return {
        /**
         * 
         * @summary guest-carts/{cartId}/shipping-information
         * @param {string} cartId 
         * @param {CheckoutShippingInformationManagementV1SaveAddressInformationPostRequest} [checkoutGuestShippingInformationManagementV1SaveAddressInformationPostBody] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        checkoutGuestShippingInformationManagementV1SaveAddressInformationPost(cartId: string, checkoutGuestShippingInformationManagementV1SaveAddressInformationPostBody?: CheckoutShippingInformationManagementV1SaveAddressInformationPostRequest, options?: any): AxiosPromise<CheckoutDataPaymentDetailsInterface> {
            return localVarFp.checkoutGuestShippingInformationManagementV1SaveAddressInformationPost(cartId, checkoutGuestShippingInformationManagementV1SaveAddressInformationPostBody, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * GuestCartsCartIdShippingInformationApi - object-oriented interface
 * @export
 * @class GuestCartsCartIdShippingInformationApi
 * @extends {BaseAPI}
 */
export class GuestCartsCartIdShippingInformationApi extends BaseAPI {
    /**
     * 
     * @summary guest-carts/{cartId}/shipping-information
     * @param {string} cartId 
     * @param {CheckoutShippingInformationManagementV1SaveAddressInformationPostRequest} [checkoutGuestShippingInformationManagementV1SaveAddressInformationPostBody] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof GuestCartsCartIdShippingInformationApi
     */
    public checkoutGuestShippingInformationManagementV1SaveAddressInformationPost(cartId: string, checkoutGuestShippingInformationManagementV1SaveAddressInformationPostBody?: CheckoutShippingInformationManagementV1SaveAddressInformationPostRequest, options?: AxiosRequestConfig) {
        return GuestCartsCartIdShippingInformationApiFp(this.configuration).checkoutGuestShippingInformationManagementV1SaveAddressInformationPost(cartId, checkoutGuestShippingInformationManagementV1SaveAddressInformationPostBody, options).then((request) => request(this.axios, this.basePath));
    }
}


/**
 * GuestCartsCartIdShippingMethodsApi - axios parameter creator
 * @export
 */
export const GuestCartsCartIdShippingMethodsApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * List applicable shipping methods for a specified quote.
         * @summary guest-carts/{cartId}/shipping-methods
         * @param {string} cartId The shopping cart ID.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        quoteGuestShippingMethodManagementV1GetListGet: async (cartId: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'cartId' is not null or undefined
            assertParamExists('quoteGuestShippingMethodManagementV1GetListGet', 'cartId', cartId)
            const localVarPath = `/V1/guest-carts/{cartId}/shipping-methods`
                .replace(`{${"cartId"}}`, encodeURIComponent(String(cartId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * GuestCartsCartIdShippingMethodsApi - functional programming interface
 * @export
 */
export const GuestCartsCartIdShippingMethodsApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = GuestCartsCartIdShippingMethodsApiAxiosParamCreator(configuration)
    return {
        /**
         * List applicable shipping methods for a specified quote.
         * @summary guest-carts/{cartId}/shipping-methods
         * @param {string} cartId The shopping cart ID.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async quoteGuestShippingMethodManagementV1GetListGet(cartId: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<QuoteDataShippingMethodInterface>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.quoteGuestShippingMethodManagementV1GetListGet(cartId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * GuestCartsCartIdShippingMethodsApi - factory interface
 * @export
 */
export const GuestCartsCartIdShippingMethodsApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = GuestCartsCartIdShippingMethodsApiFp(configuration)
    return {
        /**
         * List applicable shipping methods for a specified quote.
         * @summary guest-carts/{cartId}/shipping-methods
         * @param {string} cartId The shopping cart ID.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        quoteGuestShippingMethodManagementV1GetListGet(cartId: string, options?: any): AxiosPromise<Array<QuoteDataShippingMethodInterface>> {
            return localVarFp.quoteGuestShippingMethodManagementV1GetListGet(cartId, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * GuestCartsCartIdShippingMethodsApi - object-oriented interface
 * @export
 * @class GuestCartsCartIdShippingMethodsApi
 * @extends {BaseAPI}
 */
export class GuestCartsCartIdShippingMethodsApi extends BaseAPI {
    /**
     * List applicable shipping methods for a specified quote.
     * @summary guest-carts/{cartId}/shipping-methods
     * @param {string} cartId The shopping cart ID.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof GuestCartsCartIdShippingMethodsApi
     */
    public quoteGuestShippingMethodManagementV1GetListGet(cartId: string, options?: AxiosRequestConfig) {
        return GuestCartsCartIdShippingMethodsApiFp(this.configuration).quoteGuestShippingMethodManagementV1GetListGet(cartId, options).then((request) => request(this.axios, this.basePath));
    }
}


/**
 * GuestCartsCartIdTotalsApi - axios parameter creator
 * @export
 */
export const GuestCartsCartIdTotalsApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Return quote totals data for a specified cart.
         * @summary guest-carts/{cartId}/totals
         * @param {string} cartId The cart ID.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        quoteGuestCartTotalRepositoryV1GetGet: async (cartId: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'cartId' is not null or undefined
            assertParamExists('quoteGuestCartTotalRepositoryV1GetGet', 'cartId', cartId)
            const localVarPath = `/V1/guest-carts/{cartId}/totals`
                .replace(`{${"cartId"}}`, encodeURIComponent(String(cartId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * GuestCartsCartIdTotalsApi - functional programming interface
 * @export
 */
export const GuestCartsCartIdTotalsApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = GuestCartsCartIdTotalsApiAxiosParamCreator(configuration)
    return {
        /**
         * Return quote totals data for a specified cart.
         * @summary guest-carts/{cartId}/totals
         * @param {string} cartId The cart ID.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async quoteGuestCartTotalRepositoryV1GetGet(cartId: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<QuoteDataTotalsInterface>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.quoteGuestCartTotalRepositoryV1GetGet(cartId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * GuestCartsCartIdTotalsApi - factory interface
 * @export
 */
export const GuestCartsCartIdTotalsApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = GuestCartsCartIdTotalsApiFp(configuration)
    return {
        /**
         * Return quote totals data for a specified cart.
         * @summary guest-carts/{cartId}/totals
         * @param {string} cartId The cart ID.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        quoteGuestCartTotalRepositoryV1GetGet(cartId: string, options?: any): AxiosPromise<QuoteDataTotalsInterface> {
            return localVarFp.quoteGuestCartTotalRepositoryV1GetGet(cartId, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * GuestCartsCartIdTotalsApi - object-oriented interface
 * @export
 * @class GuestCartsCartIdTotalsApi
 * @extends {BaseAPI}
 */
export class GuestCartsCartIdTotalsApi extends BaseAPI {
    /**
     * Return quote totals data for a specified cart.
     * @summary guest-carts/{cartId}/totals
     * @param {string} cartId The cart ID.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof GuestCartsCartIdTotalsApi
     */
    public quoteGuestCartTotalRepositoryV1GetGet(cartId: string, options?: AxiosRequestConfig) {
        return GuestCartsCartIdTotalsApiFp(this.configuration).quoteGuestCartTotalRepositoryV1GetGet(cartId, options).then((request) => request(this.axios, this.basePath));
    }
}


/**
 * GuestCartsCartIdTotalsInformationApi - axios parameter creator
 * @export
 */
export const GuestCartsCartIdTotalsInformationApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Calculate quote totals based on address and shipping method.
         * @summary guest-carts/{cartId}/totals-information
         * @param {string} cartId 
         * @param {CheckoutTotalsInformationManagementV1CalculatePostRequest} [checkoutGuestTotalsInformationManagementV1CalculatePostBody] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        checkoutGuestTotalsInformationManagementV1CalculatePost: async (cartId: string, checkoutGuestTotalsInformationManagementV1CalculatePostBody?: CheckoutTotalsInformationManagementV1CalculatePostRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'cartId' is not null or undefined
            assertParamExists('checkoutGuestTotalsInformationManagementV1CalculatePost', 'cartId', cartId)
            const localVarPath = `/V1/guest-carts/{cartId}/totals-information`
                .replace(`{${"cartId"}}`, encodeURIComponent(String(cartId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(checkoutGuestTotalsInformationManagementV1CalculatePostBody, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * GuestCartsCartIdTotalsInformationApi - functional programming interface
 * @export
 */
export const GuestCartsCartIdTotalsInformationApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = GuestCartsCartIdTotalsInformationApiAxiosParamCreator(configuration)
    return {
        /**
         * Calculate quote totals based on address and shipping method.
         * @summary guest-carts/{cartId}/totals-information
         * @param {string} cartId 
         * @param {CheckoutTotalsInformationManagementV1CalculatePostRequest} [checkoutGuestTotalsInformationManagementV1CalculatePostBody] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async checkoutGuestTotalsInformationManagementV1CalculatePost(cartId: string, checkoutGuestTotalsInformationManagementV1CalculatePostBody?: CheckoutTotalsInformationManagementV1CalculatePostRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<QuoteDataTotalsInterface>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.checkoutGuestTotalsInformationManagementV1CalculatePost(cartId, checkoutGuestTotalsInformationManagementV1CalculatePostBody, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * GuestCartsCartIdTotalsInformationApi - factory interface
 * @export
 */
export const GuestCartsCartIdTotalsInformationApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = GuestCartsCartIdTotalsInformationApiFp(configuration)
    return {
        /**
         * Calculate quote totals based on address and shipping method.
         * @summary guest-carts/{cartId}/totals-information
         * @param {string} cartId 
         * @param {CheckoutTotalsInformationManagementV1CalculatePostRequest} [checkoutGuestTotalsInformationManagementV1CalculatePostBody] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        checkoutGuestTotalsInformationManagementV1CalculatePost(cartId: string, checkoutGuestTotalsInformationManagementV1CalculatePostBody?: CheckoutTotalsInformationManagementV1CalculatePostRequest, options?: any): AxiosPromise<QuoteDataTotalsInterface> {
            return localVarFp.checkoutGuestTotalsInformationManagementV1CalculatePost(cartId, checkoutGuestTotalsInformationManagementV1CalculatePostBody, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * GuestCartsCartIdTotalsInformationApi - object-oriented interface
 * @export
 * @class GuestCartsCartIdTotalsInformationApi
 * @extends {BaseAPI}
 */
export class GuestCartsCartIdTotalsInformationApi extends BaseAPI {
    /**
     * Calculate quote totals based on address and shipping method.
     * @summary guest-carts/{cartId}/totals-information
     * @param {string} cartId 
     * @param {CheckoutTotalsInformationManagementV1CalculatePostRequest} [checkoutGuestTotalsInformationManagementV1CalculatePostBody] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof GuestCartsCartIdTotalsInformationApi
     */
    public checkoutGuestTotalsInformationManagementV1CalculatePost(cartId: string, checkoutGuestTotalsInformationManagementV1CalculatePostBody?: CheckoutTotalsInformationManagementV1CalculatePostRequest, options?: AxiosRequestConfig) {
        return GuestCartsCartIdTotalsInformationApiFp(this.configuration).checkoutGuestTotalsInformationManagementV1CalculatePost(cartId, checkoutGuestTotalsInformationManagementV1CalculatePostBody, options).then((request) => request(this.axios, this.basePath));
    }
}


/**
 * GuestGiftregistryCartIdEstimateShippingMethodsApi - axios parameter creator
 * @export
 */
export const GuestGiftregistryCartIdEstimateShippingMethodsApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Estimate shipping
         * @summary guest-giftregistry/{cartId}/estimate-shipping-methods
         * @param {string} cartId The shopping cart ID.
         * @param {GiftRegistryShippingMethodManagementV1EstimateByRegistryIdPostRequest} [giftRegistryGuestCartShippingMethodManagementV1EstimateByRegistryIdPostBody] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        giftRegistryGuestCartShippingMethodManagementV1EstimateByRegistryIdPost: async (cartId: string, giftRegistryGuestCartShippingMethodManagementV1EstimateByRegistryIdPostBody?: GiftRegistryShippingMethodManagementV1EstimateByRegistryIdPostRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'cartId' is not null or undefined
            assertParamExists('giftRegistryGuestCartShippingMethodManagementV1EstimateByRegistryIdPost', 'cartId', cartId)
            const localVarPath = `/V1/guest-giftregistry/{cartId}/estimate-shipping-methods`
                .replace(`{${"cartId"}}`, encodeURIComponent(String(cartId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(giftRegistryGuestCartShippingMethodManagementV1EstimateByRegistryIdPostBody, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * GuestGiftregistryCartIdEstimateShippingMethodsApi - functional programming interface
 * @export
 */
export const GuestGiftregistryCartIdEstimateShippingMethodsApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = GuestGiftregistryCartIdEstimateShippingMethodsApiAxiosParamCreator(configuration)
    return {
        /**
         * Estimate shipping
         * @summary guest-giftregistry/{cartId}/estimate-shipping-methods
         * @param {string} cartId The shopping cart ID.
         * @param {GiftRegistryShippingMethodManagementV1EstimateByRegistryIdPostRequest} [giftRegistryGuestCartShippingMethodManagementV1EstimateByRegistryIdPostBody] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async giftRegistryGuestCartShippingMethodManagementV1EstimateByRegistryIdPost(cartId: string, giftRegistryGuestCartShippingMethodManagementV1EstimateByRegistryIdPostBody?: GiftRegistryShippingMethodManagementV1EstimateByRegistryIdPostRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<QuoteDataShippingMethodInterface>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.giftRegistryGuestCartShippingMethodManagementV1EstimateByRegistryIdPost(cartId, giftRegistryGuestCartShippingMethodManagementV1EstimateByRegistryIdPostBody, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * GuestGiftregistryCartIdEstimateShippingMethodsApi - factory interface
 * @export
 */
export const GuestGiftregistryCartIdEstimateShippingMethodsApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = GuestGiftregistryCartIdEstimateShippingMethodsApiFp(configuration)
    return {
        /**
         * Estimate shipping
         * @summary guest-giftregistry/{cartId}/estimate-shipping-methods
         * @param {string} cartId The shopping cart ID.
         * @param {GiftRegistryShippingMethodManagementV1EstimateByRegistryIdPostRequest} [giftRegistryGuestCartShippingMethodManagementV1EstimateByRegistryIdPostBody] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        giftRegistryGuestCartShippingMethodManagementV1EstimateByRegistryIdPost(cartId: string, giftRegistryGuestCartShippingMethodManagementV1EstimateByRegistryIdPostBody?: GiftRegistryShippingMethodManagementV1EstimateByRegistryIdPostRequest, options?: any): AxiosPromise<Array<QuoteDataShippingMethodInterface>> {
            return localVarFp.giftRegistryGuestCartShippingMethodManagementV1EstimateByRegistryIdPost(cartId, giftRegistryGuestCartShippingMethodManagementV1EstimateByRegistryIdPostBody, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * GuestGiftregistryCartIdEstimateShippingMethodsApi - object-oriented interface
 * @export
 * @class GuestGiftregistryCartIdEstimateShippingMethodsApi
 * @extends {BaseAPI}
 */
export class GuestGiftregistryCartIdEstimateShippingMethodsApi extends BaseAPI {
    /**
     * Estimate shipping
     * @summary guest-giftregistry/{cartId}/estimate-shipping-methods
     * @param {string} cartId The shopping cart ID.
     * @param {GiftRegistryShippingMethodManagementV1EstimateByRegistryIdPostRequest} [giftRegistryGuestCartShippingMethodManagementV1EstimateByRegistryIdPostBody] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof GuestGiftregistryCartIdEstimateShippingMethodsApi
     */
    public giftRegistryGuestCartShippingMethodManagementV1EstimateByRegistryIdPost(cartId: string, giftRegistryGuestCartShippingMethodManagementV1EstimateByRegistryIdPostBody?: GiftRegistryShippingMethodManagementV1EstimateByRegistryIdPostRequest, options?: AxiosRequestConfig) {
        return GuestGiftregistryCartIdEstimateShippingMethodsApiFp(this.configuration).giftRegistryGuestCartShippingMethodManagementV1EstimateByRegistryIdPost(cartId, giftRegistryGuestCartShippingMethodManagementV1EstimateByRegistryIdPostBody, options).then((request) => request(this.axios, this.basePath));
    }
}


/**
 * HierarchyIdApi - axios parameter creator
 * @export
 */
export const HierarchyIdApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Returns the list of teams and company users in the company structure.
         * @summary hierarchy/{id}
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        companyCompanyHierarchyV1GetCompanyHierarchyGet: async (id: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('companyCompanyHierarchyV1GetCompanyHierarchyGet', 'id', id)
            const localVarPath = `/V1/hierarchy/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * HierarchyIdApi - functional programming interface
 * @export
 */
export const HierarchyIdApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = HierarchyIdApiAxiosParamCreator(configuration)
    return {
        /**
         * Returns the list of teams and company users in the company structure.
         * @summary hierarchy/{id}
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async companyCompanyHierarchyV1GetCompanyHierarchyGet(id: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<CompanyDataHierarchyInterface>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.companyCompanyHierarchyV1GetCompanyHierarchyGet(id, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * HierarchyIdApi - factory interface
 * @export
 */
export const HierarchyIdApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = HierarchyIdApiFp(configuration)
    return {
        /**
         * Returns the list of teams and company users in the company structure.
         * @summary hierarchy/{id}
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        companyCompanyHierarchyV1GetCompanyHierarchyGet(id: number, options?: any): AxiosPromise<Array<CompanyDataHierarchyInterface>> {
            return localVarFp.companyCompanyHierarchyV1GetCompanyHierarchyGet(id, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * HierarchyIdApi - object-oriented interface
 * @export
 * @class HierarchyIdApi
 * @extends {BaseAPI}
 */
export class HierarchyIdApi extends BaseAPI {
    /**
     * Returns the list of teams and company users in the company structure.
     * @summary hierarchy/{id}
     * @param {number} id 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof HierarchyIdApi
     */
    public companyCompanyHierarchyV1GetCompanyHierarchyGet(id: number, options?: AxiosRequestConfig) {
        return HierarchyIdApiFp(this.configuration).companyCompanyHierarchyV1GetCompanyHierarchyGet(id, options).then((request) => request(this.axios, this.basePath));
    }
}


/**
 * HierarchyMoveIdApi - axios parameter creator
 * @export
 */
export const HierarchyMoveIdApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Moves teams and users within the company structure.
         * @summary hierarchy/move/{id}
         * @param {number} id 
         * @param {CompanyCompanyHierarchyV1MoveNodePutRequest} [companyCompanyHierarchyV1MoveNodePutBody] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        companyCompanyHierarchyV1MoveNodePut: async (id: number, companyCompanyHierarchyV1MoveNodePutBody?: CompanyCompanyHierarchyV1MoveNodePutRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('companyCompanyHierarchyV1MoveNodePut', 'id', id)
            const localVarPath = `/V1/hierarchy/move/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(companyCompanyHierarchyV1MoveNodePutBody, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * HierarchyMoveIdApi - functional programming interface
 * @export
 */
export const HierarchyMoveIdApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = HierarchyMoveIdApiAxiosParamCreator(configuration)
    return {
        /**
         * Moves teams and users within the company structure.
         * @summary hierarchy/move/{id}
         * @param {number} id 
         * @param {CompanyCompanyHierarchyV1MoveNodePutRequest} [companyCompanyHierarchyV1MoveNodePutBody] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async companyCompanyHierarchyV1MoveNodePut(id: number, companyCompanyHierarchyV1MoveNodePutBody?: CompanyCompanyHierarchyV1MoveNodePutRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ErrorResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.companyCompanyHierarchyV1MoveNodePut(id, companyCompanyHierarchyV1MoveNodePutBody, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * HierarchyMoveIdApi - factory interface
 * @export
 */
export const HierarchyMoveIdApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = HierarchyMoveIdApiFp(configuration)
    return {
        /**
         * Moves teams and users within the company structure.
         * @summary hierarchy/move/{id}
         * @param {number} id 
         * @param {CompanyCompanyHierarchyV1MoveNodePutRequest} [companyCompanyHierarchyV1MoveNodePutBody] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        companyCompanyHierarchyV1MoveNodePut(id: number, companyCompanyHierarchyV1MoveNodePutBody?: CompanyCompanyHierarchyV1MoveNodePutRequest, options?: any): AxiosPromise<ErrorResponse> {
            return localVarFp.companyCompanyHierarchyV1MoveNodePut(id, companyCompanyHierarchyV1MoveNodePutBody, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * HierarchyMoveIdApi - object-oriented interface
 * @export
 * @class HierarchyMoveIdApi
 * @extends {BaseAPI}
 */
export class HierarchyMoveIdApi extends BaseAPI {
    /**
     * Moves teams and users within the company structure.
     * @summary hierarchy/move/{id}
     * @param {number} id 
     * @param {CompanyCompanyHierarchyV1MoveNodePutRequest} [companyCompanyHierarchyV1MoveNodePutBody] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof HierarchyMoveIdApi
     */
    public companyCompanyHierarchyV1MoveNodePut(id: number, companyCompanyHierarchyV1MoveNodePutBody?: CompanyCompanyHierarchyV1MoveNodePutRequest, options?: AxiosRequestConfig) {
        return HierarchyMoveIdApiFp(this.configuration).companyCompanyHierarchyV1MoveNodePut(id, companyCompanyHierarchyV1MoveNodePutBody, options).then((request) => request(this.axios, this.basePath));
    }
}


/**
 * IntegrationAdminTokenApi - axios parameter creator
 * @export
 */
export const IntegrationAdminTokenApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Create access token for admin given the admin credentials.
         * @summary integration/admin/token
         * @param {IntegrationAdminTokenServiceV1CreateAdminAccessTokenPostRequest} [integrationAdminTokenServiceV1CreateAdminAccessTokenPostBody] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        integrationAdminTokenServiceV1CreateAdminAccessTokenPost: async (integrationAdminTokenServiceV1CreateAdminAccessTokenPostBody?: IntegrationAdminTokenServiceV1CreateAdminAccessTokenPostRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/V1/integration/admin/token`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(integrationAdminTokenServiceV1CreateAdminAccessTokenPostBody, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * IntegrationAdminTokenApi - functional programming interface
 * @export
 */
export const IntegrationAdminTokenApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = IntegrationAdminTokenApiAxiosParamCreator(configuration)
    return {
        /**
         * Create access token for admin given the admin credentials.
         * @summary integration/admin/token
         * @param {IntegrationAdminTokenServiceV1CreateAdminAccessTokenPostRequest} [integrationAdminTokenServiceV1CreateAdminAccessTokenPostBody] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async integrationAdminTokenServiceV1CreateAdminAccessTokenPost(integrationAdminTokenServiceV1CreateAdminAccessTokenPostBody?: IntegrationAdminTokenServiceV1CreateAdminAccessTokenPostRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<string>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.integrationAdminTokenServiceV1CreateAdminAccessTokenPost(integrationAdminTokenServiceV1CreateAdminAccessTokenPostBody, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * IntegrationAdminTokenApi - factory interface
 * @export
 */
export const IntegrationAdminTokenApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = IntegrationAdminTokenApiFp(configuration)
    return {
        /**
         * Create access token for admin given the admin credentials.
         * @summary integration/admin/token
         * @param {IntegrationAdminTokenServiceV1CreateAdminAccessTokenPostRequest} [integrationAdminTokenServiceV1CreateAdminAccessTokenPostBody] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        integrationAdminTokenServiceV1CreateAdminAccessTokenPost(integrationAdminTokenServiceV1CreateAdminAccessTokenPostBody?: IntegrationAdminTokenServiceV1CreateAdminAccessTokenPostRequest, options?: any): AxiosPromise<string> {
            return localVarFp.integrationAdminTokenServiceV1CreateAdminAccessTokenPost(integrationAdminTokenServiceV1CreateAdminAccessTokenPostBody, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * IntegrationAdminTokenApi - object-oriented interface
 * @export
 * @class IntegrationAdminTokenApi
 * @extends {BaseAPI}
 */
export class IntegrationAdminTokenApi extends BaseAPI {
    /**
     * Create access token for admin given the admin credentials.
     * @summary integration/admin/token
     * @param {IntegrationAdminTokenServiceV1CreateAdminAccessTokenPostRequest} [integrationAdminTokenServiceV1CreateAdminAccessTokenPostBody] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof IntegrationAdminTokenApi
     */
    public integrationAdminTokenServiceV1CreateAdminAccessTokenPost(integrationAdminTokenServiceV1CreateAdminAccessTokenPostBody?: IntegrationAdminTokenServiceV1CreateAdminAccessTokenPostRequest, options?: AxiosRequestConfig) {
        return IntegrationAdminTokenApiFp(this.configuration).integrationAdminTokenServiceV1CreateAdminAccessTokenPost(integrationAdminTokenServiceV1CreateAdminAccessTokenPostBody, options).then((request) => request(this.axios, this.basePath));
    }
}


/**
 * IntegrationCustomerTokenApi - axios parameter creator
 * @export
 */
export const IntegrationCustomerTokenApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Create access token for admin given the customer credentials.
         * @summary integration/customer/token
         * @param {IntegrationAdminTokenServiceV1CreateAdminAccessTokenPostRequest} [integrationCustomerTokenServiceV1CreateCustomerAccessTokenPostBody] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        integrationCustomerTokenServiceV1CreateCustomerAccessTokenPost: async (integrationCustomerTokenServiceV1CreateCustomerAccessTokenPostBody?: IntegrationAdminTokenServiceV1CreateAdminAccessTokenPostRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/V1/integration/customer/token`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(integrationCustomerTokenServiceV1CreateCustomerAccessTokenPostBody, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * IntegrationCustomerTokenApi - functional programming interface
 * @export
 */
export const IntegrationCustomerTokenApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = IntegrationCustomerTokenApiAxiosParamCreator(configuration)
    return {
        /**
         * Create access token for admin given the customer credentials.
         * @summary integration/customer/token
         * @param {IntegrationAdminTokenServiceV1CreateAdminAccessTokenPostRequest} [integrationCustomerTokenServiceV1CreateCustomerAccessTokenPostBody] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async integrationCustomerTokenServiceV1CreateCustomerAccessTokenPost(integrationCustomerTokenServiceV1CreateCustomerAccessTokenPostBody?: IntegrationAdminTokenServiceV1CreateAdminAccessTokenPostRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<string>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.integrationCustomerTokenServiceV1CreateCustomerAccessTokenPost(integrationCustomerTokenServiceV1CreateCustomerAccessTokenPostBody, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * IntegrationCustomerTokenApi - factory interface
 * @export
 */
export const IntegrationCustomerTokenApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = IntegrationCustomerTokenApiFp(configuration)
    return {
        /**
         * Create access token for admin given the customer credentials.
         * @summary integration/customer/token
         * @param {IntegrationAdminTokenServiceV1CreateAdminAccessTokenPostRequest} [integrationCustomerTokenServiceV1CreateCustomerAccessTokenPostBody] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        integrationCustomerTokenServiceV1CreateCustomerAccessTokenPost(integrationCustomerTokenServiceV1CreateCustomerAccessTokenPostBody?: IntegrationAdminTokenServiceV1CreateAdminAccessTokenPostRequest, options?: any): AxiosPromise<string> {
            return localVarFp.integrationCustomerTokenServiceV1CreateCustomerAccessTokenPost(integrationCustomerTokenServiceV1CreateCustomerAccessTokenPostBody, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * IntegrationCustomerTokenApi - object-oriented interface
 * @export
 * @class IntegrationCustomerTokenApi
 * @extends {BaseAPI}
 */
export class IntegrationCustomerTokenApi extends BaseAPI {
    /**
     * Create access token for admin given the customer credentials.
     * @summary integration/customer/token
     * @param {IntegrationAdminTokenServiceV1CreateAdminAccessTokenPostRequest} [integrationCustomerTokenServiceV1CreateCustomerAccessTokenPostBody] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof IntegrationCustomerTokenApi
     */
    public integrationCustomerTokenServiceV1CreateCustomerAccessTokenPost(integrationCustomerTokenServiceV1CreateCustomerAccessTokenPostBody?: IntegrationAdminTokenServiceV1CreateAdminAccessTokenPostRequest, options?: AxiosRequestConfig) {
        return IntegrationCustomerTokenApiFp(this.configuration).integrationCustomerTokenServiceV1CreateCustomerAccessTokenPost(integrationCustomerTokenServiceV1CreateCustomerAccessTokenPostBody, options).then((request) => request(this.axios, this.basePath));
    }
}


/**
 * InvoiceInvoiceIdRefundApi - axios parameter creator
 * @export
 */
export const InvoiceInvoiceIdRefundApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Create refund for invoice
         * @summary invoice/{invoiceId}/refund
         * @param {number} invoiceId 
         * @param {SalesRefundInvoiceV1ExecutePostRequest} [salesRefundInvoiceV1ExecutePostBody] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        salesRefundInvoiceV1ExecutePost: async (invoiceId: number, salesRefundInvoiceV1ExecutePostBody?: SalesRefundInvoiceV1ExecutePostRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'invoiceId' is not null or undefined
            assertParamExists('salesRefundInvoiceV1ExecutePost', 'invoiceId', invoiceId)
            const localVarPath = `/V1/invoice/{invoiceId}/refund`
                .replace(`{${"invoiceId"}}`, encodeURIComponent(String(invoiceId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(salesRefundInvoiceV1ExecutePostBody, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * InvoiceInvoiceIdRefundApi - functional programming interface
 * @export
 */
export const InvoiceInvoiceIdRefundApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = InvoiceInvoiceIdRefundApiAxiosParamCreator(configuration)
    return {
        /**
         * Create refund for invoice
         * @summary invoice/{invoiceId}/refund
         * @param {number} invoiceId 
         * @param {SalesRefundInvoiceV1ExecutePostRequest} [salesRefundInvoiceV1ExecutePostBody] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async salesRefundInvoiceV1ExecutePost(invoiceId: number, salesRefundInvoiceV1ExecutePostBody?: SalesRefundInvoiceV1ExecutePostRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<number>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.salesRefundInvoiceV1ExecutePost(invoiceId, salesRefundInvoiceV1ExecutePostBody, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * InvoiceInvoiceIdRefundApi - factory interface
 * @export
 */
export const InvoiceInvoiceIdRefundApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = InvoiceInvoiceIdRefundApiFp(configuration)
    return {
        /**
         * Create refund for invoice
         * @summary invoice/{invoiceId}/refund
         * @param {number} invoiceId 
         * @param {SalesRefundInvoiceV1ExecutePostRequest} [salesRefundInvoiceV1ExecutePostBody] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        salesRefundInvoiceV1ExecutePost(invoiceId: number, salesRefundInvoiceV1ExecutePostBody?: SalesRefundInvoiceV1ExecutePostRequest, options?: any): AxiosPromise<number> {
            return localVarFp.salesRefundInvoiceV1ExecutePost(invoiceId, salesRefundInvoiceV1ExecutePostBody, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * InvoiceInvoiceIdRefundApi - object-oriented interface
 * @export
 * @class InvoiceInvoiceIdRefundApi
 * @extends {BaseAPI}
 */
export class InvoiceInvoiceIdRefundApi extends BaseAPI {
    /**
     * Create refund for invoice
     * @summary invoice/{invoiceId}/refund
     * @param {number} invoiceId 
     * @param {SalesRefundInvoiceV1ExecutePostRequest} [salesRefundInvoiceV1ExecutePostBody] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof InvoiceInvoiceIdRefundApi
     */
    public salesRefundInvoiceV1ExecutePost(invoiceId: number, salesRefundInvoiceV1ExecutePostBody?: SalesRefundInvoiceV1ExecutePostRequest, options?: AxiosRequestConfig) {
        return InvoiceInvoiceIdRefundApiFp(this.configuration).salesRefundInvoiceV1ExecutePost(invoiceId, salesRefundInvoiceV1ExecutePostBody, options).then((request) => request(this.axios, this.basePath));
    }
}


/**
 * InvoicesApi - axios parameter creator
 * @export
 */
export const InvoicesApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Lists invoices that match specified search criteria. This call returns an array of objects, but detailed information about each object’s attributes might not be included. See http://devdocs.magento.com/codelinks/attributes.html#InvoiceRepositoryInterface to determine which call to use to get detailed information about all attributes for an object.
         * @summary invoices
         * @param {string} [searchCriteriaFilterGroups0Filters0Field] Field
         * @param {string} [searchCriteriaFilterGroups0Filters0Value] Value
         * @param {string} [searchCriteriaFilterGroups0Filters0ConditionType] Condition type
         * @param {string} [searchCriteriaSortOrders0Field] Sorting field.
         * @param {string} [searchCriteriaSortOrders0Direction] Sorting direction.
         * @param {number} [searchCriteriaPageSize] Page size.
         * @param {number} [searchCriteriaCurrentPage] Current page.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        salesInvoiceRepositoryV1GetListGet: async (searchCriteriaFilterGroups0Filters0Field?: string, searchCriteriaFilterGroups0Filters0Value?: string, searchCriteriaFilterGroups0Filters0ConditionType?: string, searchCriteriaSortOrders0Field?: string, searchCriteriaSortOrders0Direction?: string, searchCriteriaPageSize?: number, searchCriteriaCurrentPage?: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/V1/invoices`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (searchCriteriaFilterGroups0Filters0Field !== undefined) {
                localVarQueryParameter['searchCriteria[filterGroups][0][filters][0][field]'] = searchCriteriaFilterGroups0Filters0Field;
            }

            if (searchCriteriaFilterGroups0Filters0Value !== undefined) {
                localVarQueryParameter['searchCriteria[filterGroups][0][filters][0][value]'] = searchCriteriaFilterGroups0Filters0Value;
            }

            if (searchCriteriaFilterGroups0Filters0ConditionType !== undefined) {
                localVarQueryParameter['searchCriteria[filterGroups][0][filters][0][conditionType]'] = searchCriteriaFilterGroups0Filters0ConditionType;
            }

            if (searchCriteriaSortOrders0Field !== undefined) {
                localVarQueryParameter['searchCriteria[sortOrders][0][field]'] = searchCriteriaSortOrders0Field;
            }

            if (searchCriteriaSortOrders0Direction !== undefined) {
                localVarQueryParameter['searchCriteria[sortOrders][0][direction]'] = searchCriteriaSortOrders0Direction;
            }

            if (searchCriteriaPageSize !== undefined) {
                localVarQueryParameter['searchCriteria[pageSize]'] = searchCriteriaPageSize;
            }

            if (searchCriteriaCurrentPage !== undefined) {
                localVarQueryParameter['searchCriteria[currentPage]'] = searchCriteriaCurrentPage;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Performs persist operations for a specified invoice.
         * @summary invoices/
         * @param {SalesInvoiceRepositoryV1SavePostRequest} [salesInvoiceRepositoryV1SavePostBody] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        salesInvoiceRepositoryV1SavePost: async (salesInvoiceRepositoryV1SavePostBody?: SalesInvoiceRepositoryV1SavePostRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/V1/invoices/`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(salesInvoiceRepositoryV1SavePostBody, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * InvoicesApi - functional programming interface
 * @export
 */
export const InvoicesApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = InvoicesApiAxiosParamCreator(configuration)
    return {
        /**
         * Lists invoices that match specified search criteria. This call returns an array of objects, but detailed information about each object’s attributes might not be included. See http://devdocs.magento.com/codelinks/attributes.html#InvoiceRepositoryInterface to determine which call to use to get detailed information about all attributes for an object.
         * @summary invoices
         * @param {string} [searchCriteriaFilterGroups0Filters0Field] Field
         * @param {string} [searchCriteriaFilterGroups0Filters0Value] Value
         * @param {string} [searchCriteriaFilterGroups0Filters0ConditionType] Condition type
         * @param {string} [searchCriteriaSortOrders0Field] Sorting field.
         * @param {string} [searchCriteriaSortOrders0Direction] Sorting direction.
         * @param {number} [searchCriteriaPageSize] Page size.
         * @param {number} [searchCriteriaCurrentPage] Current page.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async salesInvoiceRepositoryV1GetListGet(searchCriteriaFilterGroups0Filters0Field?: string, searchCriteriaFilterGroups0Filters0Value?: string, searchCriteriaFilterGroups0Filters0ConditionType?: string, searchCriteriaSortOrders0Field?: string, searchCriteriaSortOrders0Direction?: string, searchCriteriaPageSize?: number, searchCriteriaCurrentPage?: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<SalesDataInvoiceSearchResultInterface>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.salesInvoiceRepositoryV1GetListGet(searchCriteriaFilterGroups0Filters0Field, searchCriteriaFilterGroups0Filters0Value, searchCriteriaFilterGroups0Filters0ConditionType, searchCriteriaSortOrders0Field, searchCriteriaSortOrders0Direction, searchCriteriaPageSize, searchCriteriaCurrentPage, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Performs persist operations for a specified invoice.
         * @summary invoices/
         * @param {SalesInvoiceRepositoryV1SavePostRequest} [salesInvoiceRepositoryV1SavePostBody] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async salesInvoiceRepositoryV1SavePost(salesInvoiceRepositoryV1SavePostBody?: SalesInvoiceRepositoryV1SavePostRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<SalesDataInvoiceInterface>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.salesInvoiceRepositoryV1SavePost(salesInvoiceRepositoryV1SavePostBody, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * InvoicesApi - factory interface
 * @export
 */
export const InvoicesApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = InvoicesApiFp(configuration)
    return {
        /**
         * Lists invoices that match specified search criteria. This call returns an array of objects, but detailed information about each object’s attributes might not be included. See http://devdocs.magento.com/codelinks/attributes.html#InvoiceRepositoryInterface to determine which call to use to get detailed information about all attributes for an object.
         * @summary invoices
         * @param {string} [searchCriteriaFilterGroups0Filters0Field] Field
         * @param {string} [searchCriteriaFilterGroups0Filters0Value] Value
         * @param {string} [searchCriteriaFilterGroups0Filters0ConditionType] Condition type
         * @param {string} [searchCriteriaSortOrders0Field] Sorting field.
         * @param {string} [searchCriteriaSortOrders0Direction] Sorting direction.
         * @param {number} [searchCriteriaPageSize] Page size.
         * @param {number} [searchCriteriaCurrentPage] Current page.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        salesInvoiceRepositoryV1GetListGet(searchCriteriaFilterGroups0Filters0Field?: string, searchCriteriaFilterGroups0Filters0Value?: string, searchCriteriaFilterGroups0Filters0ConditionType?: string, searchCriteriaSortOrders0Field?: string, searchCriteriaSortOrders0Direction?: string, searchCriteriaPageSize?: number, searchCriteriaCurrentPage?: number, options?: any): AxiosPromise<SalesDataInvoiceSearchResultInterface> {
            return localVarFp.salesInvoiceRepositoryV1GetListGet(searchCriteriaFilterGroups0Filters0Field, searchCriteriaFilterGroups0Filters0Value, searchCriteriaFilterGroups0Filters0ConditionType, searchCriteriaSortOrders0Field, searchCriteriaSortOrders0Direction, searchCriteriaPageSize, searchCriteriaCurrentPage, options).then((request) => request(axios, basePath));
        },
        /**
         * Performs persist operations for a specified invoice.
         * @summary invoices/
         * @param {SalesInvoiceRepositoryV1SavePostRequest} [salesInvoiceRepositoryV1SavePostBody] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        salesInvoiceRepositoryV1SavePost(salesInvoiceRepositoryV1SavePostBody?: SalesInvoiceRepositoryV1SavePostRequest, options?: any): AxiosPromise<SalesDataInvoiceInterface> {
            return localVarFp.salesInvoiceRepositoryV1SavePost(salesInvoiceRepositoryV1SavePostBody, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * InvoicesApi - object-oriented interface
 * @export
 * @class InvoicesApi
 * @extends {BaseAPI}
 */
export class InvoicesApi extends BaseAPI {
    /**
     * Lists invoices that match specified search criteria. This call returns an array of objects, but detailed information about each object’s attributes might not be included. See http://devdocs.magento.com/codelinks/attributes.html#InvoiceRepositoryInterface to determine which call to use to get detailed information about all attributes for an object.
     * @summary invoices
     * @param {string} [searchCriteriaFilterGroups0Filters0Field] Field
     * @param {string} [searchCriteriaFilterGroups0Filters0Value] Value
     * @param {string} [searchCriteriaFilterGroups0Filters0ConditionType] Condition type
     * @param {string} [searchCriteriaSortOrders0Field] Sorting field.
     * @param {string} [searchCriteriaSortOrders0Direction] Sorting direction.
     * @param {number} [searchCriteriaPageSize] Page size.
     * @param {number} [searchCriteriaCurrentPage] Current page.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof InvoicesApi
     */
    public salesInvoiceRepositoryV1GetListGet(searchCriteriaFilterGroups0Filters0Field?: string, searchCriteriaFilterGroups0Filters0Value?: string, searchCriteriaFilterGroups0Filters0ConditionType?: string, searchCriteriaSortOrders0Field?: string, searchCriteriaSortOrders0Direction?: string, searchCriteriaPageSize?: number, searchCriteriaCurrentPage?: number, options?: AxiosRequestConfig) {
        return InvoicesApiFp(this.configuration).salesInvoiceRepositoryV1GetListGet(searchCriteriaFilterGroups0Filters0Field, searchCriteriaFilterGroups0Filters0Value, searchCriteriaFilterGroups0Filters0ConditionType, searchCriteriaSortOrders0Field, searchCriteriaSortOrders0Direction, searchCriteriaPageSize, searchCriteriaCurrentPage, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Performs persist operations for a specified invoice.
     * @summary invoices/
     * @param {SalesInvoiceRepositoryV1SavePostRequest} [salesInvoiceRepositoryV1SavePostBody] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof InvoicesApi
     */
    public salesInvoiceRepositoryV1SavePost(salesInvoiceRepositoryV1SavePostBody?: SalesInvoiceRepositoryV1SavePostRequest, options?: AxiosRequestConfig) {
        return InvoicesApiFp(this.configuration).salesInvoiceRepositoryV1SavePost(salesInvoiceRepositoryV1SavePostBody, options).then((request) => request(this.axios, this.basePath));
    }
}


/**
 * InvoicesCommentsApi - axios parameter creator
 * @export
 */
export const InvoicesCommentsApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Performs persist operations for a specified invoice comment.
         * @summary invoices/comments
         * @param {SalesInvoiceCommentRepositoryV1SavePostRequest} [salesInvoiceCommentRepositoryV1SavePostBody] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        salesInvoiceCommentRepositoryV1SavePost: async (salesInvoiceCommentRepositoryV1SavePostBody?: SalesInvoiceCommentRepositoryV1SavePostRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/V1/invoices/comments`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(salesInvoiceCommentRepositoryV1SavePostBody, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * InvoicesCommentsApi - functional programming interface
 * @export
 */
export const InvoicesCommentsApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = InvoicesCommentsApiAxiosParamCreator(configuration)
    return {
        /**
         * Performs persist operations for a specified invoice comment.
         * @summary invoices/comments
         * @param {SalesInvoiceCommentRepositoryV1SavePostRequest} [salesInvoiceCommentRepositoryV1SavePostBody] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async salesInvoiceCommentRepositoryV1SavePost(salesInvoiceCommentRepositoryV1SavePostBody?: SalesInvoiceCommentRepositoryV1SavePostRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<SalesDataInvoiceCommentInterface>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.salesInvoiceCommentRepositoryV1SavePost(salesInvoiceCommentRepositoryV1SavePostBody, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * InvoicesCommentsApi - factory interface
 * @export
 */
export const InvoicesCommentsApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = InvoicesCommentsApiFp(configuration)
    return {
        /**
         * Performs persist operations for a specified invoice comment.
         * @summary invoices/comments
         * @param {SalesInvoiceCommentRepositoryV1SavePostRequest} [salesInvoiceCommentRepositoryV1SavePostBody] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        salesInvoiceCommentRepositoryV1SavePost(salesInvoiceCommentRepositoryV1SavePostBody?: SalesInvoiceCommentRepositoryV1SavePostRequest, options?: any): AxiosPromise<SalesDataInvoiceCommentInterface> {
            return localVarFp.salesInvoiceCommentRepositoryV1SavePost(salesInvoiceCommentRepositoryV1SavePostBody, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * InvoicesCommentsApi - object-oriented interface
 * @export
 * @class InvoicesCommentsApi
 * @extends {BaseAPI}
 */
export class InvoicesCommentsApi extends BaseAPI {
    /**
     * Performs persist operations for a specified invoice comment.
     * @summary invoices/comments
     * @param {SalesInvoiceCommentRepositoryV1SavePostRequest} [salesInvoiceCommentRepositoryV1SavePostBody] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof InvoicesCommentsApi
     */
    public salesInvoiceCommentRepositoryV1SavePost(salesInvoiceCommentRepositoryV1SavePostBody?: SalesInvoiceCommentRepositoryV1SavePostRequest, options?: AxiosRequestConfig) {
        return InvoicesCommentsApiFp(this.configuration).salesInvoiceCommentRepositoryV1SavePost(salesInvoiceCommentRepositoryV1SavePostBody, options).then((request) => request(this.axios, this.basePath));
    }
}


/**
 * InvoicesIdApi - axios parameter creator
 * @export
 */
export const InvoicesIdApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Loads a specified invoice.
         * @summary invoices/{id}
         * @param {number} id The invoice ID.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        salesInvoiceRepositoryV1GetGet: async (id: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('salesInvoiceRepositoryV1GetGet', 'id', id)
            const localVarPath = `/V1/invoices/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * InvoicesIdApi - functional programming interface
 * @export
 */
export const InvoicesIdApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = InvoicesIdApiAxiosParamCreator(configuration)
    return {
        /**
         * Loads a specified invoice.
         * @summary invoices/{id}
         * @param {number} id The invoice ID.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async salesInvoiceRepositoryV1GetGet(id: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<SalesDataInvoiceInterface>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.salesInvoiceRepositoryV1GetGet(id, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * InvoicesIdApi - factory interface
 * @export
 */
export const InvoicesIdApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = InvoicesIdApiFp(configuration)
    return {
        /**
         * Loads a specified invoice.
         * @summary invoices/{id}
         * @param {number} id The invoice ID.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        salesInvoiceRepositoryV1GetGet(id: number, options?: any): AxiosPromise<SalesDataInvoiceInterface> {
            return localVarFp.salesInvoiceRepositoryV1GetGet(id, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * InvoicesIdApi - object-oriented interface
 * @export
 * @class InvoicesIdApi
 * @extends {BaseAPI}
 */
export class InvoicesIdApi extends BaseAPI {
    /**
     * Loads a specified invoice.
     * @summary invoices/{id}
     * @param {number} id The invoice ID.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof InvoicesIdApi
     */
    public salesInvoiceRepositoryV1GetGet(id: number, options?: AxiosRequestConfig) {
        return InvoicesIdApiFp(this.configuration).salesInvoiceRepositoryV1GetGet(id, options).then((request) => request(this.axios, this.basePath));
    }
}


/**
 * InvoicesIdCaptureApi - axios parameter creator
 * @export
 */
export const InvoicesIdCaptureApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Sets invoice capture.
         * @summary invoices/{id}/capture
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        salesInvoiceManagementV1SetCapturePost: async (id: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('salesInvoiceManagementV1SetCapturePost', 'id', id)
            const localVarPath = `/V1/invoices/{id}/capture`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * InvoicesIdCaptureApi - functional programming interface
 * @export
 */
export const InvoicesIdCaptureApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = InvoicesIdCaptureApiAxiosParamCreator(configuration)
    return {
        /**
         * Sets invoice capture.
         * @summary invoices/{id}/capture
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async salesInvoiceManagementV1SetCapturePost(id: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<string>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.salesInvoiceManagementV1SetCapturePost(id, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * InvoicesIdCaptureApi - factory interface
 * @export
 */
export const InvoicesIdCaptureApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = InvoicesIdCaptureApiFp(configuration)
    return {
        /**
         * Sets invoice capture.
         * @summary invoices/{id}/capture
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        salesInvoiceManagementV1SetCapturePost(id: number, options?: any): AxiosPromise<string> {
            return localVarFp.salesInvoiceManagementV1SetCapturePost(id, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * InvoicesIdCaptureApi - object-oriented interface
 * @export
 * @class InvoicesIdCaptureApi
 * @extends {BaseAPI}
 */
export class InvoicesIdCaptureApi extends BaseAPI {
    /**
     * Sets invoice capture.
     * @summary invoices/{id}/capture
     * @param {number} id 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof InvoicesIdCaptureApi
     */
    public salesInvoiceManagementV1SetCapturePost(id: number, options?: AxiosRequestConfig) {
        return InvoicesIdCaptureApiFp(this.configuration).salesInvoiceManagementV1SetCapturePost(id, options).then((request) => request(this.axios, this.basePath));
    }
}


/**
 * InvoicesIdCommentsApi - axios parameter creator
 * @export
 */
export const InvoicesIdCommentsApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Lists comments for a specified invoice.
         * @summary invoices/{id}/comments
         * @param {number} id The invoice ID.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        salesInvoiceManagementV1GetCommentsListGet: async (id: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('salesInvoiceManagementV1GetCommentsListGet', 'id', id)
            const localVarPath = `/V1/invoices/{id}/comments`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * InvoicesIdCommentsApi - functional programming interface
 * @export
 */
export const InvoicesIdCommentsApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = InvoicesIdCommentsApiAxiosParamCreator(configuration)
    return {
        /**
         * Lists comments for a specified invoice.
         * @summary invoices/{id}/comments
         * @param {number} id The invoice ID.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async salesInvoiceManagementV1GetCommentsListGet(id: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<SalesDataInvoiceCommentSearchResultInterface>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.salesInvoiceManagementV1GetCommentsListGet(id, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * InvoicesIdCommentsApi - factory interface
 * @export
 */
export const InvoicesIdCommentsApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = InvoicesIdCommentsApiFp(configuration)
    return {
        /**
         * Lists comments for a specified invoice.
         * @summary invoices/{id}/comments
         * @param {number} id The invoice ID.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        salesInvoiceManagementV1GetCommentsListGet(id: number, options?: any): AxiosPromise<SalesDataInvoiceCommentSearchResultInterface> {
            return localVarFp.salesInvoiceManagementV1GetCommentsListGet(id, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * InvoicesIdCommentsApi - object-oriented interface
 * @export
 * @class InvoicesIdCommentsApi
 * @extends {BaseAPI}
 */
export class InvoicesIdCommentsApi extends BaseAPI {
    /**
     * Lists comments for a specified invoice.
     * @summary invoices/{id}/comments
     * @param {number} id The invoice ID.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof InvoicesIdCommentsApi
     */
    public salesInvoiceManagementV1GetCommentsListGet(id: number, options?: AxiosRequestConfig) {
        return InvoicesIdCommentsApiFp(this.configuration).salesInvoiceManagementV1GetCommentsListGet(id, options).then((request) => request(this.axios, this.basePath));
    }
}


/**
 * InvoicesIdEmailsApi - axios parameter creator
 * @export
 */
export const InvoicesIdEmailsApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Emails a user a specified invoice.
         * @summary invoices/{id}/emails
         * @param {number} id The invoice ID.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        salesInvoiceManagementV1NotifyPost: async (id: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('salesInvoiceManagementV1NotifyPost', 'id', id)
            const localVarPath = `/V1/invoices/{id}/emails`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * InvoicesIdEmailsApi - functional programming interface
 * @export
 */
export const InvoicesIdEmailsApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = InvoicesIdEmailsApiAxiosParamCreator(configuration)
    return {
        /**
         * Emails a user a specified invoice.
         * @summary invoices/{id}/emails
         * @param {number} id The invoice ID.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async salesInvoiceManagementV1NotifyPost(id: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<boolean>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.salesInvoiceManagementV1NotifyPost(id, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * InvoicesIdEmailsApi - factory interface
 * @export
 */
export const InvoicesIdEmailsApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = InvoicesIdEmailsApiFp(configuration)
    return {
        /**
         * Emails a user a specified invoice.
         * @summary invoices/{id}/emails
         * @param {number} id The invoice ID.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        salesInvoiceManagementV1NotifyPost(id: number, options?: any): AxiosPromise<boolean> {
            return localVarFp.salesInvoiceManagementV1NotifyPost(id, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * InvoicesIdEmailsApi - object-oriented interface
 * @export
 * @class InvoicesIdEmailsApi
 * @extends {BaseAPI}
 */
export class InvoicesIdEmailsApi extends BaseAPI {
    /**
     * Emails a user a specified invoice.
     * @summary invoices/{id}/emails
     * @param {number} id The invoice ID.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof InvoicesIdEmailsApi
     */
    public salesInvoiceManagementV1NotifyPost(id: number, options?: AxiosRequestConfig) {
        return InvoicesIdEmailsApiFp(this.configuration).salesInvoiceManagementV1NotifyPost(id, options).then((request) => request(this.axios, this.basePath));
    }
}


/**
 * InvoicesIdVoidApi - axios parameter creator
 * @export
 */
export const InvoicesIdVoidApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Voids a specified invoice.
         * @summary invoices/{id}/void
         * @param {number} id The invoice ID.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        salesInvoiceManagementV1SetVoidPost: async (id: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('salesInvoiceManagementV1SetVoidPost', 'id', id)
            const localVarPath = `/V1/invoices/{id}/void`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * InvoicesIdVoidApi - functional programming interface
 * @export
 */
export const InvoicesIdVoidApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = InvoicesIdVoidApiAxiosParamCreator(configuration)
    return {
        /**
         * Voids a specified invoice.
         * @summary invoices/{id}/void
         * @param {number} id The invoice ID.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async salesInvoiceManagementV1SetVoidPost(id: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<boolean>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.salesInvoiceManagementV1SetVoidPost(id, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * InvoicesIdVoidApi - factory interface
 * @export
 */
export const InvoicesIdVoidApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = InvoicesIdVoidApiFp(configuration)
    return {
        /**
         * Voids a specified invoice.
         * @summary invoices/{id}/void
         * @param {number} id The invoice ID.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        salesInvoiceManagementV1SetVoidPost(id: number, options?: any): AxiosPromise<boolean> {
            return localVarFp.salesInvoiceManagementV1SetVoidPost(id, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * InvoicesIdVoidApi - object-oriented interface
 * @export
 * @class InvoicesIdVoidApi
 * @extends {BaseAPI}
 */
export class InvoicesIdVoidApi extends BaseAPI {
    /**
     * Voids a specified invoice.
     * @summary invoices/{id}/void
     * @param {number} id The invoice ID.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof InvoicesIdVoidApi
     */
    public salesInvoiceManagementV1SetVoidPost(id: number, options?: AxiosRequestConfig) {
        return InvoicesIdVoidApiFp(this.configuration).salesInvoiceManagementV1SetVoidPost(id, options).then((request) => request(this.axios, this.basePath));
    }
}


/**
 * ModulesApi - axios parameter creator
 * @export
 */
export const ModulesApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Returns an array of enabled modules
         * @summary modules
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        backendModuleServiceV1GetModulesGet: async (options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/V1/modules`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * ModulesApi - functional programming interface
 * @export
 */
export const ModulesApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = ModulesApiAxiosParamCreator(configuration)
    return {
        /**
         * Returns an array of enabled modules
         * @summary modules
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async backendModuleServiceV1GetModulesGet(options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<string>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.backendModuleServiceV1GetModulesGet(options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * ModulesApi - factory interface
 * @export
 */
export const ModulesApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = ModulesApiFp(configuration)
    return {
        /**
         * Returns an array of enabled modules
         * @summary modules
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        backendModuleServiceV1GetModulesGet(options?: any): AxiosPromise<Array<string>> {
            return localVarFp.backendModuleServiceV1GetModulesGet(options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * ModulesApi - object-oriented interface
 * @export
 * @class ModulesApi
 * @extends {BaseAPI}
 */
export class ModulesApi extends BaseAPI {
    /**
     * Returns an array of enabled modules
     * @summary modules
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ModulesApi
     */
    public backendModuleServiceV1GetModulesGet(options?: AxiosRequestConfig) {
        return ModulesApiFp(this.configuration).backendModuleServiceV1GetModulesGet(options).then((request) => request(this.axios, this.basePath));
    }
}


/**
 * NegotiableCartsCartIdBillingAddressApi - axios parameter creator
 * @export
 */
export const NegotiableCartsCartIdBillingAddressApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Assigns a specified billing address to a specified cart.
         * @summary negotiable-carts/{cartId}/billing-address
         * @param {number} cartId The cart ID.
         * @param {QuoteBillingAddressManagementV1AssignPostRequest} [negotiableQuoteBillingAddressManagementV1AssignPostBody] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        negotiableQuoteBillingAddressManagementV1AssignPost: async (cartId: number, negotiableQuoteBillingAddressManagementV1AssignPostBody?: QuoteBillingAddressManagementV1AssignPostRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'cartId' is not null or undefined
            assertParamExists('negotiableQuoteBillingAddressManagementV1AssignPost', 'cartId', cartId)
            const localVarPath = `/V1/negotiable-carts/{cartId}/billing-address`
                .replace(`{${"cartId"}}`, encodeURIComponent(String(cartId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(negotiableQuoteBillingAddressManagementV1AssignPostBody, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Returns the billing address for a specified quote.
         * @summary negotiable-carts/{cartId}/billing-address
         * @param {number} cartId The cart ID.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        negotiableQuoteBillingAddressManagementV1GetGet: async (cartId: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'cartId' is not null or undefined
            assertParamExists('negotiableQuoteBillingAddressManagementV1GetGet', 'cartId', cartId)
            const localVarPath = `/V1/negotiable-carts/{cartId}/billing-address`
                .replace(`{${"cartId"}}`, encodeURIComponent(String(cartId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * NegotiableCartsCartIdBillingAddressApi - functional programming interface
 * @export
 */
export const NegotiableCartsCartIdBillingAddressApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = NegotiableCartsCartIdBillingAddressApiAxiosParamCreator(configuration)
    return {
        /**
         * Assigns a specified billing address to a specified cart.
         * @summary negotiable-carts/{cartId}/billing-address
         * @param {number} cartId The cart ID.
         * @param {QuoteBillingAddressManagementV1AssignPostRequest} [negotiableQuoteBillingAddressManagementV1AssignPostBody] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async negotiableQuoteBillingAddressManagementV1AssignPost(cartId: number, negotiableQuoteBillingAddressManagementV1AssignPostBody?: QuoteBillingAddressManagementV1AssignPostRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<number>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.negotiableQuoteBillingAddressManagementV1AssignPost(cartId, negotiableQuoteBillingAddressManagementV1AssignPostBody, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Returns the billing address for a specified quote.
         * @summary negotiable-carts/{cartId}/billing-address
         * @param {number} cartId The cart ID.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async negotiableQuoteBillingAddressManagementV1GetGet(cartId: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<QuoteDataAddressInterface>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.negotiableQuoteBillingAddressManagementV1GetGet(cartId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * NegotiableCartsCartIdBillingAddressApi - factory interface
 * @export
 */
export const NegotiableCartsCartIdBillingAddressApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = NegotiableCartsCartIdBillingAddressApiFp(configuration)
    return {
        /**
         * Assigns a specified billing address to a specified cart.
         * @summary negotiable-carts/{cartId}/billing-address
         * @param {number} cartId The cart ID.
         * @param {QuoteBillingAddressManagementV1AssignPostRequest} [negotiableQuoteBillingAddressManagementV1AssignPostBody] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        negotiableQuoteBillingAddressManagementV1AssignPost(cartId: number, negotiableQuoteBillingAddressManagementV1AssignPostBody?: QuoteBillingAddressManagementV1AssignPostRequest, options?: any): AxiosPromise<number> {
            return localVarFp.negotiableQuoteBillingAddressManagementV1AssignPost(cartId, negotiableQuoteBillingAddressManagementV1AssignPostBody, options).then((request) => request(axios, basePath));
        },
        /**
         * Returns the billing address for a specified quote.
         * @summary negotiable-carts/{cartId}/billing-address
         * @param {number} cartId The cart ID.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        negotiableQuoteBillingAddressManagementV1GetGet(cartId: number, options?: any): AxiosPromise<QuoteDataAddressInterface> {
            return localVarFp.negotiableQuoteBillingAddressManagementV1GetGet(cartId, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * NegotiableCartsCartIdBillingAddressApi - object-oriented interface
 * @export
 * @class NegotiableCartsCartIdBillingAddressApi
 * @extends {BaseAPI}
 */
export class NegotiableCartsCartIdBillingAddressApi extends BaseAPI {
    /**
     * Assigns a specified billing address to a specified cart.
     * @summary negotiable-carts/{cartId}/billing-address
     * @param {number} cartId The cart ID.
     * @param {QuoteBillingAddressManagementV1AssignPostRequest} [negotiableQuoteBillingAddressManagementV1AssignPostBody] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof NegotiableCartsCartIdBillingAddressApi
     */
    public negotiableQuoteBillingAddressManagementV1AssignPost(cartId: number, negotiableQuoteBillingAddressManagementV1AssignPostBody?: QuoteBillingAddressManagementV1AssignPostRequest, options?: AxiosRequestConfig) {
        return NegotiableCartsCartIdBillingAddressApiFp(this.configuration).negotiableQuoteBillingAddressManagementV1AssignPost(cartId, negotiableQuoteBillingAddressManagementV1AssignPostBody, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Returns the billing address for a specified quote.
     * @summary negotiable-carts/{cartId}/billing-address
     * @param {number} cartId The cart ID.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof NegotiableCartsCartIdBillingAddressApi
     */
    public negotiableQuoteBillingAddressManagementV1GetGet(cartId: number, options?: AxiosRequestConfig) {
        return NegotiableCartsCartIdBillingAddressApiFp(this.configuration).negotiableQuoteBillingAddressManagementV1GetGet(cartId, options).then((request) => request(this.axios, this.basePath));
    }
}


/**
 * NegotiableCartsCartIdCouponsApi - axios parameter creator
 * @export
 */
export const NegotiableCartsCartIdCouponsApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Deletes a coupon from a specified cart.
         * @summary negotiable-carts/{cartId}/coupons
         * @param {number} cartId The cart ID.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        negotiableQuoteCouponManagementV1RemoveDelete: async (cartId: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'cartId' is not null or undefined
            assertParamExists('negotiableQuoteCouponManagementV1RemoveDelete', 'cartId', cartId)
            const localVarPath = `/V1/negotiable-carts/{cartId}/coupons`
                .replace(`{${"cartId"}}`, encodeURIComponent(String(cartId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * NegotiableCartsCartIdCouponsApi - functional programming interface
 * @export
 */
export const NegotiableCartsCartIdCouponsApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = NegotiableCartsCartIdCouponsApiAxiosParamCreator(configuration)
    return {
        /**
         * Deletes a coupon from a specified cart.
         * @summary negotiable-carts/{cartId}/coupons
         * @param {number} cartId The cart ID.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async negotiableQuoteCouponManagementV1RemoveDelete(cartId: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<boolean>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.negotiableQuoteCouponManagementV1RemoveDelete(cartId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * NegotiableCartsCartIdCouponsApi - factory interface
 * @export
 */
export const NegotiableCartsCartIdCouponsApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = NegotiableCartsCartIdCouponsApiFp(configuration)
    return {
        /**
         * Deletes a coupon from a specified cart.
         * @summary negotiable-carts/{cartId}/coupons
         * @param {number} cartId The cart ID.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        negotiableQuoteCouponManagementV1RemoveDelete(cartId: number, options?: any): AxiosPromise<boolean> {
            return localVarFp.negotiableQuoteCouponManagementV1RemoveDelete(cartId, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * NegotiableCartsCartIdCouponsApi - object-oriented interface
 * @export
 * @class NegotiableCartsCartIdCouponsApi
 * @extends {BaseAPI}
 */
export class NegotiableCartsCartIdCouponsApi extends BaseAPI {
    /**
     * Deletes a coupon from a specified cart.
     * @summary negotiable-carts/{cartId}/coupons
     * @param {number} cartId The cart ID.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof NegotiableCartsCartIdCouponsApi
     */
    public negotiableQuoteCouponManagementV1RemoveDelete(cartId: number, options?: AxiosRequestConfig) {
        return NegotiableCartsCartIdCouponsApiFp(this.configuration).negotiableQuoteCouponManagementV1RemoveDelete(cartId, options).then((request) => request(this.axios, this.basePath));
    }
}


/**
 * NegotiableCartsCartIdCouponsCouponCodeApi - axios parameter creator
 * @export
 */
export const NegotiableCartsCartIdCouponsCouponCodeApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Adds a coupon by code to a specified cart.
         * @summary negotiable-carts/{cartId}/coupons/{couponCode}
         * @param {number} cartId The cart ID.
         * @param {string} couponCode The coupon code data.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        negotiableQuoteCouponManagementV1SetPut: async (cartId: number, couponCode: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'cartId' is not null or undefined
            assertParamExists('negotiableQuoteCouponManagementV1SetPut', 'cartId', cartId)
            // verify required parameter 'couponCode' is not null or undefined
            assertParamExists('negotiableQuoteCouponManagementV1SetPut', 'couponCode', couponCode)
            const localVarPath = `/V1/negotiable-carts/{cartId}/coupons/{couponCode}`
                .replace(`{${"cartId"}}`, encodeURIComponent(String(cartId)))
                .replace(`{${"couponCode"}}`, encodeURIComponent(String(couponCode)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * NegotiableCartsCartIdCouponsCouponCodeApi - functional programming interface
 * @export
 */
export const NegotiableCartsCartIdCouponsCouponCodeApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = NegotiableCartsCartIdCouponsCouponCodeApiAxiosParamCreator(configuration)
    return {
        /**
         * Adds a coupon by code to a specified cart.
         * @summary negotiable-carts/{cartId}/coupons/{couponCode}
         * @param {number} cartId The cart ID.
         * @param {string} couponCode The coupon code data.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async negotiableQuoteCouponManagementV1SetPut(cartId: number, couponCode: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<boolean>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.negotiableQuoteCouponManagementV1SetPut(cartId, couponCode, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * NegotiableCartsCartIdCouponsCouponCodeApi - factory interface
 * @export
 */
export const NegotiableCartsCartIdCouponsCouponCodeApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = NegotiableCartsCartIdCouponsCouponCodeApiFp(configuration)
    return {
        /**
         * Adds a coupon by code to a specified cart.
         * @summary negotiable-carts/{cartId}/coupons/{couponCode}
         * @param {number} cartId The cart ID.
         * @param {string} couponCode The coupon code data.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        negotiableQuoteCouponManagementV1SetPut(cartId: number, couponCode: string, options?: any): AxiosPromise<boolean> {
            return localVarFp.negotiableQuoteCouponManagementV1SetPut(cartId, couponCode, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * NegotiableCartsCartIdCouponsCouponCodeApi - object-oriented interface
 * @export
 * @class NegotiableCartsCartIdCouponsCouponCodeApi
 * @extends {BaseAPI}
 */
export class NegotiableCartsCartIdCouponsCouponCodeApi extends BaseAPI {
    /**
     * Adds a coupon by code to a specified cart.
     * @summary negotiable-carts/{cartId}/coupons/{couponCode}
     * @param {number} cartId The cart ID.
     * @param {string} couponCode The coupon code data.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof NegotiableCartsCartIdCouponsCouponCodeApi
     */
    public negotiableQuoteCouponManagementV1SetPut(cartId: number, couponCode: string, options?: AxiosRequestConfig) {
        return NegotiableCartsCartIdCouponsCouponCodeApiFp(this.configuration).negotiableQuoteCouponManagementV1SetPut(cartId, couponCode, options).then((request) => request(this.axios, this.basePath));
    }
}


/**
 * NegotiableCartsCartIdEstimateShippingMethodsApi - axios parameter creator
 * @export
 */
export const NegotiableCartsCartIdEstimateShippingMethodsApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Estimate shipping by address and return list of available shipping methods
         * @summary negotiable-carts/{cartId}/estimate-shipping-methods
         * @param {string} cartId 
         * @param {QuoteShipmentEstimationV1EstimateByExtendedAddressPostRequest} [negotiableQuoteShipmentEstimationV1EstimateByExtendedAddressPostBody] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        negotiableQuoteShipmentEstimationV1EstimateByExtendedAddressPost: async (cartId: string, negotiableQuoteShipmentEstimationV1EstimateByExtendedAddressPostBody?: QuoteShipmentEstimationV1EstimateByExtendedAddressPostRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'cartId' is not null or undefined
            assertParamExists('negotiableQuoteShipmentEstimationV1EstimateByExtendedAddressPost', 'cartId', cartId)
            const localVarPath = `/V1/negotiable-carts/{cartId}/estimate-shipping-methods`
                .replace(`{${"cartId"}}`, encodeURIComponent(String(cartId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(negotiableQuoteShipmentEstimationV1EstimateByExtendedAddressPostBody, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * NegotiableCartsCartIdEstimateShippingMethodsApi - functional programming interface
 * @export
 */
export const NegotiableCartsCartIdEstimateShippingMethodsApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = NegotiableCartsCartIdEstimateShippingMethodsApiAxiosParamCreator(configuration)
    return {
        /**
         * Estimate shipping by address and return list of available shipping methods
         * @summary negotiable-carts/{cartId}/estimate-shipping-methods
         * @param {string} cartId 
         * @param {QuoteShipmentEstimationV1EstimateByExtendedAddressPostRequest} [negotiableQuoteShipmentEstimationV1EstimateByExtendedAddressPostBody] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async negotiableQuoteShipmentEstimationV1EstimateByExtendedAddressPost(cartId: string, negotiableQuoteShipmentEstimationV1EstimateByExtendedAddressPostBody?: QuoteShipmentEstimationV1EstimateByExtendedAddressPostRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<QuoteDataShippingMethodInterface>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.negotiableQuoteShipmentEstimationV1EstimateByExtendedAddressPost(cartId, negotiableQuoteShipmentEstimationV1EstimateByExtendedAddressPostBody, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * NegotiableCartsCartIdEstimateShippingMethodsApi - factory interface
 * @export
 */
export const NegotiableCartsCartIdEstimateShippingMethodsApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = NegotiableCartsCartIdEstimateShippingMethodsApiFp(configuration)
    return {
        /**
         * Estimate shipping by address and return list of available shipping methods
         * @summary negotiable-carts/{cartId}/estimate-shipping-methods
         * @param {string} cartId 
         * @param {QuoteShipmentEstimationV1EstimateByExtendedAddressPostRequest} [negotiableQuoteShipmentEstimationV1EstimateByExtendedAddressPostBody] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        negotiableQuoteShipmentEstimationV1EstimateByExtendedAddressPost(cartId: string, negotiableQuoteShipmentEstimationV1EstimateByExtendedAddressPostBody?: QuoteShipmentEstimationV1EstimateByExtendedAddressPostRequest, options?: any): AxiosPromise<Array<QuoteDataShippingMethodInterface>> {
            return localVarFp.negotiableQuoteShipmentEstimationV1EstimateByExtendedAddressPost(cartId, negotiableQuoteShipmentEstimationV1EstimateByExtendedAddressPostBody, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * NegotiableCartsCartIdEstimateShippingMethodsApi - object-oriented interface
 * @export
 * @class NegotiableCartsCartIdEstimateShippingMethodsApi
 * @extends {BaseAPI}
 */
export class NegotiableCartsCartIdEstimateShippingMethodsApi extends BaseAPI {
    /**
     * Estimate shipping by address and return list of available shipping methods
     * @summary negotiable-carts/{cartId}/estimate-shipping-methods
     * @param {string} cartId 
     * @param {QuoteShipmentEstimationV1EstimateByExtendedAddressPostRequest} [negotiableQuoteShipmentEstimationV1EstimateByExtendedAddressPostBody] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof NegotiableCartsCartIdEstimateShippingMethodsApi
     */
    public negotiableQuoteShipmentEstimationV1EstimateByExtendedAddressPost(cartId: string, negotiableQuoteShipmentEstimationV1EstimateByExtendedAddressPostBody?: QuoteShipmentEstimationV1EstimateByExtendedAddressPostRequest, options?: AxiosRequestConfig) {
        return NegotiableCartsCartIdEstimateShippingMethodsApiFp(this.configuration).negotiableQuoteShipmentEstimationV1EstimateByExtendedAddressPost(cartId, negotiableQuoteShipmentEstimationV1EstimateByExtendedAddressPostBody, options).then((request) => request(this.axios, this.basePath));
    }
}


/**
 * NegotiableCartsCartIdEstimateShippingMethodsByAddressIdApi - axios parameter creator
 * @export
 */
export const NegotiableCartsCartIdEstimateShippingMethodsByAddressIdApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Estimate shipping
         * @summary negotiable-carts/{cartId}/estimate-shipping-methods-by-address-id
         * @param {number} cartId The shopping cart ID.
         * @param {QuoteShippingMethodManagementV1EstimateByAddressIdPostRequest} [negotiableQuoteShippingMethodManagementV1EstimateByAddressIdPostBody] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        negotiableQuoteShippingMethodManagementV1EstimateByAddressIdPost: async (cartId: number, negotiableQuoteShippingMethodManagementV1EstimateByAddressIdPostBody?: QuoteShippingMethodManagementV1EstimateByAddressIdPostRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'cartId' is not null or undefined
            assertParamExists('negotiableQuoteShippingMethodManagementV1EstimateByAddressIdPost', 'cartId', cartId)
            const localVarPath = `/V1/negotiable-carts/{cartId}/estimate-shipping-methods-by-address-id`
                .replace(`{${"cartId"}}`, encodeURIComponent(String(cartId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(negotiableQuoteShippingMethodManagementV1EstimateByAddressIdPostBody, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * NegotiableCartsCartIdEstimateShippingMethodsByAddressIdApi - functional programming interface
 * @export
 */
export const NegotiableCartsCartIdEstimateShippingMethodsByAddressIdApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = NegotiableCartsCartIdEstimateShippingMethodsByAddressIdApiAxiosParamCreator(configuration)
    return {
        /**
         * Estimate shipping
         * @summary negotiable-carts/{cartId}/estimate-shipping-methods-by-address-id
         * @param {number} cartId The shopping cart ID.
         * @param {QuoteShippingMethodManagementV1EstimateByAddressIdPostRequest} [negotiableQuoteShippingMethodManagementV1EstimateByAddressIdPostBody] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async negotiableQuoteShippingMethodManagementV1EstimateByAddressIdPost(cartId: number, negotiableQuoteShippingMethodManagementV1EstimateByAddressIdPostBody?: QuoteShippingMethodManagementV1EstimateByAddressIdPostRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<QuoteDataShippingMethodInterface>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.negotiableQuoteShippingMethodManagementV1EstimateByAddressIdPost(cartId, negotiableQuoteShippingMethodManagementV1EstimateByAddressIdPostBody, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * NegotiableCartsCartIdEstimateShippingMethodsByAddressIdApi - factory interface
 * @export
 */
export const NegotiableCartsCartIdEstimateShippingMethodsByAddressIdApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = NegotiableCartsCartIdEstimateShippingMethodsByAddressIdApiFp(configuration)
    return {
        /**
         * Estimate shipping
         * @summary negotiable-carts/{cartId}/estimate-shipping-methods-by-address-id
         * @param {number} cartId The shopping cart ID.
         * @param {QuoteShippingMethodManagementV1EstimateByAddressIdPostRequest} [negotiableQuoteShippingMethodManagementV1EstimateByAddressIdPostBody] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        negotiableQuoteShippingMethodManagementV1EstimateByAddressIdPost(cartId: number, negotiableQuoteShippingMethodManagementV1EstimateByAddressIdPostBody?: QuoteShippingMethodManagementV1EstimateByAddressIdPostRequest, options?: any): AxiosPromise<Array<QuoteDataShippingMethodInterface>> {
            return localVarFp.negotiableQuoteShippingMethodManagementV1EstimateByAddressIdPost(cartId, negotiableQuoteShippingMethodManagementV1EstimateByAddressIdPostBody, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * NegotiableCartsCartIdEstimateShippingMethodsByAddressIdApi - object-oriented interface
 * @export
 * @class NegotiableCartsCartIdEstimateShippingMethodsByAddressIdApi
 * @extends {BaseAPI}
 */
export class NegotiableCartsCartIdEstimateShippingMethodsByAddressIdApi extends BaseAPI {
    /**
     * Estimate shipping
     * @summary negotiable-carts/{cartId}/estimate-shipping-methods-by-address-id
     * @param {number} cartId The shopping cart ID.
     * @param {QuoteShippingMethodManagementV1EstimateByAddressIdPostRequest} [negotiableQuoteShippingMethodManagementV1EstimateByAddressIdPostBody] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof NegotiableCartsCartIdEstimateShippingMethodsByAddressIdApi
     */
    public negotiableQuoteShippingMethodManagementV1EstimateByAddressIdPost(cartId: number, negotiableQuoteShippingMethodManagementV1EstimateByAddressIdPostBody?: QuoteShippingMethodManagementV1EstimateByAddressIdPostRequest, options?: AxiosRequestConfig) {
        return NegotiableCartsCartIdEstimateShippingMethodsByAddressIdApiFp(this.configuration).negotiableQuoteShippingMethodManagementV1EstimateByAddressIdPost(cartId, negotiableQuoteShippingMethodManagementV1EstimateByAddressIdPostBody, options).then((request) => request(this.axios, this.basePath));
    }
}


/**
 * NegotiableCartsCartIdGiftCardsApi - axios parameter creator
 * @export
 */
export const NegotiableCartsCartIdGiftCardsApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary negotiable-carts/{cartId}/giftCards
         * @param {number} cartId 
         * @param {GiftCardAccountGuestGiftCardAccountManagementV1AddGiftCardPostRequest} [negotiableQuoteGiftCardAccountManagementV1SaveByQuoteIdPostBody] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        negotiableQuoteGiftCardAccountManagementV1SaveByQuoteIdPost: async (cartId: number, negotiableQuoteGiftCardAccountManagementV1SaveByQuoteIdPostBody?: GiftCardAccountGuestGiftCardAccountManagementV1AddGiftCardPostRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'cartId' is not null or undefined
            assertParamExists('negotiableQuoteGiftCardAccountManagementV1SaveByQuoteIdPost', 'cartId', cartId)
            const localVarPath = `/V1/negotiable-carts/{cartId}/giftCards`
                .replace(`{${"cartId"}}`, encodeURIComponent(String(cartId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(negotiableQuoteGiftCardAccountManagementV1SaveByQuoteIdPostBody, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * NegotiableCartsCartIdGiftCardsApi - functional programming interface
 * @export
 */
export const NegotiableCartsCartIdGiftCardsApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = NegotiableCartsCartIdGiftCardsApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @summary negotiable-carts/{cartId}/giftCards
         * @param {number} cartId 
         * @param {GiftCardAccountGuestGiftCardAccountManagementV1AddGiftCardPostRequest} [negotiableQuoteGiftCardAccountManagementV1SaveByQuoteIdPostBody] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async negotiableQuoteGiftCardAccountManagementV1SaveByQuoteIdPost(cartId: number, negotiableQuoteGiftCardAccountManagementV1SaveByQuoteIdPostBody?: GiftCardAccountGuestGiftCardAccountManagementV1AddGiftCardPostRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<boolean>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.negotiableQuoteGiftCardAccountManagementV1SaveByQuoteIdPost(cartId, negotiableQuoteGiftCardAccountManagementV1SaveByQuoteIdPostBody, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * NegotiableCartsCartIdGiftCardsApi - factory interface
 * @export
 */
export const NegotiableCartsCartIdGiftCardsApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = NegotiableCartsCartIdGiftCardsApiFp(configuration)
    return {
        /**
         * 
         * @summary negotiable-carts/{cartId}/giftCards
         * @param {number} cartId 
         * @param {GiftCardAccountGuestGiftCardAccountManagementV1AddGiftCardPostRequest} [negotiableQuoteGiftCardAccountManagementV1SaveByQuoteIdPostBody] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        negotiableQuoteGiftCardAccountManagementV1SaveByQuoteIdPost(cartId: number, negotiableQuoteGiftCardAccountManagementV1SaveByQuoteIdPostBody?: GiftCardAccountGuestGiftCardAccountManagementV1AddGiftCardPostRequest, options?: any): AxiosPromise<boolean> {
            return localVarFp.negotiableQuoteGiftCardAccountManagementV1SaveByQuoteIdPost(cartId, negotiableQuoteGiftCardAccountManagementV1SaveByQuoteIdPostBody, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * NegotiableCartsCartIdGiftCardsApi - object-oriented interface
 * @export
 * @class NegotiableCartsCartIdGiftCardsApi
 * @extends {BaseAPI}
 */
export class NegotiableCartsCartIdGiftCardsApi extends BaseAPI {
    /**
     * 
     * @summary negotiable-carts/{cartId}/giftCards
     * @param {number} cartId 
     * @param {GiftCardAccountGuestGiftCardAccountManagementV1AddGiftCardPostRequest} [negotiableQuoteGiftCardAccountManagementV1SaveByQuoteIdPostBody] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof NegotiableCartsCartIdGiftCardsApi
     */
    public negotiableQuoteGiftCardAccountManagementV1SaveByQuoteIdPost(cartId: number, negotiableQuoteGiftCardAccountManagementV1SaveByQuoteIdPostBody?: GiftCardAccountGuestGiftCardAccountManagementV1AddGiftCardPostRequest, options?: AxiosRequestConfig) {
        return NegotiableCartsCartIdGiftCardsApiFp(this.configuration).negotiableQuoteGiftCardAccountManagementV1SaveByQuoteIdPost(cartId, negotiableQuoteGiftCardAccountManagementV1SaveByQuoteIdPostBody, options).then((request) => request(this.axios, this.basePath));
    }
}


/**
 * NegotiableCartsCartIdGiftCardsGiftCardCodeApi - axios parameter creator
 * @export
 */
export const NegotiableCartsCartIdGiftCardsGiftCardCodeApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Remove GiftCard Account entity
         * @summary negotiable-carts/{cartId}/giftCards/{giftCardCode}
         * @param {number} cartId 
         * @param {string} giftCardCode 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        negotiableQuoteGiftCardAccountManagementV1DeleteByQuoteIdDelete: async (cartId: number, giftCardCode: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'cartId' is not null or undefined
            assertParamExists('negotiableQuoteGiftCardAccountManagementV1DeleteByQuoteIdDelete', 'cartId', cartId)
            // verify required parameter 'giftCardCode' is not null or undefined
            assertParamExists('negotiableQuoteGiftCardAccountManagementV1DeleteByQuoteIdDelete', 'giftCardCode', giftCardCode)
            const localVarPath = `/V1/negotiable-carts/{cartId}/giftCards/{giftCardCode}`
                .replace(`{${"cartId"}}`, encodeURIComponent(String(cartId)))
                .replace(`{${"giftCardCode"}}`, encodeURIComponent(String(giftCardCode)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * NegotiableCartsCartIdGiftCardsGiftCardCodeApi - functional programming interface
 * @export
 */
export const NegotiableCartsCartIdGiftCardsGiftCardCodeApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = NegotiableCartsCartIdGiftCardsGiftCardCodeApiAxiosParamCreator(configuration)
    return {
        /**
         * Remove GiftCard Account entity
         * @summary negotiable-carts/{cartId}/giftCards/{giftCardCode}
         * @param {number} cartId 
         * @param {string} giftCardCode 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async negotiableQuoteGiftCardAccountManagementV1DeleteByQuoteIdDelete(cartId: number, giftCardCode: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<boolean>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.negotiableQuoteGiftCardAccountManagementV1DeleteByQuoteIdDelete(cartId, giftCardCode, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * NegotiableCartsCartIdGiftCardsGiftCardCodeApi - factory interface
 * @export
 */
export const NegotiableCartsCartIdGiftCardsGiftCardCodeApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = NegotiableCartsCartIdGiftCardsGiftCardCodeApiFp(configuration)
    return {
        /**
         * Remove GiftCard Account entity
         * @summary negotiable-carts/{cartId}/giftCards/{giftCardCode}
         * @param {number} cartId 
         * @param {string} giftCardCode 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        negotiableQuoteGiftCardAccountManagementV1DeleteByQuoteIdDelete(cartId: number, giftCardCode: string, options?: any): AxiosPromise<boolean> {
            return localVarFp.negotiableQuoteGiftCardAccountManagementV1DeleteByQuoteIdDelete(cartId, giftCardCode, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * NegotiableCartsCartIdGiftCardsGiftCardCodeApi - object-oriented interface
 * @export
 * @class NegotiableCartsCartIdGiftCardsGiftCardCodeApi
 * @extends {BaseAPI}
 */
export class NegotiableCartsCartIdGiftCardsGiftCardCodeApi extends BaseAPI {
    /**
     * Remove GiftCard Account entity
     * @summary negotiable-carts/{cartId}/giftCards/{giftCardCode}
     * @param {number} cartId 
     * @param {string} giftCardCode 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof NegotiableCartsCartIdGiftCardsGiftCardCodeApi
     */
    public negotiableQuoteGiftCardAccountManagementV1DeleteByQuoteIdDelete(cartId: number, giftCardCode: string, options?: AxiosRequestConfig) {
        return NegotiableCartsCartIdGiftCardsGiftCardCodeApiFp(this.configuration).negotiableQuoteGiftCardAccountManagementV1DeleteByQuoteIdDelete(cartId, giftCardCode, options).then((request) => request(this.axios, this.basePath));
    }
}


/**
 * NegotiableCartsCartIdPaymentInformationApi - axios parameter creator
 * @export
 */
export const NegotiableCartsCartIdPaymentInformationApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Get payment information
         * @summary negotiable-carts/{cartId}/payment-information
         * @param {number} cartId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        negotiableQuotePaymentInformationManagementV1GetPaymentInformationGet: async (cartId: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'cartId' is not null or undefined
            assertParamExists('negotiableQuotePaymentInformationManagementV1GetPaymentInformationGet', 'cartId', cartId)
            const localVarPath = `/V1/negotiable-carts/{cartId}/payment-information`
                .replace(`{${"cartId"}}`, encodeURIComponent(String(cartId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Set payment information and place order for a specified cart.
         * @summary negotiable-carts/{cartId}/payment-information
         * @param {number} cartId 
         * @param {CheckoutPaymentInformationManagementV1SavePaymentInformationAndPlaceOrderPostRequest} [negotiableQuotePaymentInformationManagementV1SavePaymentInformationAndPlaceOrderPostBody] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        negotiableQuotePaymentInformationManagementV1SavePaymentInformationAndPlaceOrderPost: async (cartId: number, negotiableQuotePaymentInformationManagementV1SavePaymentInformationAndPlaceOrderPostBody?: CheckoutPaymentInformationManagementV1SavePaymentInformationAndPlaceOrderPostRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'cartId' is not null or undefined
            assertParamExists('negotiableQuotePaymentInformationManagementV1SavePaymentInformationAndPlaceOrderPost', 'cartId', cartId)
            const localVarPath = `/V1/negotiable-carts/{cartId}/payment-information`
                .replace(`{${"cartId"}}`, encodeURIComponent(String(cartId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(negotiableQuotePaymentInformationManagementV1SavePaymentInformationAndPlaceOrderPostBody, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * NegotiableCartsCartIdPaymentInformationApi - functional programming interface
 * @export
 */
export const NegotiableCartsCartIdPaymentInformationApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = NegotiableCartsCartIdPaymentInformationApiAxiosParamCreator(configuration)
    return {
        /**
         * Get payment information
         * @summary negotiable-carts/{cartId}/payment-information
         * @param {number} cartId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async negotiableQuotePaymentInformationManagementV1GetPaymentInformationGet(cartId: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<CheckoutDataPaymentDetailsInterface>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.negotiableQuotePaymentInformationManagementV1GetPaymentInformationGet(cartId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Set payment information and place order for a specified cart.
         * @summary negotiable-carts/{cartId}/payment-information
         * @param {number} cartId 
         * @param {CheckoutPaymentInformationManagementV1SavePaymentInformationAndPlaceOrderPostRequest} [negotiableQuotePaymentInformationManagementV1SavePaymentInformationAndPlaceOrderPostBody] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async negotiableQuotePaymentInformationManagementV1SavePaymentInformationAndPlaceOrderPost(cartId: number, negotiableQuotePaymentInformationManagementV1SavePaymentInformationAndPlaceOrderPostBody?: CheckoutPaymentInformationManagementV1SavePaymentInformationAndPlaceOrderPostRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<number>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.negotiableQuotePaymentInformationManagementV1SavePaymentInformationAndPlaceOrderPost(cartId, negotiableQuotePaymentInformationManagementV1SavePaymentInformationAndPlaceOrderPostBody, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * NegotiableCartsCartIdPaymentInformationApi - factory interface
 * @export
 */
export const NegotiableCartsCartIdPaymentInformationApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = NegotiableCartsCartIdPaymentInformationApiFp(configuration)
    return {
        /**
         * Get payment information
         * @summary negotiable-carts/{cartId}/payment-information
         * @param {number} cartId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        negotiableQuotePaymentInformationManagementV1GetPaymentInformationGet(cartId: number, options?: any): AxiosPromise<CheckoutDataPaymentDetailsInterface> {
            return localVarFp.negotiableQuotePaymentInformationManagementV1GetPaymentInformationGet(cartId, options).then((request) => request(axios, basePath));
        },
        /**
         * Set payment information and place order for a specified cart.
         * @summary negotiable-carts/{cartId}/payment-information
         * @param {number} cartId 
         * @param {CheckoutPaymentInformationManagementV1SavePaymentInformationAndPlaceOrderPostRequest} [negotiableQuotePaymentInformationManagementV1SavePaymentInformationAndPlaceOrderPostBody] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        negotiableQuotePaymentInformationManagementV1SavePaymentInformationAndPlaceOrderPost(cartId: number, negotiableQuotePaymentInformationManagementV1SavePaymentInformationAndPlaceOrderPostBody?: CheckoutPaymentInformationManagementV1SavePaymentInformationAndPlaceOrderPostRequest, options?: any): AxiosPromise<number> {
            return localVarFp.negotiableQuotePaymentInformationManagementV1SavePaymentInformationAndPlaceOrderPost(cartId, negotiableQuotePaymentInformationManagementV1SavePaymentInformationAndPlaceOrderPostBody, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * NegotiableCartsCartIdPaymentInformationApi - object-oriented interface
 * @export
 * @class NegotiableCartsCartIdPaymentInformationApi
 * @extends {BaseAPI}
 */
export class NegotiableCartsCartIdPaymentInformationApi extends BaseAPI {
    /**
     * Get payment information
     * @summary negotiable-carts/{cartId}/payment-information
     * @param {number} cartId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof NegotiableCartsCartIdPaymentInformationApi
     */
    public negotiableQuotePaymentInformationManagementV1GetPaymentInformationGet(cartId: number, options?: AxiosRequestConfig) {
        return NegotiableCartsCartIdPaymentInformationApiFp(this.configuration).negotiableQuotePaymentInformationManagementV1GetPaymentInformationGet(cartId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Set payment information and place order for a specified cart.
     * @summary negotiable-carts/{cartId}/payment-information
     * @param {number} cartId 
     * @param {CheckoutPaymentInformationManagementV1SavePaymentInformationAndPlaceOrderPostRequest} [negotiableQuotePaymentInformationManagementV1SavePaymentInformationAndPlaceOrderPostBody] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof NegotiableCartsCartIdPaymentInformationApi
     */
    public negotiableQuotePaymentInformationManagementV1SavePaymentInformationAndPlaceOrderPost(cartId: number, negotiableQuotePaymentInformationManagementV1SavePaymentInformationAndPlaceOrderPostBody?: CheckoutPaymentInformationManagementV1SavePaymentInformationAndPlaceOrderPostRequest, options?: AxiosRequestConfig) {
        return NegotiableCartsCartIdPaymentInformationApiFp(this.configuration).negotiableQuotePaymentInformationManagementV1SavePaymentInformationAndPlaceOrderPost(cartId, negotiableQuotePaymentInformationManagementV1SavePaymentInformationAndPlaceOrderPostBody, options).then((request) => request(this.axios, this.basePath));
    }
}


/**
 * NegotiableCartsCartIdSetPaymentInformationApi - axios parameter creator
 * @export
 */
export const NegotiableCartsCartIdSetPaymentInformationApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Set payment information for a specified cart.
         * @summary negotiable-carts/{cartId}/set-payment-information
         * @param {number} cartId 
         * @param {CheckoutPaymentInformationManagementV1SavePaymentInformationAndPlaceOrderPostRequest} [negotiableQuotePaymentInformationManagementV1SavePaymentInformationPostBody] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        negotiableQuotePaymentInformationManagementV1SavePaymentInformationPost: async (cartId: number, negotiableQuotePaymentInformationManagementV1SavePaymentInformationPostBody?: CheckoutPaymentInformationManagementV1SavePaymentInformationAndPlaceOrderPostRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'cartId' is not null or undefined
            assertParamExists('negotiableQuotePaymentInformationManagementV1SavePaymentInformationPost', 'cartId', cartId)
            const localVarPath = `/V1/negotiable-carts/{cartId}/set-payment-information`
                .replace(`{${"cartId"}}`, encodeURIComponent(String(cartId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(negotiableQuotePaymentInformationManagementV1SavePaymentInformationPostBody, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * NegotiableCartsCartIdSetPaymentInformationApi - functional programming interface
 * @export
 */
export const NegotiableCartsCartIdSetPaymentInformationApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = NegotiableCartsCartIdSetPaymentInformationApiAxiosParamCreator(configuration)
    return {
        /**
         * Set payment information for a specified cart.
         * @summary negotiable-carts/{cartId}/set-payment-information
         * @param {number} cartId 
         * @param {CheckoutPaymentInformationManagementV1SavePaymentInformationAndPlaceOrderPostRequest} [negotiableQuotePaymentInformationManagementV1SavePaymentInformationPostBody] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async negotiableQuotePaymentInformationManagementV1SavePaymentInformationPost(cartId: number, negotiableQuotePaymentInformationManagementV1SavePaymentInformationPostBody?: CheckoutPaymentInformationManagementV1SavePaymentInformationAndPlaceOrderPostRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<number>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.negotiableQuotePaymentInformationManagementV1SavePaymentInformationPost(cartId, negotiableQuotePaymentInformationManagementV1SavePaymentInformationPostBody, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * NegotiableCartsCartIdSetPaymentInformationApi - factory interface
 * @export
 */
export const NegotiableCartsCartIdSetPaymentInformationApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = NegotiableCartsCartIdSetPaymentInformationApiFp(configuration)
    return {
        /**
         * Set payment information for a specified cart.
         * @summary negotiable-carts/{cartId}/set-payment-information
         * @param {number} cartId 
         * @param {CheckoutPaymentInformationManagementV1SavePaymentInformationAndPlaceOrderPostRequest} [negotiableQuotePaymentInformationManagementV1SavePaymentInformationPostBody] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        negotiableQuotePaymentInformationManagementV1SavePaymentInformationPost(cartId: number, negotiableQuotePaymentInformationManagementV1SavePaymentInformationPostBody?: CheckoutPaymentInformationManagementV1SavePaymentInformationAndPlaceOrderPostRequest, options?: any): AxiosPromise<number> {
            return localVarFp.negotiableQuotePaymentInformationManagementV1SavePaymentInformationPost(cartId, negotiableQuotePaymentInformationManagementV1SavePaymentInformationPostBody, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * NegotiableCartsCartIdSetPaymentInformationApi - object-oriented interface
 * @export
 * @class NegotiableCartsCartIdSetPaymentInformationApi
 * @extends {BaseAPI}
 */
export class NegotiableCartsCartIdSetPaymentInformationApi extends BaseAPI {
    /**
     * Set payment information for a specified cart.
     * @summary negotiable-carts/{cartId}/set-payment-information
     * @param {number} cartId 
     * @param {CheckoutPaymentInformationManagementV1SavePaymentInformationAndPlaceOrderPostRequest} [negotiableQuotePaymentInformationManagementV1SavePaymentInformationPostBody] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof NegotiableCartsCartIdSetPaymentInformationApi
     */
    public negotiableQuotePaymentInformationManagementV1SavePaymentInformationPost(cartId: number, negotiableQuotePaymentInformationManagementV1SavePaymentInformationPostBody?: CheckoutPaymentInformationManagementV1SavePaymentInformationAndPlaceOrderPostRequest, options?: AxiosRequestConfig) {
        return NegotiableCartsCartIdSetPaymentInformationApiFp(this.configuration).negotiableQuotePaymentInformationManagementV1SavePaymentInformationPost(cartId, negotiableQuotePaymentInformationManagementV1SavePaymentInformationPostBody, options).then((request) => request(this.axios, this.basePath));
    }
}


/**
 * NegotiableCartsCartIdShippingInformationApi - axios parameter creator
 * @export
 */
export const NegotiableCartsCartIdShippingInformationApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary negotiable-carts/{cartId}/shipping-information
         * @param {number} cartId 
         * @param {CheckoutShippingInformationManagementV1SaveAddressInformationPostRequest} [negotiableQuoteShippingInformationManagementV1SaveAddressInformationPostBody] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        negotiableQuoteShippingInformationManagementV1SaveAddressInformationPost: async (cartId: number, negotiableQuoteShippingInformationManagementV1SaveAddressInformationPostBody?: CheckoutShippingInformationManagementV1SaveAddressInformationPostRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'cartId' is not null or undefined
            assertParamExists('negotiableQuoteShippingInformationManagementV1SaveAddressInformationPost', 'cartId', cartId)
            const localVarPath = `/V1/negotiable-carts/{cartId}/shipping-information`
                .replace(`{${"cartId"}}`, encodeURIComponent(String(cartId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(negotiableQuoteShippingInformationManagementV1SaveAddressInformationPostBody, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * NegotiableCartsCartIdShippingInformationApi - functional programming interface
 * @export
 */
export const NegotiableCartsCartIdShippingInformationApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = NegotiableCartsCartIdShippingInformationApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @summary negotiable-carts/{cartId}/shipping-information
         * @param {number} cartId 
         * @param {CheckoutShippingInformationManagementV1SaveAddressInformationPostRequest} [negotiableQuoteShippingInformationManagementV1SaveAddressInformationPostBody] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async negotiableQuoteShippingInformationManagementV1SaveAddressInformationPost(cartId: number, negotiableQuoteShippingInformationManagementV1SaveAddressInformationPostBody?: CheckoutShippingInformationManagementV1SaveAddressInformationPostRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<CheckoutDataPaymentDetailsInterface>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.negotiableQuoteShippingInformationManagementV1SaveAddressInformationPost(cartId, negotiableQuoteShippingInformationManagementV1SaveAddressInformationPostBody, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * NegotiableCartsCartIdShippingInformationApi - factory interface
 * @export
 */
export const NegotiableCartsCartIdShippingInformationApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = NegotiableCartsCartIdShippingInformationApiFp(configuration)
    return {
        /**
         * 
         * @summary negotiable-carts/{cartId}/shipping-information
         * @param {number} cartId 
         * @param {CheckoutShippingInformationManagementV1SaveAddressInformationPostRequest} [negotiableQuoteShippingInformationManagementV1SaveAddressInformationPostBody] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        negotiableQuoteShippingInformationManagementV1SaveAddressInformationPost(cartId: number, negotiableQuoteShippingInformationManagementV1SaveAddressInformationPostBody?: CheckoutShippingInformationManagementV1SaveAddressInformationPostRequest, options?: any): AxiosPromise<CheckoutDataPaymentDetailsInterface> {
            return localVarFp.negotiableQuoteShippingInformationManagementV1SaveAddressInformationPost(cartId, negotiableQuoteShippingInformationManagementV1SaveAddressInformationPostBody, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * NegotiableCartsCartIdShippingInformationApi - object-oriented interface
 * @export
 * @class NegotiableCartsCartIdShippingInformationApi
 * @extends {BaseAPI}
 */
export class NegotiableCartsCartIdShippingInformationApi extends BaseAPI {
    /**
     * 
     * @summary negotiable-carts/{cartId}/shipping-information
     * @param {number} cartId 
     * @param {CheckoutShippingInformationManagementV1SaveAddressInformationPostRequest} [negotiableQuoteShippingInformationManagementV1SaveAddressInformationPostBody] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof NegotiableCartsCartIdShippingInformationApi
     */
    public negotiableQuoteShippingInformationManagementV1SaveAddressInformationPost(cartId: number, negotiableQuoteShippingInformationManagementV1SaveAddressInformationPostBody?: CheckoutShippingInformationManagementV1SaveAddressInformationPostRequest, options?: AxiosRequestConfig) {
        return NegotiableCartsCartIdShippingInformationApiFp(this.configuration).negotiableQuoteShippingInformationManagementV1SaveAddressInformationPost(cartId, negotiableQuoteShippingInformationManagementV1SaveAddressInformationPostBody, options).then((request) => request(this.axios, this.basePath));
    }
}


/**
 * NegotiableCartsCartIdTotalsApi - axios parameter creator
 * @export
 */
export const NegotiableCartsCartIdTotalsApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Returns quote totals data for a specified cart.
         * @summary negotiable-carts/{cartId}/totals
         * @param {number} cartId The cart ID.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        negotiableQuoteCartTotalRepositoryV1GetGet: async (cartId: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'cartId' is not null or undefined
            assertParamExists('negotiableQuoteCartTotalRepositoryV1GetGet', 'cartId', cartId)
            const localVarPath = `/V1/negotiable-carts/{cartId}/totals`
                .replace(`{${"cartId"}}`, encodeURIComponent(String(cartId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * NegotiableCartsCartIdTotalsApi - functional programming interface
 * @export
 */
export const NegotiableCartsCartIdTotalsApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = NegotiableCartsCartIdTotalsApiAxiosParamCreator(configuration)
    return {
        /**
         * Returns quote totals data for a specified cart.
         * @summary negotiable-carts/{cartId}/totals
         * @param {number} cartId The cart ID.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async negotiableQuoteCartTotalRepositoryV1GetGet(cartId: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<QuoteDataTotalsInterface>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.negotiableQuoteCartTotalRepositoryV1GetGet(cartId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * NegotiableCartsCartIdTotalsApi - factory interface
 * @export
 */
export const NegotiableCartsCartIdTotalsApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = NegotiableCartsCartIdTotalsApiFp(configuration)
    return {
        /**
         * Returns quote totals data for a specified cart.
         * @summary negotiable-carts/{cartId}/totals
         * @param {number} cartId The cart ID.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        negotiableQuoteCartTotalRepositoryV1GetGet(cartId: number, options?: any): AxiosPromise<QuoteDataTotalsInterface> {
            return localVarFp.negotiableQuoteCartTotalRepositoryV1GetGet(cartId, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * NegotiableCartsCartIdTotalsApi - object-oriented interface
 * @export
 * @class NegotiableCartsCartIdTotalsApi
 * @extends {BaseAPI}
 */
export class NegotiableCartsCartIdTotalsApi extends BaseAPI {
    /**
     * Returns quote totals data for a specified cart.
     * @summary negotiable-carts/{cartId}/totals
     * @param {number} cartId The cart ID.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof NegotiableCartsCartIdTotalsApi
     */
    public negotiableQuoteCartTotalRepositoryV1GetGet(cartId: number, options?: AxiosRequestConfig) {
        return NegotiableCartsCartIdTotalsApiFp(this.configuration).negotiableQuoteCartTotalRepositoryV1GetGet(cartId, options).then((request) => request(this.axios, this.basePath));
    }
}


/**
 * NegotiableQuoteAttachmentContentApi - axios parameter creator
 * @export
 */
export const NegotiableQuoteAttachmentContentApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Returns content for one or more files attached on the quote comment.
         * @summary negotiableQuote/attachmentContent
         * @param {Array<number>} attachmentIds 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        negotiableQuoteAttachmentContentManagementV1GetGet: async (attachmentIds: Array<number>, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'attachmentIds' is not null or undefined
            assertParamExists('negotiableQuoteAttachmentContentManagementV1GetGet', 'attachmentIds', attachmentIds)
            const localVarPath = `/V1/negotiableQuote/attachmentContent`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (attachmentIds) {
                localVarQueryParameter['attachmentIds'] = attachmentIds.join(COLLECTION_FORMATS.csv);
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * NegotiableQuoteAttachmentContentApi - functional programming interface
 * @export
 */
export const NegotiableQuoteAttachmentContentApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = NegotiableQuoteAttachmentContentApiAxiosParamCreator(configuration)
    return {
        /**
         * Returns content for one or more files attached on the quote comment.
         * @summary negotiableQuote/attachmentContent
         * @param {Array<number>} attachmentIds 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async negotiableQuoteAttachmentContentManagementV1GetGet(attachmentIds: Array<number>, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<NegotiableQuoteDataAttachmentContentInterface>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.negotiableQuoteAttachmentContentManagementV1GetGet(attachmentIds, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * NegotiableQuoteAttachmentContentApi - factory interface
 * @export
 */
export const NegotiableQuoteAttachmentContentApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = NegotiableQuoteAttachmentContentApiFp(configuration)
    return {
        /**
         * Returns content for one or more files attached on the quote comment.
         * @summary negotiableQuote/attachmentContent
         * @param {Array<number>} attachmentIds 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        negotiableQuoteAttachmentContentManagementV1GetGet(attachmentIds: Array<number>, options?: any): AxiosPromise<Array<NegotiableQuoteDataAttachmentContentInterface>> {
            return localVarFp.negotiableQuoteAttachmentContentManagementV1GetGet(attachmentIds, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * NegotiableQuoteAttachmentContentApi - object-oriented interface
 * @export
 * @class NegotiableQuoteAttachmentContentApi
 * @extends {BaseAPI}
 */
export class NegotiableQuoteAttachmentContentApi extends BaseAPI {
    /**
     * Returns content for one or more files attached on the quote comment.
     * @summary negotiableQuote/attachmentContent
     * @param {Array<number>} attachmentIds 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof NegotiableQuoteAttachmentContentApi
     */
    public negotiableQuoteAttachmentContentManagementV1GetGet(attachmentIds: Array<number>, options?: AxiosRequestConfig) {
        return NegotiableQuoteAttachmentContentApiFp(this.configuration).negotiableQuoteAttachmentContentManagementV1GetGet(attachmentIds, options).then((request) => request(this.axios, this.basePath));
    }
}


/**
 * NegotiableQuoteDeclineApi - axios parameter creator
 * @export
 */
export const NegotiableQuoteDeclineApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Decline the B2B quote. All custom pricing will be removed from this quote. The buyer will be able to place an order using their standard catalog prices and discounts.
         * @summary negotiableQuote/decline
         * @param {NegotiableQuoteNegotiableQuoteManagementV1DeclinePostRequest} [negotiableQuoteNegotiableQuoteManagementV1DeclinePostBody] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        negotiableQuoteNegotiableQuoteManagementV1DeclinePost: async (negotiableQuoteNegotiableQuoteManagementV1DeclinePostBody?: NegotiableQuoteNegotiableQuoteManagementV1DeclinePostRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/V1/negotiableQuote/decline`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(negotiableQuoteNegotiableQuoteManagementV1DeclinePostBody, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * NegotiableQuoteDeclineApi - functional programming interface
 * @export
 */
export const NegotiableQuoteDeclineApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = NegotiableQuoteDeclineApiAxiosParamCreator(configuration)
    return {
        /**
         * Decline the B2B quote. All custom pricing will be removed from this quote. The buyer will be able to place an order using their standard catalog prices and discounts.
         * @summary negotiableQuote/decline
         * @param {NegotiableQuoteNegotiableQuoteManagementV1DeclinePostRequest} [negotiableQuoteNegotiableQuoteManagementV1DeclinePostBody] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async negotiableQuoteNegotiableQuoteManagementV1DeclinePost(negotiableQuoteNegotiableQuoteManagementV1DeclinePostBody?: NegotiableQuoteNegotiableQuoteManagementV1DeclinePostRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<boolean>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.negotiableQuoteNegotiableQuoteManagementV1DeclinePost(negotiableQuoteNegotiableQuoteManagementV1DeclinePostBody, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * NegotiableQuoteDeclineApi - factory interface
 * @export
 */
export const NegotiableQuoteDeclineApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = NegotiableQuoteDeclineApiFp(configuration)
    return {
        /**
         * Decline the B2B quote. All custom pricing will be removed from this quote. The buyer will be able to place an order using their standard catalog prices and discounts.
         * @summary negotiableQuote/decline
         * @param {NegotiableQuoteNegotiableQuoteManagementV1DeclinePostRequest} [negotiableQuoteNegotiableQuoteManagementV1DeclinePostBody] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        negotiableQuoteNegotiableQuoteManagementV1DeclinePost(negotiableQuoteNegotiableQuoteManagementV1DeclinePostBody?: NegotiableQuoteNegotiableQuoteManagementV1DeclinePostRequest, options?: any): AxiosPromise<boolean> {
            return localVarFp.negotiableQuoteNegotiableQuoteManagementV1DeclinePost(negotiableQuoteNegotiableQuoteManagementV1DeclinePostBody, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * NegotiableQuoteDeclineApi - object-oriented interface
 * @export
 * @class NegotiableQuoteDeclineApi
 * @extends {BaseAPI}
 */
export class NegotiableQuoteDeclineApi extends BaseAPI {
    /**
     * Decline the B2B quote. All custom pricing will be removed from this quote. The buyer will be able to place an order using their standard catalog prices and discounts.
     * @summary negotiableQuote/decline
     * @param {NegotiableQuoteNegotiableQuoteManagementV1DeclinePostRequest} [negotiableQuoteNegotiableQuoteManagementV1DeclinePostBody] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof NegotiableQuoteDeclineApi
     */
    public negotiableQuoteNegotiableQuoteManagementV1DeclinePost(negotiableQuoteNegotiableQuoteManagementV1DeclinePostBody?: NegotiableQuoteNegotiableQuoteManagementV1DeclinePostRequest, options?: AxiosRequestConfig) {
        return NegotiableQuoteDeclineApiFp(this.configuration).negotiableQuoteNegotiableQuoteManagementV1DeclinePost(negotiableQuoteNegotiableQuoteManagementV1DeclinePostBody, options).then((request) => request(this.axios, this.basePath));
    }
}


/**
 * NegotiableQuotePricesUpdatedApi - axios parameter creator
 * @export
 */
export const NegotiableQuotePricesUpdatedApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Refreshes item prices, taxes, discounts, cart rules in the negotiable quote as per the latest changes in the catalog / shared catalog and in the price rules. Depending on the negotiable quote state and totals, all or just some of quote numbers will be recalculated. \'Update Prices\' parameter forces refresh on any quote that is not locked for admin user, including the quotes with a negotiated price. The request can be applied to one or more quotes at the same time.
         * @summary negotiableQuote/pricesUpdated
         * @param {NegotiableQuoteNegotiableQuotePriceManagementV1PricesUpdatedPostRequest} [negotiableQuoteNegotiableQuotePriceManagementV1PricesUpdatedPostBody] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        negotiableQuoteNegotiableQuotePriceManagementV1PricesUpdatedPost: async (negotiableQuoteNegotiableQuotePriceManagementV1PricesUpdatedPostBody?: NegotiableQuoteNegotiableQuotePriceManagementV1PricesUpdatedPostRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/V1/negotiableQuote/pricesUpdated`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(negotiableQuoteNegotiableQuotePriceManagementV1PricesUpdatedPostBody, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * NegotiableQuotePricesUpdatedApi - functional programming interface
 * @export
 */
export const NegotiableQuotePricesUpdatedApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = NegotiableQuotePricesUpdatedApiAxiosParamCreator(configuration)
    return {
        /**
         * Refreshes item prices, taxes, discounts, cart rules in the negotiable quote as per the latest changes in the catalog / shared catalog and in the price rules. Depending on the negotiable quote state and totals, all or just some of quote numbers will be recalculated. \'Update Prices\' parameter forces refresh on any quote that is not locked for admin user, including the quotes with a negotiated price. The request can be applied to one or more quotes at the same time.
         * @summary negotiableQuote/pricesUpdated
         * @param {NegotiableQuoteNegotiableQuotePriceManagementV1PricesUpdatedPostRequest} [negotiableQuoteNegotiableQuotePriceManagementV1PricesUpdatedPostBody] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async negotiableQuoteNegotiableQuotePriceManagementV1PricesUpdatedPost(negotiableQuoteNegotiableQuotePriceManagementV1PricesUpdatedPostBody?: NegotiableQuoteNegotiableQuotePriceManagementV1PricesUpdatedPostRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<boolean>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.negotiableQuoteNegotiableQuotePriceManagementV1PricesUpdatedPost(negotiableQuoteNegotiableQuotePriceManagementV1PricesUpdatedPostBody, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * NegotiableQuotePricesUpdatedApi - factory interface
 * @export
 */
export const NegotiableQuotePricesUpdatedApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = NegotiableQuotePricesUpdatedApiFp(configuration)
    return {
        /**
         * Refreshes item prices, taxes, discounts, cart rules in the negotiable quote as per the latest changes in the catalog / shared catalog and in the price rules. Depending on the negotiable quote state and totals, all or just some of quote numbers will be recalculated. \'Update Prices\' parameter forces refresh on any quote that is not locked for admin user, including the quotes with a negotiated price. The request can be applied to one or more quotes at the same time.
         * @summary negotiableQuote/pricesUpdated
         * @param {NegotiableQuoteNegotiableQuotePriceManagementV1PricesUpdatedPostRequest} [negotiableQuoteNegotiableQuotePriceManagementV1PricesUpdatedPostBody] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        negotiableQuoteNegotiableQuotePriceManagementV1PricesUpdatedPost(negotiableQuoteNegotiableQuotePriceManagementV1PricesUpdatedPostBody?: NegotiableQuoteNegotiableQuotePriceManagementV1PricesUpdatedPostRequest, options?: any): AxiosPromise<boolean> {
            return localVarFp.negotiableQuoteNegotiableQuotePriceManagementV1PricesUpdatedPost(negotiableQuoteNegotiableQuotePriceManagementV1PricesUpdatedPostBody, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * NegotiableQuotePricesUpdatedApi - object-oriented interface
 * @export
 * @class NegotiableQuotePricesUpdatedApi
 * @extends {BaseAPI}
 */
export class NegotiableQuotePricesUpdatedApi extends BaseAPI {
    /**
     * Refreshes item prices, taxes, discounts, cart rules in the negotiable quote as per the latest changes in the catalog / shared catalog and in the price rules. Depending on the negotiable quote state and totals, all or just some of quote numbers will be recalculated. \'Update Prices\' parameter forces refresh on any quote that is not locked for admin user, including the quotes with a negotiated price. The request can be applied to one or more quotes at the same time.
     * @summary negotiableQuote/pricesUpdated
     * @param {NegotiableQuoteNegotiableQuotePriceManagementV1PricesUpdatedPostRequest} [negotiableQuoteNegotiableQuotePriceManagementV1PricesUpdatedPostBody] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof NegotiableQuotePricesUpdatedApi
     */
    public negotiableQuoteNegotiableQuotePriceManagementV1PricesUpdatedPost(negotiableQuoteNegotiableQuotePriceManagementV1PricesUpdatedPostBody?: NegotiableQuoteNegotiableQuotePriceManagementV1PricesUpdatedPostRequest, options?: AxiosRequestConfig) {
        return NegotiableQuotePricesUpdatedApiFp(this.configuration).negotiableQuoteNegotiableQuotePriceManagementV1PricesUpdatedPost(negotiableQuoteNegotiableQuotePriceManagementV1PricesUpdatedPostBody, options).then((request) => request(this.axios, this.basePath));
    }
}


/**
 * NegotiableQuoteQuoteIdApi - axios parameter creator
 * @export
 */
export const NegotiableQuoteQuoteIdApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Save quote
         * @summary negotiableQuote/{quoteId}
         * @param {string} quoteId 
         * @param {QuoteCartRepositoryV1SavePutRequest} [negotiableQuoteNegotiableCartRepositoryV1SavePutBody] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        negotiableQuoteNegotiableCartRepositoryV1SavePut: async (quoteId: string, negotiableQuoteNegotiableCartRepositoryV1SavePutBody?: QuoteCartRepositoryV1SavePutRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'quoteId' is not null or undefined
            assertParamExists('negotiableQuoteNegotiableCartRepositoryV1SavePut', 'quoteId', quoteId)
            const localVarPath = `/V1/negotiableQuote/{quoteId}`
                .replace(`{${"quoteId"}}`, encodeURIComponent(String(quoteId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(negotiableQuoteNegotiableCartRepositoryV1SavePutBody, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * NegotiableQuoteQuoteIdApi - functional programming interface
 * @export
 */
export const NegotiableQuoteQuoteIdApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = NegotiableQuoteQuoteIdApiAxiosParamCreator(configuration)
    return {
        /**
         * Save quote
         * @summary negotiableQuote/{quoteId}
         * @param {string} quoteId 
         * @param {QuoteCartRepositoryV1SavePutRequest} [negotiableQuoteNegotiableCartRepositoryV1SavePutBody] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async negotiableQuoteNegotiableCartRepositoryV1SavePut(quoteId: string, negotiableQuoteNegotiableCartRepositoryV1SavePutBody?: QuoteCartRepositoryV1SavePutRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ErrorResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.negotiableQuoteNegotiableCartRepositoryV1SavePut(quoteId, negotiableQuoteNegotiableCartRepositoryV1SavePutBody, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * NegotiableQuoteQuoteIdApi - factory interface
 * @export
 */
export const NegotiableQuoteQuoteIdApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = NegotiableQuoteQuoteIdApiFp(configuration)
    return {
        /**
         * Save quote
         * @summary negotiableQuote/{quoteId}
         * @param {string} quoteId 
         * @param {QuoteCartRepositoryV1SavePutRequest} [negotiableQuoteNegotiableCartRepositoryV1SavePutBody] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        negotiableQuoteNegotiableCartRepositoryV1SavePut(quoteId: string, negotiableQuoteNegotiableCartRepositoryV1SavePutBody?: QuoteCartRepositoryV1SavePutRequest, options?: any): AxiosPromise<ErrorResponse> {
            return localVarFp.negotiableQuoteNegotiableCartRepositoryV1SavePut(quoteId, negotiableQuoteNegotiableCartRepositoryV1SavePutBody, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * NegotiableQuoteQuoteIdApi - object-oriented interface
 * @export
 * @class NegotiableQuoteQuoteIdApi
 * @extends {BaseAPI}
 */
export class NegotiableQuoteQuoteIdApi extends BaseAPI {
    /**
     * Save quote
     * @summary negotiableQuote/{quoteId}
     * @param {string} quoteId 
     * @param {QuoteCartRepositoryV1SavePutRequest} [negotiableQuoteNegotiableCartRepositoryV1SavePutBody] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof NegotiableQuoteQuoteIdApi
     */
    public negotiableQuoteNegotiableCartRepositoryV1SavePut(quoteId: string, negotiableQuoteNegotiableCartRepositoryV1SavePutBody?: QuoteCartRepositoryV1SavePutRequest, options?: AxiosRequestConfig) {
        return NegotiableQuoteQuoteIdApiFp(this.configuration).negotiableQuoteNegotiableCartRepositoryV1SavePut(quoteId, negotiableQuoteNegotiableCartRepositoryV1SavePutBody, options).then((request) => request(this.axios, this.basePath));
    }
}


/**
 * NegotiableQuoteQuoteIdCommentsApi - axios parameter creator
 * @export
 */
export const NegotiableQuoteQuoteIdCommentsApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Returns comments for a specified negotiable quote.
         * @summary negotiableQuote/{quoteId}/comments
         * @param {number} quoteId Negotiable Quote ID.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        negotiableQuoteCommentLocatorV1GetListForQuoteGet: async (quoteId: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'quoteId' is not null or undefined
            assertParamExists('negotiableQuoteCommentLocatorV1GetListForQuoteGet', 'quoteId', quoteId)
            const localVarPath = `/V1/negotiableQuote/{quoteId}/comments`
                .replace(`{${"quoteId"}}`, encodeURIComponent(String(quoteId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * NegotiableQuoteQuoteIdCommentsApi - functional programming interface
 * @export
 */
export const NegotiableQuoteQuoteIdCommentsApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = NegotiableQuoteQuoteIdCommentsApiAxiosParamCreator(configuration)
    return {
        /**
         * Returns comments for a specified negotiable quote.
         * @summary negotiableQuote/{quoteId}/comments
         * @param {number} quoteId Negotiable Quote ID.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async negotiableQuoteCommentLocatorV1GetListForQuoteGet(quoteId: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<NegotiableQuoteDataCommentInterface>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.negotiableQuoteCommentLocatorV1GetListForQuoteGet(quoteId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * NegotiableQuoteQuoteIdCommentsApi - factory interface
 * @export
 */
export const NegotiableQuoteQuoteIdCommentsApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = NegotiableQuoteQuoteIdCommentsApiFp(configuration)
    return {
        /**
         * Returns comments for a specified negotiable quote.
         * @summary negotiableQuote/{quoteId}/comments
         * @param {number} quoteId Negotiable Quote ID.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        negotiableQuoteCommentLocatorV1GetListForQuoteGet(quoteId: number, options?: any): AxiosPromise<Array<NegotiableQuoteDataCommentInterface>> {
            return localVarFp.negotiableQuoteCommentLocatorV1GetListForQuoteGet(quoteId, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * NegotiableQuoteQuoteIdCommentsApi - object-oriented interface
 * @export
 * @class NegotiableQuoteQuoteIdCommentsApi
 * @extends {BaseAPI}
 */
export class NegotiableQuoteQuoteIdCommentsApi extends BaseAPI {
    /**
     * Returns comments for a specified negotiable quote.
     * @summary negotiableQuote/{quoteId}/comments
     * @param {number} quoteId Negotiable Quote ID.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof NegotiableQuoteQuoteIdCommentsApi
     */
    public negotiableQuoteCommentLocatorV1GetListForQuoteGet(quoteId: number, options?: AxiosRequestConfig) {
        return NegotiableQuoteQuoteIdCommentsApiFp(this.configuration).negotiableQuoteCommentLocatorV1GetListForQuoteGet(quoteId, options).then((request) => request(this.axios, this.basePath));
    }
}


/**
 * NegotiableQuoteQuoteIdShippingMethodApi - axios parameter creator
 * @export
 */
export const NegotiableQuoteQuoteIdShippingMethodApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Updates the shipping method on a negotiable quote.
         * @summary negotiableQuote/{quoteId}/shippingMethod
         * @param {number} quoteId Negotiable Quote id
         * @param {NegotiableQuoteNegotiableQuoteShippingManagementV1SetShippingMethodPutRequest} [negotiableQuoteNegotiableQuoteShippingManagementV1SetShippingMethodPutBody] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        negotiableQuoteNegotiableQuoteShippingManagementV1SetShippingMethodPut: async (quoteId: number, negotiableQuoteNegotiableQuoteShippingManagementV1SetShippingMethodPutBody?: NegotiableQuoteNegotiableQuoteShippingManagementV1SetShippingMethodPutRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'quoteId' is not null or undefined
            assertParamExists('negotiableQuoteNegotiableQuoteShippingManagementV1SetShippingMethodPut', 'quoteId', quoteId)
            const localVarPath = `/V1/negotiableQuote/{quoteId}/shippingMethod`
                .replace(`{${"quoteId"}}`, encodeURIComponent(String(quoteId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(negotiableQuoteNegotiableQuoteShippingManagementV1SetShippingMethodPutBody, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * NegotiableQuoteQuoteIdShippingMethodApi - functional programming interface
 * @export
 */
export const NegotiableQuoteQuoteIdShippingMethodApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = NegotiableQuoteQuoteIdShippingMethodApiAxiosParamCreator(configuration)
    return {
        /**
         * Updates the shipping method on a negotiable quote.
         * @summary negotiableQuote/{quoteId}/shippingMethod
         * @param {number} quoteId Negotiable Quote id
         * @param {NegotiableQuoteNegotiableQuoteShippingManagementV1SetShippingMethodPutRequest} [negotiableQuoteNegotiableQuoteShippingManagementV1SetShippingMethodPutBody] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async negotiableQuoteNegotiableQuoteShippingManagementV1SetShippingMethodPut(quoteId: number, negotiableQuoteNegotiableQuoteShippingManagementV1SetShippingMethodPutBody?: NegotiableQuoteNegotiableQuoteShippingManagementV1SetShippingMethodPutRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<boolean>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.negotiableQuoteNegotiableQuoteShippingManagementV1SetShippingMethodPut(quoteId, negotiableQuoteNegotiableQuoteShippingManagementV1SetShippingMethodPutBody, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * NegotiableQuoteQuoteIdShippingMethodApi - factory interface
 * @export
 */
export const NegotiableQuoteQuoteIdShippingMethodApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = NegotiableQuoteQuoteIdShippingMethodApiFp(configuration)
    return {
        /**
         * Updates the shipping method on a negotiable quote.
         * @summary negotiableQuote/{quoteId}/shippingMethod
         * @param {number} quoteId Negotiable Quote id
         * @param {NegotiableQuoteNegotiableQuoteShippingManagementV1SetShippingMethodPutRequest} [negotiableQuoteNegotiableQuoteShippingManagementV1SetShippingMethodPutBody] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        negotiableQuoteNegotiableQuoteShippingManagementV1SetShippingMethodPut(quoteId: number, negotiableQuoteNegotiableQuoteShippingManagementV1SetShippingMethodPutBody?: NegotiableQuoteNegotiableQuoteShippingManagementV1SetShippingMethodPutRequest, options?: any): AxiosPromise<boolean> {
            return localVarFp.negotiableQuoteNegotiableQuoteShippingManagementV1SetShippingMethodPut(quoteId, negotiableQuoteNegotiableQuoteShippingManagementV1SetShippingMethodPutBody, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * NegotiableQuoteQuoteIdShippingMethodApi - object-oriented interface
 * @export
 * @class NegotiableQuoteQuoteIdShippingMethodApi
 * @extends {BaseAPI}
 */
export class NegotiableQuoteQuoteIdShippingMethodApi extends BaseAPI {
    /**
     * Updates the shipping method on a negotiable quote.
     * @summary negotiableQuote/{quoteId}/shippingMethod
     * @param {number} quoteId Negotiable Quote id
     * @param {NegotiableQuoteNegotiableQuoteShippingManagementV1SetShippingMethodPutRequest} [negotiableQuoteNegotiableQuoteShippingManagementV1SetShippingMethodPutBody] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof NegotiableQuoteQuoteIdShippingMethodApi
     */
    public negotiableQuoteNegotiableQuoteShippingManagementV1SetShippingMethodPut(quoteId: number, negotiableQuoteNegotiableQuoteShippingManagementV1SetShippingMethodPutBody?: NegotiableQuoteNegotiableQuoteShippingManagementV1SetShippingMethodPutRequest, options?: AxiosRequestConfig) {
        return NegotiableQuoteQuoteIdShippingMethodApiFp(this.configuration).negotiableQuoteNegotiableQuoteShippingManagementV1SetShippingMethodPut(quoteId, negotiableQuoteNegotiableQuoteShippingManagementV1SetShippingMethodPutBody, options).then((request) => request(this.axios, this.basePath));
    }
}


/**
 * NegotiableQuoteRequestApi - axios parameter creator
 * @export
 */
export const NegotiableQuoteRequestApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Create a B2B quote based on a regular Magento quote. If the B2B quote requires a shipping address (for negotiation or tax calculations), add it to the regular quote before you create a B2B quote.
         * @summary negotiableQuote/request
         * @param {NegotiableQuoteNegotiableQuoteManagementV1CreatePostRequest} [negotiableQuoteNegotiableQuoteManagementV1CreatePostBody] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        negotiableQuoteNegotiableQuoteManagementV1CreatePost: async (negotiableQuoteNegotiableQuoteManagementV1CreatePostBody?: NegotiableQuoteNegotiableQuoteManagementV1CreatePostRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/V1/negotiableQuote/request`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(negotiableQuoteNegotiableQuoteManagementV1CreatePostBody, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * NegotiableQuoteRequestApi - functional programming interface
 * @export
 */
export const NegotiableQuoteRequestApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = NegotiableQuoteRequestApiAxiosParamCreator(configuration)
    return {
        /**
         * Create a B2B quote based on a regular Magento quote. If the B2B quote requires a shipping address (for negotiation or tax calculations), add it to the regular quote before you create a B2B quote.
         * @summary negotiableQuote/request
         * @param {NegotiableQuoteNegotiableQuoteManagementV1CreatePostRequest} [negotiableQuoteNegotiableQuoteManagementV1CreatePostBody] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async negotiableQuoteNegotiableQuoteManagementV1CreatePost(negotiableQuoteNegotiableQuoteManagementV1CreatePostBody?: NegotiableQuoteNegotiableQuoteManagementV1CreatePostRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<boolean>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.negotiableQuoteNegotiableQuoteManagementV1CreatePost(negotiableQuoteNegotiableQuoteManagementV1CreatePostBody, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * NegotiableQuoteRequestApi - factory interface
 * @export
 */
export const NegotiableQuoteRequestApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = NegotiableQuoteRequestApiFp(configuration)
    return {
        /**
         * Create a B2B quote based on a regular Magento quote. If the B2B quote requires a shipping address (for negotiation or tax calculations), add it to the regular quote before you create a B2B quote.
         * @summary negotiableQuote/request
         * @param {NegotiableQuoteNegotiableQuoteManagementV1CreatePostRequest} [negotiableQuoteNegotiableQuoteManagementV1CreatePostBody] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        negotiableQuoteNegotiableQuoteManagementV1CreatePost(negotiableQuoteNegotiableQuoteManagementV1CreatePostBody?: NegotiableQuoteNegotiableQuoteManagementV1CreatePostRequest, options?: any): AxiosPromise<boolean> {
            return localVarFp.negotiableQuoteNegotiableQuoteManagementV1CreatePost(negotiableQuoteNegotiableQuoteManagementV1CreatePostBody, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * NegotiableQuoteRequestApi - object-oriented interface
 * @export
 * @class NegotiableQuoteRequestApi
 * @extends {BaseAPI}
 */
export class NegotiableQuoteRequestApi extends BaseAPI {
    /**
     * Create a B2B quote based on a regular Magento quote. If the B2B quote requires a shipping address (for negotiation or tax calculations), add it to the regular quote before you create a B2B quote.
     * @summary negotiableQuote/request
     * @param {NegotiableQuoteNegotiableQuoteManagementV1CreatePostRequest} [negotiableQuoteNegotiableQuoteManagementV1CreatePostBody] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof NegotiableQuoteRequestApi
     */
    public negotiableQuoteNegotiableQuoteManagementV1CreatePost(negotiableQuoteNegotiableQuoteManagementV1CreatePostBody?: NegotiableQuoteNegotiableQuoteManagementV1CreatePostRequest, options?: AxiosRequestConfig) {
        return NegotiableQuoteRequestApiFp(this.configuration).negotiableQuoteNegotiableQuoteManagementV1CreatePost(negotiableQuoteNegotiableQuoteManagementV1CreatePostBody, options).then((request) => request(this.axios, this.basePath));
    }
}


/**
 * NegotiableQuoteSubmitToCustomerApi - axios parameter creator
 * @export
 */
export const NegotiableQuoteSubmitToCustomerApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Submit the B2B quote to the customer. The quote status for the customer will be changed to \'Updated\', and the customer can work with the quote.
         * @summary negotiableQuote/submitToCustomer
         * @param {NegotiableQuoteNegotiableQuoteManagementV1AdminSendPostRequest} [negotiableQuoteNegotiableQuoteManagementV1AdminSendPostBody] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        negotiableQuoteNegotiableQuoteManagementV1AdminSendPost: async (negotiableQuoteNegotiableQuoteManagementV1AdminSendPostBody?: NegotiableQuoteNegotiableQuoteManagementV1AdminSendPostRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/V1/negotiableQuote/submitToCustomer`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(negotiableQuoteNegotiableQuoteManagementV1AdminSendPostBody, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * NegotiableQuoteSubmitToCustomerApi - functional programming interface
 * @export
 */
export const NegotiableQuoteSubmitToCustomerApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = NegotiableQuoteSubmitToCustomerApiAxiosParamCreator(configuration)
    return {
        /**
         * Submit the B2B quote to the customer. The quote status for the customer will be changed to \'Updated\', and the customer can work with the quote.
         * @summary negotiableQuote/submitToCustomer
         * @param {NegotiableQuoteNegotiableQuoteManagementV1AdminSendPostRequest} [negotiableQuoteNegotiableQuoteManagementV1AdminSendPostBody] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async negotiableQuoteNegotiableQuoteManagementV1AdminSendPost(negotiableQuoteNegotiableQuoteManagementV1AdminSendPostBody?: NegotiableQuoteNegotiableQuoteManagementV1AdminSendPostRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<boolean>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.negotiableQuoteNegotiableQuoteManagementV1AdminSendPost(negotiableQuoteNegotiableQuoteManagementV1AdminSendPostBody, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * NegotiableQuoteSubmitToCustomerApi - factory interface
 * @export
 */
export const NegotiableQuoteSubmitToCustomerApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = NegotiableQuoteSubmitToCustomerApiFp(configuration)
    return {
        /**
         * Submit the B2B quote to the customer. The quote status for the customer will be changed to \'Updated\', and the customer can work with the quote.
         * @summary negotiableQuote/submitToCustomer
         * @param {NegotiableQuoteNegotiableQuoteManagementV1AdminSendPostRequest} [negotiableQuoteNegotiableQuoteManagementV1AdminSendPostBody] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        negotiableQuoteNegotiableQuoteManagementV1AdminSendPost(negotiableQuoteNegotiableQuoteManagementV1AdminSendPostBody?: NegotiableQuoteNegotiableQuoteManagementV1AdminSendPostRequest, options?: any): AxiosPromise<boolean> {
            return localVarFp.negotiableQuoteNegotiableQuoteManagementV1AdminSendPost(negotiableQuoteNegotiableQuoteManagementV1AdminSendPostBody, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * NegotiableQuoteSubmitToCustomerApi - object-oriented interface
 * @export
 * @class NegotiableQuoteSubmitToCustomerApi
 * @extends {BaseAPI}
 */
export class NegotiableQuoteSubmitToCustomerApi extends BaseAPI {
    /**
     * Submit the B2B quote to the customer. The quote status for the customer will be changed to \'Updated\', and the customer can work with the quote.
     * @summary negotiableQuote/submitToCustomer
     * @param {NegotiableQuoteNegotiableQuoteManagementV1AdminSendPostRequest} [negotiableQuoteNegotiableQuoteManagementV1AdminSendPostBody] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof NegotiableQuoteSubmitToCustomerApi
     */
    public negotiableQuoteNegotiableQuoteManagementV1AdminSendPost(negotiableQuoteNegotiableQuoteManagementV1AdminSendPostBody?: NegotiableQuoteNegotiableQuoteManagementV1AdminSendPostRequest, options?: AxiosRequestConfig) {
        return NegotiableQuoteSubmitToCustomerApiFp(this.configuration).negotiableQuoteNegotiableQuoteManagementV1AdminSendPost(negotiableQuoteNegotiableQuoteManagementV1AdminSendPostBody, options).then((request) => request(this.axios, this.basePath));
    }
}


/**
 * OrderOrderIdInvoiceApi - axios parameter creator
 * @export
 */
export const OrderOrderIdInvoiceApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary order/{orderId}/invoice
         * @param {number} orderId 
         * @param {SalesInvoiceOrderV1ExecutePostRequest} [salesInvoiceOrderV1ExecutePostBody] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        salesInvoiceOrderV1ExecutePost: async (orderId: number, salesInvoiceOrderV1ExecutePostBody?: SalesInvoiceOrderV1ExecutePostRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'orderId' is not null or undefined
            assertParamExists('salesInvoiceOrderV1ExecutePost', 'orderId', orderId)
            const localVarPath = `/V1/order/{orderId}/invoice`
                .replace(`{${"orderId"}}`, encodeURIComponent(String(orderId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(salesInvoiceOrderV1ExecutePostBody, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * OrderOrderIdInvoiceApi - functional programming interface
 * @export
 */
export const OrderOrderIdInvoiceApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = OrderOrderIdInvoiceApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @summary order/{orderId}/invoice
         * @param {number} orderId 
         * @param {SalesInvoiceOrderV1ExecutePostRequest} [salesInvoiceOrderV1ExecutePostBody] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async salesInvoiceOrderV1ExecutePost(orderId: number, salesInvoiceOrderV1ExecutePostBody?: SalesInvoiceOrderV1ExecutePostRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<number>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.salesInvoiceOrderV1ExecutePost(orderId, salesInvoiceOrderV1ExecutePostBody, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * OrderOrderIdInvoiceApi - factory interface
 * @export
 */
export const OrderOrderIdInvoiceApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = OrderOrderIdInvoiceApiFp(configuration)
    return {
        /**
         * 
         * @summary order/{orderId}/invoice
         * @param {number} orderId 
         * @param {SalesInvoiceOrderV1ExecutePostRequest} [salesInvoiceOrderV1ExecutePostBody] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        salesInvoiceOrderV1ExecutePost(orderId: number, salesInvoiceOrderV1ExecutePostBody?: SalesInvoiceOrderV1ExecutePostRequest, options?: any): AxiosPromise<number> {
            return localVarFp.salesInvoiceOrderV1ExecutePost(orderId, salesInvoiceOrderV1ExecutePostBody, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * OrderOrderIdInvoiceApi - object-oriented interface
 * @export
 * @class OrderOrderIdInvoiceApi
 * @extends {BaseAPI}
 */
export class OrderOrderIdInvoiceApi extends BaseAPI {
    /**
     * 
     * @summary order/{orderId}/invoice
     * @param {number} orderId 
     * @param {SalesInvoiceOrderV1ExecutePostRequest} [salesInvoiceOrderV1ExecutePostBody] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OrderOrderIdInvoiceApi
     */
    public salesInvoiceOrderV1ExecutePost(orderId: number, salesInvoiceOrderV1ExecutePostBody?: SalesInvoiceOrderV1ExecutePostRequest, options?: AxiosRequestConfig) {
        return OrderOrderIdInvoiceApiFp(this.configuration).salesInvoiceOrderV1ExecutePost(orderId, salesInvoiceOrderV1ExecutePostBody, options).then((request) => request(this.axios, this.basePath));
    }
}


/**
 * OrderOrderIdRefundApi - axios parameter creator
 * @export
 */
export const OrderOrderIdRefundApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Create offline refund for order
         * @summary order/{orderId}/refund
         * @param {number} orderId 
         * @param {SalesRefundOrderV1ExecutePostRequest} [salesRefundOrderV1ExecutePostBody] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        salesRefundOrderV1ExecutePost: async (orderId: number, salesRefundOrderV1ExecutePostBody?: SalesRefundOrderV1ExecutePostRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'orderId' is not null or undefined
            assertParamExists('salesRefundOrderV1ExecutePost', 'orderId', orderId)
            const localVarPath = `/V1/order/{orderId}/refund`
                .replace(`{${"orderId"}}`, encodeURIComponent(String(orderId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(salesRefundOrderV1ExecutePostBody, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * OrderOrderIdRefundApi - functional programming interface
 * @export
 */
export const OrderOrderIdRefundApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = OrderOrderIdRefundApiAxiosParamCreator(configuration)
    return {
        /**
         * Create offline refund for order
         * @summary order/{orderId}/refund
         * @param {number} orderId 
         * @param {SalesRefundOrderV1ExecutePostRequest} [salesRefundOrderV1ExecutePostBody] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async salesRefundOrderV1ExecutePost(orderId: number, salesRefundOrderV1ExecutePostBody?: SalesRefundOrderV1ExecutePostRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<number>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.salesRefundOrderV1ExecutePost(orderId, salesRefundOrderV1ExecutePostBody, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * OrderOrderIdRefundApi - factory interface
 * @export
 */
export const OrderOrderIdRefundApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = OrderOrderIdRefundApiFp(configuration)
    return {
        /**
         * Create offline refund for order
         * @summary order/{orderId}/refund
         * @param {number} orderId 
         * @param {SalesRefundOrderV1ExecutePostRequest} [salesRefundOrderV1ExecutePostBody] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        salesRefundOrderV1ExecutePost(orderId: number, salesRefundOrderV1ExecutePostBody?: SalesRefundOrderV1ExecutePostRequest, options?: any): AxiosPromise<number> {
            return localVarFp.salesRefundOrderV1ExecutePost(orderId, salesRefundOrderV1ExecutePostBody, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * OrderOrderIdRefundApi - object-oriented interface
 * @export
 * @class OrderOrderIdRefundApi
 * @extends {BaseAPI}
 */
export class OrderOrderIdRefundApi extends BaseAPI {
    /**
     * Create offline refund for order
     * @summary order/{orderId}/refund
     * @param {number} orderId 
     * @param {SalesRefundOrderV1ExecutePostRequest} [salesRefundOrderV1ExecutePostBody] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OrderOrderIdRefundApi
     */
    public salesRefundOrderV1ExecutePost(orderId: number, salesRefundOrderV1ExecutePostBody?: SalesRefundOrderV1ExecutePostRequest, options?: AxiosRequestConfig) {
        return OrderOrderIdRefundApiFp(this.configuration).salesRefundOrderV1ExecutePost(orderId, salesRefundOrderV1ExecutePostBody, options).then((request) => request(this.axios, this.basePath));
    }
}


/**
 * OrderOrderIdShipApi - axios parameter creator
 * @export
 */
export const OrderOrderIdShipApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Creates new Shipment for given Order.
         * @summary order/{orderId}/ship
         * @param {number} orderId 
         * @param {SalesShipOrderV1ExecutePostRequest} [salesShipOrderV1ExecutePostBody] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        salesShipOrderV1ExecutePost: async (orderId: number, salesShipOrderV1ExecutePostBody?: SalesShipOrderV1ExecutePostRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'orderId' is not null or undefined
            assertParamExists('salesShipOrderV1ExecutePost', 'orderId', orderId)
            const localVarPath = `/V1/order/{orderId}/ship`
                .replace(`{${"orderId"}}`, encodeURIComponent(String(orderId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(salesShipOrderV1ExecutePostBody, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * OrderOrderIdShipApi - functional programming interface
 * @export
 */
export const OrderOrderIdShipApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = OrderOrderIdShipApiAxiosParamCreator(configuration)
    return {
        /**
         * Creates new Shipment for given Order.
         * @summary order/{orderId}/ship
         * @param {number} orderId 
         * @param {SalesShipOrderV1ExecutePostRequest} [salesShipOrderV1ExecutePostBody] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async salesShipOrderV1ExecutePost(orderId: number, salesShipOrderV1ExecutePostBody?: SalesShipOrderV1ExecutePostRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<number>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.salesShipOrderV1ExecutePost(orderId, salesShipOrderV1ExecutePostBody, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * OrderOrderIdShipApi - factory interface
 * @export
 */
export const OrderOrderIdShipApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = OrderOrderIdShipApiFp(configuration)
    return {
        /**
         * Creates new Shipment for given Order.
         * @summary order/{orderId}/ship
         * @param {number} orderId 
         * @param {SalesShipOrderV1ExecutePostRequest} [salesShipOrderV1ExecutePostBody] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        salesShipOrderV1ExecutePost(orderId: number, salesShipOrderV1ExecutePostBody?: SalesShipOrderV1ExecutePostRequest, options?: any): AxiosPromise<number> {
            return localVarFp.salesShipOrderV1ExecutePost(orderId, salesShipOrderV1ExecutePostBody, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * OrderOrderIdShipApi - object-oriented interface
 * @export
 * @class OrderOrderIdShipApi
 * @extends {BaseAPI}
 */
export class OrderOrderIdShipApi extends BaseAPI {
    /**
     * Creates new Shipment for given Order.
     * @summary order/{orderId}/ship
     * @param {number} orderId 
     * @param {SalesShipOrderV1ExecutePostRequest} [salesShipOrderV1ExecutePostBody] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OrderOrderIdShipApi
     */
    public salesShipOrderV1ExecutePost(orderId: number, salesShipOrderV1ExecutePostBody?: SalesShipOrderV1ExecutePostRequest, options?: AxiosRequestConfig) {
        return OrderOrderIdShipApiFp(this.configuration).salesShipOrderV1ExecutePost(orderId, salesShipOrderV1ExecutePostBody, options).then((request) => request(this.axios, this.basePath));
    }
}


/**
 * OrdersApi - axios parameter creator
 * @export
 */
export const OrdersApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Lists orders that match specified search criteria. This call returns an array of objects, but detailed information about each object’s attributes might not be included. See http://devdocs.magento.com/codelinks/attributes.html#OrderRepositoryInterface to determine which call to use to get detailed information about all attributes for an object.
         * @summary orders
         * @param {string} [searchCriteriaFilterGroups0Filters0Field] Field
         * @param {string} [searchCriteriaFilterGroups0Filters0Value] Value
         * @param {string} [searchCriteriaFilterGroups0Filters0ConditionType] Condition type
         * @param {string} [searchCriteriaSortOrders0Field] Sorting field.
         * @param {string} [searchCriteriaSortOrders0Direction] Sorting direction.
         * @param {number} [searchCriteriaPageSize] Page size.
         * @param {number} [searchCriteriaCurrentPage] Current page.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        salesOrderRepositoryV1GetListGet: async (searchCriteriaFilterGroups0Filters0Field?: string, searchCriteriaFilterGroups0Filters0Value?: string, searchCriteriaFilterGroups0Filters0ConditionType?: string, searchCriteriaSortOrders0Field?: string, searchCriteriaSortOrders0Direction?: string, searchCriteriaPageSize?: number, searchCriteriaCurrentPage?: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/V1/orders`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (searchCriteriaFilterGroups0Filters0Field !== undefined) {
                localVarQueryParameter['searchCriteria[filterGroups][0][filters][0][field]'] = searchCriteriaFilterGroups0Filters0Field;
            }

            if (searchCriteriaFilterGroups0Filters0Value !== undefined) {
                localVarQueryParameter['searchCriteria[filterGroups][0][filters][0][value]'] = searchCriteriaFilterGroups0Filters0Value;
            }

            if (searchCriteriaFilterGroups0Filters0ConditionType !== undefined) {
                localVarQueryParameter['searchCriteria[filterGroups][0][filters][0][conditionType]'] = searchCriteriaFilterGroups0Filters0ConditionType;
            }

            if (searchCriteriaSortOrders0Field !== undefined) {
                localVarQueryParameter['searchCriteria[sortOrders][0][field]'] = searchCriteriaSortOrders0Field;
            }

            if (searchCriteriaSortOrders0Direction !== undefined) {
                localVarQueryParameter['searchCriteria[sortOrders][0][direction]'] = searchCriteriaSortOrders0Direction;
            }

            if (searchCriteriaPageSize !== undefined) {
                localVarQueryParameter['searchCriteria[pageSize]'] = searchCriteriaPageSize;
            }

            if (searchCriteriaCurrentPage !== undefined) {
                localVarQueryParameter['searchCriteria[currentPage]'] = searchCriteriaCurrentPage;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Performs persist operations for a specified order.
         * @summary orders/
         * @param {SalesOrderRepositoryV1SavePostRequest} [salesOrderRepositoryV1SavePostBody] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        salesOrderRepositoryV1SavePost: async (salesOrderRepositoryV1SavePostBody?: SalesOrderRepositoryV1SavePostRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/V1/orders/`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(salesOrderRepositoryV1SavePostBody, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * OrdersApi - functional programming interface
 * @export
 */
export const OrdersApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = OrdersApiAxiosParamCreator(configuration)
    return {
        /**
         * Lists orders that match specified search criteria. This call returns an array of objects, but detailed information about each object’s attributes might not be included. See http://devdocs.magento.com/codelinks/attributes.html#OrderRepositoryInterface to determine which call to use to get detailed information about all attributes for an object.
         * @summary orders
         * @param {string} [searchCriteriaFilterGroups0Filters0Field] Field
         * @param {string} [searchCriteriaFilterGroups0Filters0Value] Value
         * @param {string} [searchCriteriaFilterGroups0Filters0ConditionType] Condition type
         * @param {string} [searchCriteriaSortOrders0Field] Sorting field.
         * @param {string} [searchCriteriaSortOrders0Direction] Sorting direction.
         * @param {number} [searchCriteriaPageSize] Page size.
         * @param {number} [searchCriteriaCurrentPage] Current page.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async salesOrderRepositoryV1GetListGet(searchCriteriaFilterGroups0Filters0Field?: string, searchCriteriaFilterGroups0Filters0Value?: string, searchCriteriaFilterGroups0Filters0ConditionType?: string, searchCriteriaSortOrders0Field?: string, searchCriteriaSortOrders0Direction?: string, searchCriteriaPageSize?: number, searchCriteriaCurrentPage?: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<SalesDataOrderSearchResultInterface>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.salesOrderRepositoryV1GetListGet(searchCriteriaFilterGroups0Filters0Field, searchCriteriaFilterGroups0Filters0Value, searchCriteriaFilterGroups0Filters0ConditionType, searchCriteriaSortOrders0Field, searchCriteriaSortOrders0Direction, searchCriteriaPageSize, searchCriteriaCurrentPage, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Performs persist operations for a specified order.
         * @summary orders/
         * @param {SalesOrderRepositoryV1SavePostRequest} [salesOrderRepositoryV1SavePostBody] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async salesOrderRepositoryV1SavePost(salesOrderRepositoryV1SavePostBody?: SalesOrderRepositoryV1SavePostRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<SalesDataOrderInterface>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.salesOrderRepositoryV1SavePost(salesOrderRepositoryV1SavePostBody, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * OrdersApi - factory interface
 * @export
 */
export const OrdersApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = OrdersApiFp(configuration)
    return {
        /**
         * Lists orders that match specified search criteria. This call returns an array of objects, but detailed information about each object’s attributes might not be included. See http://devdocs.magento.com/codelinks/attributes.html#OrderRepositoryInterface to determine which call to use to get detailed information about all attributes for an object.
         * @summary orders
         * @param {string} [searchCriteriaFilterGroups0Filters0Field] Field
         * @param {string} [searchCriteriaFilterGroups0Filters0Value] Value
         * @param {string} [searchCriteriaFilterGroups0Filters0ConditionType] Condition type
         * @param {string} [searchCriteriaSortOrders0Field] Sorting field.
         * @param {string} [searchCriteriaSortOrders0Direction] Sorting direction.
         * @param {number} [searchCriteriaPageSize] Page size.
         * @param {number} [searchCriteriaCurrentPage] Current page.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        salesOrderRepositoryV1GetListGet(searchCriteriaFilterGroups0Filters0Field?: string, searchCriteriaFilterGroups0Filters0Value?: string, searchCriteriaFilterGroups0Filters0ConditionType?: string, searchCriteriaSortOrders0Field?: string, searchCriteriaSortOrders0Direction?: string, searchCriteriaPageSize?: number, searchCriteriaCurrentPage?: number, options?: any): AxiosPromise<SalesDataOrderSearchResultInterface> {
            return localVarFp.salesOrderRepositoryV1GetListGet(searchCriteriaFilterGroups0Filters0Field, searchCriteriaFilterGroups0Filters0Value, searchCriteriaFilterGroups0Filters0ConditionType, searchCriteriaSortOrders0Field, searchCriteriaSortOrders0Direction, searchCriteriaPageSize, searchCriteriaCurrentPage, options).then((request) => request(axios, basePath));
        },
        /**
         * Performs persist operations for a specified order.
         * @summary orders/
         * @param {SalesOrderRepositoryV1SavePostRequest} [salesOrderRepositoryV1SavePostBody] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        salesOrderRepositoryV1SavePost(salesOrderRepositoryV1SavePostBody?: SalesOrderRepositoryV1SavePostRequest, options?: any): AxiosPromise<SalesDataOrderInterface> {
            return localVarFp.salesOrderRepositoryV1SavePost(salesOrderRepositoryV1SavePostBody, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * OrdersApi - object-oriented interface
 * @export
 * @class OrdersApi
 * @extends {BaseAPI}
 */
export class OrdersApi extends BaseAPI {
    /**
     * Lists orders that match specified search criteria. This call returns an array of objects, but detailed information about each object’s attributes might not be included. See http://devdocs.magento.com/codelinks/attributes.html#OrderRepositoryInterface to determine which call to use to get detailed information about all attributes for an object.
     * @summary orders
     * @param {string} [searchCriteriaFilterGroups0Filters0Field] Field
     * @param {string} [searchCriteriaFilterGroups0Filters0Value] Value
     * @param {string} [searchCriteriaFilterGroups0Filters0ConditionType] Condition type
     * @param {string} [searchCriteriaSortOrders0Field] Sorting field.
     * @param {string} [searchCriteriaSortOrders0Direction] Sorting direction.
     * @param {number} [searchCriteriaPageSize] Page size.
     * @param {number} [searchCriteriaCurrentPage] Current page.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OrdersApi
     */
    public salesOrderRepositoryV1GetListGet(searchCriteriaFilterGroups0Filters0Field?: string, searchCriteriaFilterGroups0Filters0Value?: string, searchCriteriaFilterGroups0Filters0ConditionType?: string, searchCriteriaSortOrders0Field?: string, searchCriteriaSortOrders0Direction?: string, searchCriteriaPageSize?: number, searchCriteriaCurrentPage?: number, options?: AxiosRequestConfig) {
        return OrdersApiFp(this.configuration).salesOrderRepositoryV1GetListGet(searchCriteriaFilterGroups0Filters0Field, searchCriteriaFilterGroups0Filters0Value, searchCriteriaFilterGroups0Filters0ConditionType, searchCriteriaSortOrders0Field, searchCriteriaSortOrders0Direction, searchCriteriaPageSize, searchCriteriaCurrentPage, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Performs persist operations for a specified order.
     * @summary orders/
     * @param {SalesOrderRepositoryV1SavePostRequest} [salesOrderRepositoryV1SavePostBody] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OrdersApi
     */
    public salesOrderRepositoryV1SavePost(salesOrderRepositoryV1SavePostBody?: SalesOrderRepositoryV1SavePostRequest, options?: AxiosRequestConfig) {
        return OrdersApiFp(this.configuration).salesOrderRepositoryV1SavePost(salesOrderRepositoryV1SavePostBody, options).then((request) => request(this.axios, this.basePath));
    }
}


/**
 * OrdersCreateApi - axios parameter creator
 * @export
 */
export const OrdersCreateApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Performs persist operations for a specified order.
         * @summary orders/create
         * @param {SalesOrderRepositoryV1SavePostRequest} [salesOrderRepositoryV1SavePutBody] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        salesOrderRepositoryV1SavePut: async (salesOrderRepositoryV1SavePutBody?: SalesOrderRepositoryV1SavePostRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/V1/orders/create`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(salesOrderRepositoryV1SavePutBody, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * OrdersCreateApi - functional programming interface
 * @export
 */
export const OrdersCreateApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = OrdersCreateApiAxiosParamCreator(configuration)
    return {
        /**
         * Performs persist operations for a specified order.
         * @summary orders/create
         * @param {SalesOrderRepositoryV1SavePostRequest} [salesOrderRepositoryV1SavePutBody] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async salesOrderRepositoryV1SavePut(salesOrderRepositoryV1SavePutBody?: SalesOrderRepositoryV1SavePostRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<SalesDataOrderInterface>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.salesOrderRepositoryV1SavePut(salesOrderRepositoryV1SavePutBody, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * OrdersCreateApi - factory interface
 * @export
 */
export const OrdersCreateApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = OrdersCreateApiFp(configuration)
    return {
        /**
         * Performs persist operations for a specified order.
         * @summary orders/create
         * @param {SalesOrderRepositoryV1SavePostRequest} [salesOrderRepositoryV1SavePutBody] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        salesOrderRepositoryV1SavePut(salesOrderRepositoryV1SavePutBody?: SalesOrderRepositoryV1SavePostRequest, options?: any): AxiosPromise<SalesDataOrderInterface> {
            return localVarFp.salesOrderRepositoryV1SavePut(salesOrderRepositoryV1SavePutBody, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * OrdersCreateApi - object-oriented interface
 * @export
 * @class OrdersCreateApi
 * @extends {BaseAPI}
 */
export class OrdersCreateApi extends BaseAPI {
    /**
     * Performs persist operations for a specified order.
     * @summary orders/create
     * @param {SalesOrderRepositoryV1SavePostRequest} [salesOrderRepositoryV1SavePutBody] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OrdersCreateApi
     */
    public salesOrderRepositoryV1SavePut(salesOrderRepositoryV1SavePutBody?: SalesOrderRepositoryV1SavePostRequest, options?: AxiosRequestConfig) {
        return OrdersCreateApiFp(this.configuration).salesOrderRepositoryV1SavePut(salesOrderRepositoryV1SavePutBody, options).then((request) => request(this.axios, this.basePath));
    }
}


/**
 * OrdersIdApi - axios parameter creator
 * @export
 */
export const OrdersIdApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Loads a specified order.
         * @summary orders/{id}
         * @param {number} id The order ID.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        salesOrderRepositoryV1GetGet: async (id: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('salesOrderRepositoryV1GetGet', 'id', id)
            const localVarPath = `/V1/orders/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * OrdersIdApi - functional programming interface
 * @export
 */
export const OrdersIdApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = OrdersIdApiAxiosParamCreator(configuration)
    return {
        /**
         * Loads a specified order.
         * @summary orders/{id}
         * @param {number} id The order ID.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async salesOrderRepositoryV1GetGet(id: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<SalesDataOrderInterface>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.salesOrderRepositoryV1GetGet(id, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * OrdersIdApi - factory interface
 * @export
 */
export const OrdersIdApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = OrdersIdApiFp(configuration)
    return {
        /**
         * Loads a specified order.
         * @summary orders/{id}
         * @param {number} id The order ID.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        salesOrderRepositoryV1GetGet(id: number, options?: any): AxiosPromise<SalesDataOrderInterface> {
            return localVarFp.salesOrderRepositoryV1GetGet(id, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * OrdersIdApi - object-oriented interface
 * @export
 * @class OrdersIdApi
 * @extends {BaseAPI}
 */
export class OrdersIdApi extends BaseAPI {
    /**
     * Loads a specified order.
     * @summary orders/{id}
     * @param {number} id The order ID.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OrdersIdApi
     */
    public salesOrderRepositoryV1GetGet(id: number, options?: AxiosRequestConfig) {
        return OrdersIdApiFp(this.configuration).salesOrderRepositoryV1GetGet(id, options).then((request) => request(this.axios, this.basePath));
    }
}


/**
 * OrdersIdCancelApi - axios parameter creator
 * @export
 */
export const OrdersIdCancelApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Cancels a specified order.
         * @summary orders/{id}/cancel
         * @param {number} id The order ID.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        salesOrderManagementV1CancelPost: async (id: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('salesOrderManagementV1CancelPost', 'id', id)
            const localVarPath = `/V1/orders/{id}/cancel`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * OrdersIdCancelApi - functional programming interface
 * @export
 */
export const OrdersIdCancelApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = OrdersIdCancelApiAxiosParamCreator(configuration)
    return {
        /**
         * Cancels a specified order.
         * @summary orders/{id}/cancel
         * @param {number} id The order ID.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async salesOrderManagementV1CancelPost(id: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<boolean>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.salesOrderManagementV1CancelPost(id, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * OrdersIdCancelApi - factory interface
 * @export
 */
export const OrdersIdCancelApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = OrdersIdCancelApiFp(configuration)
    return {
        /**
         * Cancels a specified order.
         * @summary orders/{id}/cancel
         * @param {number} id The order ID.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        salesOrderManagementV1CancelPost(id: number, options?: any): AxiosPromise<boolean> {
            return localVarFp.salesOrderManagementV1CancelPost(id, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * OrdersIdCancelApi - object-oriented interface
 * @export
 * @class OrdersIdCancelApi
 * @extends {BaseAPI}
 */
export class OrdersIdCancelApi extends BaseAPI {
    /**
     * Cancels a specified order.
     * @summary orders/{id}/cancel
     * @param {number} id The order ID.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OrdersIdCancelApi
     */
    public salesOrderManagementV1CancelPost(id: number, options?: AxiosRequestConfig) {
        return OrdersIdCancelApiFp(this.configuration).salesOrderManagementV1CancelPost(id, options).then((request) => request(this.axios, this.basePath));
    }
}


/**
 * OrdersIdCommentsApi - axios parameter creator
 * @export
 */
export const OrdersIdCommentsApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Adds a comment to a specified order.
         * @summary orders/{id}/comments
         * @param {number} id The order ID.
         * @param {SalesOrderManagementV1AddCommentPostRequest} [salesOrderManagementV1AddCommentPostBody] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        salesOrderManagementV1AddCommentPost: async (id: number, salesOrderManagementV1AddCommentPostBody?: SalesOrderManagementV1AddCommentPostRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('salesOrderManagementV1AddCommentPost', 'id', id)
            const localVarPath = `/V1/orders/{id}/comments`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(salesOrderManagementV1AddCommentPostBody, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Lists comments for a specified order.
         * @summary orders/{id}/comments
         * @param {number} id The order ID.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        salesOrderManagementV1GetCommentsListGet: async (id: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('salesOrderManagementV1GetCommentsListGet', 'id', id)
            const localVarPath = `/V1/orders/{id}/comments`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * OrdersIdCommentsApi - functional programming interface
 * @export
 */
export const OrdersIdCommentsApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = OrdersIdCommentsApiAxiosParamCreator(configuration)
    return {
        /**
         * Adds a comment to a specified order.
         * @summary orders/{id}/comments
         * @param {number} id The order ID.
         * @param {SalesOrderManagementV1AddCommentPostRequest} [salesOrderManagementV1AddCommentPostBody] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async salesOrderManagementV1AddCommentPost(id: number, salesOrderManagementV1AddCommentPostBody?: SalesOrderManagementV1AddCommentPostRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<boolean>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.salesOrderManagementV1AddCommentPost(id, salesOrderManagementV1AddCommentPostBody, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Lists comments for a specified order.
         * @summary orders/{id}/comments
         * @param {number} id The order ID.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async salesOrderManagementV1GetCommentsListGet(id: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<SalesDataOrderStatusHistorySearchResultInterface>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.salesOrderManagementV1GetCommentsListGet(id, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * OrdersIdCommentsApi - factory interface
 * @export
 */
export const OrdersIdCommentsApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = OrdersIdCommentsApiFp(configuration)
    return {
        /**
         * Adds a comment to a specified order.
         * @summary orders/{id}/comments
         * @param {number} id The order ID.
         * @param {SalesOrderManagementV1AddCommentPostRequest} [salesOrderManagementV1AddCommentPostBody] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        salesOrderManagementV1AddCommentPost(id: number, salesOrderManagementV1AddCommentPostBody?: SalesOrderManagementV1AddCommentPostRequest, options?: any): AxiosPromise<boolean> {
            return localVarFp.salesOrderManagementV1AddCommentPost(id, salesOrderManagementV1AddCommentPostBody, options).then((request) => request(axios, basePath));
        },
        /**
         * Lists comments for a specified order.
         * @summary orders/{id}/comments
         * @param {number} id The order ID.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        salesOrderManagementV1GetCommentsListGet(id: number, options?: any): AxiosPromise<SalesDataOrderStatusHistorySearchResultInterface> {
            return localVarFp.salesOrderManagementV1GetCommentsListGet(id, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * OrdersIdCommentsApi - object-oriented interface
 * @export
 * @class OrdersIdCommentsApi
 * @extends {BaseAPI}
 */
export class OrdersIdCommentsApi extends BaseAPI {
    /**
     * Adds a comment to a specified order.
     * @summary orders/{id}/comments
     * @param {number} id The order ID.
     * @param {SalesOrderManagementV1AddCommentPostRequest} [salesOrderManagementV1AddCommentPostBody] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OrdersIdCommentsApi
     */
    public salesOrderManagementV1AddCommentPost(id: number, salesOrderManagementV1AddCommentPostBody?: SalesOrderManagementV1AddCommentPostRequest, options?: AxiosRequestConfig) {
        return OrdersIdCommentsApiFp(this.configuration).salesOrderManagementV1AddCommentPost(id, salesOrderManagementV1AddCommentPostBody, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Lists comments for a specified order.
     * @summary orders/{id}/comments
     * @param {number} id The order ID.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OrdersIdCommentsApi
     */
    public salesOrderManagementV1GetCommentsListGet(id: number, options?: AxiosRequestConfig) {
        return OrdersIdCommentsApiFp(this.configuration).salesOrderManagementV1GetCommentsListGet(id, options).then((request) => request(this.axios, this.basePath));
    }
}


/**
 * OrdersIdEmailsApi - axios parameter creator
 * @export
 */
export const OrdersIdEmailsApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Emails a user a specified order.
         * @summary orders/{id}/emails
         * @param {number} id The order ID.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        salesOrderManagementV1NotifyPost: async (id: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('salesOrderManagementV1NotifyPost', 'id', id)
            const localVarPath = `/V1/orders/{id}/emails`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * OrdersIdEmailsApi - functional programming interface
 * @export
 */
export const OrdersIdEmailsApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = OrdersIdEmailsApiAxiosParamCreator(configuration)
    return {
        /**
         * Emails a user a specified order.
         * @summary orders/{id}/emails
         * @param {number} id The order ID.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async salesOrderManagementV1NotifyPost(id: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<boolean>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.salesOrderManagementV1NotifyPost(id, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * OrdersIdEmailsApi - factory interface
 * @export
 */
export const OrdersIdEmailsApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = OrdersIdEmailsApiFp(configuration)
    return {
        /**
         * Emails a user a specified order.
         * @summary orders/{id}/emails
         * @param {number} id The order ID.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        salesOrderManagementV1NotifyPost(id: number, options?: any): AxiosPromise<boolean> {
            return localVarFp.salesOrderManagementV1NotifyPost(id, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * OrdersIdEmailsApi - object-oriented interface
 * @export
 * @class OrdersIdEmailsApi
 * @extends {BaseAPI}
 */
export class OrdersIdEmailsApi extends BaseAPI {
    /**
     * Emails a user a specified order.
     * @summary orders/{id}/emails
     * @param {number} id The order ID.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OrdersIdEmailsApi
     */
    public salesOrderManagementV1NotifyPost(id: number, options?: AxiosRequestConfig) {
        return OrdersIdEmailsApiFp(this.configuration).salesOrderManagementV1NotifyPost(id, options).then((request) => request(this.axios, this.basePath));
    }
}


/**
 * OrdersIdHoldApi - axios parameter creator
 * @export
 */
export const OrdersIdHoldApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Holds a specified order.
         * @summary orders/{id}/hold
         * @param {number} id The order ID.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        salesOrderManagementV1HoldPost: async (id: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('salesOrderManagementV1HoldPost', 'id', id)
            const localVarPath = `/V1/orders/{id}/hold`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * OrdersIdHoldApi - functional programming interface
 * @export
 */
export const OrdersIdHoldApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = OrdersIdHoldApiAxiosParamCreator(configuration)
    return {
        /**
         * Holds a specified order.
         * @summary orders/{id}/hold
         * @param {number} id The order ID.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async salesOrderManagementV1HoldPost(id: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<boolean>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.salesOrderManagementV1HoldPost(id, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * OrdersIdHoldApi - factory interface
 * @export
 */
export const OrdersIdHoldApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = OrdersIdHoldApiFp(configuration)
    return {
        /**
         * Holds a specified order.
         * @summary orders/{id}/hold
         * @param {number} id The order ID.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        salesOrderManagementV1HoldPost(id: number, options?: any): AxiosPromise<boolean> {
            return localVarFp.salesOrderManagementV1HoldPost(id, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * OrdersIdHoldApi - object-oriented interface
 * @export
 * @class OrdersIdHoldApi
 * @extends {BaseAPI}
 */
export class OrdersIdHoldApi extends BaseAPI {
    /**
     * Holds a specified order.
     * @summary orders/{id}/hold
     * @param {number} id The order ID.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OrdersIdHoldApi
     */
    public salesOrderManagementV1HoldPost(id: number, options?: AxiosRequestConfig) {
        return OrdersIdHoldApiFp(this.configuration).salesOrderManagementV1HoldPost(id, options).then((request) => request(this.axios, this.basePath));
    }
}


/**
 * OrdersIdStatusesApi - axios parameter creator
 * @export
 */
export const OrdersIdStatusesApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Gets the status for a specified order.
         * @summary orders/{id}/statuses
         * @param {number} id The order ID.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        salesOrderManagementV1GetStatusGet: async (id: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('salesOrderManagementV1GetStatusGet', 'id', id)
            const localVarPath = `/V1/orders/{id}/statuses`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * OrdersIdStatusesApi - functional programming interface
 * @export
 */
export const OrdersIdStatusesApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = OrdersIdStatusesApiAxiosParamCreator(configuration)
    return {
        /**
         * Gets the status for a specified order.
         * @summary orders/{id}/statuses
         * @param {number} id The order ID.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async salesOrderManagementV1GetStatusGet(id: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<string>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.salesOrderManagementV1GetStatusGet(id, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * OrdersIdStatusesApi - factory interface
 * @export
 */
export const OrdersIdStatusesApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = OrdersIdStatusesApiFp(configuration)
    return {
        /**
         * Gets the status for a specified order.
         * @summary orders/{id}/statuses
         * @param {number} id The order ID.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        salesOrderManagementV1GetStatusGet(id: number, options?: any): AxiosPromise<string> {
            return localVarFp.salesOrderManagementV1GetStatusGet(id, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * OrdersIdStatusesApi - object-oriented interface
 * @export
 * @class OrdersIdStatusesApi
 * @extends {BaseAPI}
 */
export class OrdersIdStatusesApi extends BaseAPI {
    /**
     * Gets the status for a specified order.
     * @summary orders/{id}/statuses
     * @param {number} id The order ID.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OrdersIdStatusesApi
     */
    public salesOrderManagementV1GetStatusGet(id: number, options?: AxiosRequestConfig) {
        return OrdersIdStatusesApiFp(this.configuration).salesOrderManagementV1GetStatusGet(id, options).then((request) => request(this.axios, this.basePath));
    }
}


/**
 * OrdersIdUnholdApi - axios parameter creator
 * @export
 */
export const OrdersIdUnholdApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Releases a specified order from hold status.
         * @summary orders/{id}/unhold
         * @param {number} id The order ID.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        salesOrderManagementV1UnHoldPost: async (id: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('salesOrderManagementV1UnHoldPost', 'id', id)
            const localVarPath = `/V1/orders/{id}/unhold`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * OrdersIdUnholdApi - functional programming interface
 * @export
 */
export const OrdersIdUnholdApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = OrdersIdUnholdApiAxiosParamCreator(configuration)
    return {
        /**
         * Releases a specified order from hold status.
         * @summary orders/{id}/unhold
         * @param {number} id The order ID.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async salesOrderManagementV1UnHoldPost(id: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<boolean>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.salesOrderManagementV1UnHoldPost(id, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * OrdersIdUnholdApi - factory interface
 * @export
 */
export const OrdersIdUnholdApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = OrdersIdUnholdApiFp(configuration)
    return {
        /**
         * Releases a specified order from hold status.
         * @summary orders/{id}/unhold
         * @param {number} id The order ID.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        salesOrderManagementV1UnHoldPost(id: number, options?: any): AxiosPromise<boolean> {
            return localVarFp.salesOrderManagementV1UnHoldPost(id, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * OrdersIdUnholdApi - object-oriented interface
 * @export
 * @class OrdersIdUnholdApi
 * @extends {BaseAPI}
 */
export class OrdersIdUnholdApi extends BaseAPI {
    /**
     * Releases a specified order from hold status.
     * @summary orders/{id}/unhold
     * @param {number} id The order ID.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OrdersIdUnholdApi
     */
    public salesOrderManagementV1UnHoldPost(id: number, options?: AxiosRequestConfig) {
        return OrdersIdUnholdApiFp(this.configuration).salesOrderManagementV1UnHoldPost(id, options).then((request) => request(this.axios, this.basePath));
    }
}


/**
 * OrdersItemsApi - axios parameter creator
 * @export
 */
export const OrdersItemsApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Lists order items that match specified search criteria. This call returns an array of objects, but detailed information about each object’s attributes might not be included. See http://devdocs.magento.com/codelinks/attributes.html#OrderItemRepositoryInterface to determine which call to use to get detailed information about all attributes for an object.
         * @summary orders/items
         * @param {string} [searchCriteriaFilterGroups0Filters0Field] Field
         * @param {string} [searchCriteriaFilterGroups0Filters0Value] Value
         * @param {string} [searchCriteriaFilterGroups0Filters0ConditionType] Condition type
         * @param {string} [searchCriteriaSortOrders0Field] Sorting field.
         * @param {string} [searchCriteriaSortOrders0Direction] Sorting direction.
         * @param {number} [searchCriteriaPageSize] Page size.
         * @param {number} [searchCriteriaCurrentPage] Current page.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        salesOrderItemRepositoryV1GetListGet: async (searchCriteriaFilterGroups0Filters0Field?: string, searchCriteriaFilterGroups0Filters0Value?: string, searchCriteriaFilterGroups0Filters0ConditionType?: string, searchCriteriaSortOrders0Field?: string, searchCriteriaSortOrders0Direction?: string, searchCriteriaPageSize?: number, searchCriteriaCurrentPage?: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/V1/orders/items`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (searchCriteriaFilterGroups0Filters0Field !== undefined) {
                localVarQueryParameter['searchCriteria[filterGroups][0][filters][0][field]'] = searchCriteriaFilterGroups0Filters0Field;
            }

            if (searchCriteriaFilterGroups0Filters0Value !== undefined) {
                localVarQueryParameter['searchCriteria[filterGroups][0][filters][0][value]'] = searchCriteriaFilterGroups0Filters0Value;
            }

            if (searchCriteriaFilterGroups0Filters0ConditionType !== undefined) {
                localVarQueryParameter['searchCriteria[filterGroups][0][filters][0][conditionType]'] = searchCriteriaFilterGroups0Filters0ConditionType;
            }

            if (searchCriteriaSortOrders0Field !== undefined) {
                localVarQueryParameter['searchCriteria[sortOrders][0][field]'] = searchCriteriaSortOrders0Field;
            }

            if (searchCriteriaSortOrders0Direction !== undefined) {
                localVarQueryParameter['searchCriteria[sortOrders][0][direction]'] = searchCriteriaSortOrders0Direction;
            }

            if (searchCriteriaPageSize !== undefined) {
                localVarQueryParameter['searchCriteria[pageSize]'] = searchCriteriaPageSize;
            }

            if (searchCriteriaCurrentPage !== undefined) {
                localVarQueryParameter['searchCriteria[currentPage]'] = searchCriteriaCurrentPage;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * OrdersItemsApi - functional programming interface
 * @export
 */
export const OrdersItemsApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = OrdersItemsApiAxiosParamCreator(configuration)
    return {
        /**
         * Lists order items that match specified search criteria. This call returns an array of objects, but detailed information about each object’s attributes might not be included. See http://devdocs.magento.com/codelinks/attributes.html#OrderItemRepositoryInterface to determine which call to use to get detailed information about all attributes for an object.
         * @summary orders/items
         * @param {string} [searchCriteriaFilterGroups0Filters0Field] Field
         * @param {string} [searchCriteriaFilterGroups0Filters0Value] Value
         * @param {string} [searchCriteriaFilterGroups0Filters0ConditionType] Condition type
         * @param {string} [searchCriteriaSortOrders0Field] Sorting field.
         * @param {string} [searchCriteriaSortOrders0Direction] Sorting direction.
         * @param {number} [searchCriteriaPageSize] Page size.
         * @param {number} [searchCriteriaCurrentPage] Current page.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async salesOrderItemRepositoryV1GetListGet(searchCriteriaFilterGroups0Filters0Field?: string, searchCriteriaFilterGroups0Filters0Value?: string, searchCriteriaFilterGroups0Filters0ConditionType?: string, searchCriteriaSortOrders0Field?: string, searchCriteriaSortOrders0Direction?: string, searchCriteriaPageSize?: number, searchCriteriaCurrentPage?: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<SalesDataOrderItemSearchResultInterface>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.salesOrderItemRepositoryV1GetListGet(searchCriteriaFilterGroups0Filters0Field, searchCriteriaFilterGroups0Filters0Value, searchCriteriaFilterGroups0Filters0ConditionType, searchCriteriaSortOrders0Field, searchCriteriaSortOrders0Direction, searchCriteriaPageSize, searchCriteriaCurrentPage, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * OrdersItemsApi - factory interface
 * @export
 */
export const OrdersItemsApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = OrdersItemsApiFp(configuration)
    return {
        /**
         * Lists order items that match specified search criteria. This call returns an array of objects, but detailed information about each object’s attributes might not be included. See http://devdocs.magento.com/codelinks/attributes.html#OrderItemRepositoryInterface to determine which call to use to get detailed information about all attributes for an object.
         * @summary orders/items
         * @param {string} [searchCriteriaFilterGroups0Filters0Field] Field
         * @param {string} [searchCriteriaFilterGroups0Filters0Value] Value
         * @param {string} [searchCriteriaFilterGroups0Filters0ConditionType] Condition type
         * @param {string} [searchCriteriaSortOrders0Field] Sorting field.
         * @param {string} [searchCriteriaSortOrders0Direction] Sorting direction.
         * @param {number} [searchCriteriaPageSize] Page size.
         * @param {number} [searchCriteriaCurrentPage] Current page.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        salesOrderItemRepositoryV1GetListGet(searchCriteriaFilterGroups0Filters0Field?: string, searchCriteriaFilterGroups0Filters0Value?: string, searchCriteriaFilterGroups0Filters0ConditionType?: string, searchCriteriaSortOrders0Field?: string, searchCriteriaSortOrders0Direction?: string, searchCriteriaPageSize?: number, searchCriteriaCurrentPage?: number, options?: any): AxiosPromise<SalesDataOrderItemSearchResultInterface> {
            return localVarFp.salesOrderItemRepositoryV1GetListGet(searchCriteriaFilterGroups0Filters0Field, searchCriteriaFilterGroups0Filters0Value, searchCriteriaFilterGroups0Filters0ConditionType, searchCriteriaSortOrders0Field, searchCriteriaSortOrders0Direction, searchCriteriaPageSize, searchCriteriaCurrentPage, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * OrdersItemsApi - object-oriented interface
 * @export
 * @class OrdersItemsApi
 * @extends {BaseAPI}
 */
export class OrdersItemsApi extends BaseAPI {
    /**
     * Lists order items that match specified search criteria. This call returns an array of objects, but detailed information about each object’s attributes might not be included. See http://devdocs.magento.com/codelinks/attributes.html#OrderItemRepositoryInterface to determine which call to use to get detailed information about all attributes for an object.
     * @summary orders/items
     * @param {string} [searchCriteriaFilterGroups0Filters0Field] Field
     * @param {string} [searchCriteriaFilterGroups0Filters0Value] Value
     * @param {string} [searchCriteriaFilterGroups0Filters0ConditionType] Condition type
     * @param {string} [searchCriteriaSortOrders0Field] Sorting field.
     * @param {string} [searchCriteriaSortOrders0Direction] Sorting direction.
     * @param {number} [searchCriteriaPageSize] Page size.
     * @param {number} [searchCriteriaCurrentPage] Current page.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OrdersItemsApi
     */
    public salesOrderItemRepositoryV1GetListGet(searchCriteriaFilterGroups0Filters0Field?: string, searchCriteriaFilterGroups0Filters0Value?: string, searchCriteriaFilterGroups0Filters0ConditionType?: string, searchCriteriaSortOrders0Field?: string, searchCriteriaSortOrders0Direction?: string, searchCriteriaPageSize?: number, searchCriteriaCurrentPage?: number, options?: AxiosRequestConfig) {
        return OrdersItemsApiFp(this.configuration).salesOrderItemRepositoryV1GetListGet(searchCriteriaFilterGroups0Filters0Field, searchCriteriaFilterGroups0Filters0Value, searchCriteriaFilterGroups0Filters0ConditionType, searchCriteriaSortOrders0Field, searchCriteriaSortOrders0Direction, searchCriteriaPageSize, searchCriteriaCurrentPage, options).then((request) => request(this.axios, this.basePath));
    }
}


/**
 * OrdersItemsIdApi - axios parameter creator
 * @export
 */
export const OrdersItemsIdApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Loads a specified order item.
         * @summary orders/items/{id}
         * @param {number} id The order item ID.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        salesOrderItemRepositoryV1GetGet: async (id: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('salesOrderItemRepositoryV1GetGet', 'id', id)
            const localVarPath = `/V1/orders/items/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * OrdersItemsIdApi - functional programming interface
 * @export
 */
export const OrdersItemsIdApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = OrdersItemsIdApiAxiosParamCreator(configuration)
    return {
        /**
         * Loads a specified order item.
         * @summary orders/items/{id}
         * @param {number} id The order item ID.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async salesOrderItemRepositoryV1GetGet(id: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<SalesDataOrderItemInterface>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.salesOrderItemRepositoryV1GetGet(id, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * OrdersItemsIdApi - factory interface
 * @export
 */
export const OrdersItemsIdApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = OrdersItemsIdApiFp(configuration)
    return {
        /**
         * Loads a specified order item.
         * @summary orders/items/{id}
         * @param {number} id The order item ID.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        salesOrderItemRepositoryV1GetGet(id: number, options?: any): AxiosPromise<SalesDataOrderItemInterface> {
            return localVarFp.salesOrderItemRepositoryV1GetGet(id, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * OrdersItemsIdApi - object-oriented interface
 * @export
 * @class OrdersItemsIdApi
 * @extends {BaseAPI}
 */
export class OrdersItemsIdApi extends BaseAPI {
    /**
     * Loads a specified order item.
     * @summary orders/items/{id}
     * @param {number} id The order item ID.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OrdersItemsIdApi
     */
    public salesOrderItemRepositoryV1GetGet(id: number, options?: AxiosRequestConfig) {
        return OrdersItemsIdApiFp(this.configuration).salesOrderItemRepositoryV1GetGet(id, options).then((request) => request(this.axios, this.basePath));
    }
}


/**
 * OrdersParentIdApi - axios parameter creator
 * @export
 */
export const OrdersParentIdApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Performs persist operations for a specified order address.
         * @summary orders/{parent_id}
         * @param {string} parentId 
         * @param {SalesOrderAddressRepositoryV1SavePutRequest} [salesOrderAddressRepositoryV1SavePutBody] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        salesOrderAddressRepositoryV1SavePut: async (parentId: string, salesOrderAddressRepositoryV1SavePutBody?: SalesOrderAddressRepositoryV1SavePutRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'parentId' is not null or undefined
            assertParamExists('salesOrderAddressRepositoryV1SavePut', 'parentId', parentId)
            const localVarPath = `/V1/orders/{parent_id}`
                .replace(`{${"parent_id"}}`, encodeURIComponent(String(parentId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(salesOrderAddressRepositoryV1SavePutBody, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * OrdersParentIdApi - functional programming interface
 * @export
 */
export const OrdersParentIdApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = OrdersParentIdApiAxiosParamCreator(configuration)
    return {
        /**
         * Performs persist operations for a specified order address.
         * @summary orders/{parent_id}
         * @param {string} parentId 
         * @param {SalesOrderAddressRepositoryV1SavePutRequest} [salesOrderAddressRepositoryV1SavePutBody] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async salesOrderAddressRepositoryV1SavePut(parentId: string, salesOrderAddressRepositoryV1SavePutBody?: SalesOrderAddressRepositoryV1SavePutRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<SalesDataOrderAddressInterface>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.salesOrderAddressRepositoryV1SavePut(parentId, salesOrderAddressRepositoryV1SavePutBody, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * OrdersParentIdApi - factory interface
 * @export
 */
export const OrdersParentIdApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = OrdersParentIdApiFp(configuration)
    return {
        /**
         * Performs persist operations for a specified order address.
         * @summary orders/{parent_id}
         * @param {string} parentId 
         * @param {SalesOrderAddressRepositoryV1SavePutRequest} [salesOrderAddressRepositoryV1SavePutBody] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        salesOrderAddressRepositoryV1SavePut(parentId: string, salesOrderAddressRepositoryV1SavePutBody?: SalesOrderAddressRepositoryV1SavePutRequest, options?: any): AxiosPromise<SalesDataOrderAddressInterface> {
            return localVarFp.salesOrderAddressRepositoryV1SavePut(parentId, salesOrderAddressRepositoryV1SavePutBody, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * OrdersParentIdApi - object-oriented interface
 * @export
 * @class OrdersParentIdApi
 * @extends {BaseAPI}
 */
export class OrdersParentIdApi extends BaseAPI {
    /**
     * Performs persist operations for a specified order address.
     * @summary orders/{parent_id}
     * @param {string} parentId 
     * @param {SalesOrderAddressRepositoryV1SavePutRequest} [salesOrderAddressRepositoryV1SavePutBody] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OrdersParentIdApi
     */
    public salesOrderAddressRepositoryV1SavePut(parentId: string, salesOrderAddressRepositoryV1SavePutBody?: SalesOrderAddressRepositoryV1SavePutRequest, options?: AxiosRequestConfig) {
        return OrdersParentIdApiFp(this.configuration).salesOrderAddressRepositoryV1SavePut(parentId, salesOrderAddressRepositoryV1SavePutBody, options).then((request) => request(this.axios, this.basePath));
    }
}


/**
 * ProductsApi - axios parameter creator
 * @export
 */
export const ProductsApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Get product list
         * @summary products
         * @param {string} [searchCriteriaFilterGroups0Filters0Field] Field
         * @param {string} [searchCriteriaFilterGroups0Filters0Value] Value
         * @param {string} [searchCriteriaFilterGroups0Filters0ConditionType] Condition type
         * @param {string} [searchCriteriaSortOrders0Field] Sorting field.
         * @param {string} [searchCriteriaSortOrders0Direction] Sorting direction.
         * @param {number} [searchCriteriaPageSize] Page size.
         * @param {number} [searchCriteriaCurrentPage] Current page.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        catalogProductRepositoryV1GetListGet: async (searchCriteriaFilterGroups0Filters0Field?: string, searchCriteriaFilterGroups0Filters0Value?: string, searchCriteriaFilterGroups0Filters0ConditionType?: string, searchCriteriaSortOrders0Field?: string, searchCriteriaSortOrders0Direction?: string, searchCriteriaPageSize?: number, searchCriteriaCurrentPage?: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/V1/products`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (searchCriteriaFilterGroups0Filters0Field !== undefined) {
                localVarQueryParameter['searchCriteria[filterGroups][0][filters][0][field]'] = searchCriteriaFilterGroups0Filters0Field;
            }

            if (searchCriteriaFilterGroups0Filters0Value !== undefined) {
                localVarQueryParameter['searchCriteria[filterGroups][0][filters][0][value]'] = searchCriteriaFilterGroups0Filters0Value;
            }

            if (searchCriteriaFilterGroups0Filters0ConditionType !== undefined) {
                localVarQueryParameter['searchCriteria[filterGroups][0][filters][0][conditionType]'] = searchCriteriaFilterGroups0Filters0ConditionType;
            }

            if (searchCriteriaSortOrders0Field !== undefined) {
                localVarQueryParameter['searchCriteria[sortOrders][0][field]'] = searchCriteriaSortOrders0Field;
            }

            if (searchCriteriaSortOrders0Direction !== undefined) {
                localVarQueryParameter['searchCriteria[sortOrders][0][direction]'] = searchCriteriaSortOrders0Direction;
            }

            if (searchCriteriaPageSize !== undefined) {
                localVarQueryParameter['searchCriteria[pageSize]'] = searchCriteriaPageSize;
            }

            if (searchCriteriaCurrentPage !== undefined) {
                localVarQueryParameter['searchCriteria[currentPage]'] = searchCriteriaCurrentPage;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Create product
         * @summary products
         * @param {CatalogProductRepositoryV1SavePostRequest} [catalogProductRepositoryV1SavePostBody] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        catalogProductRepositoryV1SavePost: async (catalogProductRepositoryV1SavePostBody?: CatalogProductRepositoryV1SavePostRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/V1/products`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(catalogProductRepositoryV1SavePostBody, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * ProductsApi - functional programming interface
 * @export
 */
export const ProductsApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = ProductsApiAxiosParamCreator(configuration)
    return {
        /**
         * Get product list
         * @summary products
         * @param {string} [searchCriteriaFilterGroups0Filters0Field] Field
         * @param {string} [searchCriteriaFilterGroups0Filters0Value] Value
         * @param {string} [searchCriteriaFilterGroups0Filters0ConditionType] Condition type
         * @param {string} [searchCriteriaSortOrders0Field] Sorting field.
         * @param {string} [searchCriteriaSortOrders0Direction] Sorting direction.
         * @param {number} [searchCriteriaPageSize] Page size.
         * @param {number} [searchCriteriaCurrentPage] Current page.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async catalogProductRepositoryV1GetListGet(searchCriteriaFilterGroups0Filters0Field?: string, searchCriteriaFilterGroups0Filters0Value?: string, searchCriteriaFilterGroups0Filters0ConditionType?: string, searchCriteriaSortOrders0Field?: string, searchCriteriaSortOrders0Direction?: string, searchCriteriaPageSize?: number, searchCriteriaCurrentPage?: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<CatalogDataProductSearchResultsInterface>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.catalogProductRepositoryV1GetListGet(searchCriteriaFilterGroups0Filters0Field, searchCriteriaFilterGroups0Filters0Value, searchCriteriaFilterGroups0Filters0ConditionType, searchCriteriaSortOrders0Field, searchCriteriaSortOrders0Direction, searchCriteriaPageSize, searchCriteriaCurrentPage, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Create product
         * @summary products
         * @param {CatalogProductRepositoryV1SavePostRequest} [catalogProductRepositoryV1SavePostBody] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async catalogProductRepositoryV1SavePost(catalogProductRepositoryV1SavePostBody?: CatalogProductRepositoryV1SavePostRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<CatalogDataProductInterface>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.catalogProductRepositoryV1SavePost(catalogProductRepositoryV1SavePostBody, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * ProductsApi - factory interface
 * @export
 */
export const ProductsApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = ProductsApiFp(configuration)
    return {
        /**
         * Get product list
         * @summary products
         * @param {string} [searchCriteriaFilterGroups0Filters0Field] Field
         * @param {string} [searchCriteriaFilterGroups0Filters0Value] Value
         * @param {string} [searchCriteriaFilterGroups0Filters0ConditionType] Condition type
         * @param {string} [searchCriteriaSortOrders0Field] Sorting field.
         * @param {string} [searchCriteriaSortOrders0Direction] Sorting direction.
         * @param {number} [searchCriteriaPageSize] Page size.
         * @param {number} [searchCriteriaCurrentPage] Current page.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        catalogProductRepositoryV1GetListGet(searchCriteriaFilterGroups0Filters0Field?: string, searchCriteriaFilterGroups0Filters0Value?: string, searchCriteriaFilterGroups0Filters0ConditionType?: string, searchCriteriaSortOrders0Field?: string, searchCriteriaSortOrders0Direction?: string, searchCriteriaPageSize?: number, searchCriteriaCurrentPage?: number, options?: any): AxiosPromise<CatalogDataProductSearchResultsInterface> {
            return localVarFp.catalogProductRepositoryV1GetListGet(searchCriteriaFilterGroups0Filters0Field, searchCriteriaFilterGroups0Filters0Value, searchCriteriaFilterGroups0Filters0ConditionType, searchCriteriaSortOrders0Field, searchCriteriaSortOrders0Direction, searchCriteriaPageSize, searchCriteriaCurrentPage, options).then((request) => request(axios, basePath));
        },
        /**
         * Create product
         * @summary products
         * @param {CatalogProductRepositoryV1SavePostRequest} [catalogProductRepositoryV1SavePostBody] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        catalogProductRepositoryV1SavePost(catalogProductRepositoryV1SavePostBody?: CatalogProductRepositoryV1SavePostRequest, options?: any): AxiosPromise<CatalogDataProductInterface> {
            return localVarFp.catalogProductRepositoryV1SavePost(catalogProductRepositoryV1SavePostBody, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * ProductsApi - object-oriented interface
 * @export
 * @class ProductsApi
 * @extends {BaseAPI}
 */
export class ProductsApi extends BaseAPI {
    /**
     * Get product list
     * @summary products
     * @param {string} [searchCriteriaFilterGroups0Filters0Field] Field
     * @param {string} [searchCriteriaFilterGroups0Filters0Value] Value
     * @param {string} [searchCriteriaFilterGroups0Filters0ConditionType] Condition type
     * @param {string} [searchCriteriaSortOrders0Field] Sorting field.
     * @param {string} [searchCriteriaSortOrders0Direction] Sorting direction.
     * @param {number} [searchCriteriaPageSize] Page size.
     * @param {number} [searchCriteriaCurrentPage] Current page.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProductsApi
     */
    public catalogProductRepositoryV1GetListGet(searchCriteriaFilterGroups0Filters0Field?: string, searchCriteriaFilterGroups0Filters0Value?: string, searchCriteriaFilterGroups0Filters0ConditionType?: string, searchCriteriaSortOrders0Field?: string, searchCriteriaSortOrders0Direction?: string, searchCriteriaPageSize?: number, searchCriteriaCurrentPage?: number, options?: AxiosRequestConfig) {
        return ProductsApiFp(this.configuration).catalogProductRepositoryV1GetListGet(searchCriteriaFilterGroups0Filters0Field, searchCriteriaFilterGroups0Filters0Value, searchCriteriaFilterGroups0Filters0ConditionType, searchCriteriaSortOrders0Field, searchCriteriaSortOrders0Direction, searchCriteriaPageSize, searchCriteriaCurrentPage, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Create product
     * @summary products
     * @param {CatalogProductRepositoryV1SavePostRequest} [catalogProductRepositoryV1SavePostBody] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProductsApi
     */
    public catalogProductRepositoryV1SavePost(catalogProductRepositoryV1SavePostBody?: CatalogProductRepositoryV1SavePostRequest, options?: AxiosRequestConfig) {
        return ProductsApiFp(this.configuration).catalogProductRepositoryV1SavePost(catalogProductRepositoryV1SavePostBody, options).then((request) => request(this.axios, this.basePath));
    }
}


/**
 * ProductsAttributeSetsApi - axios parameter creator
 * @export
 */
export const ProductsAttributeSetsApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Create attribute set from data
         * @summary products/attribute-sets
         * @param {CatalogAttributeSetManagementV1CreatePostRequest} [catalogAttributeSetManagementV1CreatePostBody] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        catalogAttributeSetManagementV1CreatePost: async (catalogAttributeSetManagementV1CreatePostBody?: CatalogAttributeSetManagementV1CreatePostRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/V1/products/attribute-sets`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(catalogAttributeSetManagementV1CreatePostBody, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * ProductsAttributeSetsApi - functional programming interface
 * @export
 */
export const ProductsAttributeSetsApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = ProductsAttributeSetsApiAxiosParamCreator(configuration)
    return {
        /**
         * Create attribute set from data
         * @summary products/attribute-sets
         * @param {CatalogAttributeSetManagementV1CreatePostRequest} [catalogAttributeSetManagementV1CreatePostBody] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async catalogAttributeSetManagementV1CreatePost(catalogAttributeSetManagementV1CreatePostBody?: CatalogAttributeSetManagementV1CreatePostRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<EavDataAttributeSetInterface>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.catalogAttributeSetManagementV1CreatePost(catalogAttributeSetManagementV1CreatePostBody, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * ProductsAttributeSetsApi - factory interface
 * @export
 */
export const ProductsAttributeSetsApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = ProductsAttributeSetsApiFp(configuration)
    return {
        /**
         * Create attribute set from data
         * @summary products/attribute-sets
         * @param {CatalogAttributeSetManagementV1CreatePostRequest} [catalogAttributeSetManagementV1CreatePostBody] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        catalogAttributeSetManagementV1CreatePost(catalogAttributeSetManagementV1CreatePostBody?: CatalogAttributeSetManagementV1CreatePostRequest, options?: any): AxiosPromise<EavDataAttributeSetInterface> {
            return localVarFp.catalogAttributeSetManagementV1CreatePost(catalogAttributeSetManagementV1CreatePostBody, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * ProductsAttributeSetsApi - object-oriented interface
 * @export
 * @class ProductsAttributeSetsApi
 * @extends {BaseAPI}
 */
export class ProductsAttributeSetsApi extends BaseAPI {
    /**
     * Create attribute set from data
     * @summary products/attribute-sets
     * @param {CatalogAttributeSetManagementV1CreatePostRequest} [catalogAttributeSetManagementV1CreatePostBody] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProductsAttributeSetsApi
     */
    public catalogAttributeSetManagementV1CreatePost(catalogAttributeSetManagementV1CreatePostBody?: CatalogAttributeSetManagementV1CreatePostRequest, options?: AxiosRequestConfig) {
        return ProductsAttributeSetsApiFp(this.configuration).catalogAttributeSetManagementV1CreatePost(catalogAttributeSetManagementV1CreatePostBody, options).then((request) => request(this.axios, this.basePath));
    }
}


/**
 * ProductsAttributeSetsAttributeSetIdApi - axios parameter creator
 * @export
 */
export const ProductsAttributeSetsAttributeSetIdApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Remove attribute set by given ID
         * @summary products/attribute-sets/{attributeSetId}
         * @param {number} attributeSetId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        catalogAttributeSetRepositoryV1DeleteByIdDelete: async (attributeSetId: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'attributeSetId' is not null or undefined
            assertParamExists('catalogAttributeSetRepositoryV1DeleteByIdDelete', 'attributeSetId', attributeSetId)
            const localVarPath = `/V1/products/attribute-sets/{attributeSetId}`
                .replace(`{${"attributeSetId"}}`, encodeURIComponent(String(attributeSetId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Retrieve attribute set information based on given ID
         * @summary products/attribute-sets/{attributeSetId}
         * @param {number} attributeSetId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        catalogAttributeSetRepositoryV1GetGet: async (attributeSetId: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'attributeSetId' is not null or undefined
            assertParamExists('catalogAttributeSetRepositoryV1GetGet', 'attributeSetId', attributeSetId)
            const localVarPath = `/V1/products/attribute-sets/{attributeSetId}`
                .replace(`{${"attributeSetId"}}`, encodeURIComponent(String(attributeSetId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Save attribute set data
         * @summary products/attribute-sets/{attributeSetId}
         * @param {string} attributeSetId 
         * @param {EavAttributeSetRepositoryV1SavePutRequest} [catalogAttributeSetRepositoryV1SavePutBody] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        catalogAttributeSetRepositoryV1SavePut: async (attributeSetId: string, catalogAttributeSetRepositoryV1SavePutBody?: EavAttributeSetRepositoryV1SavePutRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'attributeSetId' is not null or undefined
            assertParamExists('catalogAttributeSetRepositoryV1SavePut', 'attributeSetId', attributeSetId)
            const localVarPath = `/V1/products/attribute-sets/{attributeSetId}`
                .replace(`{${"attributeSetId"}}`, encodeURIComponent(String(attributeSetId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(catalogAttributeSetRepositoryV1SavePutBody, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * ProductsAttributeSetsAttributeSetIdApi - functional programming interface
 * @export
 */
export const ProductsAttributeSetsAttributeSetIdApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = ProductsAttributeSetsAttributeSetIdApiAxiosParamCreator(configuration)
    return {
        /**
         * Remove attribute set by given ID
         * @summary products/attribute-sets/{attributeSetId}
         * @param {number} attributeSetId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async catalogAttributeSetRepositoryV1DeleteByIdDelete(attributeSetId: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<boolean>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.catalogAttributeSetRepositoryV1DeleteByIdDelete(attributeSetId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Retrieve attribute set information based on given ID
         * @summary products/attribute-sets/{attributeSetId}
         * @param {number} attributeSetId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async catalogAttributeSetRepositoryV1GetGet(attributeSetId: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<EavDataAttributeSetInterface>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.catalogAttributeSetRepositoryV1GetGet(attributeSetId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Save attribute set data
         * @summary products/attribute-sets/{attributeSetId}
         * @param {string} attributeSetId 
         * @param {EavAttributeSetRepositoryV1SavePutRequest} [catalogAttributeSetRepositoryV1SavePutBody] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async catalogAttributeSetRepositoryV1SavePut(attributeSetId: string, catalogAttributeSetRepositoryV1SavePutBody?: EavAttributeSetRepositoryV1SavePutRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<EavDataAttributeSetInterface>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.catalogAttributeSetRepositoryV1SavePut(attributeSetId, catalogAttributeSetRepositoryV1SavePutBody, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * ProductsAttributeSetsAttributeSetIdApi - factory interface
 * @export
 */
export const ProductsAttributeSetsAttributeSetIdApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = ProductsAttributeSetsAttributeSetIdApiFp(configuration)
    return {
        /**
         * Remove attribute set by given ID
         * @summary products/attribute-sets/{attributeSetId}
         * @param {number} attributeSetId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        catalogAttributeSetRepositoryV1DeleteByIdDelete(attributeSetId: number, options?: any): AxiosPromise<boolean> {
            return localVarFp.catalogAttributeSetRepositoryV1DeleteByIdDelete(attributeSetId, options).then((request) => request(axios, basePath));
        },
        /**
         * Retrieve attribute set information based on given ID
         * @summary products/attribute-sets/{attributeSetId}
         * @param {number} attributeSetId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        catalogAttributeSetRepositoryV1GetGet(attributeSetId: number, options?: any): AxiosPromise<EavDataAttributeSetInterface> {
            return localVarFp.catalogAttributeSetRepositoryV1GetGet(attributeSetId, options).then((request) => request(axios, basePath));
        },
        /**
         * Save attribute set data
         * @summary products/attribute-sets/{attributeSetId}
         * @param {string} attributeSetId 
         * @param {EavAttributeSetRepositoryV1SavePutRequest} [catalogAttributeSetRepositoryV1SavePutBody] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        catalogAttributeSetRepositoryV1SavePut(attributeSetId: string, catalogAttributeSetRepositoryV1SavePutBody?: EavAttributeSetRepositoryV1SavePutRequest, options?: any): AxiosPromise<EavDataAttributeSetInterface> {
            return localVarFp.catalogAttributeSetRepositoryV1SavePut(attributeSetId, catalogAttributeSetRepositoryV1SavePutBody, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * ProductsAttributeSetsAttributeSetIdApi - object-oriented interface
 * @export
 * @class ProductsAttributeSetsAttributeSetIdApi
 * @extends {BaseAPI}
 */
export class ProductsAttributeSetsAttributeSetIdApi extends BaseAPI {
    /**
     * Remove attribute set by given ID
     * @summary products/attribute-sets/{attributeSetId}
     * @param {number} attributeSetId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProductsAttributeSetsAttributeSetIdApi
     */
    public catalogAttributeSetRepositoryV1DeleteByIdDelete(attributeSetId: number, options?: AxiosRequestConfig) {
        return ProductsAttributeSetsAttributeSetIdApiFp(this.configuration).catalogAttributeSetRepositoryV1DeleteByIdDelete(attributeSetId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Retrieve attribute set information based on given ID
     * @summary products/attribute-sets/{attributeSetId}
     * @param {number} attributeSetId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProductsAttributeSetsAttributeSetIdApi
     */
    public catalogAttributeSetRepositoryV1GetGet(attributeSetId: number, options?: AxiosRequestConfig) {
        return ProductsAttributeSetsAttributeSetIdApiFp(this.configuration).catalogAttributeSetRepositoryV1GetGet(attributeSetId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Save attribute set data
     * @summary products/attribute-sets/{attributeSetId}
     * @param {string} attributeSetId 
     * @param {EavAttributeSetRepositoryV1SavePutRequest} [catalogAttributeSetRepositoryV1SavePutBody] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProductsAttributeSetsAttributeSetIdApi
     */
    public catalogAttributeSetRepositoryV1SavePut(attributeSetId: string, catalogAttributeSetRepositoryV1SavePutBody?: EavAttributeSetRepositoryV1SavePutRequest, options?: AxiosRequestConfig) {
        return ProductsAttributeSetsAttributeSetIdApiFp(this.configuration).catalogAttributeSetRepositoryV1SavePut(attributeSetId, catalogAttributeSetRepositoryV1SavePutBody, options).then((request) => request(this.axios, this.basePath));
    }
}


/**
 * ProductsAttributeSetsAttributeSetIdAttributesApi - axios parameter creator
 * @export
 */
export const ProductsAttributeSetsAttributeSetIdAttributesApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Retrieve related attributes based on given attribute set ID
         * @summary products/attribute-sets/{attributeSetId}/attributes
         * @param {string} attributeSetId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        catalogProductAttributeManagementV1GetAttributesGet: async (attributeSetId: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'attributeSetId' is not null or undefined
            assertParamExists('catalogProductAttributeManagementV1GetAttributesGet', 'attributeSetId', attributeSetId)
            const localVarPath = `/V1/products/attribute-sets/{attributeSetId}/attributes`
                .replace(`{${"attributeSetId"}}`, encodeURIComponent(String(attributeSetId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * ProductsAttributeSetsAttributeSetIdAttributesApi - functional programming interface
 * @export
 */
export const ProductsAttributeSetsAttributeSetIdAttributesApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = ProductsAttributeSetsAttributeSetIdAttributesApiAxiosParamCreator(configuration)
    return {
        /**
         * Retrieve related attributes based on given attribute set ID
         * @summary products/attribute-sets/{attributeSetId}/attributes
         * @param {string} attributeSetId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async catalogProductAttributeManagementV1GetAttributesGet(attributeSetId: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<CatalogDataProductAttributeInterface>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.catalogProductAttributeManagementV1GetAttributesGet(attributeSetId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * ProductsAttributeSetsAttributeSetIdAttributesApi - factory interface
 * @export
 */
export const ProductsAttributeSetsAttributeSetIdAttributesApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = ProductsAttributeSetsAttributeSetIdAttributesApiFp(configuration)
    return {
        /**
         * Retrieve related attributes based on given attribute set ID
         * @summary products/attribute-sets/{attributeSetId}/attributes
         * @param {string} attributeSetId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        catalogProductAttributeManagementV1GetAttributesGet(attributeSetId: string, options?: any): AxiosPromise<Array<CatalogDataProductAttributeInterface>> {
            return localVarFp.catalogProductAttributeManagementV1GetAttributesGet(attributeSetId, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * ProductsAttributeSetsAttributeSetIdAttributesApi - object-oriented interface
 * @export
 * @class ProductsAttributeSetsAttributeSetIdAttributesApi
 * @extends {BaseAPI}
 */
export class ProductsAttributeSetsAttributeSetIdAttributesApi extends BaseAPI {
    /**
     * Retrieve related attributes based on given attribute set ID
     * @summary products/attribute-sets/{attributeSetId}/attributes
     * @param {string} attributeSetId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProductsAttributeSetsAttributeSetIdAttributesApi
     */
    public catalogProductAttributeManagementV1GetAttributesGet(attributeSetId: string, options?: AxiosRequestConfig) {
        return ProductsAttributeSetsAttributeSetIdAttributesApiFp(this.configuration).catalogProductAttributeManagementV1GetAttributesGet(attributeSetId, options).then((request) => request(this.axios, this.basePath));
    }
}


/**
 * ProductsAttributeSetsAttributeSetIdAttributesAttributeCodeApi - axios parameter creator
 * @export
 */
export const ProductsAttributeSetsAttributeSetIdAttributesAttributeCodeApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Remove attribute from attribute set
         * @summary products/attribute-sets/{attributeSetId}/attributes/{attributeCode}
         * @param {string} attributeSetId 
         * @param {string} attributeCode 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        catalogProductAttributeManagementV1UnassignDelete: async (attributeSetId: string, attributeCode: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'attributeSetId' is not null or undefined
            assertParamExists('catalogProductAttributeManagementV1UnassignDelete', 'attributeSetId', attributeSetId)
            // verify required parameter 'attributeCode' is not null or undefined
            assertParamExists('catalogProductAttributeManagementV1UnassignDelete', 'attributeCode', attributeCode)
            const localVarPath = `/V1/products/attribute-sets/{attributeSetId}/attributes/{attributeCode}`
                .replace(`{${"attributeSetId"}}`, encodeURIComponent(String(attributeSetId)))
                .replace(`{${"attributeCode"}}`, encodeURIComponent(String(attributeCode)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * ProductsAttributeSetsAttributeSetIdAttributesAttributeCodeApi - functional programming interface
 * @export
 */
export const ProductsAttributeSetsAttributeSetIdAttributesAttributeCodeApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = ProductsAttributeSetsAttributeSetIdAttributesAttributeCodeApiAxiosParamCreator(configuration)
    return {
        /**
         * Remove attribute from attribute set
         * @summary products/attribute-sets/{attributeSetId}/attributes/{attributeCode}
         * @param {string} attributeSetId 
         * @param {string} attributeCode 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async catalogProductAttributeManagementV1UnassignDelete(attributeSetId: string, attributeCode: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<boolean>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.catalogProductAttributeManagementV1UnassignDelete(attributeSetId, attributeCode, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * ProductsAttributeSetsAttributeSetIdAttributesAttributeCodeApi - factory interface
 * @export
 */
export const ProductsAttributeSetsAttributeSetIdAttributesAttributeCodeApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = ProductsAttributeSetsAttributeSetIdAttributesAttributeCodeApiFp(configuration)
    return {
        /**
         * Remove attribute from attribute set
         * @summary products/attribute-sets/{attributeSetId}/attributes/{attributeCode}
         * @param {string} attributeSetId 
         * @param {string} attributeCode 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        catalogProductAttributeManagementV1UnassignDelete(attributeSetId: string, attributeCode: string, options?: any): AxiosPromise<boolean> {
            return localVarFp.catalogProductAttributeManagementV1UnassignDelete(attributeSetId, attributeCode, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * ProductsAttributeSetsAttributeSetIdAttributesAttributeCodeApi - object-oriented interface
 * @export
 * @class ProductsAttributeSetsAttributeSetIdAttributesAttributeCodeApi
 * @extends {BaseAPI}
 */
export class ProductsAttributeSetsAttributeSetIdAttributesAttributeCodeApi extends BaseAPI {
    /**
     * Remove attribute from attribute set
     * @summary products/attribute-sets/{attributeSetId}/attributes/{attributeCode}
     * @param {string} attributeSetId 
     * @param {string} attributeCode 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProductsAttributeSetsAttributeSetIdAttributesAttributeCodeApi
     */
    public catalogProductAttributeManagementV1UnassignDelete(attributeSetId: string, attributeCode: string, options?: AxiosRequestConfig) {
        return ProductsAttributeSetsAttributeSetIdAttributesAttributeCodeApiFp(this.configuration).catalogProductAttributeManagementV1UnassignDelete(attributeSetId, attributeCode, options).then((request) => request(this.axios, this.basePath));
    }
}


/**
 * ProductsAttributeSetsAttributeSetIdGroupsApi - axios parameter creator
 * @export
 */
export const ProductsAttributeSetsAttributeSetIdGroupsApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Save attribute group
         * @summary products/attribute-sets/{attributeSetId}/groups
         * @param {string} attributeSetId 
         * @param {CatalogProductAttributeGroupRepositoryV1SavePostRequest} [catalogProductAttributeGroupRepositoryV1SavePutBody] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        catalogProductAttributeGroupRepositoryV1SavePut: async (attributeSetId: string, catalogProductAttributeGroupRepositoryV1SavePutBody?: CatalogProductAttributeGroupRepositoryV1SavePostRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'attributeSetId' is not null or undefined
            assertParamExists('catalogProductAttributeGroupRepositoryV1SavePut', 'attributeSetId', attributeSetId)
            const localVarPath = `/V1/products/attribute-sets/{attributeSetId}/groups`
                .replace(`{${"attributeSetId"}}`, encodeURIComponent(String(attributeSetId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(catalogProductAttributeGroupRepositoryV1SavePutBody, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * ProductsAttributeSetsAttributeSetIdGroupsApi - functional programming interface
 * @export
 */
export const ProductsAttributeSetsAttributeSetIdGroupsApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = ProductsAttributeSetsAttributeSetIdGroupsApiAxiosParamCreator(configuration)
    return {
        /**
         * Save attribute group
         * @summary products/attribute-sets/{attributeSetId}/groups
         * @param {string} attributeSetId 
         * @param {CatalogProductAttributeGroupRepositoryV1SavePostRequest} [catalogProductAttributeGroupRepositoryV1SavePutBody] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async catalogProductAttributeGroupRepositoryV1SavePut(attributeSetId: string, catalogProductAttributeGroupRepositoryV1SavePutBody?: CatalogProductAttributeGroupRepositoryV1SavePostRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<EavDataAttributeGroupInterface>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.catalogProductAttributeGroupRepositoryV1SavePut(attributeSetId, catalogProductAttributeGroupRepositoryV1SavePutBody, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * ProductsAttributeSetsAttributeSetIdGroupsApi - factory interface
 * @export
 */
export const ProductsAttributeSetsAttributeSetIdGroupsApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = ProductsAttributeSetsAttributeSetIdGroupsApiFp(configuration)
    return {
        /**
         * Save attribute group
         * @summary products/attribute-sets/{attributeSetId}/groups
         * @param {string} attributeSetId 
         * @param {CatalogProductAttributeGroupRepositoryV1SavePostRequest} [catalogProductAttributeGroupRepositoryV1SavePutBody] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        catalogProductAttributeGroupRepositoryV1SavePut(attributeSetId: string, catalogProductAttributeGroupRepositoryV1SavePutBody?: CatalogProductAttributeGroupRepositoryV1SavePostRequest, options?: any): AxiosPromise<EavDataAttributeGroupInterface> {
            return localVarFp.catalogProductAttributeGroupRepositoryV1SavePut(attributeSetId, catalogProductAttributeGroupRepositoryV1SavePutBody, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * ProductsAttributeSetsAttributeSetIdGroupsApi - object-oriented interface
 * @export
 * @class ProductsAttributeSetsAttributeSetIdGroupsApi
 * @extends {BaseAPI}
 */
export class ProductsAttributeSetsAttributeSetIdGroupsApi extends BaseAPI {
    /**
     * Save attribute group
     * @summary products/attribute-sets/{attributeSetId}/groups
     * @param {string} attributeSetId 
     * @param {CatalogProductAttributeGroupRepositoryV1SavePostRequest} [catalogProductAttributeGroupRepositoryV1SavePutBody] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProductsAttributeSetsAttributeSetIdGroupsApi
     */
    public catalogProductAttributeGroupRepositoryV1SavePut(attributeSetId: string, catalogProductAttributeGroupRepositoryV1SavePutBody?: CatalogProductAttributeGroupRepositoryV1SavePostRequest, options?: AxiosRequestConfig) {
        return ProductsAttributeSetsAttributeSetIdGroupsApiFp(this.configuration).catalogProductAttributeGroupRepositoryV1SavePut(attributeSetId, catalogProductAttributeGroupRepositoryV1SavePutBody, options).then((request) => request(this.axios, this.basePath));
    }
}


/**
 * ProductsAttributeSetsAttributesApi - axios parameter creator
 * @export
 */
export const ProductsAttributeSetsAttributesApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Assign attribute to attribute set
         * @summary products/attribute-sets/attributes
         * @param {CatalogProductAttributeManagementV1AssignPostRequest} [catalogProductAttributeManagementV1AssignPostBody] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        catalogProductAttributeManagementV1AssignPost: async (catalogProductAttributeManagementV1AssignPostBody?: CatalogProductAttributeManagementV1AssignPostRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/V1/products/attribute-sets/attributes`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(catalogProductAttributeManagementV1AssignPostBody, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * ProductsAttributeSetsAttributesApi - functional programming interface
 * @export
 */
export const ProductsAttributeSetsAttributesApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = ProductsAttributeSetsAttributesApiAxiosParamCreator(configuration)
    return {
        /**
         * Assign attribute to attribute set
         * @summary products/attribute-sets/attributes
         * @param {CatalogProductAttributeManagementV1AssignPostRequest} [catalogProductAttributeManagementV1AssignPostBody] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async catalogProductAttributeManagementV1AssignPost(catalogProductAttributeManagementV1AssignPostBody?: CatalogProductAttributeManagementV1AssignPostRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<number>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.catalogProductAttributeManagementV1AssignPost(catalogProductAttributeManagementV1AssignPostBody, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * ProductsAttributeSetsAttributesApi - factory interface
 * @export
 */
export const ProductsAttributeSetsAttributesApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = ProductsAttributeSetsAttributesApiFp(configuration)
    return {
        /**
         * Assign attribute to attribute set
         * @summary products/attribute-sets/attributes
         * @param {CatalogProductAttributeManagementV1AssignPostRequest} [catalogProductAttributeManagementV1AssignPostBody] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        catalogProductAttributeManagementV1AssignPost(catalogProductAttributeManagementV1AssignPostBody?: CatalogProductAttributeManagementV1AssignPostRequest, options?: any): AxiosPromise<number> {
            return localVarFp.catalogProductAttributeManagementV1AssignPost(catalogProductAttributeManagementV1AssignPostBody, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * ProductsAttributeSetsAttributesApi - object-oriented interface
 * @export
 * @class ProductsAttributeSetsAttributesApi
 * @extends {BaseAPI}
 */
export class ProductsAttributeSetsAttributesApi extends BaseAPI {
    /**
     * Assign attribute to attribute set
     * @summary products/attribute-sets/attributes
     * @param {CatalogProductAttributeManagementV1AssignPostRequest} [catalogProductAttributeManagementV1AssignPostBody] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProductsAttributeSetsAttributesApi
     */
    public catalogProductAttributeManagementV1AssignPost(catalogProductAttributeManagementV1AssignPostBody?: CatalogProductAttributeManagementV1AssignPostRequest, options?: AxiosRequestConfig) {
        return ProductsAttributeSetsAttributesApiFp(this.configuration).catalogProductAttributeManagementV1AssignPost(catalogProductAttributeManagementV1AssignPostBody, options).then((request) => request(this.axios, this.basePath));
    }
}


/**
 * ProductsAttributeSetsGroupsApi - axios parameter creator
 * @export
 */
export const ProductsAttributeSetsGroupsApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Save attribute group
         * @summary products/attribute-sets/groups
         * @param {CatalogProductAttributeGroupRepositoryV1SavePostRequest} [catalogProductAttributeGroupRepositoryV1SavePostBody] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        catalogProductAttributeGroupRepositoryV1SavePost: async (catalogProductAttributeGroupRepositoryV1SavePostBody?: CatalogProductAttributeGroupRepositoryV1SavePostRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/V1/products/attribute-sets/groups`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(catalogProductAttributeGroupRepositoryV1SavePostBody, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * ProductsAttributeSetsGroupsApi - functional programming interface
 * @export
 */
export const ProductsAttributeSetsGroupsApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = ProductsAttributeSetsGroupsApiAxiosParamCreator(configuration)
    return {
        /**
         * Save attribute group
         * @summary products/attribute-sets/groups
         * @param {CatalogProductAttributeGroupRepositoryV1SavePostRequest} [catalogProductAttributeGroupRepositoryV1SavePostBody] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async catalogProductAttributeGroupRepositoryV1SavePost(catalogProductAttributeGroupRepositoryV1SavePostBody?: CatalogProductAttributeGroupRepositoryV1SavePostRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<EavDataAttributeGroupInterface>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.catalogProductAttributeGroupRepositoryV1SavePost(catalogProductAttributeGroupRepositoryV1SavePostBody, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * ProductsAttributeSetsGroupsApi - factory interface
 * @export
 */
export const ProductsAttributeSetsGroupsApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = ProductsAttributeSetsGroupsApiFp(configuration)
    return {
        /**
         * Save attribute group
         * @summary products/attribute-sets/groups
         * @param {CatalogProductAttributeGroupRepositoryV1SavePostRequest} [catalogProductAttributeGroupRepositoryV1SavePostBody] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        catalogProductAttributeGroupRepositoryV1SavePost(catalogProductAttributeGroupRepositoryV1SavePostBody?: CatalogProductAttributeGroupRepositoryV1SavePostRequest, options?: any): AxiosPromise<EavDataAttributeGroupInterface> {
            return localVarFp.catalogProductAttributeGroupRepositoryV1SavePost(catalogProductAttributeGroupRepositoryV1SavePostBody, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * ProductsAttributeSetsGroupsApi - object-oriented interface
 * @export
 * @class ProductsAttributeSetsGroupsApi
 * @extends {BaseAPI}
 */
export class ProductsAttributeSetsGroupsApi extends BaseAPI {
    /**
     * Save attribute group
     * @summary products/attribute-sets/groups
     * @param {CatalogProductAttributeGroupRepositoryV1SavePostRequest} [catalogProductAttributeGroupRepositoryV1SavePostBody] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProductsAttributeSetsGroupsApi
     */
    public catalogProductAttributeGroupRepositoryV1SavePost(catalogProductAttributeGroupRepositoryV1SavePostBody?: CatalogProductAttributeGroupRepositoryV1SavePostRequest, options?: AxiosRequestConfig) {
        return ProductsAttributeSetsGroupsApiFp(this.configuration).catalogProductAttributeGroupRepositoryV1SavePost(catalogProductAttributeGroupRepositoryV1SavePostBody, options).then((request) => request(this.axios, this.basePath));
    }
}


/**
 * ProductsAttributeSetsGroupsGroupIdApi - axios parameter creator
 * @export
 */
export const ProductsAttributeSetsGroupsGroupIdApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Remove attribute group by id
         * @summary products/attribute-sets/groups/{groupId}
         * @param {number} groupId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        catalogProductAttributeGroupRepositoryV1DeleteByIdDelete: async (groupId: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'groupId' is not null or undefined
            assertParamExists('catalogProductAttributeGroupRepositoryV1DeleteByIdDelete', 'groupId', groupId)
            const localVarPath = `/V1/products/attribute-sets/groups/{groupId}`
                .replace(`{${"groupId"}}`, encodeURIComponent(String(groupId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * ProductsAttributeSetsGroupsGroupIdApi - functional programming interface
 * @export
 */
export const ProductsAttributeSetsGroupsGroupIdApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = ProductsAttributeSetsGroupsGroupIdApiAxiosParamCreator(configuration)
    return {
        /**
         * Remove attribute group by id
         * @summary products/attribute-sets/groups/{groupId}
         * @param {number} groupId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async catalogProductAttributeGroupRepositoryV1DeleteByIdDelete(groupId: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<boolean>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.catalogProductAttributeGroupRepositoryV1DeleteByIdDelete(groupId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * ProductsAttributeSetsGroupsGroupIdApi - factory interface
 * @export
 */
export const ProductsAttributeSetsGroupsGroupIdApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = ProductsAttributeSetsGroupsGroupIdApiFp(configuration)
    return {
        /**
         * Remove attribute group by id
         * @summary products/attribute-sets/groups/{groupId}
         * @param {number} groupId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        catalogProductAttributeGroupRepositoryV1DeleteByIdDelete(groupId: number, options?: any): AxiosPromise<boolean> {
            return localVarFp.catalogProductAttributeGroupRepositoryV1DeleteByIdDelete(groupId, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * ProductsAttributeSetsGroupsGroupIdApi - object-oriented interface
 * @export
 * @class ProductsAttributeSetsGroupsGroupIdApi
 * @extends {BaseAPI}
 */
export class ProductsAttributeSetsGroupsGroupIdApi extends BaseAPI {
    /**
     * Remove attribute group by id
     * @summary products/attribute-sets/groups/{groupId}
     * @param {number} groupId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProductsAttributeSetsGroupsGroupIdApi
     */
    public catalogProductAttributeGroupRepositoryV1DeleteByIdDelete(groupId: number, options?: AxiosRequestConfig) {
        return ProductsAttributeSetsGroupsGroupIdApiFp(this.configuration).catalogProductAttributeGroupRepositoryV1DeleteByIdDelete(groupId, options).then((request) => request(this.axios, this.basePath));
    }
}


/**
 * ProductsAttributeSetsGroupsListApi - axios parameter creator
 * @export
 */
export const ProductsAttributeSetsGroupsListApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Retrieve list of attribute groups
         * @summary products/attribute-sets/groups/list
         * @param {string} [searchCriteriaFilterGroups0Filters0Field] Field
         * @param {string} [searchCriteriaFilterGroups0Filters0Value] Value
         * @param {string} [searchCriteriaFilterGroups0Filters0ConditionType] Condition type
         * @param {string} [searchCriteriaSortOrders0Field] Sorting field.
         * @param {string} [searchCriteriaSortOrders0Direction] Sorting direction.
         * @param {number} [searchCriteriaPageSize] Page size.
         * @param {number} [searchCriteriaCurrentPage] Current page.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        catalogProductAttributeGroupRepositoryV1GetListGet: async (searchCriteriaFilterGroups0Filters0Field?: string, searchCriteriaFilterGroups0Filters0Value?: string, searchCriteriaFilterGroups0Filters0ConditionType?: string, searchCriteriaSortOrders0Field?: string, searchCriteriaSortOrders0Direction?: string, searchCriteriaPageSize?: number, searchCriteriaCurrentPage?: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/V1/products/attribute-sets/groups/list`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (searchCriteriaFilterGroups0Filters0Field !== undefined) {
                localVarQueryParameter['searchCriteria[filterGroups][0][filters][0][field]'] = searchCriteriaFilterGroups0Filters0Field;
            }

            if (searchCriteriaFilterGroups0Filters0Value !== undefined) {
                localVarQueryParameter['searchCriteria[filterGroups][0][filters][0][value]'] = searchCriteriaFilterGroups0Filters0Value;
            }

            if (searchCriteriaFilterGroups0Filters0ConditionType !== undefined) {
                localVarQueryParameter['searchCriteria[filterGroups][0][filters][0][conditionType]'] = searchCriteriaFilterGroups0Filters0ConditionType;
            }

            if (searchCriteriaSortOrders0Field !== undefined) {
                localVarQueryParameter['searchCriteria[sortOrders][0][field]'] = searchCriteriaSortOrders0Field;
            }

            if (searchCriteriaSortOrders0Direction !== undefined) {
                localVarQueryParameter['searchCriteria[sortOrders][0][direction]'] = searchCriteriaSortOrders0Direction;
            }

            if (searchCriteriaPageSize !== undefined) {
                localVarQueryParameter['searchCriteria[pageSize]'] = searchCriteriaPageSize;
            }

            if (searchCriteriaCurrentPage !== undefined) {
                localVarQueryParameter['searchCriteria[currentPage]'] = searchCriteriaCurrentPage;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * ProductsAttributeSetsGroupsListApi - functional programming interface
 * @export
 */
export const ProductsAttributeSetsGroupsListApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = ProductsAttributeSetsGroupsListApiAxiosParamCreator(configuration)
    return {
        /**
         * Retrieve list of attribute groups
         * @summary products/attribute-sets/groups/list
         * @param {string} [searchCriteriaFilterGroups0Filters0Field] Field
         * @param {string} [searchCriteriaFilterGroups0Filters0Value] Value
         * @param {string} [searchCriteriaFilterGroups0Filters0ConditionType] Condition type
         * @param {string} [searchCriteriaSortOrders0Field] Sorting field.
         * @param {string} [searchCriteriaSortOrders0Direction] Sorting direction.
         * @param {number} [searchCriteriaPageSize] Page size.
         * @param {number} [searchCriteriaCurrentPage] Current page.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async catalogProductAttributeGroupRepositoryV1GetListGet(searchCriteriaFilterGroups0Filters0Field?: string, searchCriteriaFilterGroups0Filters0Value?: string, searchCriteriaFilterGroups0Filters0ConditionType?: string, searchCriteriaSortOrders0Field?: string, searchCriteriaSortOrders0Direction?: string, searchCriteriaPageSize?: number, searchCriteriaCurrentPage?: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<EavDataAttributeGroupSearchResultsInterface>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.catalogProductAttributeGroupRepositoryV1GetListGet(searchCriteriaFilterGroups0Filters0Field, searchCriteriaFilterGroups0Filters0Value, searchCriteriaFilterGroups0Filters0ConditionType, searchCriteriaSortOrders0Field, searchCriteriaSortOrders0Direction, searchCriteriaPageSize, searchCriteriaCurrentPage, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * ProductsAttributeSetsGroupsListApi - factory interface
 * @export
 */
export const ProductsAttributeSetsGroupsListApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = ProductsAttributeSetsGroupsListApiFp(configuration)
    return {
        /**
         * Retrieve list of attribute groups
         * @summary products/attribute-sets/groups/list
         * @param {string} [searchCriteriaFilterGroups0Filters0Field] Field
         * @param {string} [searchCriteriaFilterGroups0Filters0Value] Value
         * @param {string} [searchCriteriaFilterGroups0Filters0ConditionType] Condition type
         * @param {string} [searchCriteriaSortOrders0Field] Sorting field.
         * @param {string} [searchCriteriaSortOrders0Direction] Sorting direction.
         * @param {number} [searchCriteriaPageSize] Page size.
         * @param {number} [searchCriteriaCurrentPage] Current page.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        catalogProductAttributeGroupRepositoryV1GetListGet(searchCriteriaFilterGroups0Filters0Field?: string, searchCriteriaFilterGroups0Filters0Value?: string, searchCriteriaFilterGroups0Filters0ConditionType?: string, searchCriteriaSortOrders0Field?: string, searchCriteriaSortOrders0Direction?: string, searchCriteriaPageSize?: number, searchCriteriaCurrentPage?: number, options?: any): AxiosPromise<EavDataAttributeGroupSearchResultsInterface> {
            return localVarFp.catalogProductAttributeGroupRepositoryV1GetListGet(searchCriteriaFilterGroups0Filters0Field, searchCriteriaFilterGroups0Filters0Value, searchCriteriaFilterGroups0Filters0ConditionType, searchCriteriaSortOrders0Field, searchCriteriaSortOrders0Direction, searchCriteriaPageSize, searchCriteriaCurrentPage, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * ProductsAttributeSetsGroupsListApi - object-oriented interface
 * @export
 * @class ProductsAttributeSetsGroupsListApi
 * @extends {BaseAPI}
 */
export class ProductsAttributeSetsGroupsListApi extends BaseAPI {
    /**
     * Retrieve list of attribute groups
     * @summary products/attribute-sets/groups/list
     * @param {string} [searchCriteriaFilterGroups0Filters0Field] Field
     * @param {string} [searchCriteriaFilterGroups0Filters0Value] Value
     * @param {string} [searchCriteriaFilterGroups0Filters0ConditionType] Condition type
     * @param {string} [searchCriteriaSortOrders0Field] Sorting field.
     * @param {string} [searchCriteriaSortOrders0Direction] Sorting direction.
     * @param {number} [searchCriteriaPageSize] Page size.
     * @param {number} [searchCriteriaCurrentPage] Current page.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProductsAttributeSetsGroupsListApi
     */
    public catalogProductAttributeGroupRepositoryV1GetListGet(searchCriteriaFilterGroups0Filters0Field?: string, searchCriteriaFilterGroups0Filters0Value?: string, searchCriteriaFilterGroups0Filters0ConditionType?: string, searchCriteriaSortOrders0Field?: string, searchCriteriaSortOrders0Direction?: string, searchCriteriaPageSize?: number, searchCriteriaCurrentPage?: number, options?: AxiosRequestConfig) {
        return ProductsAttributeSetsGroupsListApiFp(this.configuration).catalogProductAttributeGroupRepositoryV1GetListGet(searchCriteriaFilterGroups0Filters0Field, searchCriteriaFilterGroups0Filters0Value, searchCriteriaFilterGroups0Filters0ConditionType, searchCriteriaSortOrders0Field, searchCriteriaSortOrders0Direction, searchCriteriaPageSize, searchCriteriaCurrentPage, options).then((request) => request(this.axios, this.basePath));
    }
}


/**
 * ProductsAttributeSetsSetsListApi - axios parameter creator
 * @export
 */
export const ProductsAttributeSetsSetsListApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Retrieve list of Attribute Sets
         * @summary products/attribute-sets/sets/list
         * @param {string} [searchCriteriaFilterGroups0Filters0Field] Field
         * @param {string} [searchCriteriaFilterGroups0Filters0Value] Value
         * @param {string} [searchCriteriaFilterGroups0Filters0ConditionType] Condition type
         * @param {string} [searchCriteriaSortOrders0Field] Sorting field.
         * @param {string} [searchCriteriaSortOrders0Direction] Sorting direction.
         * @param {number} [searchCriteriaPageSize] Page size.
         * @param {number} [searchCriteriaCurrentPage] Current page.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        catalogAttributeSetRepositoryV1GetListGet: async (searchCriteriaFilterGroups0Filters0Field?: string, searchCriteriaFilterGroups0Filters0Value?: string, searchCriteriaFilterGroups0Filters0ConditionType?: string, searchCriteriaSortOrders0Field?: string, searchCriteriaSortOrders0Direction?: string, searchCriteriaPageSize?: number, searchCriteriaCurrentPage?: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/V1/products/attribute-sets/sets/list`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (searchCriteriaFilterGroups0Filters0Field !== undefined) {
                localVarQueryParameter['searchCriteria[filterGroups][0][filters][0][field]'] = searchCriteriaFilterGroups0Filters0Field;
            }

            if (searchCriteriaFilterGroups0Filters0Value !== undefined) {
                localVarQueryParameter['searchCriteria[filterGroups][0][filters][0][value]'] = searchCriteriaFilterGroups0Filters0Value;
            }

            if (searchCriteriaFilterGroups0Filters0ConditionType !== undefined) {
                localVarQueryParameter['searchCriteria[filterGroups][0][filters][0][conditionType]'] = searchCriteriaFilterGroups0Filters0ConditionType;
            }

            if (searchCriteriaSortOrders0Field !== undefined) {
                localVarQueryParameter['searchCriteria[sortOrders][0][field]'] = searchCriteriaSortOrders0Field;
            }

            if (searchCriteriaSortOrders0Direction !== undefined) {
                localVarQueryParameter['searchCriteria[sortOrders][0][direction]'] = searchCriteriaSortOrders0Direction;
            }

            if (searchCriteriaPageSize !== undefined) {
                localVarQueryParameter['searchCriteria[pageSize]'] = searchCriteriaPageSize;
            }

            if (searchCriteriaCurrentPage !== undefined) {
                localVarQueryParameter['searchCriteria[currentPage]'] = searchCriteriaCurrentPage;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * ProductsAttributeSetsSetsListApi - functional programming interface
 * @export
 */
export const ProductsAttributeSetsSetsListApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = ProductsAttributeSetsSetsListApiAxiosParamCreator(configuration)
    return {
        /**
         * Retrieve list of Attribute Sets
         * @summary products/attribute-sets/sets/list
         * @param {string} [searchCriteriaFilterGroups0Filters0Field] Field
         * @param {string} [searchCriteriaFilterGroups0Filters0Value] Value
         * @param {string} [searchCriteriaFilterGroups0Filters0ConditionType] Condition type
         * @param {string} [searchCriteriaSortOrders0Field] Sorting field.
         * @param {string} [searchCriteriaSortOrders0Direction] Sorting direction.
         * @param {number} [searchCriteriaPageSize] Page size.
         * @param {number} [searchCriteriaCurrentPage] Current page.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async catalogAttributeSetRepositoryV1GetListGet(searchCriteriaFilterGroups0Filters0Field?: string, searchCriteriaFilterGroups0Filters0Value?: string, searchCriteriaFilterGroups0Filters0ConditionType?: string, searchCriteriaSortOrders0Field?: string, searchCriteriaSortOrders0Direction?: string, searchCriteriaPageSize?: number, searchCriteriaCurrentPage?: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<EavDataAttributeSetSearchResultsInterface>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.catalogAttributeSetRepositoryV1GetListGet(searchCriteriaFilterGroups0Filters0Field, searchCriteriaFilterGroups0Filters0Value, searchCriteriaFilterGroups0Filters0ConditionType, searchCriteriaSortOrders0Field, searchCriteriaSortOrders0Direction, searchCriteriaPageSize, searchCriteriaCurrentPage, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * ProductsAttributeSetsSetsListApi - factory interface
 * @export
 */
export const ProductsAttributeSetsSetsListApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = ProductsAttributeSetsSetsListApiFp(configuration)
    return {
        /**
         * Retrieve list of Attribute Sets
         * @summary products/attribute-sets/sets/list
         * @param {string} [searchCriteriaFilterGroups0Filters0Field] Field
         * @param {string} [searchCriteriaFilterGroups0Filters0Value] Value
         * @param {string} [searchCriteriaFilterGroups0Filters0ConditionType] Condition type
         * @param {string} [searchCriteriaSortOrders0Field] Sorting field.
         * @param {string} [searchCriteriaSortOrders0Direction] Sorting direction.
         * @param {number} [searchCriteriaPageSize] Page size.
         * @param {number} [searchCriteriaCurrentPage] Current page.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        catalogAttributeSetRepositoryV1GetListGet(searchCriteriaFilterGroups0Filters0Field?: string, searchCriteriaFilterGroups0Filters0Value?: string, searchCriteriaFilterGroups0Filters0ConditionType?: string, searchCriteriaSortOrders0Field?: string, searchCriteriaSortOrders0Direction?: string, searchCriteriaPageSize?: number, searchCriteriaCurrentPage?: number, options?: any): AxiosPromise<EavDataAttributeSetSearchResultsInterface> {
            return localVarFp.catalogAttributeSetRepositoryV1GetListGet(searchCriteriaFilterGroups0Filters0Field, searchCriteriaFilterGroups0Filters0Value, searchCriteriaFilterGroups0Filters0ConditionType, searchCriteriaSortOrders0Field, searchCriteriaSortOrders0Direction, searchCriteriaPageSize, searchCriteriaCurrentPage, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * ProductsAttributeSetsSetsListApi - object-oriented interface
 * @export
 * @class ProductsAttributeSetsSetsListApi
 * @extends {BaseAPI}
 */
export class ProductsAttributeSetsSetsListApi extends BaseAPI {
    /**
     * Retrieve list of Attribute Sets
     * @summary products/attribute-sets/sets/list
     * @param {string} [searchCriteriaFilterGroups0Filters0Field] Field
     * @param {string} [searchCriteriaFilterGroups0Filters0Value] Value
     * @param {string} [searchCriteriaFilterGroups0Filters0ConditionType] Condition type
     * @param {string} [searchCriteriaSortOrders0Field] Sorting field.
     * @param {string} [searchCriteriaSortOrders0Direction] Sorting direction.
     * @param {number} [searchCriteriaPageSize] Page size.
     * @param {number} [searchCriteriaCurrentPage] Current page.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProductsAttributeSetsSetsListApi
     */
    public catalogAttributeSetRepositoryV1GetListGet(searchCriteriaFilterGroups0Filters0Field?: string, searchCriteriaFilterGroups0Filters0Value?: string, searchCriteriaFilterGroups0Filters0ConditionType?: string, searchCriteriaSortOrders0Field?: string, searchCriteriaSortOrders0Direction?: string, searchCriteriaPageSize?: number, searchCriteriaCurrentPage?: number, options?: AxiosRequestConfig) {
        return ProductsAttributeSetsSetsListApiFp(this.configuration).catalogAttributeSetRepositoryV1GetListGet(searchCriteriaFilterGroups0Filters0Field, searchCriteriaFilterGroups0Filters0Value, searchCriteriaFilterGroups0Filters0ConditionType, searchCriteriaSortOrders0Field, searchCriteriaSortOrders0Direction, searchCriteriaPageSize, searchCriteriaCurrentPage, options).then((request) => request(this.axios, this.basePath));
    }
}


/**
 * ProductsAttributesApi - axios parameter creator
 * @export
 */
export const ProductsAttributesApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Retrieve all attributes for entity type
         * @summary products/attributes
         * @param {string} [searchCriteriaFilterGroups0Filters0Field] Field
         * @param {string} [searchCriteriaFilterGroups0Filters0Value] Value
         * @param {string} [searchCriteriaFilterGroups0Filters0ConditionType] Condition type
         * @param {string} [searchCriteriaSortOrders0Field] Sorting field.
         * @param {string} [searchCriteriaSortOrders0Direction] Sorting direction.
         * @param {number} [searchCriteriaPageSize] Page size.
         * @param {number} [searchCriteriaCurrentPage] Current page.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        catalogProductAttributeRepositoryV1GetListGet: async (searchCriteriaFilterGroups0Filters0Field?: string, searchCriteriaFilterGroups0Filters0Value?: string, searchCriteriaFilterGroups0Filters0ConditionType?: string, searchCriteriaSortOrders0Field?: string, searchCriteriaSortOrders0Direction?: string, searchCriteriaPageSize?: number, searchCriteriaCurrentPage?: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/V1/products/attributes`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (searchCriteriaFilterGroups0Filters0Field !== undefined) {
                localVarQueryParameter['searchCriteria[filterGroups][0][filters][0][field]'] = searchCriteriaFilterGroups0Filters0Field;
            }

            if (searchCriteriaFilterGroups0Filters0Value !== undefined) {
                localVarQueryParameter['searchCriteria[filterGroups][0][filters][0][value]'] = searchCriteriaFilterGroups0Filters0Value;
            }

            if (searchCriteriaFilterGroups0Filters0ConditionType !== undefined) {
                localVarQueryParameter['searchCriteria[filterGroups][0][filters][0][conditionType]'] = searchCriteriaFilterGroups0Filters0ConditionType;
            }

            if (searchCriteriaSortOrders0Field !== undefined) {
                localVarQueryParameter['searchCriteria[sortOrders][0][field]'] = searchCriteriaSortOrders0Field;
            }

            if (searchCriteriaSortOrders0Direction !== undefined) {
                localVarQueryParameter['searchCriteria[sortOrders][0][direction]'] = searchCriteriaSortOrders0Direction;
            }

            if (searchCriteriaPageSize !== undefined) {
                localVarQueryParameter['searchCriteria[pageSize]'] = searchCriteriaPageSize;
            }

            if (searchCriteriaCurrentPage !== undefined) {
                localVarQueryParameter['searchCriteria[currentPage]'] = searchCriteriaCurrentPage;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Save attribute data
         * @summary products/attributes
         * @param {CatalogProductAttributeRepositoryV1SavePostRequest} [catalogProductAttributeRepositoryV1SavePostBody] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        catalogProductAttributeRepositoryV1SavePost: async (catalogProductAttributeRepositoryV1SavePostBody?: CatalogProductAttributeRepositoryV1SavePostRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/V1/products/attributes`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(catalogProductAttributeRepositoryV1SavePostBody, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * ProductsAttributesApi - functional programming interface
 * @export
 */
export const ProductsAttributesApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = ProductsAttributesApiAxiosParamCreator(configuration)
    return {
        /**
         * Retrieve all attributes for entity type
         * @summary products/attributes
         * @param {string} [searchCriteriaFilterGroups0Filters0Field] Field
         * @param {string} [searchCriteriaFilterGroups0Filters0Value] Value
         * @param {string} [searchCriteriaFilterGroups0Filters0ConditionType] Condition type
         * @param {string} [searchCriteriaSortOrders0Field] Sorting field.
         * @param {string} [searchCriteriaSortOrders0Direction] Sorting direction.
         * @param {number} [searchCriteriaPageSize] Page size.
         * @param {number} [searchCriteriaCurrentPage] Current page.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async catalogProductAttributeRepositoryV1GetListGet(searchCriteriaFilterGroups0Filters0Field?: string, searchCriteriaFilterGroups0Filters0Value?: string, searchCriteriaFilterGroups0Filters0ConditionType?: string, searchCriteriaSortOrders0Field?: string, searchCriteriaSortOrders0Direction?: string, searchCriteriaPageSize?: number, searchCriteriaCurrentPage?: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<CatalogDataProductAttributeSearchResultsInterface>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.catalogProductAttributeRepositoryV1GetListGet(searchCriteriaFilterGroups0Filters0Field, searchCriteriaFilterGroups0Filters0Value, searchCriteriaFilterGroups0Filters0ConditionType, searchCriteriaSortOrders0Field, searchCriteriaSortOrders0Direction, searchCriteriaPageSize, searchCriteriaCurrentPage, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Save attribute data
         * @summary products/attributes
         * @param {CatalogProductAttributeRepositoryV1SavePostRequest} [catalogProductAttributeRepositoryV1SavePostBody] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async catalogProductAttributeRepositoryV1SavePost(catalogProductAttributeRepositoryV1SavePostBody?: CatalogProductAttributeRepositoryV1SavePostRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<CatalogDataProductAttributeInterface>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.catalogProductAttributeRepositoryV1SavePost(catalogProductAttributeRepositoryV1SavePostBody, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * ProductsAttributesApi - factory interface
 * @export
 */
export const ProductsAttributesApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = ProductsAttributesApiFp(configuration)
    return {
        /**
         * Retrieve all attributes for entity type
         * @summary products/attributes
         * @param {string} [searchCriteriaFilterGroups0Filters0Field] Field
         * @param {string} [searchCriteriaFilterGroups0Filters0Value] Value
         * @param {string} [searchCriteriaFilterGroups0Filters0ConditionType] Condition type
         * @param {string} [searchCriteriaSortOrders0Field] Sorting field.
         * @param {string} [searchCriteriaSortOrders0Direction] Sorting direction.
         * @param {number} [searchCriteriaPageSize] Page size.
         * @param {number} [searchCriteriaCurrentPage] Current page.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        catalogProductAttributeRepositoryV1GetListGet(searchCriteriaFilterGroups0Filters0Field?: string, searchCriteriaFilterGroups0Filters0Value?: string, searchCriteriaFilterGroups0Filters0ConditionType?: string, searchCriteriaSortOrders0Field?: string, searchCriteriaSortOrders0Direction?: string, searchCriteriaPageSize?: number, searchCriteriaCurrentPage?: number, options?: any): AxiosPromise<CatalogDataProductAttributeSearchResultsInterface> {
            return localVarFp.catalogProductAttributeRepositoryV1GetListGet(searchCriteriaFilterGroups0Filters0Field, searchCriteriaFilterGroups0Filters0Value, searchCriteriaFilterGroups0Filters0ConditionType, searchCriteriaSortOrders0Field, searchCriteriaSortOrders0Direction, searchCriteriaPageSize, searchCriteriaCurrentPage, options).then((request) => request(axios, basePath));
        },
        /**
         * Save attribute data
         * @summary products/attributes
         * @param {CatalogProductAttributeRepositoryV1SavePostRequest} [catalogProductAttributeRepositoryV1SavePostBody] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        catalogProductAttributeRepositoryV1SavePost(catalogProductAttributeRepositoryV1SavePostBody?: CatalogProductAttributeRepositoryV1SavePostRequest, options?: any): AxiosPromise<CatalogDataProductAttributeInterface> {
            return localVarFp.catalogProductAttributeRepositoryV1SavePost(catalogProductAttributeRepositoryV1SavePostBody, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * ProductsAttributesApi - object-oriented interface
 * @export
 * @class ProductsAttributesApi
 * @extends {BaseAPI}
 */
export class ProductsAttributesApi extends BaseAPI {
    /**
     * Retrieve all attributes for entity type
     * @summary products/attributes
     * @param {string} [searchCriteriaFilterGroups0Filters0Field] Field
     * @param {string} [searchCriteriaFilterGroups0Filters0Value] Value
     * @param {string} [searchCriteriaFilterGroups0Filters0ConditionType] Condition type
     * @param {string} [searchCriteriaSortOrders0Field] Sorting field.
     * @param {string} [searchCriteriaSortOrders0Direction] Sorting direction.
     * @param {number} [searchCriteriaPageSize] Page size.
     * @param {number} [searchCriteriaCurrentPage] Current page.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProductsAttributesApi
     */
    public catalogProductAttributeRepositoryV1GetListGet(searchCriteriaFilterGroups0Filters0Field?: string, searchCriteriaFilterGroups0Filters0Value?: string, searchCriteriaFilterGroups0Filters0ConditionType?: string, searchCriteriaSortOrders0Field?: string, searchCriteriaSortOrders0Direction?: string, searchCriteriaPageSize?: number, searchCriteriaCurrentPage?: number, options?: AxiosRequestConfig) {
        return ProductsAttributesApiFp(this.configuration).catalogProductAttributeRepositoryV1GetListGet(searchCriteriaFilterGroups0Filters0Field, searchCriteriaFilterGroups0Filters0Value, searchCriteriaFilterGroups0Filters0ConditionType, searchCriteriaSortOrders0Field, searchCriteriaSortOrders0Direction, searchCriteriaPageSize, searchCriteriaCurrentPage, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Save attribute data
     * @summary products/attributes
     * @param {CatalogProductAttributeRepositoryV1SavePostRequest} [catalogProductAttributeRepositoryV1SavePostBody] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProductsAttributesApi
     */
    public catalogProductAttributeRepositoryV1SavePost(catalogProductAttributeRepositoryV1SavePostBody?: CatalogProductAttributeRepositoryV1SavePostRequest, options?: AxiosRequestConfig) {
        return ProductsAttributesApiFp(this.configuration).catalogProductAttributeRepositoryV1SavePost(catalogProductAttributeRepositoryV1SavePostBody, options).then((request) => request(this.axios, this.basePath));
    }
}


/**
 * ProductsAttributesAttributeCodeApi - axios parameter creator
 * @export
 */
export const ProductsAttributesAttributeCodeApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Delete Attribute by id
         * @summary products/attributes/{attributeCode}
         * @param {string} attributeCode 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        catalogProductAttributeRepositoryV1DeleteByIdDelete: async (attributeCode: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'attributeCode' is not null or undefined
            assertParamExists('catalogProductAttributeRepositoryV1DeleteByIdDelete', 'attributeCode', attributeCode)
            const localVarPath = `/V1/products/attributes/{attributeCode}`
                .replace(`{${"attributeCode"}}`, encodeURIComponent(String(attributeCode)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Retrieve specific attribute
         * @summary products/attributes/{attributeCode}
         * @param {string} attributeCode 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        catalogProductAttributeRepositoryV1GetGet: async (attributeCode: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'attributeCode' is not null or undefined
            assertParamExists('catalogProductAttributeRepositoryV1GetGet', 'attributeCode', attributeCode)
            const localVarPath = `/V1/products/attributes/{attributeCode}`
                .replace(`{${"attributeCode"}}`, encodeURIComponent(String(attributeCode)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Save attribute data
         * @summary products/attributes/{attributeCode}
         * @param {string} attributeCode 
         * @param {CatalogProductAttributeRepositoryV1SavePostRequest} [catalogProductAttributeRepositoryV1SavePutBody] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        catalogProductAttributeRepositoryV1SavePut: async (attributeCode: string, catalogProductAttributeRepositoryV1SavePutBody?: CatalogProductAttributeRepositoryV1SavePostRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'attributeCode' is not null or undefined
            assertParamExists('catalogProductAttributeRepositoryV1SavePut', 'attributeCode', attributeCode)
            const localVarPath = `/V1/products/attributes/{attributeCode}`
                .replace(`{${"attributeCode"}}`, encodeURIComponent(String(attributeCode)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(catalogProductAttributeRepositoryV1SavePutBody, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * ProductsAttributesAttributeCodeApi - functional programming interface
 * @export
 */
export const ProductsAttributesAttributeCodeApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = ProductsAttributesAttributeCodeApiAxiosParamCreator(configuration)
    return {
        /**
         * Delete Attribute by id
         * @summary products/attributes/{attributeCode}
         * @param {string} attributeCode 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async catalogProductAttributeRepositoryV1DeleteByIdDelete(attributeCode: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<boolean>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.catalogProductAttributeRepositoryV1DeleteByIdDelete(attributeCode, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Retrieve specific attribute
         * @summary products/attributes/{attributeCode}
         * @param {string} attributeCode 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async catalogProductAttributeRepositoryV1GetGet(attributeCode: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<CatalogDataProductAttributeInterface>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.catalogProductAttributeRepositoryV1GetGet(attributeCode, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Save attribute data
         * @summary products/attributes/{attributeCode}
         * @param {string} attributeCode 
         * @param {CatalogProductAttributeRepositoryV1SavePostRequest} [catalogProductAttributeRepositoryV1SavePutBody] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async catalogProductAttributeRepositoryV1SavePut(attributeCode: string, catalogProductAttributeRepositoryV1SavePutBody?: CatalogProductAttributeRepositoryV1SavePostRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<CatalogDataProductAttributeInterface>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.catalogProductAttributeRepositoryV1SavePut(attributeCode, catalogProductAttributeRepositoryV1SavePutBody, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * ProductsAttributesAttributeCodeApi - factory interface
 * @export
 */
export const ProductsAttributesAttributeCodeApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = ProductsAttributesAttributeCodeApiFp(configuration)
    return {
        /**
         * Delete Attribute by id
         * @summary products/attributes/{attributeCode}
         * @param {string} attributeCode 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        catalogProductAttributeRepositoryV1DeleteByIdDelete(attributeCode: string, options?: any): AxiosPromise<boolean> {
            return localVarFp.catalogProductAttributeRepositoryV1DeleteByIdDelete(attributeCode, options).then((request) => request(axios, basePath));
        },
        /**
         * Retrieve specific attribute
         * @summary products/attributes/{attributeCode}
         * @param {string} attributeCode 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        catalogProductAttributeRepositoryV1GetGet(attributeCode: string, options?: any): AxiosPromise<CatalogDataProductAttributeInterface> {
            return localVarFp.catalogProductAttributeRepositoryV1GetGet(attributeCode, options).then((request) => request(axios, basePath));
        },
        /**
         * Save attribute data
         * @summary products/attributes/{attributeCode}
         * @param {string} attributeCode 
         * @param {CatalogProductAttributeRepositoryV1SavePostRequest} [catalogProductAttributeRepositoryV1SavePutBody] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        catalogProductAttributeRepositoryV1SavePut(attributeCode: string, catalogProductAttributeRepositoryV1SavePutBody?: CatalogProductAttributeRepositoryV1SavePostRequest, options?: any): AxiosPromise<CatalogDataProductAttributeInterface> {
            return localVarFp.catalogProductAttributeRepositoryV1SavePut(attributeCode, catalogProductAttributeRepositoryV1SavePutBody, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * ProductsAttributesAttributeCodeApi - object-oriented interface
 * @export
 * @class ProductsAttributesAttributeCodeApi
 * @extends {BaseAPI}
 */
export class ProductsAttributesAttributeCodeApi extends BaseAPI {
    /**
     * Delete Attribute by id
     * @summary products/attributes/{attributeCode}
     * @param {string} attributeCode 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProductsAttributesAttributeCodeApi
     */
    public catalogProductAttributeRepositoryV1DeleteByIdDelete(attributeCode: string, options?: AxiosRequestConfig) {
        return ProductsAttributesAttributeCodeApiFp(this.configuration).catalogProductAttributeRepositoryV1DeleteByIdDelete(attributeCode, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Retrieve specific attribute
     * @summary products/attributes/{attributeCode}
     * @param {string} attributeCode 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProductsAttributesAttributeCodeApi
     */
    public catalogProductAttributeRepositoryV1GetGet(attributeCode: string, options?: AxiosRequestConfig) {
        return ProductsAttributesAttributeCodeApiFp(this.configuration).catalogProductAttributeRepositoryV1GetGet(attributeCode, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Save attribute data
     * @summary products/attributes/{attributeCode}
     * @param {string} attributeCode 
     * @param {CatalogProductAttributeRepositoryV1SavePostRequest} [catalogProductAttributeRepositoryV1SavePutBody] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProductsAttributesAttributeCodeApi
     */
    public catalogProductAttributeRepositoryV1SavePut(attributeCode: string, catalogProductAttributeRepositoryV1SavePutBody?: CatalogProductAttributeRepositoryV1SavePostRequest, options?: AxiosRequestConfig) {
        return ProductsAttributesAttributeCodeApiFp(this.configuration).catalogProductAttributeRepositoryV1SavePut(attributeCode, catalogProductAttributeRepositoryV1SavePutBody, options).then((request) => request(this.axios, this.basePath));
    }
}


/**
 * ProductsAttributesAttributeCodeOptionsApi - axios parameter creator
 * @export
 */
export const ProductsAttributesAttributeCodeOptionsApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Add option to attribute
         * @summary products/attributes/{attributeCode}/options
         * @param {string} attributeCode 
         * @param {CatalogProductAttributeOptionManagementV1AddPostRequest} [catalogProductAttributeOptionManagementV1AddPostBody] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        catalogProductAttributeOptionManagementV1AddPost: async (attributeCode: string, catalogProductAttributeOptionManagementV1AddPostBody?: CatalogProductAttributeOptionManagementV1AddPostRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'attributeCode' is not null or undefined
            assertParamExists('catalogProductAttributeOptionManagementV1AddPost', 'attributeCode', attributeCode)
            const localVarPath = `/V1/products/attributes/{attributeCode}/options`
                .replace(`{${"attributeCode"}}`, encodeURIComponent(String(attributeCode)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(catalogProductAttributeOptionManagementV1AddPostBody, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Retrieve list of attribute options
         * @summary products/attributes/{attributeCode}/options
         * @param {string} attributeCode 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        catalogProductAttributeOptionManagementV1GetItemsGet: async (attributeCode: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'attributeCode' is not null or undefined
            assertParamExists('catalogProductAttributeOptionManagementV1GetItemsGet', 'attributeCode', attributeCode)
            const localVarPath = `/V1/products/attributes/{attributeCode}/options`
                .replace(`{${"attributeCode"}}`, encodeURIComponent(String(attributeCode)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * ProductsAttributesAttributeCodeOptionsApi - functional programming interface
 * @export
 */
export const ProductsAttributesAttributeCodeOptionsApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = ProductsAttributesAttributeCodeOptionsApiAxiosParamCreator(configuration)
    return {
        /**
         * Add option to attribute
         * @summary products/attributes/{attributeCode}/options
         * @param {string} attributeCode 
         * @param {CatalogProductAttributeOptionManagementV1AddPostRequest} [catalogProductAttributeOptionManagementV1AddPostBody] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async catalogProductAttributeOptionManagementV1AddPost(attributeCode: string, catalogProductAttributeOptionManagementV1AddPostBody?: CatalogProductAttributeOptionManagementV1AddPostRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<boolean>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.catalogProductAttributeOptionManagementV1AddPost(attributeCode, catalogProductAttributeOptionManagementV1AddPostBody, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Retrieve list of attribute options
         * @summary products/attributes/{attributeCode}/options
         * @param {string} attributeCode 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async catalogProductAttributeOptionManagementV1GetItemsGet(attributeCode: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<EavDataAttributeOptionInterface>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.catalogProductAttributeOptionManagementV1GetItemsGet(attributeCode, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * ProductsAttributesAttributeCodeOptionsApi - factory interface
 * @export
 */
export const ProductsAttributesAttributeCodeOptionsApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = ProductsAttributesAttributeCodeOptionsApiFp(configuration)
    return {
        /**
         * Add option to attribute
         * @summary products/attributes/{attributeCode}/options
         * @param {string} attributeCode 
         * @param {CatalogProductAttributeOptionManagementV1AddPostRequest} [catalogProductAttributeOptionManagementV1AddPostBody] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        catalogProductAttributeOptionManagementV1AddPost(attributeCode: string, catalogProductAttributeOptionManagementV1AddPostBody?: CatalogProductAttributeOptionManagementV1AddPostRequest, options?: any): AxiosPromise<boolean> {
            return localVarFp.catalogProductAttributeOptionManagementV1AddPost(attributeCode, catalogProductAttributeOptionManagementV1AddPostBody, options).then((request) => request(axios, basePath));
        },
        /**
         * Retrieve list of attribute options
         * @summary products/attributes/{attributeCode}/options
         * @param {string} attributeCode 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        catalogProductAttributeOptionManagementV1GetItemsGet(attributeCode: string, options?: any): AxiosPromise<Array<EavDataAttributeOptionInterface>> {
            return localVarFp.catalogProductAttributeOptionManagementV1GetItemsGet(attributeCode, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * ProductsAttributesAttributeCodeOptionsApi - object-oriented interface
 * @export
 * @class ProductsAttributesAttributeCodeOptionsApi
 * @extends {BaseAPI}
 */
export class ProductsAttributesAttributeCodeOptionsApi extends BaseAPI {
    /**
     * Add option to attribute
     * @summary products/attributes/{attributeCode}/options
     * @param {string} attributeCode 
     * @param {CatalogProductAttributeOptionManagementV1AddPostRequest} [catalogProductAttributeOptionManagementV1AddPostBody] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProductsAttributesAttributeCodeOptionsApi
     */
    public catalogProductAttributeOptionManagementV1AddPost(attributeCode: string, catalogProductAttributeOptionManagementV1AddPostBody?: CatalogProductAttributeOptionManagementV1AddPostRequest, options?: AxiosRequestConfig) {
        return ProductsAttributesAttributeCodeOptionsApiFp(this.configuration).catalogProductAttributeOptionManagementV1AddPost(attributeCode, catalogProductAttributeOptionManagementV1AddPostBody, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Retrieve list of attribute options
     * @summary products/attributes/{attributeCode}/options
     * @param {string} attributeCode 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProductsAttributesAttributeCodeOptionsApi
     */
    public catalogProductAttributeOptionManagementV1GetItemsGet(attributeCode: string, options?: AxiosRequestConfig) {
        return ProductsAttributesAttributeCodeOptionsApiFp(this.configuration).catalogProductAttributeOptionManagementV1GetItemsGet(attributeCode, options).then((request) => request(this.axios, this.basePath));
    }
}


/**
 * ProductsAttributesAttributeCodeOptionsOptionIdApi - axios parameter creator
 * @export
 */
export const ProductsAttributesAttributeCodeOptionsOptionIdApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Delete option from attribute
         * @summary products/attributes/{attributeCode}/options/{optionId}
         * @param {string} attributeCode 
         * @param {string} optionId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        catalogProductAttributeOptionManagementV1DeleteDelete: async (attributeCode: string, optionId: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'attributeCode' is not null or undefined
            assertParamExists('catalogProductAttributeOptionManagementV1DeleteDelete', 'attributeCode', attributeCode)
            // verify required parameter 'optionId' is not null or undefined
            assertParamExists('catalogProductAttributeOptionManagementV1DeleteDelete', 'optionId', optionId)
            const localVarPath = `/V1/products/attributes/{attributeCode}/options/{optionId}`
                .replace(`{${"attributeCode"}}`, encodeURIComponent(String(attributeCode)))
                .replace(`{${"optionId"}}`, encodeURIComponent(String(optionId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * ProductsAttributesAttributeCodeOptionsOptionIdApi - functional programming interface
 * @export
 */
export const ProductsAttributesAttributeCodeOptionsOptionIdApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = ProductsAttributesAttributeCodeOptionsOptionIdApiAxiosParamCreator(configuration)
    return {
        /**
         * Delete option from attribute
         * @summary products/attributes/{attributeCode}/options/{optionId}
         * @param {string} attributeCode 
         * @param {string} optionId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async catalogProductAttributeOptionManagementV1DeleteDelete(attributeCode: string, optionId: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<boolean>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.catalogProductAttributeOptionManagementV1DeleteDelete(attributeCode, optionId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * ProductsAttributesAttributeCodeOptionsOptionIdApi - factory interface
 * @export
 */
export const ProductsAttributesAttributeCodeOptionsOptionIdApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = ProductsAttributesAttributeCodeOptionsOptionIdApiFp(configuration)
    return {
        /**
         * Delete option from attribute
         * @summary products/attributes/{attributeCode}/options/{optionId}
         * @param {string} attributeCode 
         * @param {string} optionId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        catalogProductAttributeOptionManagementV1DeleteDelete(attributeCode: string, optionId: string, options?: any): AxiosPromise<boolean> {
            return localVarFp.catalogProductAttributeOptionManagementV1DeleteDelete(attributeCode, optionId, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * ProductsAttributesAttributeCodeOptionsOptionIdApi - object-oriented interface
 * @export
 * @class ProductsAttributesAttributeCodeOptionsOptionIdApi
 * @extends {BaseAPI}
 */
export class ProductsAttributesAttributeCodeOptionsOptionIdApi extends BaseAPI {
    /**
     * Delete option from attribute
     * @summary products/attributes/{attributeCode}/options/{optionId}
     * @param {string} attributeCode 
     * @param {string} optionId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProductsAttributesAttributeCodeOptionsOptionIdApi
     */
    public catalogProductAttributeOptionManagementV1DeleteDelete(attributeCode: string, optionId: string, options?: AxiosRequestConfig) {
        return ProductsAttributesAttributeCodeOptionsOptionIdApiFp(this.configuration).catalogProductAttributeOptionManagementV1DeleteDelete(attributeCode, optionId, options).then((request) => request(this.axios, this.basePath));
    }
}


/**
 * ProductsAttributesTypesApi - axios parameter creator
 * @export
 */
export const ProductsAttributesTypesApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Retrieve list of product attribute types
         * @summary products/attributes/types
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        catalogProductAttributeTypesListV1GetItemsGet: async (options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/V1/products/attributes/types`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * ProductsAttributesTypesApi - functional programming interface
 * @export
 */
export const ProductsAttributesTypesApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = ProductsAttributesTypesApiAxiosParamCreator(configuration)
    return {
        /**
         * Retrieve list of product attribute types
         * @summary products/attributes/types
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async catalogProductAttributeTypesListV1GetItemsGet(options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<CatalogDataProductAttributeTypeInterface>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.catalogProductAttributeTypesListV1GetItemsGet(options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * ProductsAttributesTypesApi - factory interface
 * @export
 */
export const ProductsAttributesTypesApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = ProductsAttributesTypesApiFp(configuration)
    return {
        /**
         * Retrieve list of product attribute types
         * @summary products/attributes/types
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        catalogProductAttributeTypesListV1GetItemsGet(options?: any): AxiosPromise<Array<CatalogDataProductAttributeTypeInterface>> {
            return localVarFp.catalogProductAttributeTypesListV1GetItemsGet(options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * ProductsAttributesTypesApi - object-oriented interface
 * @export
 * @class ProductsAttributesTypesApi
 * @extends {BaseAPI}
 */
export class ProductsAttributesTypesApi extends BaseAPI {
    /**
     * Retrieve list of product attribute types
     * @summary products/attributes/types
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProductsAttributesTypesApi
     */
    public catalogProductAttributeTypesListV1GetItemsGet(options?: AxiosRequestConfig) {
        return ProductsAttributesTypesApiFp(this.configuration).catalogProductAttributeTypesListV1GetItemsGet(options).then((request) => request(this.axios, this.basePath));
    }
}


/**
 * ProductsBasePricesApi - axios parameter creator
 * @export
 */
export const ProductsBasePricesApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Add or update product prices. Input item should correspond \\Magento\\Catalog\\Api\\Data\\CostInterface. If any items will have invalid price, store id or sku, they will be marked as failed and excluded from update list and \\Magento\\Catalog\\Api\\Data\\PriceUpdateResultInterface[] with problem description will be returned. If there were no failed items during update empty array will be returned. If error occurred during the update exception will be thrown.
         * @summary products/base-prices
         * @param {CatalogBasePriceStorageV1UpdatePostRequest} [catalogBasePriceStorageV1UpdatePostBody] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        catalogBasePriceStorageV1UpdatePost: async (catalogBasePriceStorageV1UpdatePostBody?: CatalogBasePriceStorageV1UpdatePostRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/V1/products/base-prices`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(catalogBasePriceStorageV1UpdatePostBody, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * ProductsBasePricesApi - functional programming interface
 * @export
 */
export const ProductsBasePricesApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = ProductsBasePricesApiAxiosParamCreator(configuration)
    return {
        /**
         * Add or update product prices. Input item should correspond \\Magento\\Catalog\\Api\\Data\\CostInterface. If any items will have invalid price, store id or sku, they will be marked as failed and excluded from update list and \\Magento\\Catalog\\Api\\Data\\PriceUpdateResultInterface[] with problem description will be returned. If there were no failed items during update empty array will be returned. If error occurred during the update exception will be thrown.
         * @summary products/base-prices
         * @param {CatalogBasePriceStorageV1UpdatePostRequest} [catalogBasePriceStorageV1UpdatePostBody] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async catalogBasePriceStorageV1UpdatePost(catalogBasePriceStorageV1UpdatePostBody?: CatalogBasePriceStorageV1UpdatePostRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<CatalogDataPriceUpdateResultInterface>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.catalogBasePriceStorageV1UpdatePost(catalogBasePriceStorageV1UpdatePostBody, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * ProductsBasePricesApi - factory interface
 * @export
 */
export const ProductsBasePricesApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = ProductsBasePricesApiFp(configuration)
    return {
        /**
         * Add or update product prices. Input item should correspond \\Magento\\Catalog\\Api\\Data\\CostInterface. If any items will have invalid price, store id or sku, they will be marked as failed and excluded from update list and \\Magento\\Catalog\\Api\\Data\\PriceUpdateResultInterface[] with problem description will be returned. If there were no failed items during update empty array will be returned. If error occurred during the update exception will be thrown.
         * @summary products/base-prices
         * @param {CatalogBasePriceStorageV1UpdatePostRequest} [catalogBasePriceStorageV1UpdatePostBody] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        catalogBasePriceStorageV1UpdatePost(catalogBasePriceStorageV1UpdatePostBody?: CatalogBasePriceStorageV1UpdatePostRequest, options?: any): AxiosPromise<Array<CatalogDataPriceUpdateResultInterface>> {
            return localVarFp.catalogBasePriceStorageV1UpdatePost(catalogBasePriceStorageV1UpdatePostBody, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * ProductsBasePricesApi - object-oriented interface
 * @export
 * @class ProductsBasePricesApi
 * @extends {BaseAPI}
 */
export class ProductsBasePricesApi extends BaseAPI {
    /**
     * Add or update product prices. Input item should correspond \\Magento\\Catalog\\Api\\Data\\CostInterface. If any items will have invalid price, store id or sku, they will be marked as failed and excluded from update list and \\Magento\\Catalog\\Api\\Data\\PriceUpdateResultInterface[] with problem description will be returned. If there were no failed items during update empty array will be returned. If error occurred during the update exception will be thrown.
     * @summary products/base-prices
     * @param {CatalogBasePriceStorageV1UpdatePostRequest} [catalogBasePriceStorageV1UpdatePostBody] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProductsBasePricesApi
     */
    public catalogBasePriceStorageV1UpdatePost(catalogBasePriceStorageV1UpdatePostBody?: CatalogBasePriceStorageV1UpdatePostRequest, options?: AxiosRequestConfig) {
        return ProductsBasePricesApiFp(this.configuration).catalogBasePriceStorageV1UpdatePost(catalogBasePriceStorageV1UpdatePostBody, options).then((request) => request(this.axios, this.basePath));
    }
}


/**
 * ProductsBasePricesInformationApi - axios parameter creator
 * @export
 */
export const ProductsBasePricesInformationApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Return product prices. In case of at least one of skus is not found exception will be thrown.
         * @summary products/base-prices-information
         * @param {CatalogBasePriceStorageV1GetPostRequest} [catalogBasePriceStorageV1GetPostBody] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        catalogBasePriceStorageV1GetPost: async (catalogBasePriceStorageV1GetPostBody?: CatalogBasePriceStorageV1GetPostRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/V1/products/base-prices-information`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(catalogBasePriceStorageV1GetPostBody, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * ProductsBasePricesInformationApi - functional programming interface
 * @export
 */
export const ProductsBasePricesInformationApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = ProductsBasePricesInformationApiAxiosParamCreator(configuration)
    return {
        /**
         * Return product prices. In case of at least one of skus is not found exception will be thrown.
         * @summary products/base-prices-information
         * @param {CatalogBasePriceStorageV1GetPostRequest} [catalogBasePriceStorageV1GetPostBody] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async catalogBasePriceStorageV1GetPost(catalogBasePriceStorageV1GetPostBody?: CatalogBasePriceStorageV1GetPostRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<CatalogDataBasePriceInterface>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.catalogBasePriceStorageV1GetPost(catalogBasePriceStorageV1GetPostBody, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * ProductsBasePricesInformationApi - factory interface
 * @export
 */
export const ProductsBasePricesInformationApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = ProductsBasePricesInformationApiFp(configuration)
    return {
        /**
         * Return product prices. In case of at least one of skus is not found exception will be thrown.
         * @summary products/base-prices-information
         * @param {CatalogBasePriceStorageV1GetPostRequest} [catalogBasePriceStorageV1GetPostBody] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        catalogBasePriceStorageV1GetPost(catalogBasePriceStorageV1GetPostBody?: CatalogBasePriceStorageV1GetPostRequest, options?: any): AxiosPromise<Array<CatalogDataBasePriceInterface>> {
            return localVarFp.catalogBasePriceStorageV1GetPost(catalogBasePriceStorageV1GetPostBody, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * ProductsBasePricesInformationApi - object-oriented interface
 * @export
 * @class ProductsBasePricesInformationApi
 * @extends {BaseAPI}
 */
export class ProductsBasePricesInformationApi extends BaseAPI {
    /**
     * Return product prices. In case of at least one of skus is not found exception will be thrown.
     * @summary products/base-prices-information
     * @param {CatalogBasePriceStorageV1GetPostRequest} [catalogBasePriceStorageV1GetPostBody] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProductsBasePricesInformationApi
     */
    public catalogBasePriceStorageV1GetPost(catalogBasePriceStorageV1GetPostBody?: CatalogBasePriceStorageV1GetPostRequest, options?: AxiosRequestConfig) {
        return ProductsBasePricesInformationApiFp(this.configuration).catalogBasePriceStorageV1GetPost(catalogBasePriceStorageV1GetPostBody, options).then((request) => request(this.axios, this.basePath));
    }
}


/**
 * ProductsCostApi - axios parameter creator
 * @export
 */
export const ProductsCostApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Add or update product cost. Input item should correspond to \\Magento\\Catalog\\Api\\Data\\CostInterface. If any items will have invalid cost, store id or sku, they will be marked as failed and excluded from update list and \\Magento\\Catalog\\Api\\Data\\PriceUpdateResultInterface[] with problem description will be returned. If there were no failed items during update empty array will be returned. If error occurred during the update exception will be thrown.
         * @summary products/cost
         * @param {CatalogCostStorageV1UpdatePostRequest} [catalogCostStorageV1UpdatePostBody] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        catalogCostStorageV1UpdatePost: async (catalogCostStorageV1UpdatePostBody?: CatalogCostStorageV1UpdatePostRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/V1/products/cost`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(catalogCostStorageV1UpdatePostBody, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * ProductsCostApi - functional programming interface
 * @export
 */
export const ProductsCostApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = ProductsCostApiAxiosParamCreator(configuration)
    return {
        /**
         * Add or update product cost. Input item should correspond to \\Magento\\Catalog\\Api\\Data\\CostInterface. If any items will have invalid cost, store id or sku, they will be marked as failed and excluded from update list and \\Magento\\Catalog\\Api\\Data\\PriceUpdateResultInterface[] with problem description will be returned. If there were no failed items during update empty array will be returned. If error occurred during the update exception will be thrown.
         * @summary products/cost
         * @param {CatalogCostStorageV1UpdatePostRequest} [catalogCostStorageV1UpdatePostBody] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async catalogCostStorageV1UpdatePost(catalogCostStorageV1UpdatePostBody?: CatalogCostStorageV1UpdatePostRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<CatalogDataPriceUpdateResultInterface>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.catalogCostStorageV1UpdatePost(catalogCostStorageV1UpdatePostBody, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * ProductsCostApi - factory interface
 * @export
 */
export const ProductsCostApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = ProductsCostApiFp(configuration)
    return {
        /**
         * Add or update product cost. Input item should correspond to \\Magento\\Catalog\\Api\\Data\\CostInterface. If any items will have invalid cost, store id or sku, they will be marked as failed and excluded from update list and \\Magento\\Catalog\\Api\\Data\\PriceUpdateResultInterface[] with problem description will be returned. If there were no failed items during update empty array will be returned. If error occurred during the update exception will be thrown.
         * @summary products/cost
         * @param {CatalogCostStorageV1UpdatePostRequest} [catalogCostStorageV1UpdatePostBody] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        catalogCostStorageV1UpdatePost(catalogCostStorageV1UpdatePostBody?: CatalogCostStorageV1UpdatePostRequest, options?: any): AxiosPromise<Array<CatalogDataPriceUpdateResultInterface>> {
            return localVarFp.catalogCostStorageV1UpdatePost(catalogCostStorageV1UpdatePostBody, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * ProductsCostApi - object-oriented interface
 * @export
 * @class ProductsCostApi
 * @extends {BaseAPI}
 */
export class ProductsCostApi extends BaseAPI {
    /**
     * Add or update product cost. Input item should correspond to \\Magento\\Catalog\\Api\\Data\\CostInterface. If any items will have invalid cost, store id or sku, they will be marked as failed and excluded from update list and \\Magento\\Catalog\\Api\\Data\\PriceUpdateResultInterface[] with problem description will be returned. If there were no failed items during update empty array will be returned. If error occurred during the update exception will be thrown.
     * @summary products/cost
     * @param {CatalogCostStorageV1UpdatePostRequest} [catalogCostStorageV1UpdatePostBody] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProductsCostApi
     */
    public catalogCostStorageV1UpdatePost(catalogCostStorageV1UpdatePostBody?: CatalogCostStorageV1UpdatePostRequest, options?: AxiosRequestConfig) {
        return ProductsCostApiFp(this.configuration).catalogCostStorageV1UpdatePost(catalogCostStorageV1UpdatePostBody, options).then((request) => request(this.axios, this.basePath));
    }
}


/**
 * ProductsCostDeleteApi - axios parameter creator
 * @export
 */
export const ProductsCostDeleteApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Delete product cost. In case of at least one of skus is not found exception will be thrown. If error occurred during the delete exception will be thrown.
         * @summary products/cost-delete
         * @param {CatalogBasePriceStorageV1GetPostRequest} [catalogCostStorageV1DeletePostBody] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        catalogCostStorageV1DeletePost: async (catalogCostStorageV1DeletePostBody?: CatalogBasePriceStorageV1GetPostRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/V1/products/cost-delete`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(catalogCostStorageV1DeletePostBody, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * ProductsCostDeleteApi - functional programming interface
 * @export
 */
export const ProductsCostDeleteApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = ProductsCostDeleteApiAxiosParamCreator(configuration)
    return {
        /**
         * Delete product cost. In case of at least one of skus is not found exception will be thrown. If error occurred during the delete exception will be thrown.
         * @summary products/cost-delete
         * @param {CatalogBasePriceStorageV1GetPostRequest} [catalogCostStorageV1DeletePostBody] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async catalogCostStorageV1DeletePost(catalogCostStorageV1DeletePostBody?: CatalogBasePriceStorageV1GetPostRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<boolean>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.catalogCostStorageV1DeletePost(catalogCostStorageV1DeletePostBody, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * ProductsCostDeleteApi - factory interface
 * @export
 */
export const ProductsCostDeleteApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = ProductsCostDeleteApiFp(configuration)
    return {
        /**
         * Delete product cost. In case of at least one of skus is not found exception will be thrown. If error occurred during the delete exception will be thrown.
         * @summary products/cost-delete
         * @param {CatalogBasePriceStorageV1GetPostRequest} [catalogCostStorageV1DeletePostBody] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        catalogCostStorageV1DeletePost(catalogCostStorageV1DeletePostBody?: CatalogBasePriceStorageV1GetPostRequest, options?: any): AxiosPromise<boolean> {
            return localVarFp.catalogCostStorageV1DeletePost(catalogCostStorageV1DeletePostBody, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * ProductsCostDeleteApi - object-oriented interface
 * @export
 * @class ProductsCostDeleteApi
 * @extends {BaseAPI}
 */
export class ProductsCostDeleteApi extends BaseAPI {
    /**
     * Delete product cost. In case of at least one of skus is not found exception will be thrown. If error occurred during the delete exception will be thrown.
     * @summary products/cost-delete
     * @param {CatalogBasePriceStorageV1GetPostRequest} [catalogCostStorageV1DeletePostBody] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProductsCostDeleteApi
     */
    public catalogCostStorageV1DeletePost(catalogCostStorageV1DeletePostBody?: CatalogBasePriceStorageV1GetPostRequest, options?: AxiosRequestConfig) {
        return ProductsCostDeleteApiFp(this.configuration).catalogCostStorageV1DeletePost(catalogCostStorageV1DeletePostBody, options).then((request) => request(this.axios, this.basePath));
    }
}


/**
 * ProductsCostInformationApi - axios parameter creator
 * @export
 */
export const ProductsCostInformationApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Return product prices. In case of at least one of skus is not found exception will be thrown.
         * @summary products/cost-information
         * @param {CatalogBasePriceStorageV1GetPostRequest} [catalogCostStorageV1GetPostBody] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        catalogCostStorageV1GetPost: async (catalogCostStorageV1GetPostBody?: CatalogBasePriceStorageV1GetPostRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/V1/products/cost-information`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(catalogCostStorageV1GetPostBody, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * ProductsCostInformationApi - functional programming interface
 * @export
 */
export const ProductsCostInformationApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = ProductsCostInformationApiAxiosParamCreator(configuration)
    return {
        /**
         * Return product prices. In case of at least one of skus is not found exception will be thrown.
         * @summary products/cost-information
         * @param {CatalogBasePriceStorageV1GetPostRequest} [catalogCostStorageV1GetPostBody] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async catalogCostStorageV1GetPost(catalogCostStorageV1GetPostBody?: CatalogBasePriceStorageV1GetPostRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<CatalogDataCostInterface>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.catalogCostStorageV1GetPost(catalogCostStorageV1GetPostBody, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * ProductsCostInformationApi - factory interface
 * @export
 */
export const ProductsCostInformationApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = ProductsCostInformationApiFp(configuration)
    return {
        /**
         * Return product prices. In case of at least one of skus is not found exception will be thrown.
         * @summary products/cost-information
         * @param {CatalogBasePriceStorageV1GetPostRequest} [catalogCostStorageV1GetPostBody] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        catalogCostStorageV1GetPost(catalogCostStorageV1GetPostBody?: CatalogBasePriceStorageV1GetPostRequest, options?: any): AxiosPromise<Array<CatalogDataCostInterface>> {
            return localVarFp.catalogCostStorageV1GetPost(catalogCostStorageV1GetPostBody, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * ProductsCostInformationApi - object-oriented interface
 * @export
 * @class ProductsCostInformationApi
 * @extends {BaseAPI}
 */
export class ProductsCostInformationApi extends BaseAPI {
    /**
     * Return product prices. In case of at least one of skus is not found exception will be thrown.
     * @summary products/cost-information
     * @param {CatalogBasePriceStorageV1GetPostRequest} [catalogCostStorageV1GetPostBody] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProductsCostInformationApi
     */
    public catalogCostStorageV1GetPost(catalogCostStorageV1GetPostBody?: CatalogBasePriceStorageV1GetPostRequest, options?: AxiosRequestConfig) {
        return ProductsCostInformationApiFp(this.configuration).catalogCostStorageV1GetPost(catalogCostStorageV1GetPostBody, options).then((request) => request(this.axios, this.basePath));
    }
}


/**
 * ProductsDownloadableLinksIdApi - axios parameter creator
 * @export
 */
export const ProductsDownloadableLinksIdApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Delete downloadable link
         * @summary products/downloadable-links/{id}
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        downloadableLinkRepositoryV1DeleteDelete: async (id: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('downloadableLinkRepositoryV1DeleteDelete', 'id', id)
            const localVarPath = `/V1/products/downloadable-links/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * ProductsDownloadableLinksIdApi - functional programming interface
 * @export
 */
export const ProductsDownloadableLinksIdApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = ProductsDownloadableLinksIdApiAxiosParamCreator(configuration)
    return {
        /**
         * Delete downloadable link
         * @summary products/downloadable-links/{id}
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async downloadableLinkRepositoryV1DeleteDelete(id: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<boolean>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.downloadableLinkRepositoryV1DeleteDelete(id, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * ProductsDownloadableLinksIdApi - factory interface
 * @export
 */
export const ProductsDownloadableLinksIdApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = ProductsDownloadableLinksIdApiFp(configuration)
    return {
        /**
         * Delete downloadable link
         * @summary products/downloadable-links/{id}
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        downloadableLinkRepositoryV1DeleteDelete(id: number, options?: any): AxiosPromise<boolean> {
            return localVarFp.downloadableLinkRepositoryV1DeleteDelete(id, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * ProductsDownloadableLinksIdApi - object-oriented interface
 * @export
 * @class ProductsDownloadableLinksIdApi
 * @extends {BaseAPI}
 */
export class ProductsDownloadableLinksIdApi extends BaseAPI {
    /**
     * Delete downloadable link
     * @summary products/downloadable-links/{id}
     * @param {number} id 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProductsDownloadableLinksIdApi
     */
    public downloadableLinkRepositoryV1DeleteDelete(id: number, options?: AxiosRequestConfig) {
        return ProductsDownloadableLinksIdApiFp(this.configuration).downloadableLinkRepositoryV1DeleteDelete(id, options).then((request) => request(this.axios, this.basePath));
    }
}


/**
 * ProductsDownloadableLinksSamplesIdApi - axios parameter creator
 * @export
 */
export const ProductsDownloadableLinksSamplesIdApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Delete downloadable sample
         * @summary products/downloadable-links/samples/{id}
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        downloadableSampleRepositoryV1DeleteDelete: async (id: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('downloadableSampleRepositoryV1DeleteDelete', 'id', id)
            const localVarPath = `/V1/products/downloadable-links/samples/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * ProductsDownloadableLinksSamplesIdApi - functional programming interface
 * @export
 */
export const ProductsDownloadableLinksSamplesIdApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = ProductsDownloadableLinksSamplesIdApiAxiosParamCreator(configuration)
    return {
        /**
         * Delete downloadable sample
         * @summary products/downloadable-links/samples/{id}
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async downloadableSampleRepositoryV1DeleteDelete(id: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<boolean>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.downloadableSampleRepositoryV1DeleteDelete(id, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * ProductsDownloadableLinksSamplesIdApi - factory interface
 * @export
 */
export const ProductsDownloadableLinksSamplesIdApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = ProductsDownloadableLinksSamplesIdApiFp(configuration)
    return {
        /**
         * Delete downloadable sample
         * @summary products/downloadable-links/samples/{id}
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        downloadableSampleRepositoryV1DeleteDelete(id: number, options?: any): AxiosPromise<boolean> {
            return localVarFp.downloadableSampleRepositoryV1DeleteDelete(id, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * ProductsDownloadableLinksSamplesIdApi - object-oriented interface
 * @export
 * @class ProductsDownloadableLinksSamplesIdApi
 * @extends {BaseAPI}
 */
export class ProductsDownloadableLinksSamplesIdApi extends BaseAPI {
    /**
     * Delete downloadable sample
     * @summary products/downloadable-links/samples/{id}
     * @param {number} id 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProductsDownloadableLinksSamplesIdApi
     */
    public downloadableSampleRepositoryV1DeleteDelete(id: number, options?: AxiosRequestConfig) {
        return ProductsDownloadableLinksSamplesIdApiFp(this.configuration).downloadableSampleRepositoryV1DeleteDelete(id, options).then((request) => request(this.axios, this.basePath));
    }
}


/**
 * ProductsLinksTypeAttributesApi - axios parameter creator
 * @export
 */
export const ProductsLinksTypeAttributesApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Provide a list of the product link type attributes
         * @summary products/links/{type}/attributes
         * @param {string} type 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        catalogProductLinkTypeListV1GetItemAttributesGet: async (type: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'type' is not null or undefined
            assertParamExists('catalogProductLinkTypeListV1GetItemAttributesGet', 'type', type)
            const localVarPath = `/V1/products/links/{type}/attributes`
                .replace(`{${"type"}}`, encodeURIComponent(String(type)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * ProductsLinksTypeAttributesApi - functional programming interface
 * @export
 */
export const ProductsLinksTypeAttributesApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = ProductsLinksTypeAttributesApiAxiosParamCreator(configuration)
    return {
        /**
         * Provide a list of the product link type attributes
         * @summary products/links/{type}/attributes
         * @param {string} type 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async catalogProductLinkTypeListV1GetItemAttributesGet(type: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<CatalogDataProductLinkAttributeInterface>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.catalogProductLinkTypeListV1GetItemAttributesGet(type, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * ProductsLinksTypeAttributesApi - factory interface
 * @export
 */
export const ProductsLinksTypeAttributesApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = ProductsLinksTypeAttributesApiFp(configuration)
    return {
        /**
         * Provide a list of the product link type attributes
         * @summary products/links/{type}/attributes
         * @param {string} type 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        catalogProductLinkTypeListV1GetItemAttributesGet(type: string, options?: any): AxiosPromise<Array<CatalogDataProductLinkAttributeInterface>> {
            return localVarFp.catalogProductLinkTypeListV1GetItemAttributesGet(type, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * ProductsLinksTypeAttributesApi - object-oriented interface
 * @export
 * @class ProductsLinksTypeAttributesApi
 * @extends {BaseAPI}
 */
export class ProductsLinksTypeAttributesApi extends BaseAPI {
    /**
     * Provide a list of the product link type attributes
     * @summary products/links/{type}/attributes
     * @param {string} type 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProductsLinksTypeAttributesApi
     */
    public catalogProductLinkTypeListV1GetItemAttributesGet(type: string, options?: AxiosRequestConfig) {
        return ProductsLinksTypeAttributesApiFp(this.configuration).catalogProductLinkTypeListV1GetItemAttributesGet(type, options).then((request) => request(this.axios, this.basePath));
    }
}


/**
 * ProductsLinksTypesApi - axios parameter creator
 * @export
 */
export const ProductsLinksTypesApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Retrieve information about available product link types
         * @summary products/links/types
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        catalogProductLinkTypeListV1GetItemsGet: async (options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/V1/products/links/types`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * ProductsLinksTypesApi - functional programming interface
 * @export
 */
export const ProductsLinksTypesApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = ProductsLinksTypesApiAxiosParamCreator(configuration)
    return {
        /**
         * Retrieve information about available product link types
         * @summary products/links/types
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async catalogProductLinkTypeListV1GetItemsGet(options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<CatalogDataProductLinkTypeInterface>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.catalogProductLinkTypeListV1GetItemsGet(options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * ProductsLinksTypesApi - factory interface
 * @export
 */
export const ProductsLinksTypesApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = ProductsLinksTypesApiFp(configuration)
    return {
        /**
         * Retrieve information about available product link types
         * @summary products/links/types
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        catalogProductLinkTypeListV1GetItemsGet(options?: any): AxiosPromise<Array<CatalogDataProductLinkTypeInterface>> {
            return localVarFp.catalogProductLinkTypeListV1GetItemsGet(options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * ProductsLinksTypesApi - object-oriented interface
 * @export
 * @class ProductsLinksTypesApi
 * @extends {BaseAPI}
 */
export class ProductsLinksTypesApi extends BaseAPI {
    /**
     * Retrieve information about available product link types
     * @summary products/links/types
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProductsLinksTypesApi
     */
    public catalogProductLinkTypeListV1GetItemsGet(options?: AxiosRequestConfig) {
        return ProductsLinksTypesApiFp(this.configuration).catalogProductLinkTypeListV1GetItemsGet(options).then((request) => request(this.axios, this.basePath));
    }
}


/**
 * ProductsMediaTypesAttributeSetNameApi - axios parameter creator
 * @export
 */
export const ProductsMediaTypesAttributeSetNameApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Retrieve the list of media attributes (fronted input type is media_image) assigned to the given attribute set.
         * @summary products/media/types/{attributeSetName}
         * @param {string} attributeSetName 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        catalogProductMediaAttributeManagementV1GetListGet: async (attributeSetName: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'attributeSetName' is not null or undefined
            assertParamExists('catalogProductMediaAttributeManagementV1GetListGet', 'attributeSetName', attributeSetName)
            const localVarPath = `/V1/products/media/types/{attributeSetName}`
                .replace(`{${"attributeSetName"}}`, encodeURIComponent(String(attributeSetName)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * ProductsMediaTypesAttributeSetNameApi - functional programming interface
 * @export
 */
export const ProductsMediaTypesAttributeSetNameApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = ProductsMediaTypesAttributeSetNameApiAxiosParamCreator(configuration)
    return {
        /**
         * Retrieve the list of media attributes (fronted input type is media_image) assigned to the given attribute set.
         * @summary products/media/types/{attributeSetName}
         * @param {string} attributeSetName 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async catalogProductMediaAttributeManagementV1GetListGet(attributeSetName: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<CatalogDataProductAttributeInterface>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.catalogProductMediaAttributeManagementV1GetListGet(attributeSetName, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * ProductsMediaTypesAttributeSetNameApi - factory interface
 * @export
 */
export const ProductsMediaTypesAttributeSetNameApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = ProductsMediaTypesAttributeSetNameApiFp(configuration)
    return {
        /**
         * Retrieve the list of media attributes (fronted input type is media_image) assigned to the given attribute set.
         * @summary products/media/types/{attributeSetName}
         * @param {string} attributeSetName 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        catalogProductMediaAttributeManagementV1GetListGet(attributeSetName: string, options?: any): AxiosPromise<Array<CatalogDataProductAttributeInterface>> {
            return localVarFp.catalogProductMediaAttributeManagementV1GetListGet(attributeSetName, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * ProductsMediaTypesAttributeSetNameApi - object-oriented interface
 * @export
 * @class ProductsMediaTypesAttributeSetNameApi
 * @extends {BaseAPI}
 */
export class ProductsMediaTypesAttributeSetNameApi extends BaseAPI {
    /**
     * Retrieve the list of media attributes (fronted input type is media_image) assigned to the given attribute set.
     * @summary products/media/types/{attributeSetName}
     * @param {string} attributeSetName 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProductsMediaTypesAttributeSetNameApi
     */
    public catalogProductMediaAttributeManagementV1GetListGet(attributeSetName: string, options?: AxiosRequestConfig) {
        return ProductsMediaTypesAttributeSetNameApiFp(this.configuration).catalogProductMediaAttributeManagementV1GetListGet(attributeSetName, options).then((request) => request(this.axios, this.basePath));
    }
}


/**
 * ProductsOptionsApi - axios parameter creator
 * @export
 */
export const ProductsOptionsApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Save Custom Option
         * @summary products/options
         * @param {CatalogProductCustomOptionRepositoryV1SavePostRequest} [catalogProductCustomOptionRepositoryV1SavePostBody] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        catalogProductCustomOptionRepositoryV1SavePost: async (catalogProductCustomOptionRepositoryV1SavePostBody?: CatalogProductCustomOptionRepositoryV1SavePostRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/V1/products/options`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(catalogProductCustomOptionRepositoryV1SavePostBody, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * ProductsOptionsApi - functional programming interface
 * @export
 */
export const ProductsOptionsApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = ProductsOptionsApiAxiosParamCreator(configuration)
    return {
        /**
         * Save Custom Option
         * @summary products/options
         * @param {CatalogProductCustomOptionRepositoryV1SavePostRequest} [catalogProductCustomOptionRepositoryV1SavePostBody] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async catalogProductCustomOptionRepositoryV1SavePost(catalogProductCustomOptionRepositoryV1SavePostBody?: CatalogProductCustomOptionRepositoryV1SavePostRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<CatalogDataProductCustomOptionInterface>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.catalogProductCustomOptionRepositoryV1SavePost(catalogProductCustomOptionRepositoryV1SavePostBody, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * ProductsOptionsApi - factory interface
 * @export
 */
export const ProductsOptionsApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = ProductsOptionsApiFp(configuration)
    return {
        /**
         * Save Custom Option
         * @summary products/options
         * @param {CatalogProductCustomOptionRepositoryV1SavePostRequest} [catalogProductCustomOptionRepositoryV1SavePostBody] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        catalogProductCustomOptionRepositoryV1SavePost(catalogProductCustomOptionRepositoryV1SavePostBody?: CatalogProductCustomOptionRepositoryV1SavePostRequest, options?: any): AxiosPromise<CatalogDataProductCustomOptionInterface> {
            return localVarFp.catalogProductCustomOptionRepositoryV1SavePost(catalogProductCustomOptionRepositoryV1SavePostBody, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * ProductsOptionsApi - object-oriented interface
 * @export
 * @class ProductsOptionsApi
 * @extends {BaseAPI}
 */
export class ProductsOptionsApi extends BaseAPI {
    /**
     * Save Custom Option
     * @summary products/options
     * @param {CatalogProductCustomOptionRepositoryV1SavePostRequest} [catalogProductCustomOptionRepositoryV1SavePostBody] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProductsOptionsApi
     */
    public catalogProductCustomOptionRepositoryV1SavePost(catalogProductCustomOptionRepositoryV1SavePostBody?: CatalogProductCustomOptionRepositoryV1SavePostRequest, options?: AxiosRequestConfig) {
        return ProductsOptionsApiFp(this.configuration).catalogProductCustomOptionRepositoryV1SavePost(catalogProductCustomOptionRepositoryV1SavePostBody, options).then((request) => request(this.axios, this.basePath));
    }
}


/**
 * ProductsOptionsOptionIdApi - axios parameter creator
 * @export
 */
export const ProductsOptionsOptionIdApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Save Custom Option
         * @summary products/options/{optionId}
         * @param {string} optionId 
         * @param {CatalogProductCustomOptionRepositoryV1SavePostRequest} [catalogProductCustomOptionRepositoryV1SavePutBody] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        catalogProductCustomOptionRepositoryV1SavePut: async (optionId: string, catalogProductCustomOptionRepositoryV1SavePutBody?: CatalogProductCustomOptionRepositoryV1SavePostRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'optionId' is not null or undefined
            assertParamExists('catalogProductCustomOptionRepositoryV1SavePut', 'optionId', optionId)
            const localVarPath = `/V1/products/options/{optionId}`
                .replace(`{${"optionId"}}`, encodeURIComponent(String(optionId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(catalogProductCustomOptionRepositoryV1SavePutBody, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * ProductsOptionsOptionIdApi - functional programming interface
 * @export
 */
export const ProductsOptionsOptionIdApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = ProductsOptionsOptionIdApiAxiosParamCreator(configuration)
    return {
        /**
         * Save Custom Option
         * @summary products/options/{optionId}
         * @param {string} optionId 
         * @param {CatalogProductCustomOptionRepositoryV1SavePostRequest} [catalogProductCustomOptionRepositoryV1SavePutBody] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async catalogProductCustomOptionRepositoryV1SavePut(optionId: string, catalogProductCustomOptionRepositoryV1SavePutBody?: CatalogProductCustomOptionRepositoryV1SavePostRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<CatalogDataProductCustomOptionInterface>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.catalogProductCustomOptionRepositoryV1SavePut(optionId, catalogProductCustomOptionRepositoryV1SavePutBody, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * ProductsOptionsOptionIdApi - factory interface
 * @export
 */
export const ProductsOptionsOptionIdApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = ProductsOptionsOptionIdApiFp(configuration)
    return {
        /**
         * Save Custom Option
         * @summary products/options/{optionId}
         * @param {string} optionId 
         * @param {CatalogProductCustomOptionRepositoryV1SavePostRequest} [catalogProductCustomOptionRepositoryV1SavePutBody] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        catalogProductCustomOptionRepositoryV1SavePut(optionId: string, catalogProductCustomOptionRepositoryV1SavePutBody?: CatalogProductCustomOptionRepositoryV1SavePostRequest, options?: any): AxiosPromise<CatalogDataProductCustomOptionInterface> {
            return localVarFp.catalogProductCustomOptionRepositoryV1SavePut(optionId, catalogProductCustomOptionRepositoryV1SavePutBody, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * ProductsOptionsOptionIdApi - object-oriented interface
 * @export
 * @class ProductsOptionsOptionIdApi
 * @extends {BaseAPI}
 */
export class ProductsOptionsOptionIdApi extends BaseAPI {
    /**
     * Save Custom Option
     * @summary products/options/{optionId}
     * @param {string} optionId 
     * @param {CatalogProductCustomOptionRepositoryV1SavePostRequest} [catalogProductCustomOptionRepositoryV1SavePutBody] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProductsOptionsOptionIdApi
     */
    public catalogProductCustomOptionRepositoryV1SavePut(optionId: string, catalogProductCustomOptionRepositoryV1SavePutBody?: CatalogProductCustomOptionRepositoryV1SavePostRequest, options?: AxiosRequestConfig) {
        return ProductsOptionsOptionIdApiFp(this.configuration).catalogProductCustomOptionRepositoryV1SavePut(optionId, catalogProductCustomOptionRepositoryV1SavePutBody, options).then((request) => request(this.axios, this.basePath));
    }
}


/**
 * ProductsOptionsTypesApi - axios parameter creator
 * @export
 */
export const ProductsOptionsTypesApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Get custom option types
         * @summary products/options/types
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        catalogProductCustomOptionTypeListV1GetItemsGet: async (options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/V1/products/options/types`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * ProductsOptionsTypesApi - functional programming interface
 * @export
 */
export const ProductsOptionsTypesApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = ProductsOptionsTypesApiAxiosParamCreator(configuration)
    return {
        /**
         * Get custom option types
         * @summary products/options/types
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async catalogProductCustomOptionTypeListV1GetItemsGet(options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<CatalogDataProductCustomOptionTypeInterface>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.catalogProductCustomOptionTypeListV1GetItemsGet(options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * ProductsOptionsTypesApi - factory interface
 * @export
 */
export const ProductsOptionsTypesApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = ProductsOptionsTypesApiFp(configuration)
    return {
        /**
         * Get custom option types
         * @summary products/options/types
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        catalogProductCustomOptionTypeListV1GetItemsGet(options?: any): AxiosPromise<Array<CatalogDataProductCustomOptionTypeInterface>> {
            return localVarFp.catalogProductCustomOptionTypeListV1GetItemsGet(options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * ProductsOptionsTypesApi - object-oriented interface
 * @export
 * @class ProductsOptionsTypesApi
 * @extends {BaseAPI}
 */
export class ProductsOptionsTypesApi extends BaseAPI {
    /**
     * Get custom option types
     * @summary products/options/types
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProductsOptionsTypesApi
     */
    public catalogProductCustomOptionTypeListV1GetItemsGet(options?: AxiosRequestConfig) {
        return ProductsOptionsTypesApiFp(this.configuration).catalogProductCustomOptionTypeListV1GetItemsGet(options).then((request) => request(this.axios, this.basePath));
    }
}


/**
 * ProductsProductSkuStockItemsItemIdApi - axios parameter creator
 * @export
 */
export const ProductsProductSkuStockItemsItemIdApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary products/{productSku}/stockItems/{itemId}
         * @param {string} productSku 
         * @param {string} itemId 
         * @param {CatalogInventoryStockRegistryV1UpdateStockItemBySkuPutRequest} [catalogInventoryStockRegistryV1UpdateStockItemBySkuPutBody] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        catalogInventoryStockRegistryV1UpdateStockItemBySkuPut: async (productSku: string, itemId: string, catalogInventoryStockRegistryV1UpdateStockItemBySkuPutBody?: CatalogInventoryStockRegistryV1UpdateStockItemBySkuPutRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'productSku' is not null or undefined
            assertParamExists('catalogInventoryStockRegistryV1UpdateStockItemBySkuPut', 'productSku', productSku)
            // verify required parameter 'itemId' is not null or undefined
            assertParamExists('catalogInventoryStockRegistryV1UpdateStockItemBySkuPut', 'itemId', itemId)
            const localVarPath = `/V1/products/{productSku}/stockItems/{itemId}`
                .replace(`{${"productSku"}}`, encodeURIComponent(String(productSku)))
                .replace(`{${"itemId"}}`, encodeURIComponent(String(itemId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(catalogInventoryStockRegistryV1UpdateStockItemBySkuPutBody, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * ProductsProductSkuStockItemsItemIdApi - functional programming interface
 * @export
 */
export const ProductsProductSkuStockItemsItemIdApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = ProductsProductSkuStockItemsItemIdApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @summary products/{productSku}/stockItems/{itemId}
         * @param {string} productSku 
         * @param {string} itemId 
         * @param {CatalogInventoryStockRegistryV1UpdateStockItemBySkuPutRequest} [catalogInventoryStockRegistryV1UpdateStockItemBySkuPutBody] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async catalogInventoryStockRegistryV1UpdateStockItemBySkuPut(productSku: string, itemId: string, catalogInventoryStockRegistryV1UpdateStockItemBySkuPutBody?: CatalogInventoryStockRegistryV1UpdateStockItemBySkuPutRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<number>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.catalogInventoryStockRegistryV1UpdateStockItemBySkuPut(productSku, itemId, catalogInventoryStockRegistryV1UpdateStockItemBySkuPutBody, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * ProductsProductSkuStockItemsItemIdApi - factory interface
 * @export
 */
export const ProductsProductSkuStockItemsItemIdApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = ProductsProductSkuStockItemsItemIdApiFp(configuration)
    return {
        /**
         * 
         * @summary products/{productSku}/stockItems/{itemId}
         * @param {string} productSku 
         * @param {string} itemId 
         * @param {CatalogInventoryStockRegistryV1UpdateStockItemBySkuPutRequest} [catalogInventoryStockRegistryV1UpdateStockItemBySkuPutBody] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        catalogInventoryStockRegistryV1UpdateStockItemBySkuPut(productSku: string, itemId: string, catalogInventoryStockRegistryV1UpdateStockItemBySkuPutBody?: CatalogInventoryStockRegistryV1UpdateStockItemBySkuPutRequest, options?: any): AxiosPromise<number> {
            return localVarFp.catalogInventoryStockRegistryV1UpdateStockItemBySkuPut(productSku, itemId, catalogInventoryStockRegistryV1UpdateStockItemBySkuPutBody, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * ProductsProductSkuStockItemsItemIdApi - object-oriented interface
 * @export
 * @class ProductsProductSkuStockItemsItemIdApi
 * @extends {BaseAPI}
 */
export class ProductsProductSkuStockItemsItemIdApi extends BaseAPI {
    /**
     * 
     * @summary products/{productSku}/stockItems/{itemId}
     * @param {string} productSku 
     * @param {string} itemId 
     * @param {CatalogInventoryStockRegistryV1UpdateStockItemBySkuPutRequest} [catalogInventoryStockRegistryV1UpdateStockItemBySkuPutBody] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProductsProductSkuStockItemsItemIdApi
     */
    public catalogInventoryStockRegistryV1UpdateStockItemBySkuPut(productSku: string, itemId: string, catalogInventoryStockRegistryV1UpdateStockItemBySkuPutBody?: CatalogInventoryStockRegistryV1UpdateStockItemBySkuPutRequest, options?: AxiosRequestConfig) {
        return ProductsProductSkuStockItemsItemIdApiFp(this.configuration).catalogInventoryStockRegistryV1UpdateStockItemBySkuPut(productSku, itemId, catalogInventoryStockRegistryV1UpdateStockItemBySkuPutBody, options).then((request) => request(this.axios, this.basePath));
    }
}


/**
 * ProductsRenderInfoApi - axios parameter creator
 * @export
 */
export const ProductsRenderInfoApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Collect and retrieve the list of product render info This info contains raw prices and formated prices, product name, stock status, store_id, etc
         * @summary products-render-info
         * @param {number} storeId 
         * @param {string} currencyCode 
         * @param {string} [searchCriteriaFilterGroups0Filters0Field] Field
         * @param {string} [searchCriteriaFilterGroups0Filters0Value] Value
         * @param {string} [searchCriteriaFilterGroups0Filters0ConditionType] Condition type
         * @param {string} [searchCriteriaSortOrders0Field] Sorting field.
         * @param {string} [searchCriteriaSortOrders0Direction] Sorting direction.
         * @param {number} [searchCriteriaPageSize] Page size.
         * @param {number} [searchCriteriaCurrentPage] Current page.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        catalogProductRenderListV1GetListGet: async (storeId: number, currencyCode: string, searchCriteriaFilterGroups0Filters0Field?: string, searchCriteriaFilterGroups0Filters0Value?: string, searchCriteriaFilterGroups0Filters0ConditionType?: string, searchCriteriaSortOrders0Field?: string, searchCriteriaSortOrders0Direction?: string, searchCriteriaPageSize?: number, searchCriteriaCurrentPage?: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'storeId' is not null or undefined
            assertParamExists('catalogProductRenderListV1GetListGet', 'storeId', storeId)
            // verify required parameter 'currencyCode' is not null or undefined
            assertParamExists('catalogProductRenderListV1GetListGet', 'currencyCode', currencyCode)
            const localVarPath = `/V1/products-render-info`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (searchCriteriaFilterGroups0Filters0Field !== undefined) {
                localVarQueryParameter['searchCriteria[filterGroups][0][filters][0][field]'] = searchCriteriaFilterGroups0Filters0Field;
            }

            if (searchCriteriaFilterGroups0Filters0Value !== undefined) {
                localVarQueryParameter['searchCriteria[filterGroups][0][filters][0][value]'] = searchCriteriaFilterGroups0Filters0Value;
            }

            if (searchCriteriaFilterGroups0Filters0ConditionType !== undefined) {
                localVarQueryParameter['searchCriteria[filterGroups][0][filters][0][conditionType]'] = searchCriteriaFilterGroups0Filters0ConditionType;
            }

            if (searchCriteriaSortOrders0Field !== undefined) {
                localVarQueryParameter['searchCriteria[sortOrders][0][field]'] = searchCriteriaSortOrders0Field;
            }

            if (searchCriteriaSortOrders0Direction !== undefined) {
                localVarQueryParameter['searchCriteria[sortOrders][0][direction]'] = searchCriteriaSortOrders0Direction;
            }

            if (searchCriteriaPageSize !== undefined) {
                localVarQueryParameter['searchCriteria[pageSize]'] = searchCriteriaPageSize;
            }

            if (searchCriteriaCurrentPage !== undefined) {
                localVarQueryParameter['searchCriteria[currentPage]'] = searchCriteriaCurrentPage;
            }

            if (storeId !== undefined) {
                localVarQueryParameter['storeId'] = storeId;
            }

            if (currencyCode !== undefined) {
                localVarQueryParameter['currencyCode'] = currencyCode;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * ProductsRenderInfoApi - functional programming interface
 * @export
 */
export const ProductsRenderInfoApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = ProductsRenderInfoApiAxiosParamCreator(configuration)
    return {
        /**
         * Collect and retrieve the list of product render info This info contains raw prices and formated prices, product name, stock status, store_id, etc
         * @summary products-render-info
         * @param {number} storeId 
         * @param {string} currencyCode 
         * @param {string} [searchCriteriaFilterGroups0Filters0Field] Field
         * @param {string} [searchCriteriaFilterGroups0Filters0Value] Value
         * @param {string} [searchCriteriaFilterGroups0Filters0ConditionType] Condition type
         * @param {string} [searchCriteriaSortOrders0Field] Sorting field.
         * @param {string} [searchCriteriaSortOrders0Direction] Sorting direction.
         * @param {number} [searchCriteriaPageSize] Page size.
         * @param {number} [searchCriteriaCurrentPage] Current page.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async catalogProductRenderListV1GetListGet(storeId: number, currencyCode: string, searchCriteriaFilterGroups0Filters0Field?: string, searchCriteriaFilterGroups0Filters0Value?: string, searchCriteriaFilterGroups0Filters0ConditionType?: string, searchCriteriaSortOrders0Field?: string, searchCriteriaSortOrders0Direction?: string, searchCriteriaPageSize?: number, searchCriteriaCurrentPage?: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<CatalogDataProductRenderSearchResultsInterface>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.catalogProductRenderListV1GetListGet(storeId, currencyCode, searchCriteriaFilterGroups0Filters0Field, searchCriteriaFilterGroups0Filters0Value, searchCriteriaFilterGroups0Filters0ConditionType, searchCriteriaSortOrders0Field, searchCriteriaSortOrders0Direction, searchCriteriaPageSize, searchCriteriaCurrentPage, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * ProductsRenderInfoApi - factory interface
 * @export
 */
export const ProductsRenderInfoApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = ProductsRenderInfoApiFp(configuration)
    return {
        /**
         * Collect and retrieve the list of product render info This info contains raw prices and formated prices, product name, stock status, store_id, etc
         * @summary products-render-info
         * @param {number} storeId 
         * @param {string} currencyCode 
         * @param {string} [searchCriteriaFilterGroups0Filters0Field] Field
         * @param {string} [searchCriteriaFilterGroups0Filters0Value] Value
         * @param {string} [searchCriteriaFilterGroups0Filters0ConditionType] Condition type
         * @param {string} [searchCriteriaSortOrders0Field] Sorting field.
         * @param {string} [searchCriteriaSortOrders0Direction] Sorting direction.
         * @param {number} [searchCriteriaPageSize] Page size.
         * @param {number} [searchCriteriaCurrentPage] Current page.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        catalogProductRenderListV1GetListGet(storeId: number, currencyCode: string, searchCriteriaFilterGroups0Filters0Field?: string, searchCriteriaFilterGroups0Filters0Value?: string, searchCriteriaFilterGroups0Filters0ConditionType?: string, searchCriteriaSortOrders0Field?: string, searchCriteriaSortOrders0Direction?: string, searchCriteriaPageSize?: number, searchCriteriaCurrentPage?: number, options?: any): AxiosPromise<CatalogDataProductRenderSearchResultsInterface> {
            return localVarFp.catalogProductRenderListV1GetListGet(storeId, currencyCode, searchCriteriaFilterGroups0Filters0Field, searchCriteriaFilterGroups0Filters0Value, searchCriteriaFilterGroups0Filters0ConditionType, searchCriteriaSortOrders0Field, searchCriteriaSortOrders0Direction, searchCriteriaPageSize, searchCriteriaCurrentPage, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * ProductsRenderInfoApi - object-oriented interface
 * @export
 * @class ProductsRenderInfoApi
 * @extends {BaseAPI}
 */
export class ProductsRenderInfoApi extends BaseAPI {
    /**
     * Collect and retrieve the list of product render info This info contains raw prices and formated prices, product name, stock status, store_id, etc
     * @summary products-render-info
     * @param {number} storeId 
     * @param {string} currencyCode 
     * @param {string} [searchCriteriaFilterGroups0Filters0Field] Field
     * @param {string} [searchCriteriaFilterGroups0Filters0Value] Value
     * @param {string} [searchCriteriaFilterGroups0Filters0ConditionType] Condition type
     * @param {string} [searchCriteriaSortOrders0Field] Sorting field.
     * @param {string} [searchCriteriaSortOrders0Direction] Sorting direction.
     * @param {number} [searchCriteriaPageSize] Page size.
     * @param {number} [searchCriteriaCurrentPage] Current page.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProductsRenderInfoApi
     */
    public catalogProductRenderListV1GetListGet(storeId: number, currencyCode: string, searchCriteriaFilterGroups0Filters0Field?: string, searchCriteriaFilterGroups0Filters0Value?: string, searchCriteriaFilterGroups0Filters0ConditionType?: string, searchCriteriaSortOrders0Field?: string, searchCriteriaSortOrders0Direction?: string, searchCriteriaPageSize?: number, searchCriteriaCurrentPage?: number, options?: AxiosRequestConfig) {
        return ProductsRenderInfoApiFp(this.configuration).catalogProductRenderListV1GetListGet(storeId, currencyCode, searchCriteriaFilterGroups0Filters0Field, searchCriteriaFilterGroups0Filters0Value, searchCriteriaFilterGroups0Filters0ConditionType, searchCriteriaSortOrders0Field, searchCriteriaSortOrders0Direction, searchCriteriaPageSize, searchCriteriaCurrentPage, options).then((request) => request(this.axios, this.basePath));
    }
}


/**
 * ProductsSkuApi - axios parameter creator
 * @export
 */
export const ProductsSkuApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary products/{sku}
         * @param {string} sku 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        catalogProductRepositoryV1DeleteByIdDelete: async (sku: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'sku' is not null or undefined
            assertParamExists('catalogProductRepositoryV1DeleteByIdDelete', 'sku', sku)
            const localVarPath = `/V1/products/{sku}`
                .replace(`{${"sku"}}`, encodeURIComponent(String(sku)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Get info about product by product SKU
         * @summary products/{sku}
         * @param {string} sku 
         * @param {boolean} [editMode] 
         * @param {number} [storeId] 
         * @param {boolean} [forceReload] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        catalogProductRepositoryV1GetGet: async (sku: string, editMode?: boolean, storeId?: number, forceReload?: boolean, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'sku' is not null or undefined
            assertParamExists('catalogProductRepositoryV1GetGet', 'sku', sku)
            const localVarPath = `/V1/products/{sku}`
                .replace(`{${"sku"}}`, encodeURIComponent(String(sku)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (editMode !== undefined) {
                localVarQueryParameter['editMode'] = editMode;
            }

            if (storeId !== undefined) {
                localVarQueryParameter['storeId'] = storeId;
            }

            if (forceReload !== undefined) {
                localVarQueryParameter['forceReload'] = forceReload;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Create product
         * @summary products/{sku}
         * @param {string} sku 
         * @param {CatalogProductRepositoryV1SavePostRequest} [catalogProductRepositoryV1SavePutBody] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        catalogProductRepositoryV1SavePut: async (sku: string, catalogProductRepositoryV1SavePutBody?: CatalogProductRepositoryV1SavePostRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'sku' is not null or undefined
            assertParamExists('catalogProductRepositoryV1SavePut', 'sku', sku)
            const localVarPath = `/V1/products/{sku}`
                .replace(`{${"sku"}}`, encodeURIComponent(String(sku)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(catalogProductRepositoryV1SavePutBody, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * ProductsSkuApi - functional programming interface
 * @export
 */
export const ProductsSkuApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = ProductsSkuApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @summary products/{sku}
         * @param {string} sku 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async catalogProductRepositoryV1DeleteByIdDelete(sku: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<boolean>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.catalogProductRepositoryV1DeleteByIdDelete(sku, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Get info about product by product SKU
         * @summary products/{sku}
         * @param {string} sku 
         * @param {boolean} [editMode] 
         * @param {number} [storeId] 
         * @param {boolean} [forceReload] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async catalogProductRepositoryV1GetGet(sku: string, editMode?: boolean, storeId?: number, forceReload?: boolean, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<CatalogDataProductInterface>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.catalogProductRepositoryV1GetGet(sku, editMode, storeId, forceReload, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Create product
         * @summary products/{sku}
         * @param {string} sku 
         * @param {CatalogProductRepositoryV1SavePostRequest} [catalogProductRepositoryV1SavePutBody] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async catalogProductRepositoryV1SavePut(sku: string, catalogProductRepositoryV1SavePutBody?: CatalogProductRepositoryV1SavePostRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<CatalogDataProductInterface>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.catalogProductRepositoryV1SavePut(sku, catalogProductRepositoryV1SavePutBody, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * ProductsSkuApi - factory interface
 * @export
 */
export const ProductsSkuApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = ProductsSkuApiFp(configuration)
    return {
        /**
         * 
         * @summary products/{sku}
         * @param {string} sku 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        catalogProductRepositoryV1DeleteByIdDelete(sku: string, options?: any): AxiosPromise<boolean> {
            return localVarFp.catalogProductRepositoryV1DeleteByIdDelete(sku, options).then((request) => request(axios, basePath));
        },
        /**
         * Get info about product by product SKU
         * @summary products/{sku}
         * @param {string} sku 
         * @param {boolean} [editMode] 
         * @param {number} [storeId] 
         * @param {boolean} [forceReload] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        catalogProductRepositoryV1GetGet(sku: string, editMode?: boolean, storeId?: number, forceReload?: boolean, options?: any): AxiosPromise<CatalogDataProductInterface> {
            return localVarFp.catalogProductRepositoryV1GetGet(sku, editMode, storeId, forceReload, options).then((request) => request(axios, basePath));
        },
        /**
         * Create product
         * @summary products/{sku}
         * @param {string} sku 
         * @param {CatalogProductRepositoryV1SavePostRequest} [catalogProductRepositoryV1SavePutBody] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        catalogProductRepositoryV1SavePut(sku: string, catalogProductRepositoryV1SavePutBody?: CatalogProductRepositoryV1SavePostRequest, options?: any): AxiosPromise<CatalogDataProductInterface> {
            return localVarFp.catalogProductRepositoryV1SavePut(sku, catalogProductRepositoryV1SavePutBody, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * ProductsSkuApi - object-oriented interface
 * @export
 * @class ProductsSkuApi
 * @extends {BaseAPI}
 */
export class ProductsSkuApi extends BaseAPI {
    /**
     * 
     * @summary products/{sku}
     * @param {string} sku 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProductsSkuApi
     */
    public catalogProductRepositoryV1DeleteByIdDelete(sku: string, options?: AxiosRequestConfig) {
        return ProductsSkuApiFp(this.configuration).catalogProductRepositoryV1DeleteByIdDelete(sku, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Get info about product by product SKU
     * @summary products/{sku}
     * @param {string} sku 
     * @param {boolean} [editMode] 
     * @param {number} [storeId] 
     * @param {boolean} [forceReload] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProductsSkuApi
     */
    public catalogProductRepositoryV1GetGet(sku: string, editMode?: boolean, storeId?: number, forceReload?: boolean, options?: AxiosRequestConfig) {
        return ProductsSkuApiFp(this.configuration).catalogProductRepositoryV1GetGet(sku, editMode, storeId, forceReload, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Create product
     * @summary products/{sku}
     * @param {string} sku 
     * @param {CatalogProductRepositoryV1SavePostRequest} [catalogProductRepositoryV1SavePutBody] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProductsSkuApi
     */
    public catalogProductRepositoryV1SavePut(sku: string, catalogProductRepositoryV1SavePutBody?: CatalogProductRepositoryV1SavePostRequest, options?: AxiosRequestConfig) {
        return ProductsSkuApiFp(this.configuration).catalogProductRepositoryV1SavePut(sku, catalogProductRepositoryV1SavePutBody, options).then((request) => request(this.axios, this.basePath));
    }
}


/**
 * ProductsSkuDownloadableLinksApi - axios parameter creator
 * @export
 */
export const ProductsSkuDownloadableLinksApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * List of links with associated samples
         * @summary products/{sku}/downloadable-links
         * @param {string} sku 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        downloadableLinkRepositoryV1GetListGet: async (sku: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'sku' is not null or undefined
            assertParamExists('downloadableLinkRepositoryV1GetListGet', 'sku', sku)
            const localVarPath = `/V1/products/{sku}/downloadable-links`
                .replace(`{${"sku"}}`, encodeURIComponent(String(sku)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Update downloadable link of the given product (link type and its resources cannot be changed)
         * @summary products/{sku}/downloadable-links
         * @param {string} sku 
         * @param {DownloadableLinkRepositoryV1SavePostRequest} [downloadableLinkRepositoryV1SavePostBody] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        downloadableLinkRepositoryV1SavePost: async (sku: string, downloadableLinkRepositoryV1SavePostBody?: DownloadableLinkRepositoryV1SavePostRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'sku' is not null or undefined
            assertParamExists('downloadableLinkRepositoryV1SavePost', 'sku', sku)
            const localVarPath = `/V1/products/{sku}/downloadable-links`
                .replace(`{${"sku"}}`, encodeURIComponent(String(sku)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(downloadableLinkRepositoryV1SavePostBody, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * ProductsSkuDownloadableLinksApi - functional programming interface
 * @export
 */
export const ProductsSkuDownloadableLinksApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = ProductsSkuDownloadableLinksApiAxiosParamCreator(configuration)
    return {
        /**
         * List of links with associated samples
         * @summary products/{sku}/downloadable-links
         * @param {string} sku 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async downloadableLinkRepositoryV1GetListGet(sku: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<DownloadableDataLinkInterface>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.downloadableLinkRepositoryV1GetListGet(sku, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Update downloadable link of the given product (link type and its resources cannot be changed)
         * @summary products/{sku}/downloadable-links
         * @param {string} sku 
         * @param {DownloadableLinkRepositoryV1SavePostRequest} [downloadableLinkRepositoryV1SavePostBody] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async downloadableLinkRepositoryV1SavePost(sku: string, downloadableLinkRepositoryV1SavePostBody?: DownloadableLinkRepositoryV1SavePostRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<number>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.downloadableLinkRepositoryV1SavePost(sku, downloadableLinkRepositoryV1SavePostBody, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * ProductsSkuDownloadableLinksApi - factory interface
 * @export
 */
export const ProductsSkuDownloadableLinksApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = ProductsSkuDownloadableLinksApiFp(configuration)
    return {
        /**
         * List of links with associated samples
         * @summary products/{sku}/downloadable-links
         * @param {string} sku 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        downloadableLinkRepositoryV1GetListGet(sku: string, options?: any): AxiosPromise<Array<DownloadableDataLinkInterface>> {
            return localVarFp.downloadableLinkRepositoryV1GetListGet(sku, options).then((request) => request(axios, basePath));
        },
        /**
         * Update downloadable link of the given product (link type and its resources cannot be changed)
         * @summary products/{sku}/downloadable-links
         * @param {string} sku 
         * @param {DownloadableLinkRepositoryV1SavePostRequest} [downloadableLinkRepositoryV1SavePostBody] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        downloadableLinkRepositoryV1SavePost(sku: string, downloadableLinkRepositoryV1SavePostBody?: DownloadableLinkRepositoryV1SavePostRequest, options?: any): AxiosPromise<number> {
            return localVarFp.downloadableLinkRepositoryV1SavePost(sku, downloadableLinkRepositoryV1SavePostBody, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * ProductsSkuDownloadableLinksApi - object-oriented interface
 * @export
 * @class ProductsSkuDownloadableLinksApi
 * @extends {BaseAPI}
 */
export class ProductsSkuDownloadableLinksApi extends BaseAPI {
    /**
     * List of links with associated samples
     * @summary products/{sku}/downloadable-links
     * @param {string} sku 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProductsSkuDownloadableLinksApi
     */
    public downloadableLinkRepositoryV1GetListGet(sku: string, options?: AxiosRequestConfig) {
        return ProductsSkuDownloadableLinksApiFp(this.configuration).downloadableLinkRepositoryV1GetListGet(sku, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Update downloadable link of the given product (link type and its resources cannot be changed)
     * @summary products/{sku}/downloadable-links
     * @param {string} sku 
     * @param {DownloadableLinkRepositoryV1SavePostRequest} [downloadableLinkRepositoryV1SavePostBody] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProductsSkuDownloadableLinksApi
     */
    public downloadableLinkRepositoryV1SavePost(sku: string, downloadableLinkRepositoryV1SavePostBody?: DownloadableLinkRepositoryV1SavePostRequest, options?: AxiosRequestConfig) {
        return ProductsSkuDownloadableLinksApiFp(this.configuration).downloadableLinkRepositoryV1SavePost(sku, downloadableLinkRepositoryV1SavePostBody, options).then((request) => request(this.axios, this.basePath));
    }
}


/**
 * ProductsSkuDownloadableLinksIdApi - axios parameter creator
 * @export
 */
export const ProductsSkuDownloadableLinksIdApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Update downloadable link of the given product (link type and its resources cannot be changed)
         * @summary products/{sku}/downloadable-links/{id}
         * @param {string} sku 
         * @param {string} id 
         * @param {DownloadableLinkRepositoryV1SavePostRequest} [downloadableLinkRepositoryV1SavePutBody] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        downloadableLinkRepositoryV1SavePut: async (sku: string, id: string, downloadableLinkRepositoryV1SavePutBody?: DownloadableLinkRepositoryV1SavePostRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'sku' is not null or undefined
            assertParamExists('downloadableLinkRepositoryV1SavePut', 'sku', sku)
            // verify required parameter 'id' is not null or undefined
            assertParamExists('downloadableLinkRepositoryV1SavePut', 'id', id)
            const localVarPath = `/V1/products/{sku}/downloadable-links/{id}`
                .replace(`{${"sku"}}`, encodeURIComponent(String(sku)))
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(downloadableLinkRepositoryV1SavePutBody, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * ProductsSkuDownloadableLinksIdApi - functional programming interface
 * @export
 */
export const ProductsSkuDownloadableLinksIdApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = ProductsSkuDownloadableLinksIdApiAxiosParamCreator(configuration)
    return {
        /**
         * Update downloadable link of the given product (link type and its resources cannot be changed)
         * @summary products/{sku}/downloadable-links/{id}
         * @param {string} sku 
         * @param {string} id 
         * @param {DownloadableLinkRepositoryV1SavePostRequest} [downloadableLinkRepositoryV1SavePutBody] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async downloadableLinkRepositoryV1SavePut(sku: string, id: string, downloadableLinkRepositoryV1SavePutBody?: DownloadableLinkRepositoryV1SavePostRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<number>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.downloadableLinkRepositoryV1SavePut(sku, id, downloadableLinkRepositoryV1SavePutBody, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * ProductsSkuDownloadableLinksIdApi - factory interface
 * @export
 */
export const ProductsSkuDownloadableLinksIdApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = ProductsSkuDownloadableLinksIdApiFp(configuration)
    return {
        /**
         * Update downloadable link of the given product (link type and its resources cannot be changed)
         * @summary products/{sku}/downloadable-links/{id}
         * @param {string} sku 
         * @param {string} id 
         * @param {DownloadableLinkRepositoryV1SavePostRequest} [downloadableLinkRepositoryV1SavePutBody] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        downloadableLinkRepositoryV1SavePut(sku: string, id: string, downloadableLinkRepositoryV1SavePutBody?: DownloadableLinkRepositoryV1SavePostRequest, options?: any): AxiosPromise<number> {
            return localVarFp.downloadableLinkRepositoryV1SavePut(sku, id, downloadableLinkRepositoryV1SavePutBody, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * ProductsSkuDownloadableLinksIdApi - object-oriented interface
 * @export
 * @class ProductsSkuDownloadableLinksIdApi
 * @extends {BaseAPI}
 */
export class ProductsSkuDownloadableLinksIdApi extends BaseAPI {
    /**
     * Update downloadable link of the given product (link type and its resources cannot be changed)
     * @summary products/{sku}/downloadable-links/{id}
     * @param {string} sku 
     * @param {string} id 
     * @param {DownloadableLinkRepositoryV1SavePostRequest} [downloadableLinkRepositoryV1SavePutBody] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProductsSkuDownloadableLinksIdApi
     */
    public downloadableLinkRepositoryV1SavePut(sku: string, id: string, downloadableLinkRepositoryV1SavePutBody?: DownloadableLinkRepositoryV1SavePostRequest, options?: AxiosRequestConfig) {
        return ProductsSkuDownloadableLinksIdApiFp(this.configuration).downloadableLinkRepositoryV1SavePut(sku, id, downloadableLinkRepositoryV1SavePutBody, options).then((request) => request(this.axios, this.basePath));
    }
}


/**
 * ProductsSkuDownloadableLinksSamplesApi - axios parameter creator
 * @export
 */
export const ProductsSkuDownloadableLinksSamplesApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * List of samples for downloadable product
         * @summary products/{sku}/downloadable-links/samples
         * @param {string} sku 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        downloadableSampleRepositoryV1GetListGet: async (sku: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'sku' is not null or undefined
            assertParamExists('downloadableSampleRepositoryV1GetListGet', 'sku', sku)
            const localVarPath = `/V1/products/{sku}/downloadable-links/samples`
                .replace(`{${"sku"}}`, encodeURIComponent(String(sku)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Update downloadable sample of the given product
         * @summary products/{sku}/downloadable-links/samples
         * @param {string} sku 
         * @param {DownloadableSampleRepositoryV1SavePostRequest} [downloadableSampleRepositoryV1SavePostBody] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        downloadableSampleRepositoryV1SavePost: async (sku: string, downloadableSampleRepositoryV1SavePostBody?: DownloadableSampleRepositoryV1SavePostRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'sku' is not null or undefined
            assertParamExists('downloadableSampleRepositoryV1SavePost', 'sku', sku)
            const localVarPath = `/V1/products/{sku}/downloadable-links/samples`
                .replace(`{${"sku"}}`, encodeURIComponent(String(sku)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(downloadableSampleRepositoryV1SavePostBody, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * ProductsSkuDownloadableLinksSamplesApi - functional programming interface
 * @export
 */
export const ProductsSkuDownloadableLinksSamplesApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = ProductsSkuDownloadableLinksSamplesApiAxiosParamCreator(configuration)
    return {
        /**
         * List of samples for downloadable product
         * @summary products/{sku}/downloadable-links/samples
         * @param {string} sku 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async downloadableSampleRepositoryV1GetListGet(sku: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<DownloadableDataSampleInterface>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.downloadableSampleRepositoryV1GetListGet(sku, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Update downloadable sample of the given product
         * @summary products/{sku}/downloadable-links/samples
         * @param {string} sku 
         * @param {DownloadableSampleRepositoryV1SavePostRequest} [downloadableSampleRepositoryV1SavePostBody] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async downloadableSampleRepositoryV1SavePost(sku: string, downloadableSampleRepositoryV1SavePostBody?: DownloadableSampleRepositoryV1SavePostRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<number>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.downloadableSampleRepositoryV1SavePost(sku, downloadableSampleRepositoryV1SavePostBody, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * ProductsSkuDownloadableLinksSamplesApi - factory interface
 * @export
 */
export const ProductsSkuDownloadableLinksSamplesApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = ProductsSkuDownloadableLinksSamplesApiFp(configuration)
    return {
        /**
         * List of samples for downloadable product
         * @summary products/{sku}/downloadable-links/samples
         * @param {string} sku 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        downloadableSampleRepositoryV1GetListGet(sku: string, options?: any): AxiosPromise<Array<DownloadableDataSampleInterface>> {
            return localVarFp.downloadableSampleRepositoryV1GetListGet(sku, options).then((request) => request(axios, basePath));
        },
        /**
         * Update downloadable sample of the given product
         * @summary products/{sku}/downloadable-links/samples
         * @param {string} sku 
         * @param {DownloadableSampleRepositoryV1SavePostRequest} [downloadableSampleRepositoryV1SavePostBody] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        downloadableSampleRepositoryV1SavePost(sku: string, downloadableSampleRepositoryV1SavePostBody?: DownloadableSampleRepositoryV1SavePostRequest, options?: any): AxiosPromise<number> {
            return localVarFp.downloadableSampleRepositoryV1SavePost(sku, downloadableSampleRepositoryV1SavePostBody, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * ProductsSkuDownloadableLinksSamplesApi - object-oriented interface
 * @export
 * @class ProductsSkuDownloadableLinksSamplesApi
 * @extends {BaseAPI}
 */
export class ProductsSkuDownloadableLinksSamplesApi extends BaseAPI {
    /**
     * List of samples for downloadable product
     * @summary products/{sku}/downloadable-links/samples
     * @param {string} sku 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProductsSkuDownloadableLinksSamplesApi
     */
    public downloadableSampleRepositoryV1GetListGet(sku: string, options?: AxiosRequestConfig) {
        return ProductsSkuDownloadableLinksSamplesApiFp(this.configuration).downloadableSampleRepositoryV1GetListGet(sku, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Update downloadable sample of the given product
     * @summary products/{sku}/downloadable-links/samples
     * @param {string} sku 
     * @param {DownloadableSampleRepositoryV1SavePostRequest} [downloadableSampleRepositoryV1SavePostBody] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProductsSkuDownloadableLinksSamplesApi
     */
    public downloadableSampleRepositoryV1SavePost(sku: string, downloadableSampleRepositoryV1SavePostBody?: DownloadableSampleRepositoryV1SavePostRequest, options?: AxiosRequestConfig) {
        return ProductsSkuDownloadableLinksSamplesApiFp(this.configuration).downloadableSampleRepositoryV1SavePost(sku, downloadableSampleRepositoryV1SavePostBody, options).then((request) => request(this.axios, this.basePath));
    }
}


/**
 * ProductsSkuDownloadableLinksSamplesIdApi - axios parameter creator
 * @export
 */
export const ProductsSkuDownloadableLinksSamplesIdApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Update downloadable sample of the given product
         * @summary products/{sku}/downloadable-links/samples/{id}
         * @param {string} sku 
         * @param {string} id 
         * @param {DownloadableSampleRepositoryV1SavePostRequest} [downloadableSampleRepositoryV1SavePutBody] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        downloadableSampleRepositoryV1SavePut: async (sku: string, id: string, downloadableSampleRepositoryV1SavePutBody?: DownloadableSampleRepositoryV1SavePostRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'sku' is not null or undefined
            assertParamExists('downloadableSampleRepositoryV1SavePut', 'sku', sku)
            // verify required parameter 'id' is not null or undefined
            assertParamExists('downloadableSampleRepositoryV1SavePut', 'id', id)
            const localVarPath = `/V1/products/{sku}/downloadable-links/samples/{id}`
                .replace(`{${"sku"}}`, encodeURIComponent(String(sku)))
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(downloadableSampleRepositoryV1SavePutBody, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * ProductsSkuDownloadableLinksSamplesIdApi - functional programming interface
 * @export
 */
export const ProductsSkuDownloadableLinksSamplesIdApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = ProductsSkuDownloadableLinksSamplesIdApiAxiosParamCreator(configuration)
    return {
        /**
         * Update downloadable sample of the given product
         * @summary products/{sku}/downloadable-links/samples/{id}
         * @param {string} sku 
         * @param {string} id 
         * @param {DownloadableSampleRepositoryV1SavePostRequest} [downloadableSampleRepositoryV1SavePutBody] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async downloadableSampleRepositoryV1SavePut(sku: string, id: string, downloadableSampleRepositoryV1SavePutBody?: DownloadableSampleRepositoryV1SavePostRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<number>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.downloadableSampleRepositoryV1SavePut(sku, id, downloadableSampleRepositoryV1SavePutBody, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * ProductsSkuDownloadableLinksSamplesIdApi - factory interface
 * @export
 */
export const ProductsSkuDownloadableLinksSamplesIdApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = ProductsSkuDownloadableLinksSamplesIdApiFp(configuration)
    return {
        /**
         * Update downloadable sample of the given product
         * @summary products/{sku}/downloadable-links/samples/{id}
         * @param {string} sku 
         * @param {string} id 
         * @param {DownloadableSampleRepositoryV1SavePostRequest} [downloadableSampleRepositoryV1SavePutBody] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        downloadableSampleRepositoryV1SavePut(sku: string, id: string, downloadableSampleRepositoryV1SavePutBody?: DownloadableSampleRepositoryV1SavePostRequest, options?: any): AxiosPromise<number> {
            return localVarFp.downloadableSampleRepositoryV1SavePut(sku, id, downloadableSampleRepositoryV1SavePutBody, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * ProductsSkuDownloadableLinksSamplesIdApi - object-oriented interface
 * @export
 * @class ProductsSkuDownloadableLinksSamplesIdApi
 * @extends {BaseAPI}
 */
export class ProductsSkuDownloadableLinksSamplesIdApi extends BaseAPI {
    /**
     * Update downloadable sample of the given product
     * @summary products/{sku}/downloadable-links/samples/{id}
     * @param {string} sku 
     * @param {string} id 
     * @param {DownloadableSampleRepositoryV1SavePostRequest} [downloadableSampleRepositoryV1SavePutBody] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProductsSkuDownloadableLinksSamplesIdApi
     */
    public downloadableSampleRepositoryV1SavePut(sku: string, id: string, downloadableSampleRepositoryV1SavePutBody?: DownloadableSampleRepositoryV1SavePostRequest, options?: AxiosRequestConfig) {
        return ProductsSkuDownloadableLinksSamplesIdApiFp(this.configuration).downloadableSampleRepositoryV1SavePut(sku, id, downloadableSampleRepositoryV1SavePutBody, options).then((request) => request(this.axios, this.basePath));
    }
}


/**
 * ProductsSkuGroupPricesCustomerGroupIdTiersApi - axios parameter creator
 * @export
 */
export const ProductsSkuGroupPricesCustomerGroupIdTiersApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Get tier price of product
         * @summary products/{sku}/group-prices/{customerGroupId}/tiers
         * @param {string} sku 
         * @param {string} customerGroupId \&#39;all\&#39; can be used to specify \&#39;ALL GROUPS\&#39;
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        catalogProductTierPriceManagementV1GetListGet: async (sku: string, customerGroupId: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'sku' is not null or undefined
            assertParamExists('catalogProductTierPriceManagementV1GetListGet', 'sku', sku)
            // verify required parameter 'customerGroupId' is not null or undefined
            assertParamExists('catalogProductTierPriceManagementV1GetListGet', 'customerGroupId', customerGroupId)
            const localVarPath = `/V1/products/{sku}/group-prices/{customerGroupId}/tiers`
                .replace(`{${"sku"}}`, encodeURIComponent(String(sku)))
                .replace(`{${"customerGroupId"}}`, encodeURIComponent(String(customerGroupId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * ProductsSkuGroupPricesCustomerGroupIdTiersApi - functional programming interface
 * @export
 */
export const ProductsSkuGroupPricesCustomerGroupIdTiersApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = ProductsSkuGroupPricesCustomerGroupIdTiersApiAxiosParamCreator(configuration)
    return {
        /**
         * Get tier price of product
         * @summary products/{sku}/group-prices/{customerGroupId}/tiers
         * @param {string} sku 
         * @param {string} customerGroupId \&#39;all\&#39; can be used to specify \&#39;ALL GROUPS\&#39;
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async catalogProductTierPriceManagementV1GetListGet(sku: string, customerGroupId: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<CatalogDataProductTierPriceInterface>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.catalogProductTierPriceManagementV1GetListGet(sku, customerGroupId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * ProductsSkuGroupPricesCustomerGroupIdTiersApi - factory interface
 * @export
 */
export const ProductsSkuGroupPricesCustomerGroupIdTiersApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = ProductsSkuGroupPricesCustomerGroupIdTiersApiFp(configuration)
    return {
        /**
         * Get tier price of product
         * @summary products/{sku}/group-prices/{customerGroupId}/tiers
         * @param {string} sku 
         * @param {string} customerGroupId \&#39;all\&#39; can be used to specify \&#39;ALL GROUPS\&#39;
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        catalogProductTierPriceManagementV1GetListGet(sku: string, customerGroupId: string, options?: any): AxiosPromise<Array<CatalogDataProductTierPriceInterface>> {
            return localVarFp.catalogProductTierPriceManagementV1GetListGet(sku, customerGroupId, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * ProductsSkuGroupPricesCustomerGroupIdTiersApi - object-oriented interface
 * @export
 * @class ProductsSkuGroupPricesCustomerGroupIdTiersApi
 * @extends {BaseAPI}
 */
export class ProductsSkuGroupPricesCustomerGroupIdTiersApi extends BaseAPI {
    /**
     * Get tier price of product
     * @summary products/{sku}/group-prices/{customerGroupId}/tiers
     * @param {string} sku 
     * @param {string} customerGroupId \&#39;all\&#39; can be used to specify \&#39;ALL GROUPS\&#39;
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProductsSkuGroupPricesCustomerGroupIdTiersApi
     */
    public catalogProductTierPriceManagementV1GetListGet(sku: string, customerGroupId: string, options?: AxiosRequestConfig) {
        return ProductsSkuGroupPricesCustomerGroupIdTiersApiFp(this.configuration).catalogProductTierPriceManagementV1GetListGet(sku, customerGroupId, options).then((request) => request(this.axios, this.basePath));
    }
}


/**
 * ProductsSkuGroupPricesCustomerGroupIdTiersQtyApi - axios parameter creator
 * @export
 */
export const ProductsSkuGroupPricesCustomerGroupIdTiersQtyApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Remove tier price from product
         * @summary products/{sku}/group-prices/{customerGroupId}/tiers/{qty}
         * @param {string} sku 
         * @param {string} customerGroupId \&#39;all\&#39; can be used to specify \&#39;ALL GROUPS\&#39;
         * @param {number} qty 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        catalogProductTierPriceManagementV1RemoveDelete: async (sku: string, customerGroupId: string, qty: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'sku' is not null or undefined
            assertParamExists('catalogProductTierPriceManagementV1RemoveDelete', 'sku', sku)
            // verify required parameter 'customerGroupId' is not null or undefined
            assertParamExists('catalogProductTierPriceManagementV1RemoveDelete', 'customerGroupId', customerGroupId)
            // verify required parameter 'qty' is not null or undefined
            assertParamExists('catalogProductTierPriceManagementV1RemoveDelete', 'qty', qty)
            const localVarPath = `/V1/products/{sku}/group-prices/{customerGroupId}/tiers/{qty}`
                .replace(`{${"sku"}}`, encodeURIComponent(String(sku)))
                .replace(`{${"customerGroupId"}}`, encodeURIComponent(String(customerGroupId)))
                .replace(`{${"qty"}}`, encodeURIComponent(String(qty)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * ProductsSkuGroupPricesCustomerGroupIdTiersQtyApi - functional programming interface
 * @export
 */
export const ProductsSkuGroupPricesCustomerGroupIdTiersQtyApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = ProductsSkuGroupPricesCustomerGroupIdTiersQtyApiAxiosParamCreator(configuration)
    return {
        /**
         * Remove tier price from product
         * @summary products/{sku}/group-prices/{customerGroupId}/tiers/{qty}
         * @param {string} sku 
         * @param {string} customerGroupId \&#39;all\&#39; can be used to specify \&#39;ALL GROUPS\&#39;
         * @param {number} qty 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async catalogProductTierPriceManagementV1RemoveDelete(sku: string, customerGroupId: string, qty: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<boolean>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.catalogProductTierPriceManagementV1RemoveDelete(sku, customerGroupId, qty, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * ProductsSkuGroupPricesCustomerGroupIdTiersQtyApi - factory interface
 * @export
 */
export const ProductsSkuGroupPricesCustomerGroupIdTiersQtyApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = ProductsSkuGroupPricesCustomerGroupIdTiersQtyApiFp(configuration)
    return {
        /**
         * Remove tier price from product
         * @summary products/{sku}/group-prices/{customerGroupId}/tiers/{qty}
         * @param {string} sku 
         * @param {string} customerGroupId \&#39;all\&#39; can be used to specify \&#39;ALL GROUPS\&#39;
         * @param {number} qty 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        catalogProductTierPriceManagementV1RemoveDelete(sku: string, customerGroupId: string, qty: number, options?: any): AxiosPromise<boolean> {
            return localVarFp.catalogProductTierPriceManagementV1RemoveDelete(sku, customerGroupId, qty, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * ProductsSkuGroupPricesCustomerGroupIdTiersQtyApi - object-oriented interface
 * @export
 * @class ProductsSkuGroupPricesCustomerGroupIdTiersQtyApi
 * @extends {BaseAPI}
 */
export class ProductsSkuGroupPricesCustomerGroupIdTiersQtyApi extends BaseAPI {
    /**
     * Remove tier price from product
     * @summary products/{sku}/group-prices/{customerGroupId}/tiers/{qty}
     * @param {string} sku 
     * @param {string} customerGroupId \&#39;all\&#39; can be used to specify \&#39;ALL GROUPS\&#39;
     * @param {number} qty 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProductsSkuGroupPricesCustomerGroupIdTiersQtyApi
     */
    public catalogProductTierPriceManagementV1RemoveDelete(sku: string, customerGroupId: string, qty: number, options?: AxiosRequestConfig) {
        return ProductsSkuGroupPricesCustomerGroupIdTiersQtyApiFp(this.configuration).catalogProductTierPriceManagementV1RemoveDelete(sku, customerGroupId, qty, options).then((request) => request(this.axios, this.basePath));
    }
}


/**
 * ProductsSkuGroupPricesCustomerGroupIdTiersQtyPricePriceApi - axios parameter creator
 * @export
 */
export const ProductsSkuGroupPricesCustomerGroupIdTiersQtyPricePriceApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Create tier price for product
         * @summary products/{sku}/group-prices/{customerGroupId}/tiers/{qty}/price/{price}
         * @param {string} sku 
         * @param {string} customerGroupId \&#39;all\&#39; can be used to specify \&#39;ALL GROUPS\&#39;
         * @param {number} price 
         * @param {number} qty 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        catalogProductTierPriceManagementV1AddPost: async (sku: string, customerGroupId: string, price: number, qty: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'sku' is not null or undefined
            assertParamExists('catalogProductTierPriceManagementV1AddPost', 'sku', sku)
            // verify required parameter 'customerGroupId' is not null or undefined
            assertParamExists('catalogProductTierPriceManagementV1AddPost', 'customerGroupId', customerGroupId)
            // verify required parameter 'price' is not null or undefined
            assertParamExists('catalogProductTierPriceManagementV1AddPost', 'price', price)
            // verify required parameter 'qty' is not null or undefined
            assertParamExists('catalogProductTierPriceManagementV1AddPost', 'qty', qty)
            const localVarPath = `/V1/products/{sku}/group-prices/{customerGroupId}/tiers/{qty}/price/{price}`
                .replace(`{${"sku"}}`, encodeURIComponent(String(sku)))
                .replace(`{${"customerGroupId"}}`, encodeURIComponent(String(customerGroupId)))
                .replace(`{${"price"}}`, encodeURIComponent(String(price)))
                .replace(`{${"qty"}}`, encodeURIComponent(String(qty)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * ProductsSkuGroupPricesCustomerGroupIdTiersQtyPricePriceApi - functional programming interface
 * @export
 */
export const ProductsSkuGroupPricesCustomerGroupIdTiersQtyPricePriceApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = ProductsSkuGroupPricesCustomerGroupIdTiersQtyPricePriceApiAxiosParamCreator(configuration)
    return {
        /**
         * Create tier price for product
         * @summary products/{sku}/group-prices/{customerGroupId}/tiers/{qty}/price/{price}
         * @param {string} sku 
         * @param {string} customerGroupId \&#39;all\&#39; can be used to specify \&#39;ALL GROUPS\&#39;
         * @param {number} price 
         * @param {number} qty 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async catalogProductTierPriceManagementV1AddPost(sku: string, customerGroupId: string, price: number, qty: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<boolean>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.catalogProductTierPriceManagementV1AddPost(sku, customerGroupId, price, qty, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * ProductsSkuGroupPricesCustomerGroupIdTiersQtyPricePriceApi - factory interface
 * @export
 */
export const ProductsSkuGroupPricesCustomerGroupIdTiersQtyPricePriceApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = ProductsSkuGroupPricesCustomerGroupIdTiersQtyPricePriceApiFp(configuration)
    return {
        /**
         * Create tier price for product
         * @summary products/{sku}/group-prices/{customerGroupId}/tiers/{qty}/price/{price}
         * @param {string} sku 
         * @param {string} customerGroupId \&#39;all\&#39; can be used to specify \&#39;ALL GROUPS\&#39;
         * @param {number} price 
         * @param {number} qty 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        catalogProductTierPriceManagementV1AddPost(sku: string, customerGroupId: string, price: number, qty: number, options?: any): AxiosPromise<boolean> {
            return localVarFp.catalogProductTierPriceManagementV1AddPost(sku, customerGroupId, price, qty, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * ProductsSkuGroupPricesCustomerGroupIdTiersQtyPricePriceApi - object-oriented interface
 * @export
 * @class ProductsSkuGroupPricesCustomerGroupIdTiersQtyPricePriceApi
 * @extends {BaseAPI}
 */
export class ProductsSkuGroupPricesCustomerGroupIdTiersQtyPricePriceApi extends BaseAPI {
    /**
     * Create tier price for product
     * @summary products/{sku}/group-prices/{customerGroupId}/tiers/{qty}/price/{price}
     * @param {string} sku 
     * @param {string} customerGroupId \&#39;all\&#39; can be used to specify \&#39;ALL GROUPS\&#39;
     * @param {number} price 
     * @param {number} qty 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProductsSkuGroupPricesCustomerGroupIdTiersQtyPricePriceApi
     */
    public catalogProductTierPriceManagementV1AddPost(sku: string, customerGroupId: string, price: number, qty: number, options?: AxiosRequestConfig) {
        return ProductsSkuGroupPricesCustomerGroupIdTiersQtyPricePriceApiFp(this.configuration).catalogProductTierPriceManagementV1AddPost(sku, customerGroupId, price, qty, options).then((request) => request(this.axios, this.basePath));
    }
}


/**
 * ProductsSkuLinksApi - axios parameter creator
 * @export
 */
export const ProductsSkuLinksApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Assign a product link to another product
         * @summary products/{sku}/links
         * @param {string} sku 
         * @param {CatalogProductLinkManagementV1SetProductLinksPostRequest} [catalogProductLinkManagementV1SetProductLinksPostBody] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        catalogProductLinkManagementV1SetProductLinksPost: async (sku: string, catalogProductLinkManagementV1SetProductLinksPostBody?: CatalogProductLinkManagementV1SetProductLinksPostRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'sku' is not null or undefined
            assertParamExists('catalogProductLinkManagementV1SetProductLinksPost', 'sku', sku)
            const localVarPath = `/V1/products/{sku}/links`
                .replace(`{${"sku"}}`, encodeURIComponent(String(sku)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(catalogProductLinkManagementV1SetProductLinksPostBody, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Save product link
         * @summary products/{sku}/links
         * @param {string} sku 
         * @param {CatalogProductLinkRepositoryV1SavePutRequest} [catalogProductLinkRepositoryV1SavePutBody] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        catalogProductLinkRepositoryV1SavePut: async (sku: string, catalogProductLinkRepositoryV1SavePutBody?: CatalogProductLinkRepositoryV1SavePutRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'sku' is not null or undefined
            assertParamExists('catalogProductLinkRepositoryV1SavePut', 'sku', sku)
            const localVarPath = `/V1/products/{sku}/links`
                .replace(`{${"sku"}}`, encodeURIComponent(String(sku)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(catalogProductLinkRepositoryV1SavePutBody, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * ProductsSkuLinksApi - functional programming interface
 * @export
 */
export const ProductsSkuLinksApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = ProductsSkuLinksApiAxiosParamCreator(configuration)
    return {
        /**
         * Assign a product link to another product
         * @summary products/{sku}/links
         * @param {string} sku 
         * @param {CatalogProductLinkManagementV1SetProductLinksPostRequest} [catalogProductLinkManagementV1SetProductLinksPostBody] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async catalogProductLinkManagementV1SetProductLinksPost(sku: string, catalogProductLinkManagementV1SetProductLinksPostBody?: CatalogProductLinkManagementV1SetProductLinksPostRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<boolean>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.catalogProductLinkManagementV1SetProductLinksPost(sku, catalogProductLinkManagementV1SetProductLinksPostBody, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Save product link
         * @summary products/{sku}/links
         * @param {string} sku 
         * @param {CatalogProductLinkRepositoryV1SavePutRequest} [catalogProductLinkRepositoryV1SavePutBody] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async catalogProductLinkRepositoryV1SavePut(sku: string, catalogProductLinkRepositoryV1SavePutBody?: CatalogProductLinkRepositoryV1SavePutRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<boolean>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.catalogProductLinkRepositoryV1SavePut(sku, catalogProductLinkRepositoryV1SavePutBody, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * ProductsSkuLinksApi - factory interface
 * @export
 */
export const ProductsSkuLinksApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = ProductsSkuLinksApiFp(configuration)
    return {
        /**
         * Assign a product link to another product
         * @summary products/{sku}/links
         * @param {string} sku 
         * @param {CatalogProductLinkManagementV1SetProductLinksPostRequest} [catalogProductLinkManagementV1SetProductLinksPostBody] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        catalogProductLinkManagementV1SetProductLinksPost(sku: string, catalogProductLinkManagementV1SetProductLinksPostBody?: CatalogProductLinkManagementV1SetProductLinksPostRequest, options?: any): AxiosPromise<boolean> {
            return localVarFp.catalogProductLinkManagementV1SetProductLinksPost(sku, catalogProductLinkManagementV1SetProductLinksPostBody, options).then((request) => request(axios, basePath));
        },
        /**
         * Save product link
         * @summary products/{sku}/links
         * @param {string} sku 
         * @param {CatalogProductLinkRepositoryV1SavePutRequest} [catalogProductLinkRepositoryV1SavePutBody] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        catalogProductLinkRepositoryV1SavePut(sku: string, catalogProductLinkRepositoryV1SavePutBody?: CatalogProductLinkRepositoryV1SavePutRequest, options?: any): AxiosPromise<boolean> {
            return localVarFp.catalogProductLinkRepositoryV1SavePut(sku, catalogProductLinkRepositoryV1SavePutBody, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * ProductsSkuLinksApi - object-oriented interface
 * @export
 * @class ProductsSkuLinksApi
 * @extends {BaseAPI}
 */
export class ProductsSkuLinksApi extends BaseAPI {
    /**
     * Assign a product link to another product
     * @summary products/{sku}/links
     * @param {string} sku 
     * @param {CatalogProductLinkManagementV1SetProductLinksPostRequest} [catalogProductLinkManagementV1SetProductLinksPostBody] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProductsSkuLinksApi
     */
    public catalogProductLinkManagementV1SetProductLinksPost(sku: string, catalogProductLinkManagementV1SetProductLinksPostBody?: CatalogProductLinkManagementV1SetProductLinksPostRequest, options?: AxiosRequestConfig) {
        return ProductsSkuLinksApiFp(this.configuration).catalogProductLinkManagementV1SetProductLinksPost(sku, catalogProductLinkManagementV1SetProductLinksPostBody, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Save product link
     * @summary products/{sku}/links
     * @param {string} sku 
     * @param {CatalogProductLinkRepositoryV1SavePutRequest} [catalogProductLinkRepositoryV1SavePutBody] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProductsSkuLinksApi
     */
    public catalogProductLinkRepositoryV1SavePut(sku: string, catalogProductLinkRepositoryV1SavePutBody?: CatalogProductLinkRepositoryV1SavePutRequest, options?: AxiosRequestConfig) {
        return ProductsSkuLinksApiFp(this.configuration).catalogProductLinkRepositoryV1SavePut(sku, catalogProductLinkRepositoryV1SavePutBody, options).then((request) => request(this.axios, this.basePath));
    }
}


/**
 * ProductsSkuLinksTypeApi - axios parameter creator
 * @export
 */
export const ProductsSkuLinksTypeApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Provide the list of links for a specific product
         * @summary products/{sku}/links/{type}
         * @param {string} sku 
         * @param {string} type 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        catalogProductLinkManagementV1GetLinkedItemsByTypeGet: async (sku: string, type: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'sku' is not null or undefined
            assertParamExists('catalogProductLinkManagementV1GetLinkedItemsByTypeGet', 'sku', sku)
            // verify required parameter 'type' is not null or undefined
            assertParamExists('catalogProductLinkManagementV1GetLinkedItemsByTypeGet', 'type', type)
            const localVarPath = `/V1/products/{sku}/links/{type}`
                .replace(`{${"sku"}}`, encodeURIComponent(String(sku)))
                .replace(`{${"type"}}`, encodeURIComponent(String(type)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * ProductsSkuLinksTypeApi - functional programming interface
 * @export
 */
export const ProductsSkuLinksTypeApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = ProductsSkuLinksTypeApiAxiosParamCreator(configuration)
    return {
        /**
         * Provide the list of links for a specific product
         * @summary products/{sku}/links/{type}
         * @param {string} sku 
         * @param {string} type 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async catalogProductLinkManagementV1GetLinkedItemsByTypeGet(sku: string, type: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<CatalogDataProductLinkInterface>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.catalogProductLinkManagementV1GetLinkedItemsByTypeGet(sku, type, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * ProductsSkuLinksTypeApi - factory interface
 * @export
 */
export const ProductsSkuLinksTypeApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = ProductsSkuLinksTypeApiFp(configuration)
    return {
        /**
         * Provide the list of links for a specific product
         * @summary products/{sku}/links/{type}
         * @param {string} sku 
         * @param {string} type 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        catalogProductLinkManagementV1GetLinkedItemsByTypeGet(sku: string, type: string, options?: any): AxiosPromise<Array<CatalogDataProductLinkInterface>> {
            return localVarFp.catalogProductLinkManagementV1GetLinkedItemsByTypeGet(sku, type, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * ProductsSkuLinksTypeApi - object-oriented interface
 * @export
 * @class ProductsSkuLinksTypeApi
 * @extends {BaseAPI}
 */
export class ProductsSkuLinksTypeApi extends BaseAPI {
    /**
     * Provide the list of links for a specific product
     * @summary products/{sku}/links/{type}
     * @param {string} sku 
     * @param {string} type 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProductsSkuLinksTypeApi
     */
    public catalogProductLinkManagementV1GetLinkedItemsByTypeGet(sku: string, type: string, options?: AxiosRequestConfig) {
        return ProductsSkuLinksTypeApiFp(this.configuration).catalogProductLinkManagementV1GetLinkedItemsByTypeGet(sku, type, options).then((request) => request(this.axios, this.basePath));
    }
}


/**
 * ProductsSkuLinksTypeLinkedProductSkuApi - axios parameter creator
 * @export
 */
export const ProductsSkuLinksTypeLinkedProductSkuApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary products/{sku}/links/{type}/{linkedProductSku}
         * @param {string} sku 
         * @param {string} type 
         * @param {string} linkedProductSku 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        catalogProductLinkRepositoryV1DeleteByIdDelete: async (sku: string, type: string, linkedProductSku: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'sku' is not null or undefined
            assertParamExists('catalogProductLinkRepositoryV1DeleteByIdDelete', 'sku', sku)
            // verify required parameter 'type' is not null or undefined
            assertParamExists('catalogProductLinkRepositoryV1DeleteByIdDelete', 'type', type)
            // verify required parameter 'linkedProductSku' is not null or undefined
            assertParamExists('catalogProductLinkRepositoryV1DeleteByIdDelete', 'linkedProductSku', linkedProductSku)
            const localVarPath = `/V1/products/{sku}/links/{type}/{linkedProductSku}`
                .replace(`{${"sku"}}`, encodeURIComponent(String(sku)))
                .replace(`{${"type"}}`, encodeURIComponent(String(type)))
                .replace(`{${"linkedProductSku"}}`, encodeURIComponent(String(linkedProductSku)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * ProductsSkuLinksTypeLinkedProductSkuApi - functional programming interface
 * @export
 */
export const ProductsSkuLinksTypeLinkedProductSkuApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = ProductsSkuLinksTypeLinkedProductSkuApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @summary products/{sku}/links/{type}/{linkedProductSku}
         * @param {string} sku 
         * @param {string} type 
         * @param {string} linkedProductSku 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async catalogProductLinkRepositoryV1DeleteByIdDelete(sku: string, type: string, linkedProductSku: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<boolean>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.catalogProductLinkRepositoryV1DeleteByIdDelete(sku, type, linkedProductSku, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * ProductsSkuLinksTypeLinkedProductSkuApi - factory interface
 * @export
 */
export const ProductsSkuLinksTypeLinkedProductSkuApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = ProductsSkuLinksTypeLinkedProductSkuApiFp(configuration)
    return {
        /**
         * 
         * @summary products/{sku}/links/{type}/{linkedProductSku}
         * @param {string} sku 
         * @param {string} type 
         * @param {string} linkedProductSku 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        catalogProductLinkRepositoryV1DeleteByIdDelete(sku: string, type: string, linkedProductSku: string, options?: any): AxiosPromise<boolean> {
            return localVarFp.catalogProductLinkRepositoryV1DeleteByIdDelete(sku, type, linkedProductSku, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * ProductsSkuLinksTypeLinkedProductSkuApi - object-oriented interface
 * @export
 * @class ProductsSkuLinksTypeLinkedProductSkuApi
 * @extends {BaseAPI}
 */
export class ProductsSkuLinksTypeLinkedProductSkuApi extends BaseAPI {
    /**
     * 
     * @summary products/{sku}/links/{type}/{linkedProductSku}
     * @param {string} sku 
     * @param {string} type 
     * @param {string} linkedProductSku 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProductsSkuLinksTypeLinkedProductSkuApi
     */
    public catalogProductLinkRepositoryV1DeleteByIdDelete(sku: string, type: string, linkedProductSku: string, options?: AxiosRequestConfig) {
        return ProductsSkuLinksTypeLinkedProductSkuApiFp(this.configuration).catalogProductLinkRepositoryV1DeleteByIdDelete(sku, type, linkedProductSku, options).then((request) => request(this.axios, this.basePath));
    }
}


/**
 * ProductsSkuMediaApi - axios parameter creator
 * @export
 */
export const ProductsSkuMediaApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Create new gallery entry
         * @summary products/{sku}/media
         * @param {string} sku 
         * @param {CatalogProductAttributeMediaGalleryManagementV1CreatePostRequest} [catalogProductAttributeMediaGalleryManagementV1CreatePostBody] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        catalogProductAttributeMediaGalleryManagementV1CreatePost: async (sku: string, catalogProductAttributeMediaGalleryManagementV1CreatePostBody?: CatalogProductAttributeMediaGalleryManagementV1CreatePostRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'sku' is not null or undefined
            assertParamExists('catalogProductAttributeMediaGalleryManagementV1CreatePost', 'sku', sku)
            const localVarPath = `/V1/products/{sku}/media`
                .replace(`{${"sku"}}`, encodeURIComponent(String(sku)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(catalogProductAttributeMediaGalleryManagementV1CreatePostBody, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Retrieve the list of gallery entries associated with given product
         * @summary products/{sku}/media
         * @param {string} sku 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        catalogProductAttributeMediaGalleryManagementV1GetListGet: async (sku: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'sku' is not null or undefined
            assertParamExists('catalogProductAttributeMediaGalleryManagementV1GetListGet', 'sku', sku)
            const localVarPath = `/V1/products/{sku}/media`
                .replace(`{${"sku"}}`, encodeURIComponent(String(sku)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * ProductsSkuMediaApi - functional programming interface
 * @export
 */
export const ProductsSkuMediaApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = ProductsSkuMediaApiAxiosParamCreator(configuration)
    return {
        /**
         * Create new gallery entry
         * @summary products/{sku}/media
         * @param {string} sku 
         * @param {CatalogProductAttributeMediaGalleryManagementV1CreatePostRequest} [catalogProductAttributeMediaGalleryManagementV1CreatePostBody] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async catalogProductAttributeMediaGalleryManagementV1CreatePost(sku: string, catalogProductAttributeMediaGalleryManagementV1CreatePostBody?: CatalogProductAttributeMediaGalleryManagementV1CreatePostRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<number>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.catalogProductAttributeMediaGalleryManagementV1CreatePost(sku, catalogProductAttributeMediaGalleryManagementV1CreatePostBody, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Retrieve the list of gallery entries associated with given product
         * @summary products/{sku}/media
         * @param {string} sku 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async catalogProductAttributeMediaGalleryManagementV1GetListGet(sku: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<CatalogDataProductAttributeMediaGalleryEntryInterface>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.catalogProductAttributeMediaGalleryManagementV1GetListGet(sku, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * ProductsSkuMediaApi - factory interface
 * @export
 */
export const ProductsSkuMediaApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = ProductsSkuMediaApiFp(configuration)
    return {
        /**
         * Create new gallery entry
         * @summary products/{sku}/media
         * @param {string} sku 
         * @param {CatalogProductAttributeMediaGalleryManagementV1CreatePostRequest} [catalogProductAttributeMediaGalleryManagementV1CreatePostBody] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        catalogProductAttributeMediaGalleryManagementV1CreatePost(sku: string, catalogProductAttributeMediaGalleryManagementV1CreatePostBody?: CatalogProductAttributeMediaGalleryManagementV1CreatePostRequest, options?: any): AxiosPromise<number> {
            return localVarFp.catalogProductAttributeMediaGalleryManagementV1CreatePost(sku, catalogProductAttributeMediaGalleryManagementV1CreatePostBody, options).then((request) => request(axios, basePath));
        },
        /**
         * Retrieve the list of gallery entries associated with given product
         * @summary products/{sku}/media
         * @param {string} sku 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        catalogProductAttributeMediaGalleryManagementV1GetListGet(sku: string, options?: any): AxiosPromise<Array<CatalogDataProductAttributeMediaGalleryEntryInterface>> {
            return localVarFp.catalogProductAttributeMediaGalleryManagementV1GetListGet(sku, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * ProductsSkuMediaApi - object-oriented interface
 * @export
 * @class ProductsSkuMediaApi
 * @extends {BaseAPI}
 */
export class ProductsSkuMediaApi extends BaseAPI {
    /**
     * Create new gallery entry
     * @summary products/{sku}/media
     * @param {string} sku 
     * @param {CatalogProductAttributeMediaGalleryManagementV1CreatePostRequest} [catalogProductAttributeMediaGalleryManagementV1CreatePostBody] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProductsSkuMediaApi
     */
    public catalogProductAttributeMediaGalleryManagementV1CreatePost(sku: string, catalogProductAttributeMediaGalleryManagementV1CreatePostBody?: CatalogProductAttributeMediaGalleryManagementV1CreatePostRequest, options?: AxiosRequestConfig) {
        return ProductsSkuMediaApiFp(this.configuration).catalogProductAttributeMediaGalleryManagementV1CreatePost(sku, catalogProductAttributeMediaGalleryManagementV1CreatePostBody, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Retrieve the list of gallery entries associated with given product
     * @summary products/{sku}/media
     * @param {string} sku 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProductsSkuMediaApi
     */
    public catalogProductAttributeMediaGalleryManagementV1GetListGet(sku: string, options?: AxiosRequestConfig) {
        return ProductsSkuMediaApiFp(this.configuration).catalogProductAttributeMediaGalleryManagementV1GetListGet(sku, options).then((request) => request(this.axios, this.basePath));
    }
}


/**
 * ProductsSkuMediaEntryIdApi - axios parameter creator
 * @export
 */
export const ProductsSkuMediaEntryIdApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Return information about gallery entry
         * @summary products/{sku}/media/{entryId}
         * @param {string} sku 
         * @param {number} entryId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        catalogProductAttributeMediaGalleryManagementV1GetGet: async (sku: string, entryId: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'sku' is not null or undefined
            assertParamExists('catalogProductAttributeMediaGalleryManagementV1GetGet', 'sku', sku)
            // verify required parameter 'entryId' is not null or undefined
            assertParamExists('catalogProductAttributeMediaGalleryManagementV1GetGet', 'entryId', entryId)
            const localVarPath = `/V1/products/{sku}/media/{entryId}`
                .replace(`{${"sku"}}`, encodeURIComponent(String(sku)))
                .replace(`{${"entryId"}}`, encodeURIComponent(String(entryId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Remove gallery entry
         * @summary products/{sku}/media/{entryId}
         * @param {string} sku 
         * @param {number} entryId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        catalogProductAttributeMediaGalleryManagementV1RemoveDelete: async (sku: string, entryId: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'sku' is not null or undefined
            assertParamExists('catalogProductAttributeMediaGalleryManagementV1RemoveDelete', 'sku', sku)
            // verify required parameter 'entryId' is not null or undefined
            assertParamExists('catalogProductAttributeMediaGalleryManagementV1RemoveDelete', 'entryId', entryId)
            const localVarPath = `/V1/products/{sku}/media/{entryId}`
                .replace(`{${"sku"}}`, encodeURIComponent(String(sku)))
                .replace(`{${"entryId"}}`, encodeURIComponent(String(entryId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Update gallery entry
         * @summary products/{sku}/media/{entryId}
         * @param {string} sku 
         * @param {string} entryId 
         * @param {CatalogProductAttributeMediaGalleryManagementV1CreatePostRequest} [catalogProductAttributeMediaGalleryManagementV1UpdatePutBody] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        catalogProductAttributeMediaGalleryManagementV1UpdatePut: async (sku: string, entryId: string, catalogProductAttributeMediaGalleryManagementV1UpdatePutBody?: CatalogProductAttributeMediaGalleryManagementV1CreatePostRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'sku' is not null or undefined
            assertParamExists('catalogProductAttributeMediaGalleryManagementV1UpdatePut', 'sku', sku)
            // verify required parameter 'entryId' is not null or undefined
            assertParamExists('catalogProductAttributeMediaGalleryManagementV1UpdatePut', 'entryId', entryId)
            const localVarPath = `/V1/products/{sku}/media/{entryId}`
                .replace(`{${"sku"}}`, encodeURIComponent(String(sku)))
                .replace(`{${"entryId"}}`, encodeURIComponent(String(entryId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(catalogProductAttributeMediaGalleryManagementV1UpdatePutBody, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * ProductsSkuMediaEntryIdApi - functional programming interface
 * @export
 */
export const ProductsSkuMediaEntryIdApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = ProductsSkuMediaEntryIdApiAxiosParamCreator(configuration)
    return {
        /**
         * Return information about gallery entry
         * @summary products/{sku}/media/{entryId}
         * @param {string} sku 
         * @param {number} entryId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async catalogProductAttributeMediaGalleryManagementV1GetGet(sku: string, entryId: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<CatalogDataProductAttributeMediaGalleryEntryInterface>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.catalogProductAttributeMediaGalleryManagementV1GetGet(sku, entryId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Remove gallery entry
         * @summary products/{sku}/media/{entryId}
         * @param {string} sku 
         * @param {number} entryId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async catalogProductAttributeMediaGalleryManagementV1RemoveDelete(sku: string, entryId: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<boolean>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.catalogProductAttributeMediaGalleryManagementV1RemoveDelete(sku, entryId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Update gallery entry
         * @summary products/{sku}/media/{entryId}
         * @param {string} sku 
         * @param {string} entryId 
         * @param {CatalogProductAttributeMediaGalleryManagementV1CreatePostRequest} [catalogProductAttributeMediaGalleryManagementV1UpdatePutBody] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async catalogProductAttributeMediaGalleryManagementV1UpdatePut(sku: string, entryId: string, catalogProductAttributeMediaGalleryManagementV1UpdatePutBody?: CatalogProductAttributeMediaGalleryManagementV1CreatePostRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<boolean>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.catalogProductAttributeMediaGalleryManagementV1UpdatePut(sku, entryId, catalogProductAttributeMediaGalleryManagementV1UpdatePutBody, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * ProductsSkuMediaEntryIdApi - factory interface
 * @export
 */
export const ProductsSkuMediaEntryIdApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = ProductsSkuMediaEntryIdApiFp(configuration)
    return {
        /**
         * Return information about gallery entry
         * @summary products/{sku}/media/{entryId}
         * @param {string} sku 
         * @param {number} entryId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        catalogProductAttributeMediaGalleryManagementV1GetGet(sku: string, entryId: number, options?: any): AxiosPromise<CatalogDataProductAttributeMediaGalleryEntryInterface> {
            return localVarFp.catalogProductAttributeMediaGalleryManagementV1GetGet(sku, entryId, options).then((request) => request(axios, basePath));
        },
        /**
         * Remove gallery entry
         * @summary products/{sku}/media/{entryId}
         * @param {string} sku 
         * @param {number} entryId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        catalogProductAttributeMediaGalleryManagementV1RemoveDelete(sku: string, entryId: number, options?: any): AxiosPromise<boolean> {
            return localVarFp.catalogProductAttributeMediaGalleryManagementV1RemoveDelete(sku, entryId, options).then((request) => request(axios, basePath));
        },
        /**
         * Update gallery entry
         * @summary products/{sku}/media/{entryId}
         * @param {string} sku 
         * @param {string} entryId 
         * @param {CatalogProductAttributeMediaGalleryManagementV1CreatePostRequest} [catalogProductAttributeMediaGalleryManagementV1UpdatePutBody] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        catalogProductAttributeMediaGalleryManagementV1UpdatePut(sku: string, entryId: string, catalogProductAttributeMediaGalleryManagementV1UpdatePutBody?: CatalogProductAttributeMediaGalleryManagementV1CreatePostRequest, options?: any): AxiosPromise<boolean> {
            return localVarFp.catalogProductAttributeMediaGalleryManagementV1UpdatePut(sku, entryId, catalogProductAttributeMediaGalleryManagementV1UpdatePutBody, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * ProductsSkuMediaEntryIdApi - object-oriented interface
 * @export
 * @class ProductsSkuMediaEntryIdApi
 * @extends {BaseAPI}
 */
export class ProductsSkuMediaEntryIdApi extends BaseAPI {
    /**
     * Return information about gallery entry
     * @summary products/{sku}/media/{entryId}
     * @param {string} sku 
     * @param {number} entryId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProductsSkuMediaEntryIdApi
     */
    public catalogProductAttributeMediaGalleryManagementV1GetGet(sku: string, entryId: number, options?: AxiosRequestConfig) {
        return ProductsSkuMediaEntryIdApiFp(this.configuration).catalogProductAttributeMediaGalleryManagementV1GetGet(sku, entryId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Remove gallery entry
     * @summary products/{sku}/media/{entryId}
     * @param {string} sku 
     * @param {number} entryId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProductsSkuMediaEntryIdApi
     */
    public catalogProductAttributeMediaGalleryManagementV1RemoveDelete(sku: string, entryId: number, options?: AxiosRequestConfig) {
        return ProductsSkuMediaEntryIdApiFp(this.configuration).catalogProductAttributeMediaGalleryManagementV1RemoveDelete(sku, entryId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Update gallery entry
     * @summary products/{sku}/media/{entryId}
     * @param {string} sku 
     * @param {string} entryId 
     * @param {CatalogProductAttributeMediaGalleryManagementV1CreatePostRequest} [catalogProductAttributeMediaGalleryManagementV1UpdatePutBody] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProductsSkuMediaEntryIdApi
     */
    public catalogProductAttributeMediaGalleryManagementV1UpdatePut(sku: string, entryId: string, catalogProductAttributeMediaGalleryManagementV1UpdatePutBody?: CatalogProductAttributeMediaGalleryManagementV1CreatePostRequest, options?: AxiosRequestConfig) {
        return ProductsSkuMediaEntryIdApiFp(this.configuration).catalogProductAttributeMediaGalleryManagementV1UpdatePut(sku, entryId, catalogProductAttributeMediaGalleryManagementV1UpdatePutBody, options).then((request) => request(this.axios, this.basePath));
    }
}


/**
 * ProductsSkuOptionsApi - axios parameter creator
 * @export
 */
export const ProductsSkuOptionsApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Get the list of custom options for a specific product
         * @summary products/{sku}/options
         * @param {string} sku 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        catalogProductCustomOptionRepositoryV1GetListGet: async (sku: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'sku' is not null or undefined
            assertParamExists('catalogProductCustomOptionRepositoryV1GetListGet', 'sku', sku)
            const localVarPath = `/V1/products/{sku}/options`
                .replace(`{${"sku"}}`, encodeURIComponent(String(sku)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * ProductsSkuOptionsApi - functional programming interface
 * @export
 */
export const ProductsSkuOptionsApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = ProductsSkuOptionsApiAxiosParamCreator(configuration)
    return {
        /**
         * Get the list of custom options for a specific product
         * @summary products/{sku}/options
         * @param {string} sku 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async catalogProductCustomOptionRepositoryV1GetListGet(sku: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<CatalogDataProductCustomOptionInterface>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.catalogProductCustomOptionRepositoryV1GetListGet(sku, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * ProductsSkuOptionsApi - factory interface
 * @export
 */
export const ProductsSkuOptionsApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = ProductsSkuOptionsApiFp(configuration)
    return {
        /**
         * Get the list of custom options for a specific product
         * @summary products/{sku}/options
         * @param {string} sku 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        catalogProductCustomOptionRepositoryV1GetListGet(sku: string, options?: any): AxiosPromise<Array<CatalogDataProductCustomOptionInterface>> {
            return localVarFp.catalogProductCustomOptionRepositoryV1GetListGet(sku, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * ProductsSkuOptionsApi - object-oriented interface
 * @export
 * @class ProductsSkuOptionsApi
 * @extends {BaseAPI}
 */
export class ProductsSkuOptionsApi extends BaseAPI {
    /**
     * Get the list of custom options for a specific product
     * @summary products/{sku}/options
     * @param {string} sku 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProductsSkuOptionsApi
     */
    public catalogProductCustomOptionRepositoryV1GetListGet(sku: string, options?: AxiosRequestConfig) {
        return ProductsSkuOptionsApiFp(this.configuration).catalogProductCustomOptionRepositoryV1GetListGet(sku, options).then((request) => request(this.axios, this.basePath));
    }
}


/**
 * ProductsSkuOptionsOptionIdApi - axios parameter creator
 * @export
 */
export const ProductsSkuOptionsOptionIdApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary products/{sku}/options/{optionId}
         * @param {string} sku 
         * @param {number} optionId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        catalogProductCustomOptionRepositoryV1DeleteByIdentifierDelete: async (sku: string, optionId: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'sku' is not null or undefined
            assertParamExists('catalogProductCustomOptionRepositoryV1DeleteByIdentifierDelete', 'sku', sku)
            // verify required parameter 'optionId' is not null or undefined
            assertParamExists('catalogProductCustomOptionRepositoryV1DeleteByIdentifierDelete', 'optionId', optionId)
            const localVarPath = `/V1/products/{sku}/options/{optionId}`
                .replace(`{${"sku"}}`, encodeURIComponent(String(sku)))
                .replace(`{${"optionId"}}`, encodeURIComponent(String(optionId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Get custom option for a specific product
         * @summary products/{sku}/options/{optionId}
         * @param {string} sku 
         * @param {number} optionId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        catalogProductCustomOptionRepositoryV1GetGet: async (sku: string, optionId: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'sku' is not null or undefined
            assertParamExists('catalogProductCustomOptionRepositoryV1GetGet', 'sku', sku)
            // verify required parameter 'optionId' is not null or undefined
            assertParamExists('catalogProductCustomOptionRepositoryV1GetGet', 'optionId', optionId)
            const localVarPath = `/V1/products/{sku}/options/{optionId}`
                .replace(`{${"sku"}}`, encodeURIComponent(String(sku)))
                .replace(`{${"optionId"}}`, encodeURIComponent(String(optionId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * ProductsSkuOptionsOptionIdApi - functional programming interface
 * @export
 */
export const ProductsSkuOptionsOptionIdApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = ProductsSkuOptionsOptionIdApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @summary products/{sku}/options/{optionId}
         * @param {string} sku 
         * @param {number} optionId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async catalogProductCustomOptionRepositoryV1DeleteByIdentifierDelete(sku: string, optionId: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<boolean>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.catalogProductCustomOptionRepositoryV1DeleteByIdentifierDelete(sku, optionId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Get custom option for a specific product
         * @summary products/{sku}/options/{optionId}
         * @param {string} sku 
         * @param {number} optionId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async catalogProductCustomOptionRepositoryV1GetGet(sku: string, optionId: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<CatalogDataProductCustomOptionInterface>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.catalogProductCustomOptionRepositoryV1GetGet(sku, optionId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * ProductsSkuOptionsOptionIdApi - factory interface
 * @export
 */
export const ProductsSkuOptionsOptionIdApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = ProductsSkuOptionsOptionIdApiFp(configuration)
    return {
        /**
         * 
         * @summary products/{sku}/options/{optionId}
         * @param {string} sku 
         * @param {number} optionId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        catalogProductCustomOptionRepositoryV1DeleteByIdentifierDelete(sku: string, optionId: number, options?: any): AxiosPromise<boolean> {
            return localVarFp.catalogProductCustomOptionRepositoryV1DeleteByIdentifierDelete(sku, optionId, options).then((request) => request(axios, basePath));
        },
        /**
         * Get custom option for a specific product
         * @summary products/{sku}/options/{optionId}
         * @param {string} sku 
         * @param {number} optionId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        catalogProductCustomOptionRepositoryV1GetGet(sku: string, optionId: number, options?: any): AxiosPromise<CatalogDataProductCustomOptionInterface> {
            return localVarFp.catalogProductCustomOptionRepositoryV1GetGet(sku, optionId, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * ProductsSkuOptionsOptionIdApi - object-oriented interface
 * @export
 * @class ProductsSkuOptionsOptionIdApi
 * @extends {BaseAPI}
 */
export class ProductsSkuOptionsOptionIdApi extends BaseAPI {
    /**
     * 
     * @summary products/{sku}/options/{optionId}
     * @param {string} sku 
     * @param {number} optionId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProductsSkuOptionsOptionIdApi
     */
    public catalogProductCustomOptionRepositoryV1DeleteByIdentifierDelete(sku: string, optionId: number, options?: AxiosRequestConfig) {
        return ProductsSkuOptionsOptionIdApiFp(this.configuration).catalogProductCustomOptionRepositoryV1DeleteByIdentifierDelete(sku, optionId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Get custom option for a specific product
     * @summary products/{sku}/options/{optionId}
     * @param {string} sku 
     * @param {number} optionId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProductsSkuOptionsOptionIdApi
     */
    public catalogProductCustomOptionRepositoryV1GetGet(sku: string, optionId: number, options?: AxiosRequestConfig) {
        return ProductsSkuOptionsOptionIdApiFp(this.configuration).catalogProductCustomOptionRepositoryV1GetGet(sku, optionId, options).then((request) => request(this.axios, this.basePath));
    }
}


/**
 * ProductsSkuWebsitesApi - axios parameter creator
 * @export
 */
export const ProductsSkuWebsitesApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Assign a product to the website
         * @summary products/{sku}/websites
         * @param {string} sku 
         * @param {CatalogProductWebsiteLinkRepositoryV1SavePutRequest} [catalogProductWebsiteLinkRepositoryV1SavePostBody] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        catalogProductWebsiteLinkRepositoryV1SavePost: async (sku: string, catalogProductWebsiteLinkRepositoryV1SavePostBody?: CatalogProductWebsiteLinkRepositoryV1SavePutRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'sku' is not null or undefined
            assertParamExists('catalogProductWebsiteLinkRepositoryV1SavePost', 'sku', sku)
            const localVarPath = `/V1/products/{sku}/websites`
                .replace(`{${"sku"}}`, encodeURIComponent(String(sku)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(catalogProductWebsiteLinkRepositoryV1SavePostBody, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Assign a product to the website
         * @summary products/{sku}/websites
         * @param {string} sku 
         * @param {CatalogProductWebsiteLinkRepositoryV1SavePutRequest} [catalogProductWebsiteLinkRepositoryV1SavePutBody] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        catalogProductWebsiteLinkRepositoryV1SavePut: async (sku: string, catalogProductWebsiteLinkRepositoryV1SavePutBody?: CatalogProductWebsiteLinkRepositoryV1SavePutRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'sku' is not null or undefined
            assertParamExists('catalogProductWebsiteLinkRepositoryV1SavePut', 'sku', sku)
            const localVarPath = `/V1/products/{sku}/websites`
                .replace(`{${"sku"}}`, encodeURIComponent(String(sku)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(catalogProductWebsiteLinkRepositoryV1SavePutBody, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * ProductsSkuWebsitesApi - functional programming interface
 * @export
 */
export const ProductsSkuWebsitesApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = ProductsSkuWebsitesApiAxiosParamCreator(configuration)
    return {
        /**
         * Assign a product to the website
         * @summary products/{sku}/websites
         * @param {string} sku 
         * @param {CatalogProductWebsiteLinkRepositoryV1SavePutRequest} [catalogProductWebsiteLinkRepositoryV1SavePostBody] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async catalogProductWebsiteLinkRepositoryV1SavePost(sku: string, catalogProductWebsiteLinkRepositoryV1SavePostBody?: CatalogProductWebsiteLinkRepositoryV1SavePutRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<boolean>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.catalogProductWebsiteLinkRepositoryV1SavePost(sku, catalogProductWebsiteLinkRepositoryV1SavePostBody, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Assign a product to the website
         * @summary products/{sku}/websites
         * @param {string} sku 
         * @param {CatalogProductWebsiteLinkRepositoryV1SavePutRequest} [catalogProductWebsiteLinkRepositoryV1SavePutBody] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async catalogProductWebsiteLinkRepositoryV1SavePut(sku: string, catalogProductWebsiteLinkRepositoryV1SavePutBody?: CatalogProductWebsiteLinkRepositoryV1SavePutRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<boolean>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.catalogProductWebsiteLinkRepositoryV1SavePut(sku, catalogProductWebsiteLinkRepositoryV1SavePutBody, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * ProductsSkuWebsitesApi - factory interface
 * @export
 */
export const ProductsSkuWebsitesApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = ProductsSkuWebsitesApiFp(configuration)
    return {
        /**
         * Assign a product to the website
         * @summary products/{sku}/websites
         * @param {string} sku 
         * @param {CatalogProductWebsiteLinkRepositoryV1SavePutRequest} [catalogProductWebsiteLinkRepositoryV1SavePostBody] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        catalogProductWebsiteLinkRepositoryV1SavePost(sku: string, catalogProductWebsiteLinkRepositoryV1SavePostBody?: CatalogProductWebsiteLinkRepositoryV1SavePutRequest, options?: any): AxiosPromise<boolean> {
            return localVarFp.catalogProductWebsiteLinkRepositoryV1SavePost(sku, catalogProductWebsiteLinkRepositoryV1SavePostBody, options).then((request) => request(axios, basePath));
        },
        /**
         * Assign a product to the website
         * @summary products/{sku}/websites
         * @param {string} sku 
         * @param {CatalogProductWebsiteLinkRepositoryV1SavePutRequest} [catalogProductWebsiteLinkRepositoryV1SavePutBody] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        catalogProductWebsiteLinkRepositoryV1SavePut(sku: string, catalogProductWebsiteLinkRepositoryV1SavePutBody?: CatalogProductWebsiteLinkRepositoryV1SavePutRequest, options?: any): AxiosPromise<boolean> {
            return localVarFp.catalogProductWebsiteLinkRepositoryV1SavePut(sku, catalogProductWebsiteLinkRepositoryV1SavePutBody, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * ProductsSkuWebsitesApi - object-oriented interface
 * @export
 * @class ProductsSkuWebsitesApi
 * @extends {BaseAPI}
 */
export class ProductsSkuWebsitesApi extends BaseAPI {
    /**
     * Assign a product to the website
     * @summary products/{sku}/websites
     * @param {string} sku 
     * @param {CatalogProductWebsiteLinkRepositoryV1SavePutRequest} [catalogProductWebsiteLinkRepositoryV1SavePostBody] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProductsSkuWebsitesApi
     */
    public catalogProductWebsiteLinkRepositoryV1SavePost(sku: string, catalogProductWebsiteLinkRepositoryV1SavePostBody?: CatalogProductWebsiteLinkRepositoryV1SavePutRequest, options?: AxiosRequestConfig) {
        return ProductsSkuWebsitesApiFp(this.configuration).catalogProductWebsiteLinkRepositoryV1SavePost(sku, catalogProductWebsiteLinkRepositoryV1SavePostBody, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Assign a product to the website
     * @summary products/{sku}/websites
     * @param {string} sku 
     * @param {CatalogProductWebsiteLinkRepositoryV1SavePutRequest} [catalogProductWebsiteLinkRepositoryV1SavePutBody] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProductsSkuWebsitesApi
     */
    public catalogProductWebsiteLinkRepositoryV1SavePut(sku: string, catalogProductWebsiteLinkRepositoryV1SavePutBody?: CatalogProductWebsiteLinkRepositoryV1SavePutRequest, options?: AxiosRequestConfig) {
        return ProductsSkuWebsitesApiFp(this.configuration).catalogProductWebsiteLinkRepositoryV1SavePut(sku, catalogProductWebsiteLinkRepositoryV1SavePutBody, options).then((request) => request(this.axios, this.basePath));
    }
}


/**
 * ProductsSkuWebsitesWebsiteIdApi - axios parameter creator
 * @export
 */
export const ProductsSkuWebsitesWebsiteIdApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Remove the website assignment from the product by product sku
         * @summary products/{sku}/websites/{websiteId}
         * @param {string} sku 
         * @param {number} websiteId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        catalogProductWebsiteLinkRepositoryV1DeleteByIdDelete: async (sku: string, websiteId: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'sku' is not null or undefined
            assertParamExists('catalogProductWebsiteLinkRepositoryV1DeleteByIdDelete', 'sku', sku)
            // verify required parameter 'websiteId' is not null or undefined
            assertParamExists('catalogProductWebsiteLinkRepositoryV1DeleteByIdDelete', 'websiteId', websiteId)
            const localVarPath = `/V1/products/{sku}/websites/{websiteId}`
                .replace(`{${"sku"}}`, encodeURIComponent(String(sku)))
                .replace(`{${"websiteId"}}`, encodeURIComponent(String(websiteId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * ProductsSkuWebsitesWebsiteIdApi - functional programming interface
 * @export
 */
export const ProductsSkuWebsitesWebsiteIdApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = ProductsSkuWebsitesWebsiteIdApiAxiosParamCreator(configuration)
    return {
        /**
         * Remove the website assignment from the product by product sku
         * @summary products/{sku}/websites/{websiteId}
         * @param {string} sku 
         * @param {number} websiteId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async catalogProductWebsiteLinkRepositoryV1DeleteByIdDelete(sku: string, websiteId: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<boolean>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.catalogProductWebsiteLinkRepositoryV1DeleteByIdDelete(sku, websiteId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * ProductsSkuWebsitesWebsiteIdApi - factory interface
 * @export
 */
export const ProductsSkuWebsitesWebsiteIdApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = ProductsSkuWebsitesWebsiteIdApiFp(configuration)
    return {
        /**
         * Remove the website assignment from the product by product sku
         * @summary products/{sku}/websites/{websiteId}
         * @param {string} sku 
         * @param {number} websiteId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        catalogProductWebsiteLinkRepositoryV1DeleteByIdDelete(sku: string, websiteId: number, options?: any): AxiosPromise<boolean> {
            return localVarFp.catalogProductWebsiteLinkRepositoryV1DeleteByIdDelete(sku, websiteId, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * ProductsSkuWebsitesWebsiteIdApi - object-oriented interface
 * @export
 * @class ProductsSkuWebsitesWebsiteIdApi
 * @extends {BaseAPI}
 */
export class ProductsSkuWebsitesWebsiteIdApi extends BaseAPI {
    /**
     * Remove the website assignment from the product by product sku
     * @summary products/{sku}/websites/{websiteId}
     * @param {string} sku 
     * @param {number} websiteId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProductsSkuWebsitesWebsiteIdApi
     */
    public catalogProductWebsiteLinkRepositoryV1DeleteByIdDelete(sku: string, websiteId: number, options?: AxiosRequestConfig) {
        return ProductsSkuWebsitesWebsiteIdApiFp(this.configuration).catalogProductWebsiteLinkRepositoryV1DeleteByIdDelete(sku, websiteId, options).then((request) => request(this.axios, this.basePath));
    }
}


/**
 * ProductsSpecialPriceApi - axios parameter creator
 * @export
 */
export const ProductsSpecialPriceApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Add or update product\'s special price. If any items will have invalid price, store id, sku or dates, they will be marked as failed and excluded from update list and \\Magento\\Catalog\\Api\\Data\\PriceUpdateResultInterface[] with problem description will be returned. If there were no failed items during update empty array will be returned. If error occurred during the update exception will be thrown.
         * @summary products/special-price
         * @param {CatalogSpecialPriceStorageV1UpdatePostRequest} [catalogSpecialPriceStorageV1UpdatePostBody] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        catalogSpecialPriceStorageV1UpdatePost: async (catalogSpecialPriceStorageV1UpdatePostBody?: CatalogSpecialPriceStorageV1UpdatePostRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/V1/products/special-price`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(catalogSpecialPriceStorageV1UpdatePostBody, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * ProductsSpecialPriceApi - functional programming interface
 * @export
 */
export const ProductsSpecialPriceApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = ProductsSpecialPriceApiAxiosParamCreator(configuration)
    return {
        /**
         * Add or update product\'s special price. If any items will have invalid price, store id, sku or dates, they will be marked as failed and excluded from update list and \\Magento\\Catalog\\Api\\Data\\PriceUpdateResultInterface[] with problem description will be returned. If there were no failed items during update empty array will be returned. If error occurred during the update exception will be thrown.
         * @summary products/special-price
         * @param {CatalogSpecialPriceStorageV1UpdatePostRequest} [catalogSpecialPriceStorageV1UpdatePostBody] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async catalogSpecialPriceStorageV1UpdatePost(catalogSpecialPriceStorageV1UpdatePostBody?: CatalogSpecialPriceStorageV1UpdatePostRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<CatalogDataPriceUpdateResultInterface>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.catalogSpecialPriceStorageV1UpdatePost(catalogSpecialPriceStorageV1UpdatePostBody, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * ProductsSpecialPriceApi - factory interface
 * @export
 */
export const ProductsSpecialPriceApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = ProductsSpecialPriceApiFp(configuration)
    return {
        /**
         * Add or update product\'s special price. If any items will have invalid price, store id, sku or dates, they will be marked as failed and excluded from update list and \\Magento\\Catalog\\Api\\Data\\PriceUpdateResultInterface[] with problem description will be returned. If there were no failed items during update empty array will be returned. If error occurred during the update exception will be thrown.
         * @summary products/special-price
         * @param {CatalogSpecialPriceStorageV1UpdatePostRequest} [catalogSpecialPriceStorageV1UpdatePostBody] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        catalogSpecialPriceStorageV1UpdatePost(catalogSpecialPriceStorageV1UpdatePostBody?: CatalogSpecialPriceStorageV1UpdatePostRequest, options?: any): AxiosPromise<Array<CatalogDataPriceUpdateResultInterface>> {
            return localVarFp.catalogSpecialPriceStorageV1UpdatePost(catalogSpecialPriceStorageV1UpdatePostBody, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * ProductsSpecialPriceApi - object-oriented interface
 * @export
 * @class ProductsSpecialPriceApi
 * @extends {BaseAPI}
 */
export class ProductsSpecialPriceApi extends BaseAPI {
    /**
     * Add or update product\'s special price. If any items will have invalid price, store id, sku or dates, they will be marked as failed and excluded from update list and \\Magento\\Catalog\\Api\\Data\\PriceUpdateResultInterface[] with problem description will be returned. If there were no failed items during update empty array will be returned. If error occurred during the update exception will be thrown.
     * @summary products/special-price
     * @param {CatalogSpecialPriceStorageV1UpdatePostRequest} [catalogSpecialPriceStorageV1UpdatePostBody] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProductsSpecialPriceApi
     */
    public catalogSpecialPriceStorageV1UpdatePost(catalogSpecialPriceStorageV1UpdatePostBody?: CatalogSpecialPriceStorageV1UpdatePostRequest, options?: AxiosRequestConfig) {
        return ProductsSpecialPriceApiFp(this.configuration).catalogSpecialPriceStorageV1UpdatePost(catalogSpecialPriceStorageV1UpdatePostBody, options).then((request) => request(this.axios, this.basePath));
    }
}


/**
 * ProductsSpecialPriceDeleteApi - axios parameter creator
 * @export
 */
export const ProductsSpecialPriceDeleteApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Delete product\'s special price. If any items will have invalid price, store id, sku or dates, they will be marked as failed and excluded from delete list and \\Magento\\Catalog\\Api\\Data\\PriceUpdateResultInterface[] with problem description will be returned. If there were no failed items during update empty array will be returned. If error occurred during the delete exception will be thrown.
         * @summary products/special-price-delete
         * @param {CatalogSpecialPriceStorageV1UpdatePostRequest} [catalogSpecialPriceStorageV1DeletePostBody] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        catalogSpecialPriceStorageV1DeletePost: async (catalogSpecialPriceStorageV1DeletePostBody?: CatalogSpecialPriceStorageV1UpdatePostRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/V1/products/special-price-delete`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(catalogSpecialPriceStorageV1DeletePostBody, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * ProductsSpecialPriceDeleteApi - functional programming interface
 * @export
 */
export const ProductsSpecialPriceDeleteApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = ProductsSpecialPriceDeleteApiAxiosParamCreator(configuration)
    return {
        /**
         * Delete product\'s special price. If any items will have invalid price, store id, sku or dates, they will be marked as failed and excluded from delete list and \\Magento\\Catalog\\Api\\Data\\PriceUpdateResultInterface[] with problem description will be returned. If there were no failed items during update empty array will be returned. If error occurred during the delete exception will be thrown.
         * @summary products/special-price-delete
         * @param {CatalogSpecialPriceStorageV1UpdatePostRequest} [catalogSpecialPriceStorageV1DeletePostBody] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async catalogSpecialPriceStorageV1DeletePost(catalogSpecialPriceStorageV1DeletePostBody?: CatalogSpecialPriceStorageV1UpdatePostRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<CatalogDataPriceUpdateResultInterface>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.catalogSpecialPriceStorageV1DeletePost(catalogSpecialPriceStorageV1DeletePostBody, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * ProductsSpecialPriceDeleteApi - factory interface
 * @export
 */
export const ProductsSpecialPriceDeleteApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = ProductsSpecialPriceDeleteApiFp(configuration)
    return {
        /**
         * Delete product\'s special price. If any items will have invalid price, store id, sku or dates, they will be marked as failed and excluded from delete list and \\Magento\\Catalog\\Api\\Data\\PriceUpdateResultInterface[] with problem description will be returned. If there were no failed items during update empty array will be returned. If error occurred during the delete exception will be thrown.
         * @summary products/special-price-delete
         * @param {CatalogSpecialPriceStorageV1UpdatePostRequest} [catalogSpecialPriceStorageV1DeletePostBody] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        catalogSpecialPriceStorageV1DeletePost(catalogSpecialPriceStorageV1DeletePostBody?: CatalogSpecialPriceStorageV1UpdatePostRequest, options?: any): AxiosPromise<Array<CatalogDataPriceUpdateResultInterface>> {
            return localVarFp.catalogSpecialPriceStorageV1DeletePost(catalogSpecialPriceStorageV1DeletePostBody, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * ProductsSpecialPriceDeleteApi - object-oriented interface
 * @export
 * @class ProductsSpecialPriceDeleteApi
 * @extends {BaseAPI}
 */
export class ProductsSpecialPriceDeleteApi extends BaseAPI {
    /**
     * Delete product\'s special price. If any items will have invalid price, store id, sku or dates, they will be marked as failed and excluded from delete list and \\Magento\\Catalog\\Api\\Data\\PriceUpdateResultInterface[] with problem description will be returned. If there were no failed items during update empty array will be returned. If error occurred during the delete exception will be thrown.
     * @summary products/special-price-delete
     * @param {CatalogSpecialPriceStorageV1UpdatePostRequest} [catalogSpecialPriceStorageV1DeletePostBody] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProductsSpecialPriceDeleteApi
     */
    public catalogSpecialPriceStorageV1DeletePost(catalogSpecialPriceStorageV1DeletePostBody?: CatalogSpecialPriceStorageV1UpdatePostRequest, options?: AxiosRequestConfig) {
        return ProductsSpecialPriceDeleteApiFp(this.configuration).catalogSpecialPriceStorageV1DeletePost(catalogSpecialPriceStorageV1DeletePostBody, options).then((request) => request(this.axios, this.basePath));
    }
}


/**
 * ProductsSpecialPriceInformationApi - axios parameter creator
 * @export
 */
export const ProductsSpecialPriceInformationApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Return product\'s special price. In case of at least one of skus is not found exception will be thrown.
         * @summary products/special-price-information
         * @param {CatalogBasePriceStorageV1GetPostRequest} [catalogSpecialPriceStorageV1GetPostBody] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        catalogSpecialPriceStorageV1GetPost: async (catalogSpecialPriceStorageV1GetPostBody?: CatalogBasePriceStorageV1GetPostRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/V1/products/special-price-information`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(catalogSpecialPriceStorageV1GetPostBody, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * ProductsSpecialPriceInformationApi - functional programming interface
 * @export
 */
export const ProductsSpecialPriceInformationApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = ProductsSpecialPriceInformationApiAxiosParamCreator(configuration)
    return {
        /**
         * Return product\'s special price. In case of at least one of skus is not found exception will be thrown.
         * @summary products/special-price-information
         * @param {CatalogBasePriceStorageV1GetPostRequest} [catalogSpecialPriceStorageV1GetPostBody] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async catalogSpecialPriceStorageV1GetPost(catalogSpecialPriceStorageV1GetPostBody?: CatalogBasePriceStorageV1GetPostRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<CatalogDataSpecialPriceInterface>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.catalogSpecialPriceStorageV1GetPost(catalogSpecialPriceStorageV1GetPostBody, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * ProductsSpecialPriceInformationApi - factory interface
 * @export
 */
export const ProductsSpecialPriceInformationApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = ProductsSpecialPriceInformationApiFp(configuration)
    return {
        /**
         * Return product\'s special price. In case of at least one of skus is not found exception will be thrown.
         * @summary products/special-price-information
         * @param {CatalogBasePriceStorageV1GetPostRequest} [catalogSpecialPriceStorageV1GetPostBody] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        catalogSpecialPriceStorageV1GetPost(catalogSpecialPriceStorageV1GetPostBody?: CatalogBasePriceStorageV1GetPostRequest, options?: any): AxiosPromise<Array<CatalogDataSpecialPriceInterface>> {
            return localVarFp.catalogSpecialPriceStorageV1GetPost(catalogSpecialPriceStorageV1GetPostBody, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * ProductsSpecialPriceInformationApi - object-oriented interface
 * @export
 * @class ProductsSpecialPriceInformationApi
 * @extends {BaseAPI}
 */
export class ProductsSpecialPriceInformationApi extends BaseAPI {
    /**
     * Return product\'s special price. In case of at least one of skus is not found exception will be thrown.
     * @summary products/special-price-information
     * @param {CatalogBasePriceStorageV1GetPostRequest} [catalogSpecialPriceStorageV1GetPostBody] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProductsSpecialPriceInformationApi
     */
    public catalogSpecialPriceStorageV1GetPost(catalogSpecialPriceStorageV1GetPostBody?: CatalogBasePriceStorageV1GetPostRequest, options?: AxiosRequestConfig) {
        return ProductsSpecialPriceInformationApiFp(this.configuration).catalogSpecialPriceStorageV1GetPost(catalogSpecialPriceStorageV1GetPostBody, options).then((request) => request(this.axios, this.basePath));
    }
}


/**
 * ProductsTierPricesApi - axios parameter creator
 * @export
 */
export const ProductsTierPricesApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Remove existing tier prices and replace them with the new ones. If any items will have invalid price, price type, website id, sku, customer group or quantity, they will be marked as failed and excluded from replace list and \\Magento\\Catalog\\Api\\Data\\PriceUpdateResultInterface[] with problem description will be returned. If there were no failed items during update empty array will be returned. If error occurred during the update exception will be thrown.
         * @summary products/tier-prices
         * @param {CatalogTierPriceStorageV1ReplacePutRequest} [catalogTierPriceStorageV1ReplacePutBody] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        catalogTierPriceStorageV1ReplacePut: async (catalogTierPriceStorageV1ReplacePutBody?: CatalogTierPriceStorageV1ReplacePutRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/V1/products/tier-prices`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(catalogTierPriceStorageV1ReplacePutBody, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Add or update product prices. If any items will have invalid price, price type, website id, sku, customer group or quantity, they will be marked as failed and excluded from update list and \\Magento\\Catalog\\Api\\Data\\PriceUpdateResultInterface[] with problem description will be returned. If there were no failed items during update empty array will be returned. If error occurred during the update exception will be thrown.
         * @summary products/tier-prices
         * @param {CatalogTierPriceStorageV1ReplacePutRequest} [catalogTierPriceStorageV1UpdatePostBody] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        catalogTierPriceStorageV1UpdatePost: async (catalogTierPriceStorageV1UpdatePostBody?: CatalogTierPriceStorageV1ReplacePutRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/V1/products/tier-prices`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(catalogTierPriceStorageV1UpdatePostBody, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * ProductsTierPricesApi - functional programming interface
 * @export
 */
export const ProductsTierPricesApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = ProductsTierPricesApiAxiosParamCreator(configuration)
    return {
        /**
         * Remove existing tier prices and replace them with the new ones. If any items will have invalid price, price type, website id, sku, customer group or quantity, they will be marked as failed and excluded from replace list and \\Magento\\Catalog\\Api\\Data\\PriceUpdateResultInterface[] with problem description will be returned. If there were no failed items during update empty array will be returned. If error occurred during the update exception will be thrown.
         * @summary products/tier-prices
         * @param {CatalogTierPriceStorageV1ReplacePutRequest} [catalogTierPriceStorageV1ReplacePutBody] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async catalogTierPriceStorageV1ReplacePut(catalogTierPriceStorageV1ReplacePutBody?: CatalogTierPriceStorageV1ReplacePutRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<CatalogDataPriceUpdateResultInterface>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.catalogTierPriceStorageV1ReplacePut(catalogTierPriceStorageV1ReplacePutBody, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Add or update product prices. If any items will have invalid price, price type, website id, sku, customer group or quantity, they will be marked as failed and excluded from update list and \\Magento\\Catalog\\Api\\Data\\PriceUpdateResultInterface[] with problem description will be returned. If there were no failed items during update empty array will be returned. If error occurred during the update exception will be thrown.
         * @summary products/tier-prices
         * @param {CatalogTierPriceStorageV1ReplacePutRequest} [catalogTierPriceStorageV1UpdatePostBody] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async catalogTierPriceStorageV1UpdatePost(catalogTierPriceStorageV1UpdatePostBody?: CatalogTierPriceStorageV1ReplacePutRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<CatalogDataPriceUpdateResultInterface>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.catalogTierPriceStorageV1UpdatePost(catalogTierPriceStorageV1UpdatePostBody, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * ProductsTierPricesApi - factory interface
 * @export
 */
export const ProductsTierPricesApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = ProductsTierPricesApiFp(configuration)
    return {
        /**
         * Remove existing tier prices and replace them with the new ones. If any items will have invalid price, price type, website id, sku, customer group or quantity, they will be marked as failed and excluded from replace list and \\Magento\\Catalog\\Api\\Data\\PriceUpdateResultInterface[] with problem description will be returned. If there were no failed items during update empty array will be returned. If error occurred during the update exception will be thrown.
         * @summary products/tier-prices
         * @param {CatalogTierPriceStorageV1ReplacePutRequest} [catalogTierPriceStorageV1ReplacePutBody] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        catalogTierPriceStorageV1ReplacePut(catalogTierPriceStorageV1ReplacePutBody?: CatalogTierPriceStorageV1ReplacePutRequest, options?: any): AxiosPromise<Array<CatalogDataPriceUpdateResultInterface>> {
            return localVarFp.catalogTierPriceStorageV1ReplacePut(catalogTierPriceStorageV1ReplacePutBody, options).then((request) => request(axios, basePath));
        },
        /**
         * Add or update product prices. If any items will have invalid price, price type, website id, sku, customer group or quantity, they will be marked as failed and excluded from update list and \\Magento\\Catalog\\Api\\Data\\PriceUpdateResultInterface[] with problem description will be returned. If there were no failed items during update empty array will be returned. If error occurred during the update exception will be thrown.
         * @summary products/tier-prices
         * @param {CatalogTierPriceStorageV1ReplacePutRequest} [catalogTierPriceStorageV1UpdatePostBody] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        catalogTierPriceStorageV1UpdatePost(catalogTierPriceStorageV1UpdatePostBody?: CatalogTierPriceStorageV1ReplacePutRequest, options?: any): AxiosPromise<Array<CatalogDataPriceUpdateResultInterface>> {
            return localVarFp.catalogTierPriceStorageV1UpdatePost(catalogTierPriceStorageV1UpdatePostBody, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * ProductsTierPricesApi - object-oriented interface
 * @export
 * @class ProductsTierPricesApi
 * @extends {BaseAPI}
 */
export class ProductsTierPricesApi extends BaseAPI {
    /**
     * Remove existing tier prices and replace them with the new ones. If any items will have invalid price, price type, website id, sku, customer group or quantity, they will be marked as failed and excluded from replace list and \\Magento\\Catalog\\Api\\Data\\PriceUpdateResultInterface[] with problem description will be returned. If there were no failed items during update empty array will be returned. If error occurred during the update exception will be thrown.
     * @summary products/tier-prices
     * @param {CatalogTierPriceStorageV1ReplacePutRequest} [catalogTierPriceStorageV1ReplacePutBody] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProductsTierPricesApi
     */
    public catalogTierPriceStorageV1ReplacePut(catalogTierPriceStorageV1ReplacePutBody?: CatalogTierPriceStorageV1ReplacePutRequest, options?: AxiosRequestConfig) {
        return ProductsTierPricesApiFp(this.configuration).catalogTierPriceStorageV1ReplacePut(catalogTierPriceStorageV1ReplacePutBody, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Add or update product prices. If any items will have invalid price, price type, website id, sku, customer group or quantity, they will be marked as failed and excluded from update list and \\Magento\\Catalog\\Api\\Data\\PriceUpdateResultInterface[] with problem description will be returned. If there were no failed items during update empty array will be returned. If error occurred during the update exception will be thrown.
     * @summary products/tier-prices
     * @param {CatalogTierPriceStorageV1ReplacePutRequest} [catalogTierPriceStorageV1UpdatePostBody] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProductsTierPricesApi
     */
    public catalogTierPriceStorageV1UpdatePost(catalogTierPriceStorageV1UpdatePostBody?: CatalogTierPriceStorageV1ReplacePutRequest, options?: AxiosRequestConfig) {
        return ProductsTierPricesApiFp(this.configuration).catalogTierPriceStorageV1UpdatePost(catalogTierPriceStorageV1UpdatePostBody, options).then((request) => request(this.axios, this.basePath));
    }
}


/**
 * ProductsTierPricesDeleteApi - axios parameter creator
 * @export
 */
export const ProductsTierPricesDeleteApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Delete product tier prices. If any items will have invalid price, price type, website id, sku, customer group or quantity, they will be marked as failed and excluded from delete list and \\Magento\\Catalog\\Api\\Data\\PriceUpdateResultInterface[] with problem description will be returned. If there were no failed items during update empty array will be returned. If error occurred during the update exception will be thrown.
         * @summary products/tier-prices-delete
         * @param {CatalogTierPriceStorageV1ReplacePutRequest} [catalogTierPriceStorageV1DeletePostBody] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        catalogTierPriceStorageV1DeletePost: async (catalogTierPriceStorageV1DeletePostBody?: CatalogTierPriceStorageV1ReplacePutRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/V1/products/tier-prices-delete`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(catalogTierPriceStorageV1DeletePostBody, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * ProductsTierPricesDeleteApi - functional programming interface
 * @export
 */
export const ProductsTierPricesDeleteApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = ProductsTierPricesDeleteApiAxiosParamCreator(configuration)
    return {
        /**
         * Delete product tier prices. If any items will have invalid price, price type, website id, sku, customer group or quantity, they will be marked as failed and excluded from delete list and \\Magento\\Catalog\\Api\\Data\\PriceUpdateResultInterface[] with problem description will be returned. If there were no failed items during update empty array will be returned. If error occurred during the update exception will be thrown.
         * @summary products/tier-prices-delete
         * @param {CatalogTierPriceStorageV1ReplacePutRequest} [catalogTierPriceStorageV1DeletePostBody] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async catalogTierPriceStorageV1DeletePost(catalogTierPriceStorageV1DeletePostBody?: CatalogTierPriceStorageV1ReplacePutRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<CatalogDataPriceUpdateResultInterface>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.catalogTierPriceStorageV1DeletePost(catalogTierPriceStorageV1DeletePostBody, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * ProductsTierPricesDeleteApi - factory interface
 * @export
 */
export const ProductsTierPricesDeleteApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = ProductsTierPricesDeleteApiFp(configuration)
    return {
        /**
         * Delete product tier prices. If any items will have invalid price, price type, website id, sku, customer group or quantity, they will be marked as failed and excluded from delete list and \\Magento\\Catalog\\Api\\Data\\PriceUpdateResultInterface[] with problem description will be returned. If there were no failed items during update empty array will be returned. If error occurred during the update exception will be thrown.
         * @summary products/tier-prices-delete
         * @param {CatalogTierPriceStorageV1ReplacePutRequest} [catalogTierPriceStorageV1DeletePostBody] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        catalogTierPriceStorageV1DeletePost(catalogTierPriceStorageV1DeletePostBody?: CatalogTierPriceStorageV1ReplacePutRequest, options?: any): AxiosPromise<Array<CatalogDataPriceUpdateResultInterface>> {
            return localVarFp.catalogTierPriceStorageV1DeletePost(catalogTierPriceStorageV1DeletePostBody, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * ProductsTierPricesDeleteApi - object-oriented interface
 * @export
 * @class ProductsTierPricesDeleteApi
 * @extends {BaseAPI}
 */
export class ProductsTierPricesDeleteApi extends BaseAPI {
    /**
     * Delete product tier prices. If any items will have invalid price, price type, website id, sku, customer group or quantity, they will be marked as failed and excluded from delete list and \\Magento\\Catalog\\Api\\Data\\PriceUpdateResultInterface[] with problem description will be returned. If there were no failed items during update empty array will be returned. If error occurred during the update exception will be thrown.
     * @summary products/tier-prices-delete
     * @param {CatalogTierPriceStorageV1ReplacePutRequest} [catalogTierPriceStorageV1DeletePostBody] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProductsTierPricesDeleteApi
     */
    public catalogTierPriceStorageV1DeletePost(catalogTierPriceStorageV1DeletePostBody?: CatalogTierPriceStorageV1ReplacePutRequest, options?: AxiosRequestConfig) {
        return ProductsTierPricesDeleteApiFp(this.configuration).catalogTierPriceStorageV1DeletePost(catalogTierPriceStorageV1DeletePostBody, options).then((request) => request(this.axios, this.basePath));
    }
}


/**
 * ProductsTierPricesInformationApi - axios parameter creator
 * @export
 */
export const ProductsTierPricesInformationApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Return product prices. In case of at least one of skus is not found exception will be thrown.
         * @summary products/tier-prices-information
         * @param {CatalogBasePriceStorageV1GetPostRequest} [catalogTierPriceStorageV1GetPostBody] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        catalogTierPriceStorageV1GetPost: async (catalogTierPriceStorageV1GetPostBody?: CatalogBasePriceStorageV1GetPostRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/V1/products/tier-prices-information`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(catalogTierPriceStorageV1GetPostBody, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * ProductsTierPricesInformationApi - functional programming interface
 * @export
 */
export const ProductsTierPricesInformationApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = ProductsTierPricesInformationApiAxiosParamCreator(configuration)
    return {
        /**
         * Return product prices. In case of at least one of skus is not found exception will be thrown.
         * @summary products/tier-prices-information
         * @param {CatalogBasePriceStorageV1GetPostRequest} [catalogTierPriceStorageV1GetPostBody] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async catalogTierPriceStorageV1GetPost(catalogTierPriceStorageV1GetPostBody?: CatalogBasePriceStorageV1GetPostRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<CatalogDataTierPriceInterface>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.catalogTierPriceStorageV1GetPost(catalogTierPriceStorageV1GetPostBody, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * ProductsTierPricesInformationApi - factory interface
 * @export
 */
export const ProductsTierPricesInformationApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = ProductsTierPricesInformationApiFp(configuration)
    return {
        /**
         * Return product prices. In case of at least one of skus is not found exception will be thrown.
         * @summary products/tier-prices-information
         * @param {CatalogBasePriceStorageV1GetPostRequest} [catalogTierPriceStorageV1GetPostBody] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        catalogTierPriceStorageV1GetPost(catalogTierPriceStorageV1GetPostBody?: CatalogBasePriceStorageV1GetPostRequest, options?: any): AxiosPromise<Array<CatalogDataTierPriceInterface>> {
            return localVarFp.catalogTierPriceStorageV1GetPost(catalogTierPriceStorageV1GetPostBody, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * ProductsTierPricesInformationApi - object-oriented interface
 * @export
 * @class ProductsTierPricesInformationApi
 * @extends {BaseAPI}
 */
export class ProductsTierPricesInformationApi extends BaseAPI {
    /**
     * Return product prices. In case of at least one of skus is not found exception will be thrown.
     * @summary products/tier-prices-information
     * @param {CatalogBasePriceStorageV1GetPostRequest} [catalogTierPriceStorageV1GetPostBody] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProductsTierPricesInformationApi
     */
    public catalogTierPriceStorageV1GetPost(catalogTierPriceStorageV1GetPostBody?: CatalogBasePriceStorageV1GetPostRequest, options?: AxiosRequestConfig) {
        return ProductsTierPricesInformationApiFp(this.configuration).catalogTierPriceStorageV1GetPost(catalogTierPriceStorageV1GetPostBody, options).then((request) => request(this.axios, this.basePath));
    }
}


/**
 * ProductsTypesApi - axios parameter creator
 * @export
 */
export const ProductsTypesApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Retrieve available product types
         * @summary products/types
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        catalogProductTypeListV1GetProductTypesGet: async (options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/V1/products/types`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * ProductsTypesApi - functional programming interface
 * @export
 */
export const ProductsTypesApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = ProductsTypesApiAxiosParamCreator(configuration)
    return {
        /**
         * Retrieve available product types
         * @summary products/types
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async catalogProductTypeListV1GetProductTypesGet(options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<CatalogDataProductTypeInterface>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.catalogProductTypeListV1GetProductTypesGet(options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * ProductsTypesApi - factory interface
 * @export
 */
export const ProductsTypesApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = ProductsTypesApiFp(configuration)
    return {
        /**
         * Retrieve available product types
         * @summary products/types
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        catalogProductTypeListV1GetProductTypesGet(options?: any): AxiosPromise<Array<CatalogDataProductTypeInterface>> {
            return localVarFp.catalogProductTypeListV1GetProductTypesGet(options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * ProductsTypesApi - object-oriented interface
 * @export
 * @class ProductsTypesApi
 * @extends {BaseAPI}
 */
export class ProductsTypesApi extends BaseAPI {
    /**
     * Retrieve available product types
     * @summary products/types
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProductsTypesApi
     */
    public catalogProductTypeListV1GetProductTypesGet(options?: AxiosRequestConfig) {
        return ProductsTypesApiFp(this.configuration).catalogProductTypeListV1GetProductTypesGet(options).then((request) => request(this.axios, this.basePath));
    }
}


/**
 * RequisitionListsApi - axios parameter creator
 * @export
 */
export const RequisitionListsApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Save Requisition List
         * @summary requisition_lists
         * @param {RequisitionListRequisitionListRepositoryV1SavePostRequest} [requisitionListRequisitionListRepositoryV1SavePostBody] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        requisitionListRequisitionListRepositoryV1SavePost: async (requisitionListRequisitionListRepositoryV1SavePostBody?: RequisitionListRequisitionListRepositoryV1SavePostRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/V1/requisition_lists`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(requisitionListRequisitionListRepositoryV1SavePostBody, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * RequisitionListsApi - functional programming interface
 * @export
 */
export const RequisitionListsApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = RequisitionListsApiAxiosParamCreator(configuration)
    return {
        /**
         * Save Requisition List
         * @summary requisition_lists
         * @param {RequisitionListRequisitionListRepositoryV1SavePostRequest} [requisitionListRequisitionListRepositoryV1SavePostBody] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async requisitionListRequisitionListRepositoryV1SavePost(requisitionListRequisitionListRepositoryV1SavePostBody?: RequisitionListRequisitionListRepositoryV1SavePostRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<RequisitionListDataRequisitionListInterface>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.requisitionListRequisitionListRepositoryV1SavePost(requisitionListRequisitionListRepositoryV1SavePostBody, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * RequisitionListsApi - factory interface
 * @export
 */
export const RequisitionListsApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = RequisitionListsApiFp(configuration)
    return {
        /**
         * Save Requisition List
         * @summary requisition_lists
         * @param {RequisitionListRequisitionListRepositoryV1SavePostRequest} [requisitionListRequisitionListRepositoryV1SavePostBody] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        requisitionListRequisitionListRepositoryV1SavePost(requisitionListRequisitionListRepositoryV1SavePostBody?: RequisitionListRequisitionListRepositoryV1SavePostRequest, options?: any): AxiosPromise<RequisitionListDataRequisitionListInterface> {
            return localVarFp.requisitionListRequisitionListRepositoryV1SavePost(requisitionListRequisitionListRepositoryV1SavePostBody, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * RequisitionListsApi - object-oriented interface
 * @export
 * @class RequisitionListsApi
 * @extends {BaseAPI}
 */
export class RequisitionListsApi extends BaseAPI {
    /**
     * Save Requisition List
     * @summary requisition_lists
     * @param {RequisitionListRequisitionListRepositoryV1SavePostRequest} [requisitionListRequisitionListRepositoryV1SavePostBody] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof RequisitionListsApi
     */
    public requisitionListRequisitionListRepositoryV1SavePost(requisitionListRequisitionListRepositoryV1SavePostBody?: RequisitionListRequisitionListRepositoryV1SavePostRequest, options?: AxiosRequestConfig) {
        return RequisitionListsApiFp(this.configuration).requisitionListRequisitionListRepositoryV1SavePost(requisitionListRequisitionListRepositoryV1SavePostBody, options).then((request) => request(this.axios, this.basePath));
    }
}


/**
 * ReturnsApi - axios parameter creator
 * @export
 */
export const ReturnsApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Save RMA
         * @summary returns
         * @param {RmaRmaManagementV1SaveRmaPostRequest} [rmaRmaManagementV1SaveRmaPostBody] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        rmaRmaManagementV1SaveRmaPost: async (rmaRmaManagementV1SaveRmaPostBody?: RmaRmaManagementV1SaveRmaPostRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/V1/returns`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(rmaRmaManagementV1SaveRmaPostBody, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Return list of rma data objects based on search criteria
         * @summary returns
         * @param {string} [searchCriteriaFilterGroups0Filters0Field] Field
         * @param {string} [searchCriteriaFilterGroups0Filters0Value] Value
         * @param {string} [searchCriteriaFilterGroups0Filters0ConditionType] Condition type
         * @param {string} [searchCriteriaSortOrders0Field] Sorting field.
         * @param {string} [searchCriteriaSortOrders0Direction] Sorting direction.
         * @param {number} [searchCriteriaPageSize] Page size.
         * @param {number} [searchCriteriaCurrentPage] Current page.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        rmaRmaManagementV1SearchGet: async (searchCriteriaFilterGroups0Filters0Field?: string, searchCriteriaFilterGroups0Filters0Value?: string, searchCriteriaFilterGroups0Filters0ConditionType?: string, searchCriteriaSortOrders0Field?: string, searchCriteriaSortOrders0Direction?: string, searchCriteriaPageSize?: number, searchCriteriaCurrentPage?: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/V1/returns`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (searchCriteriaFilterGroups0Filters0Field !== undefined) {
                localVarQueryParameter['searchCriteria[filterGroups][0][filters][0][field]'] = searchCriteriaFilterGroups0Filters0Field;
            }

            if (searchCriteriaFilterGroups0Filters0Value !== undefined) {
                localVarQueryParameter['searchCriteria[filterGroups][0][filters][0][value]'] = searchCriteriaFilterGroups0Filters0Value;
            }

            if (searchCriteriaFilterGroups0Filters0ConditionType !== undefined) {
                localVarQueryParameter['searchCriteria[filterGroups][0][filters][0][conditionType]'] = searchCriteriaFilterGroups0Filters0ConditionType;
            }

            if (searchCriteriaSortOrders0Field !== undefined) {
                localVarQueryParameter['searchCriteria[sortOrders][0][field]'] = searchCriteriaSortOrders0Field;
            }

            if (searchCriteriaSortOrders0Direction !== undefined) {
                localVarQueryParameter['searchCriteria[sortOrders][0][direction]'] = searchCriteriaSortOrders0Direction;
            }

            if (searchCriteriaPageSize !== undefined) {
                localVarQueryParameter['searchCriteria[pageSize]'] = searchCriteriaPageSize;
            }

            if (searchCriteriaCurrentPage !== undefined) {
                localVarQueryParameter['searchCriteria[currentPage]'] = searchCriteriaCurrentPage;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * ReturnsApi - functional programming interface
 * @export
 */
export const ReturnsApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = ReturnsApiAxiosParamCreator(configuration)
    return {
        /**
         * Save RMA
         * @summary returns
         * @param {RmaRmaManagementV1SaveRmaPostRequest} [rmaRmaManagementV1SaveRmaPostBody] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async rmaRmaManagementV1SaveRmaPost(rmaRmaManagementV1SaveRmaPostBody?: RmaRmaManagementV1SaveRmaPostRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<RmaDataRmaInterface>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.rmaRmaManagementV1SaveRmaPost(rmaRmaManagementV1SaveRmaPostBody, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Return list of rma data objects based on search criteria
         * @summary returns
         * @param {string} [searchCriteriaFilterGroups0Filters0Field] Field
         * @param {string} [searchCriteriaFilterGroups0Filters0Value] Value
         * @param {string} [searchCriteriaFilterGroups0Filters0ConditionType] Condition type
         * @param {string} [searchCriteriaSortOrders0Field] Sorting field.
         * @param {string} [searchCriteriaSortOrders0Direction] Sorting direction.
         * @param {number} [searchCriteriaPageSize] Page size.
         * @param {number} [searchCriteriaCurrentPage] Current page.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async rmaRmaManagementV1SearchGet(searchCriteriaFilterGroups0Filters0Field?: string, searchCriteriaFilterGroups0Filters0Value?: string, searchCriteriaFilterGroups0Filters0ConditionType?: string, searchCriteriaSortOrders0Field?: string, searchCriteriaSortOrders0Direction?: string, searchCriteriaPageSize?: number, searchCriteriaCurrentPage?: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<RmaDataRmaSearchResultInterface>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.rmaRmaManagementV1SearchGet(searchCriteriaFilterGroups0Filters0Field, searchCriteriaFilterGroups0Filters0Value, searchCriteriaFilterGroups0Filters0ConditionType, searchCriteriaSortOrders0Field, searchCriteriaSortOrders0Direction, searchCriteriaPageSize, searchCriteriaCurrentPage, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * ReturnsApi - factory interface
 * @export
 */
export const ReturnsApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = ReturnsApiFp(configuration)
    return {
        /**
         * Save RMA
         * @summary returns
         * @param {RmaRmaManagementV1SaveRmaPostRequest} [rmaRmaManagementV1SaveRmaPostBody] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        rmaRmaManagementV1SaveRmaPost(rmaRmaManagementV1SaveRmaPostBody?: RmaRmaManagementV1SaveRmaPostRequest, options?: any): AxiosPromise<RmaDataRmaInterface> {
            return localVarFp.rmaRmaManagementV1SaveRmaPost(rmaRmaManagementV1SaveRmaPostBody, options).then((request) => request(axios, basePath));
        },
        /**
         * Return list of rma data objects based on search criteria
         * @summary returns
         * @param {string} [searchCriteriaFilterGroups0Filters0Field] Field
         * @param {string} [searchCriteriaFilterGroups0Filters0Value] Value
         * @param {string} [searchCriteriaFilterGroups0Filters0ConditionType] Condition type
         * @param {string} [searchCriteriaSortOrders0Field] Sorting field.
         * @param {string} [searchCriteriaSortOrders0Direction] Sorting direction.
         * @param {number} [searchCriteriaPageSize] Page size.
         * @param {number} [searchCriteriaCurrentPage] Current page.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        rmaRmaManagementV1SearchGet(searchCriteriaFilterGroups0Filters0Field?: string, searchCriteriaFilterGroups0Filters0Value?: string, searchCriteriaFilterGroups0Filters0ConditionType?: string, searchCriteriaSortOrders0Field?: string, searchCriteriaSortOrders0Direction?: string, searchCriteriaPageSize?: number, searchCriteriaCurrentPage?: number, options?: any): AxiosPromise<RmaDataRmaSearchResultInterface> {
            return localVarFp.rmaRmaManagementV1SearchGet(searchCriteriaFilterGroups0Filters0Field, searchCriteriaFilterGroups0Filters0Value, searchCriteriaFilterGroups0Filters0ConditionType, searchCriteriaSortOrders0Field, searchCriteriaSortOrders0Direction, searchCriteriaPageSize, searchCriteriaCurrentPage, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * ReturnsApi - object-oriented interface
 * @export
 * @class ReturnsApi
 * @extends {BaseAPI}
 */
export class ReturnsApi extends BaseAPI {
    /**
     * Save RMA
     * @summary returns
     * @param {RmaRmaManagementV1SaveRmaPostRequest} [rmaRmaManagementV1SaveRmaPostBody] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ReturnsApi
     */
    public rmaRmaManagementV1SaveRmaPost(rmaRmaManagementV1SaveRmaPostBody?: RmaRmaManagementV1SaveRmaPostRequest, options?: AxiosRequestConfig) {
        return ReturnsApiFp(this.configuration).rmaRmaManagementV1SaveRmaPost(rmaRmaManagementV1SaveRmaPostBody, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Return list of rma data objects based on search criteria
     * @summary returns
     * @param {string} [searchCriteriaFilterGroups0Filters0Field] Field
     * @param {string} [searchCriteriaFilterGroups0Filters0Value] Value
     * @param {string} [searchCriteriaFilterGroups0Filters0ConditionType] Condition type
     * @param {string} [searchCriteriaSortOrders0Field] Sorting field.
     * @param {string} [searchCriteriaSortOrders0Direction] Sorting direction.
     * @param {number} [searchCriteriaPageSize] Page size.
     * @param {number} [searchCriteriaCurrentPage] Current page.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ReturnsApi
     */
    public rmaRmaManagementV1SearchGet(searchCriteriaFilterGroups0Filters0Field?: string, searchCriteriaFilterGroups0Filters0Value?: string, searchCriteriaFilterGroups0Filters0ConditionType?: string, searchCriteriaSortOrders0Field?: string, searchCriteriaSortOrders0Direction?: string, searchCriteriaPageSize?: number, searchCriteriaCurrentPage?: number, options?: AxiosRequestConfig) {
        return ReturnsApiFp(this.configuration).rmaRmaManagementV1SearchGet(searchCriteriaFilterGroups0Filters0Field, searchCriteriaFilterGroups0Filters0Value, searchCriteriaFilterGroups0Filters0ConditionType, searchCriteriaSortOrders0Field, searchCriteriaSortOrders0Direction, searchCriteriaPageSize, searchCriteriaCurrentPage, options).then((request) => request(this.axios, this.basePath));
    }
}


/**
 * ReturnsAttributeMetadataApi - axios parameter creator
 * @export
 */
export const ReturnsAttributeMetadataApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Get all attribute metadata.
         * @summary returnsAttributeMetadata
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        rmaRmaAttributesManagementV1GetAllAttributesMetadataGet: async (options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/V1/returnsAttributeMetadata`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * ReturnsAttributeMetadataApi - functional programming interface
 * @export
 */
export const ReturnsAttributeMetadataApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = ReturnsAttributeMetadataApiAxiosParamCreator(configuration)
    return {
        /**
         * Get all attribute metadata.
         * @summary returnsAttributeMetadata
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async rmaRmaAttributesManagementV1GetAllAttributesMetadataGet(options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<CustomerDataAttributeMetadataInterface>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.rmaRmaAttributesManagementV1GetAllAttributesMetadataGet(options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * ReturnsAttributeMetadataApi - factory interface
 * @export
 */
export const ReturnsAttributeMetadataApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = ReturnsAttributeMetadataApiFp(configuration)
    return {
        /**
         * Get all attribute metadata.
         * @summary returnsAttributeMetadata
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        rmaRmaAttributesManagementV1GetAllAttributesMetadataGet(options?: any): AxiosPromise<Array<CustomerDataAttributeMetadataInterface>> {
            return localVarFp.rmaRmaAttributesManagementV1GetAllAttributesMetadataGet(options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * ReturnsAttributeMetadataApi - object-oriented interface
 * @export
 * @class ReturnsAttributeMetadataApi
 * @extends {BaseAPI}
 */
export class ReturnsAttributeMetadataApi extends BaseAPI {
    /**
     * Get all attribute metadata.
     * @summary returnsAttributeMetadata
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ReturnsAttributeMetadataApi
     */
    public rmaRmaAttributesManagementV1GetAllAttributesMetadataGet(options?: AxiosRequestConfig) {
        return ReturnsAttributeMetadataApiFp(this.configuration).rmaRmaAttributesManagementV1GetAllAttributesMetadataGet(options).then((request) => request(this.axios, this.basePath));
    }
}


/**
 * ReturnsAttributeMetadataAttributeCodeApi - axios parameter creator
 * @export
 */
export const ReturnsAttributeMetadataAttributeCodeApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Retrieve attribute metadata.
         * @summary returnsAttributeMetadata/{attributeCode}
         * @param {string} attributeCode 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        rmaRmaAttributesManagementV1GetAttributeMetadataGet: async (attributeCode: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'attributeCode' is not null or undefined
            assertParamExists('rmaRmaAttributesManagementV1GetAttributeMetadataGet', 'attributeCode', attributeCode)
            const localVarPath = `/V1/returnsAttributeMetadata/{attributeCode}`
                .replace(`{${"attributeCode"}}`, encodeURIComponent(String(attributeCode)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * ReturnsAttributeMetadataAttributeCodeApi - functional programming interface
 * @export
 */
export const ReturnsAttributeMetadataAttributeCodeApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = ReturnsAttributeMetadataAttributeCodeApiAxiosParamCreator(configuration)
    return {
        /**
         * Retrieve attribute metadata.
         * @summary returnsAttributeMetadata/{attributeCode}
         * @param {string} attributeCode 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async rmaRmaAttributesManagementV1GetAttributeMetadataGet(attributeCode: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<CustomerDataAttributeMetadataInterface>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.rmaRmaAttributesManagementV1GetAttributeMetadataGet(attributeCode, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * ReturnsAttributeMetadataAttributeCodeApi - factory interface
 * @export
 */
export const ReturnsAttributeMetadataAttributeCodeApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = ReturnsAttributeMetadataAttributeCodeApiFp(configuration)
    return {
        /**
         * Retrieve attribute metadata.
         * @summary returnsAttributeMetadata/{attributeCode}
         * @param {string} attributeCode 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        rmaRmaAttributesManagementV1GetAttributeMetadataGet(attributeCode: string, options?: any): AxiosPromise<CustomerDataAttributeMetadataInterface> {
            return localVarFp.rmaRmaAttributesManagementV1GetAttributeMetadataGet(attributeCode, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * ReturnsAttributeMetadataAttributeCodeApi - object-oriented interface
 * @export
 * @class ReturnsAttributeMetadataAttributeCodeApi
 * @extends {BaseAPI}
 */
export class ReturnsAttributeMetadataAttributeCodeApi extends BaseAPI {
    /**
     * Retrieve attribute metadata.
     * @summary returnsAttributeMetadata/{attributeCode}
     * @param {string} attributeCode 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ReturnsAttributeMetadataAttributeCodeApi
     */
    public rmaRmaAttributesManagementV1GetAttributeMetadataGet(attributeCode: string, options?: AxiosRequestConfig) {
        return ReturnsAttributeMetadataAttributeCodeApiFp(this.configuration).rmaRmaAttributesManagementV1GetAttributeMetadataGet(attributeCode, options).then((request) => request(this.axios, this.basePath));
    }
}


/**
 * ReturnsAttributeMetadataCustomApi - axios parameter creator
 * @export
 */
export const ReturnsAttributeMetadataCustomApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Get custom attribute metadata for the given Data object\'s attribute set
         * @summary returnsAttributeMetadata/custom
         * @param {string} [dataObjectClassName] Data object class name
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        rmaRmaAttributesManagementV1GetCustomAttributesMetadataGet: async (dataObjectClassName?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/V1/returnsAttributeMetadata/custom`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (dataObjectClassName !== undefined) {
                localVarQueryParameter['dataObjectClassName'] = dataObjectClassName;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * ReturnsAttributeMetadataCustomApi - functional programming interface
 * @export
 */
export const ReturnsAttributeMetadataCustomApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = ReturnsAttributeMetadataCustomApiAxiosParamCreator(configuration)
    return {
        /**
         * Get custom attribute metadata for the given Data object\'s attribute set
         * @summary returnsAttributeMetadata/custom
         * @param {string} [dataObjectClassName] Data object class name
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async rmaRmaAttributesManagementV1GetCustomAttributesMetadataGet(dataObjectClassName?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<FrameworkMetadataObjectInterface>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.rmaRmaAttributesManagementV1GetCustomAttributesMetadataGet(dataObjectClassName, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * ReturnsAttributeMetadataCustomApi - factory interface
 * @export
 */
export const ReturnsAttributeMetadataCustomApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = ReturnsAttributeMetadataCustomApiFp(configuration)
    return {
        /**
         * Get custom attribute metadata for the given Data object\'s attribute set
         * @summary returnsAttributeMetadata/custom
         * @param {string} [dataObjectClassName] Data object class name
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        rmaRmaAttributesManagementV1GetCustomAttributesMetadataGet(dataObjectClassName?: string, options?: any): AxiosPromise<Array<FrameworkMetadataObjectInterface>> {
            return localVarFp.rmaRmaAttributesManagementV1GetCustomAttributesMetadataGet(dataObjectClassName, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * ReturnsAttributeMetadataCustomApi - object-oriented interface
 * @export
 * @class ReturnsAttributeMetadataCustomApi
 * @extends {BaseAPI}
 */
export class ReturnsAttributeMetadataCustomApi extends BaseAPI {
    /**
     * Get custom attribute metadata for the given Data object\'s attribute set
     * @summary returnsAttributeMetadata/custom
     * @param {string} [dataObjectClassName] Data object class name
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ReturnsAttributeMetadataCustomApi
     */
    public rmaRmaAttributesManagementV1GetCustomAttributesMetadataGet(dataObjectClassName?: string, options?: AxiosRequestConfig) {
        return ReturnsAttributeMetadataCustomApiFp(this.configuration).rmaRmaAttributesManagementV1GetCustomAttributesMetadataGet(dataObjectClassName, options).then((request) => request(this.axios, this.basePath));
    }
}


/**
 * ReturnsAttributeMetadataFormFormCodeApi - axios parameter creator
 * @export
 */
export const ReturnsAttributeMetadataFormFormCodeApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Retrieve all attributes filtered by form code
         * @summary returnsAttributeMetadata/form/{formCode}
         * @param {string} formCode 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        rmaRmaAttributesManagementV1GetAttributesGet: async (formCode: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'formCode' is not null or undefined
            assertParamExists('rmaRmaAttributesManagementV1GetAttributesGet', 'formCode', formCode)
            const localVarPath = `/V1/returnsAttributeMetadata/form/{formCode}`
                .replace(`{${"formCode"}}`, encodeURIComponent(String(formCode)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * ReturnsAttributeMetadataFormFormCodeApi - functional programming interface
 * @export
 */
export const ReturnsAttributeMetadataFormFormCodeApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = ReturnsAttributeMetadataFormFormCodeApiAxiosParamCreator(configuration)
    return {
        /**
         * Retrieve all attributes filtered by form code
         * @summary returnsAttributeMetadata/form/{formCode}
         * @param {string} formCode 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async rmaRmaAttributesManagementV1GetAttributesGet(formCode: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<CustomerDataAttributeMetadataInterface>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.rmaRmaAttributesManagementV1GetAttributesGet(formCode, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * ReturnsAttributeMetadataFormFormCodeApi - factory interface
 * @export
 */
export const ReturnsAttributeMetadataFormFormCodeApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = ReturnsAttributeMetadataFormFormCodeApiFp(configuration)
    return {
        /**
         * Retrieve all attributes filtered by form code
         * @summary returnsAttributeMetadata/form/{formCode}
         * @param {string} formCode 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        rmaRmaAttributesManagementV1GetAttributesGet(formCode: string, options?: any): AxiosPromise<Array<CustomerDataAttributeMetadataInterface>> {
            return localVarFp.rmaRmaAttributesManagementV1GetAttributesGet(formCode, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * ReturnsAttributeMetadataFormFormCodeApi - object-oriented interface
 * @export
 * @class ReturnsAttributeMetadataFormFormCodeApi
 * @extends {BaseAPI}
 */
export class ReturnsAttributeMetadataFormFormCodeApi extends BaseAPI {
    /**
     * Retrieve all attributes filtered by form code
     * @summary returnsAttributeMetadata/form/{formCode}
     * @param {string} formCode 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ReturnsAttributeMetadataFormFormCodeApi
     */
    public rmaRmaAttributesManagementV1GetAttributesGet(formCode: string, options?: AxiosRequestConfig) {
        return ReturnsAttributeMetadataFormFormCodeApiFp(this.configuration).rmaRmaAttributesManagementV1GetAttributesGet(formCode, options).then((request) => request(this.axios, this.basePath));
    }
}


/**
 * ReturnsIdApi - axios parameter creator
 * @export
 */
export const ReturnsIdApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Save RMA
         * @summary returns/{id}
         * @param {string} id 
         * @param {RmaRmaManagementV1SaveRmaPostRequest} [rmaRmaManagementV1SaveRmaPutBody] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        rmaRmaManagementV1SaveRmaPut: async (id: string, rmaRmaManagementV1SaveRmaPutBody?: RmaRmaManagementV1SaveRmaPostRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('rmaRmaManagementV1SaveRmaPut', 'id', id)
            const localVarPath = `/V1/returns/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(rmaRmaManagementV1SaveRmaPutBody, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Delete RMA
         * @summary returns/{id}
         * @param {string} id 
         * @param {RmaRmaManagementV1SaveRmaPostRequest} [rmaRmaRepositoryV1DeleteDeleteBody] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        rmaRmaRepositoryV1DeleteDelete: async (id: string, rmaRmaRepositoryV1DeleteDeleteBody?: RmaRmaManagementV1SaveRmaPostRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('rmaRmaRepositoryV1DeleteDelete', 'id', id)
            const localVarPath = `/V1/returns/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(rmaRmaRepositoryV1DeleteDeleteBody, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Return data object for specified RMA id
         * @summary returns/{id}
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        rmaRmaRepositoryV1GetGet: async (id: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('rmaRmaRepositoryV1GetGet', 'id', id)
            const localVarPath = `/V1/returns/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * ReturnsIdApi - functional programming interface
 * @export
 */
export const ReturnsIdApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = ReturnsIdApiAxiosParamCreator(configuration)
    return {
        /**
         * Save RMA
         * @summary returns/{id}
         * @param {string} id 
         * @param {RmaRmaManagementV1SaveRmaPostRequest} [rmaRmaManagementV1SaveRmaPutBody] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async rmaRmaManagementV1SaveRmaPut(id: string, rmaRmaManagementV1SaveRmaPutBody?: RmaRmaManagementV1SaveRmaPostRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<RmaDataRmaInterface>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.rmaRmaManagementV1SaveRmaPut(id, rmaRmaManagementV1SaveRmaPutBody, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Delete RMA
         * @summary returns/{id}
         * @param {string} id 
         * @param {RmaRmaManagementV1SaveRmaPostRequest} [rmaRmaRepositoryV1DeleteDeleteBody] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async rmaRmaRepositoryV1DeleteDelete(id: string, rmaRmaRepositoryV1DeleteDeleteBody?: RmaRmaManagementV1SaveRmaPostRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<boolean>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.rmaRmaRepositoryV1DeleteDelete(id, rmaRmaRepositoryV1DeleteDeleteBody, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Return data object for specified RMA id
         * @summary returns/{id}
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async rmaRmaRepositoryV1GetGet(id: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<RmaDataRmaInterface>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.rmaRmaRepositoryV1GetGet(id, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * ReturnsIdApi - factory interface
 * @export
 */
export const ReturnsIdApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = ReturnsIdApiFp(configuration)
    return {
        /**
         * Save RMA
         * @summary returns/{id}
         * @param {string} id 
         * @param {RmaRmaManagementV1SaveRmaPostRequest} [rmaRmaManagementV1SaveRmaPutBody] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        rmaRmaManagementV1SaveRmaPut(id: string, rmaRmaManagementV1SaveRmaPutBody?: RmaRmaManagementV1SaveRmaPostRequest, options?: any): AxiosPromise<RmaDataRmaInterface> {
            return localVarFp.rmaRmaManagementV1SaveRmaPut(id, rmaRmaManagementV1SaveRmaPutBody, options).then((request) => request(axios, basePath));
        },
        /**
         * Delete RMA
         * @summary returns/{id}
         * @param {string} id 
         * @param {RmaRmaManagementV1SaveRmaPostRequest} [rmaRmaRepositoryV1DeleteDeleteBody] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        rmaRmaRepositoryV1DeleteDelete(id: string, rmaRmaRepositoryV1DeleteDeleteBody?: RmaRmaManagementV1SaveRmaPostRequest, options?: any): AxiosPromise<boolean> {
            return localVarFp.rmaRmaRepositoryV1DeleteDelete(id, rmaRmaRepositoryV1DeleteDeleteBody, options).then((request) => request(axios, basePath));
        },
        /**
         * Return data object for specified RMA id
         * @summary returns/{id}
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        rmaRmaRepositoryV1GetGet(id: number, options?: any): AxiosPromise<RmaDataRmaInterface> {
            return localVarFp.rmaRmaRepositoryV1GetGet(id, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * ReturnsIdApi - object-oriented interface
 * @export
 * @class ReturnsIdApi
 * @extends {BaseAPI}
 */
export class ReturnsIdApi extends BaseAPI {
    /**
     * Save RMA
     * @summary returns/{id}
     * @param {string} id 
     * @param {RmaRmaManagementV1SaveRmaPostRequest} [rmaRmaManagementV1SaveRmaPutBody] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ReturnsIdApi
     */
    public rmaRmaManagementV1SaveRmaPut(id: string, rmaRmaManagementV1SaveRmaPutBody?: RmaRmaManagementV1SaveRmaPostRequest, options?: AxiosRequestConfig) {
        return ReturnsIdApiFp(this.configuration).rmaRmaManagementV1SaveRmaPut(id, rmaRmaManagementV1SaveRmaPutBody, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Delete RMA
     * @summary returns/{id}
     * @param {string} id 
     * @param {RmaRmaManagementV1SaveRmaPostRequest} [rmaRmaRepositoryV1DeleteDeleteBody] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ReturnsIdApi
     */
    public rmaRmaRepositoryV1DeleteDelete(id: string, rmaRmaRepositoryV1DeleteDeleteBody?: RmaRmaManagementV1SaveRmaPostRequest, options?: AxiosRequestConfig) {
        return ReturnsIdApiFp(this.configuration).rmaRmaRepositoryV1DeleteDelete(id, rmaRmaRepositoryV1DeleteDeleteBody, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Return data object for specified RMA id
     * @summary returns/{id}
     * @param {number} id 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ReturnsIdApi
     */
    public rmaRmaRepositoryV1GetGet(id: number, options?: AxiosRequestConfig) {
        return ReturnsIdApiFp(this.configuration).rmaRmaRepositoryV1GetGet(id, options).then((request) => request(this.axios, this.basePath));
    }
}


/**
 * ReturnsIdCommentsApi - axios parameter creator
 * @export
 */
export const ReturnsIdCommentsApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Add comment
         * @summary returns/{id}/comments
         * @param {string} id 
         * @param {RmaCommentManagementV1AddCommentPostRequest} [rmaCommentManagementV1AddCommentPostBody] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        rmaCommentManagementV1AddCommentPost: async (id: string, rmaCommentManagementV1AddCommentPostBody?: RmaCommentManagementV1AddCommentPostRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('rmaCommentManagementV1AddCommentPost', 'id', id)
            const localVarPath = `/V1/returns/{id}/comments`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(rmaCommentManagementV1AddCommentPostBody, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Comments list
         * @summary returns/{id}/comments
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        rmaCommentManagementV1CommentsListGet: async (id: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('rmaCommentManagementV1CommentsListGet', 'id', id)
            const localVarPath = `/V1/returns/{id}/comments`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * ReturnsIdCommentsApi - functional programming interface
 * @export
 */
export const ReturnsIdCommentsApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = ReturnsIdCommentsApiAxiosParamCreator(configuration)
    return {
        /**
         * Add comment
         * @summary returns/{id}/comments
         * @param {string} id 
         * @param {RmaCommentManagementV1AddCommentPostRequest} [rmaCommentManagementV1AddCommentPostBody] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async rmaCommentManagementV1AddCommentPost(id: string, rmaCommentManagementV1AddCommentPostBody?: RmaCommentManagementV1AddCommentPostRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<boolean>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.rmaCommentManagementV1AddCommentPost(id, rmaCommentManagementV1AddCommentPostBody, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Comments list
         * @summary returns/{id}/comments
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async rmaCommentManagementV1CommentsListGet(id: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<RmaDataCommentSearchResultInterface>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.rmaCommentManagementV1CommentsListGet(id, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * ReturnsIdCommentsApi - factory interface
 * @export
 */
export const ReturnsIdCommentsApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = ReturnsIdCommentsApiFp(configuration)
    return {
        /**
         * Add comment
         * @summary returns/{id}/comments
         * @param {string} id 
         * @param {RmaCommentManagementV1AddCommentPostRequest} [rmaCommentManagementV1AddCommentPostBody] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        rmaCommentManagementV1AddCommentPost(id: string, rmaCommentManagementV1AddCommentPostBody?: RmaCommentManagementV1AddCommentPostRequest, options?: any): AxiosPromise<boolean> {
            return localVarFp.rmaCommentManagementV1AddCommentPost(id, rmaCommentManagementV1AddCommentPostBody, options).then((request) => request(axios, basePath));
        },
        /**
         * Comments list
         * @summary returns/{id}/comments
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        rmaCommentManagementV1CommentsListGet(id: number, options?: any): AxiosPromise<RmaDataCommentSearchResultInterface> {
            return localVarFp.rmaCommentManagementV1CommentsListGet(id, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * ReturnsIdCommentsApi - object-oriented interface
 * @export
 * @class ReturnsIdCommentsApi
 * @extends {BaseAPI}
 */
export class ReturnsIdCommentsApi extends BaseAPI {
    /**
     * Add comment
     * @summary returns/{id}/comments
     * @param {string} id 
     * @param {RmaCommentManagementV1AddCommentPostRequest} [rmaCommentManagementV1AddCommentPostBody] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ReturnsIdCommentsApi
     */
    public rmaCommentManagementV1AddCommentPost(id: string, rmaCommentManagementV1AddCommentPostBody?: RmaCommentManagementV1AddCommentPostRequest, options?: AxiosRequestConfig) {
        return ReturnsIdCommentsApiFp(this.configuration).rmaCommentManagementV1AddCommentPost(id, rmaCommentManagementV1AddCommentPostBody, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Comments list
     * @summary returns/{id}/comments
     * @param {number} id 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ReturnsIdCommentsApi
     */
    public rmaCommentManagementV1CommentsListGet(id: number, options?: AxiosRequestConfig) {
        return ReturnsIdCommentsApiFp(this.configuration).rmaCommentManagementV1CommentsListGet(id, options).then((request) => request(this.axios, this.basePath));
    }
}


/**
 * ReturnsIdLabelsApi - axios parameter creator
 * @export
 */
export const ReturnsIdLabelsApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Get shipping label int the PDF format
         * @summary returns/{id}/labels
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        rmaTrackManagementV1GetShippingLabelPdfGet: async (id: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('rmaTrackManagementV1GetShippingLabelPdfGet', 'id', id)
            const localVarPath = `/V1/returns/{id}/labels`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * ReturnsIdLabelsApi - functional programming interface
 * @export
 */
export const ReturnsIdLabelsApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = ReturnsIdLabelsApiAxiosParamCreator(configuration)
    return {
        /**
         * Get shipping label int the PDF format
         * @summary returns/{id}/labels
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async rmaTrackManagementV1GetShippingLabelPdfGet(id: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<string>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.rmaTrackManagementV1GetShippingLabelPdfGet(id, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * ReturnsIdLabelsApi - factory interface
 * @export
 */
export const ReturnsIdLabelsApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = ReturnsIdLabelsApiFp(configuration)
    return {
        /**
         * Get shipping label int the PDF format
         * @summary returns/{id}/labels
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        rmaTrackManagementV1GetShippingLabelPdfGet(id: number, options?: any): AxiosPromise<string> {
            return localVarFp.rmaTrackManagementV1GetShippingLabelPdfGet(id, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * ReturnsIdLabelsApi - object-oriented interface
 * @export
 * @class ReturnsIdLabelsApi
 * @extends {BaseAPI}
 */
export class ReturnsIdLabelsApi extends BaseAPI {
    /**
     * Get shipping label int the PDF format
     * @summary returns/{id}/labels
     * @param {number} id 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ReturnsIdLabelsApi
     */
    public rmaTrackManagementV1GetShippingLabelPdfGet(id: number, options?: AxiosRequestConfig) {
        return ReturnsIdLabelsApiFp(this.configuration).rmaTrackManagementV1GetShippingLabelPdfGet(id, options).then((request) => request(this.axios, this.basePath));
    }
}


/**
 * ReturnsIdTrackingNumbersApi - axios parameter creator
 * @export
 */
export const ReturnsIdTrackingNumbersApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Add track
         * @summary returns/{id}/tracking-numbers
         * @param {number} id 
         * @param {RmaTrackManagementV1AddTrackPostRequest} [rmaTrackManagementV1AddTrackPostBody] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        rmaTrackManagementV1AddTrackPost: async (id: number, rmaTrackManagementV1AddTrackPostBody?: RmaTrackManagementV1AddTrackPostRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('rmaTrackManagementV1AddTrackPost', 'id', id)
            const localVarPath = `/V1/returns/{id}/tracking-numbers`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(rmaTrackManagementV1AddTrackPostBody, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Get track list
         * @summary returns/{id}/tracking-numbers
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        rmaTrackManagementV1GetTracksGet: async (id: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('rmaTrackManagementV1GetTracksGet', 'id', id)
            const localVarPath = `/V1/returns/{id}/tracking-numbers`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * ReturnsIdTrackingNumbersApi - functional programming interface
 * @export
 */
export const ReturnsIdTrackingNumbersApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = ReturnsIdTrackingNumbersApiAxiosParamCreator(configuration)
    return {
        /**
         * Add track
         * @summary returns/{id}/tracking-numbers
         * @param {number} id 
         * @param {RmaTrackManagementV1AddTrackPostRequest} [rmaTrackManagementV1AddTrackPostBody] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async rmaTrackManagementV1AddTrackPost(id: number, rmaTrackManagementV1AddTrackPostBody?: RmaTrackManagementV1AddTrackPostRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<boolean>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.rmaTrackManagementV1AddTrackPost(id, rmaTrackManagementV1AddTrackPostBody, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Get track list
         * @summary returns/{id}/tracking-numbers
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async rmaTrackManagementV1GetTracksGet(id: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<RmaDataTrackSearchResultInterface>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.rmaTrackManagementV1GetTracksGet(id, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * ReturnsIdTrackingNumbersApi - factory interface
 * @export
 */
export const ReturnsIdTrackingNumbersApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = ReturnsIdTrackingNumbersApiFp(configuration)
    return {
        /**
         * Add track
         * @summary returns/{id}/tracking-numbers
         * @param {number} id 
         * @param {RmaTrackManagementV1AddTrackPostRequest} [rmaTrackManagementV1AddTrackPostBody] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        rmaTrackManagementV1AddTrackPost(id: number, rmaTrackManagementV1AddTrackPostBody?: RmaTrackManagementV1AddTrackPostRequest, options?: any): AxiosPromise<boolean> {
            return localVarFp.rmaTrackManagementV1AddTrackPost(id, rmaTrackManagementV1AddTrackPostBody, options).then((request) => request(axios, basePath));
        },
        /**
         * Get track list
         * @summary returns/{id}/tracking-numbers
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        rmaTrackManagementV1GetTracksGet(id: number, options?: any): AxiosPromise<RmaDataTrackSearchResultInterface> {
            return localVarFp.rmaTrackManagementV1GetTracksGet(id, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * ReturnsIdTrackingNumbersApi - object-oriented interface
 * @export
 * @class ReturnsIdTrackingNumbersApi
 * @extends {BaseAPI}
 */
export class ReturnsIdTrackingNumbersApi extends BaseAPI {
    /**
     * Add track
     * @summary returns/{id}/tracking-numbers
     * @param {number} id 
     * @param {RmaTrackManagementV1AddTrackPostRequest} [rmaTrackManagementV1AddTrackPostBody] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ReturnsIdTrackingNumbersApi
     */
    public rmaTrackManagementV1AddTrackPost(id: number, rmaTrackManagementV1AddTrackPostBody?: RmaTrackManagementV1AddTrackPostRequest, options?: AxiosRequestConfig) {
        return ReturnsIdTrackingNumbersApiFp(this.configuration).rmaTrackManagementV1AddTrackPost(id, rmaTrackManagementV1AddTrackPostBody, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Get track list
     * @summary returns/{id}/tracking-numbers
     * @param {number} id 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ReturnsIdTrackingNumbersApi
     */
    public rmaTrackManagementV1GetTracksGet(id: number, options?: AxiosRequestConfig) {
        return ReturnsIdTrackingNumbersApiFp(this.configuration).rmaTrackManagementV1GetTracksGet(id, options).then((request) => request(this.axios, this.basePath));
    }
}


/**
 * ReturnsIdTrackingNumbersTrackIdApi - axios parameter creator
 * @export
 */
export const ReturnsIdTrackingNumbersTrackIdApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Remove track by id
         * @summary returns/{id}/tracking-numbers/{trackId}
         * @param {number} id 
         * @param {number} trackId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        rmaTrackManagementV1RemoveTrackByIdDelete: async (id: number, trackId: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('rmaTrackManagementV1RemoveTrackByIdDelete', 'id', id)
            // verify required parameter 'trackId' is not null or undefined
            assertParamExists('rmaTrackManagementV1RemoveTrackByIdDelete', 'trackId', trackId)
            const localVarPath = `/V1/returns/{id}/tracking-numbers/{trackId}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)))
                .replace(`{${"trackId"}}`, encodeURIComponent(String(trackId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * ReturnsIdTrackingNumbersTrackIdApi - functional programming interface
 * @export
 */
export const ReturnsIdTrackingNumbersTrackIdApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = ReturnsIdTrackingNumbersTrackIdApiAxiosParamCreator(configuration)
    return {
        /**
         * Remove track by id
         * @summary returns/{id}/tracking-numbers/{trackId}
         * @param {number} id 
         * @param {number} trackId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async rmaTrackManagementV1RemoveTrackByIdDelete(id: number, trackId: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<boolean>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.rmaTrackManagementV1RemoveTrackByIdDelete(id, trackId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * ReturnsIdTrackingNumbersTrackIdApi - factory interface
 * @export
 */
export const ReturnsIdTrackingNumbersTrackIdApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = ReturnsIdTrackingNumbersTrackIdApiFp(configuration)
    return {
        /**
         * Remove track by id
         * @summary returns/{id}/tracking-numbers/{trackId}
         * @param {number} id 
         * @param {number} trackId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        rmaTrackManagementV1RemoveTrackByIdDelete(id: number, trackId: number, options?: any): AxiosPromise<boolean> {
            return localVarFp.rmaTrackManagementV1RemoveTrackByIdDelete(id, trackId, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * ReturnsIdTrackingNumbersTrackIdApi - object-oriented interface
 * @export
 * @class ReturnsIdTrackingNumbersTrackIdApi
 * @extends {BaseAPI}
 */
export class ReturnsIdTrackingNumbersTrackIdApi extends BaseAPI {
    /**
     * Remove track by id
     * @summary returns/{id}/tracking-numbers/{trackId}
     * @param {number} id 
     * @param {number} trackId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ReturnsIdTrackingNumbersTrackIdApi
     */
    public rmaTrackManagementV1RemoveTrackByIdDelete(id: number, trackId: number, options?: AxiosRequestConfig) {
        return ReturnsIdTrackingNumbersTrackIdApiFp(this.configuration).rmaTrackManagementV1RemoveTrackByIdDelete(id, trackId, options).then((request) => request(this.axios, this.basePath));
    }
}


/**
 * RewardMineUseRewardApi - axios parameter creator
 * @export
 */
export const RewardMineUseRewardApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Set reward points to quote
         * @summary reward/mine/use-reward
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        rewardRewardManagementV1SetPost: async (options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/V1/reward/mine/use-reward`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * RewardMineUseRewardApi - functional programming interface
 * @export
 */
export const RewardMineUseRewardApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = RewardMineUseRewardApiAxiosParamCreator(configuration)
    return {
        /**
         * Set reward points to quote
         * @summary reward/mine/use-reward
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async rewardRewardManagementV1SetPost(options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<boolean>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.rewardRewardManagementV1SetPost(options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * RewardMineUseRewardApi - factory interface
 * @export
 */
export const RewardMineUseRewardApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = RewardMineUseRewardApiFp(configuration)
    return {
        /**
         * Set reward points to quote
         * @summary reward/mine/use-reward
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        rewardRewardManagementV1SetPost(options?: any): AxiosPromise<boolean> {
            return localVarFp.rewardRewardManagementV1SetPost(options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * RewardMineUseRewardApi - object-oriented interface
 * @export
 * @class RewardMineUseRewardApi
 * @extends {BaseAPI}
 */
export class RewardMineUseRewardApi extends BaseAPI {
    /**
     * Set reward points to quote
     * @summary reward/mine/use-reward
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof RewardMineUseRewardApi
     */
    public rewardRewardManagementV1SetPost(options?: AxiosRequestConfig) {
        return RewardMineUseRewardApiFp(this.configuration).rewardRewardManagementV1SetPost(options).then((request) => request(this.axios, this.basePath));
    }
}


/**
 * SalesRulesApi - axios parameter creator
 * @export
 */
export const SalesRulesApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Save sales rule.
         * @summary salesRules
         * @param {SalesRuleRuleRepositoryV1SavePostRequest} [salesRuleRuleRepositoryV1SavePostBody] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        salesRuleRuleRepositoryV1SavePost: async (salesRuleRuleRepositoryV1SavePostBody?: SalesRuleRuleRepositoryV1SavePostRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/V1/salesRules`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(salesRuleRuleRepositoryV1SavePostBody, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * SalesRulesApi - functional programming interface
 * @export
 */
export const SalesRulesApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = SalesRulesApiAxiosParamCreator(configuration)
    return {
        /**
         * Save sales rule.
         * @summary salesRules
         * @param {SalesRuleRuleRepositoryV1SavePostRequest} [salesRuleRuleRepositoryV1SavePostBody] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async salesRuleRuleRepositoryV1SavePost(salesRuleRuleRepositoryV1SavePostBody?: SalesRuleRuleRepositoryV1SavePostRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<SalesRuleDataRuleInterface>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.salesRuleRuleRepositoryV1SavePost(salesRuleRuleRepositoryV1SavePostBody, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * SalesRulesApi - factory interface
 * @export
 */
export const SalesRulesApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = SalesRulesApiFp(configuration)
    return {
        /**
         * Save sales rule.
         * @summary salesRules
         * @param {SalesRuleRuleRepositoryV1SavePostRequest} [salesRuleRuleRepositoryV1SavePostBody] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        salesRuleRuleRepositoryV1SavePost(salesRuleRuleRepositoryV1SavePostBody?: SalesRuleRuleRepositoryV1SavePostRequest, options?: any): AxiosPromise<SalesRuleDataRuleInterface> {
            return localVarFp.salesRuleRuleRepositoryV1SavePost(salesRuleRuleRepositoryV1SavePostBody, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * SalesRulesApi - object-oriented interface
 * @export
 * @class SalesRulesApi
 * @extends {BaseAPI}
 */
export class SalesRulesApi extends BaseAPI {
    /**
     * Save sales rule.
     * @summary salesRules
     * @param {SalesRuleRuleRepositoryV1SavePostRequest} [salesRuleRuleRepositoryV1SavePostBody] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SalesRulesApi
     */
    public salesRuleRuleRepositoryV1SavePost(salesRuleRuleRepositoryV1SavePostBody?: SalesRuleRuleRepositoryV1SavePostRequest, options?: AxiosRequestConfig) {
        return SalesRulesApiFp(this.configuration).salesRuleRuleRepositoryV1SavePost(salesRuleRuleRepositoryV1SavePostBody, options).then((request) => request(this.axios, this.basePath));
    }
}


/**
 * SalesRulesRuleIdApi - axios parameter creator
 * @export
 */
export const SalesRulesRuleIdApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Delete rule by ID.
         * @summary salesRules/{ruleId}
         * @param {number} ruleId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        salesRuleRuleRepositoryV1DeleteByIdDelete: async (ruleId: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'ruleId' is not null or undefined
            assertParamExists('salesRuleRuleRepositoryV1DeleteByIdDelete', 'ruleId', ruleId)
            const localVarPath = `/V1/salesRules/{ruleId}`
                .replace(`{${"ruleId"}}`, encodeURIComponent(String(ruleId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Get rule by ID.
         * @summary salesRules/{ruleId}
         * @param {number} ruleId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        salesRuleRuleRepositoryV1GetByIdGet: async (ruleId: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'ruleId' is not null or undefined
            assertParamExists('salesRuleRuleRepositoryV1GetByIdGet', 'ruleId', ruleId)
            const localVarPath = `/V1/salesRules/{ruleId}`
                .replace(`{${"ruleId"}}`, encodeURIComponent(String(ruleId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Save sales rule.
         * @summary salesRules/{ruleId}
         * @param {string} ruleId 
         * @param {SalesRuleRuleRepositoryV1SavePostRequest} [salesRuleRuleRepositoryV1SavePutBody] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        salesRuleRuleRepositoryV1SavePut: async (ruleId: string, salesRuleRuleRepositoryV1SavePutBody?: SalesRuleRuleRepositoryV1SavePostRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'ruleId' is not null or undefined
            assertParamExists('salesRuleRuleRepositoryV1SavePut', 'ruleId', ruleId)
            const localVarPath = `/V1/salesRules/{ruleId}`
                .replace(`{${"ruleId"}}`, encodeURIComponent(String(ruleId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(salesRuleRuleRepositoryV1SavePutBody, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * SalesRulesRuleIdApi - functional programming interface
 * @export
 */
export const SalesRulesRuleIdApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = SalesRulesRuleIdApiAxiosParamCreator(configuration)
    return {
        /**
         * Delete rule by ID.
         * @summary salesRules/{ruleId}
         * @param {number} ruleId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async salesRuleRuleRepositoryV1DeleteByIdDelete(ruleId: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<boolean>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.salesRuleRuleRepositoryV1DeleteByIdDelete(ruleId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Get rule by ID.
         * @summary salesRules/{ruleId}
         * @param {number} ruleId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async salesRuleRuleRepositoryV1GetByIdGet(ruleId: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<SalesRuleDataRuleInterface>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.salesRuleRuleRepositoryV1GetByIdGet(ruleId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Save sales rule.
         * @summary salesRules/{ruleId}
         * @param {string} ruleId 
         * @param {SalesRuleRuleRepositoryV1SavePostRequest} [salesRuleRuleRepositoryV1SavePutBody] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async salesRuleRuleRepositoryV1SavePut(ruleId: string, salesRuleRuleRepositoryV1SavePutBody?: SalesRuleRuleRepositoryV1SavePostRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<SalesRuleDataRuleInterface>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.salesRuleRuleRepositoryV1SavePut(ruleId, salesRuleRuleRepositoryV1SavePutBody, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * SalesRulesRuleIdApi - factory interface
 * @export
 */
export const SalesRulesRuleIdApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = SalesRulesRuleIdApiFp(configuration)
    return {
        /**
         * Delete rule by ID.
         * @summary salesRules/{ruleId}
         * @param {number} ruleId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        salesRuleRuleRepositoryV1DeleteByIdDelete(ruleId: number, options?: any): AxiosPromise<boolean> {
            return localVarFp.salesRuleRuleRepositoryV1DeleteByIdDelete(ruleId, options).then((request) => request(axios, basePath));
        },
        /**
         * Get rule by ID.
         * @summary salesRules/{ruleId}
         * @param {number} ruleId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        salesRuleRuleRepositoryV1GetByIdGet(ruleId: number, options?: any): AxiosPromise<SalesRuleDataRuleInterface> {
            return localVarFp.salesRuleRuleRepositoryV1GetByIdGet(ruleId, options).then((request) => request(axios, basePath));
        },
        /**
         * Save sales rule.
         * @summary salesRules/{ruleId}
         * @param {string} ruleId 
         * @param {SalesRuleRuleRepositoryV1SavePostRequest} [salesRuleRuleRepositoryV1SavePutBody] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        salesRuleRuleRepositoryV1SavePut(ruleId: string, salesRuleRuleRepositoryV1SavePutBody?: SalesRuleRuleRepositoryV1SavePostRequest, options?: any): AxiosPromise<SalesRuleDataRuleInterface> {
            return localVarFp.salesRuleRuleRepositoryV1SavePut(ruleId, salesRuleRuleRepositoryV1SavePutBody, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * SalesRulesRuleIdApi - object-oriented interface
 * @export
 * @class SalesRulesRuleIdApi
 * @extends {BaseAPI}
 */
export class SalesRulesRuleIdApi extends BaseAPI {
    /**
     * Delete rule by ID.
     * @summary salesRules/{ruleId}
     * @param {number} ruleId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SalesRulesRuleIdApi
     */
    public salesRuleRuleRepositoryV1DeleteByIdDelete(ruleId: number, options?: AxiosRequestConfig) {
        return SalesRulesRuleIdApiFp(this.configuration).salesRuleRuleRepositoryV1DeleteByIdDelete(ruleId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Get rule by ID.
     * @summary salesRules/{ruleId}
     * @param {number} ruleId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SalesRulesRuleIdApi
     */
    public salesRuleRuleRepositoryV1GetByIdGet(ruleId: number, options?: AxiosRequestConfig) {
        return SalesRulesRuleIdApiFp(this.configuration).salesRuleRuleRepositoryV1GetByIdGet(ruleId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Save sales rule.
     * @summary salesRules/{ruleId}
     * @param {string} ruleId 
     * @param {SalesRuleRuleRepositoryV1SavePostRequest} [salesRuleRuleRepositoryV1SavePutBody] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SalesRulesRuleIdApi
     */
    public salesRuleRuleRepositoryV1SavePut(ruleId: string, salesRuleRuleRepositoryV1SavePutBody?: SalesRuleRuleRepositoryV1SavePostRequest, options?: AxiosRequestConfig) {
        return SalesRulesRuleIdApiFp(this.configuration).salesRuleRuleRepositoryV1SavePut(ruleId, salesRuleRuleRepositoryV1SavePutBody, options).then((request) => request(this.axios, this.basePath));
    }
}


/**
 * SalesRulesSearchApi - axios parameter creator
 * @export
 */
export const SalesRulesSearchApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Retrieve sales rules that match te specified criteria. This call returns an array of objects, but detailed information about each object’s attributes might not be included. See http://devdocs.magento.com/codelinks/attributes.html#RuleRepositoryInterface to determine which call to use to get detailed information about all attributes for an object.
         * @summary salesRules/search
         * @param {string} [searchCriteriaFilterGroups0Filters0Field] Field
         * @param {string} [searchCriteriaFilterGroups0Filters0Value] Value
         * @param {string} [searchCriteriaFilterGroups0Filters0ConditionType] Condition type
         * @param {string} [searchCriteriaSortOrders0Field] Sorting field.
         * @param {string} [searchCriteriaSortOrders0Direction] Sorting direction.
         * @param {number} [searchCriteriaPageSize] Page size.
         * @param {number} [searchCriteriaCurrentPage] Current page.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        salesRuleRuleRepositoryV1GetListGet: async (searchCriteriaFilterGroups0Filters0Field?: string, searchCriteriaFilterGroups0Filters0Value?: string, searchCriteriaFilterGroups0Filters0ConditionType?: string, searchCriteriaSortOrders0Field?: string, searchCriteriaSortOrders0Direction?: string, searchCriteriaPageSize?: number, searchCriteriaCurrentPage?: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/V1/salesRules/search`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (searchCriteriaFilterGroups0Filters0Field !== undefined) {
                localVarQueryParameter['searchCriteria[filterGroups][0][filters][0][field]'] = searchCriteriaFilterGroups0Filters0Field;
            }

            if (searchCriteriaFilterGroups0Filters0Value !== undefined) {
                localVarQueryParameter['searchCriteria[filterGroups][0][filters][0][value]'] = searchCriteriaFilterGroups0Filters0Value;
            }

            if (searchCriteriaFilterGroups0Filters0ConditionType !== undefined) {
                localVarQueryParameter['searchCriteria[filterGroups][0][filters][0][conditionType]'] = searchCriteriaFilterGroups0Filters0ConditionType;
            }

            if (searchCriteriaSortOrders0Field !== undefined) {
                localVarQueryParameter['searchCriteria[sortOrders][0][field]'] = searchCriteriaSortOrders0Field;
            }

            if (searchCriteriaSortOrders0Direction !== undefined) {
                localVarQueryParameter['searchCriteria[sortOrders][0][direction]'] = searchCriteriaSortOrders0Direction;
            }

            if (searchCriteriaPageSize !== undefined) {
                localVarQueryParameter['searchCriteria[pageSize]'] = searchCriteriaPageSize;
            }

            if (searchCriteriaCurrentPage !== undefined) {
                localVarQueryParameter['searchCriteria[currentPage]'] = searchCriteriaCurrentPage;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * SalesRulesSearchApi - functional programming interface
 * @export
 */
export const SalesRulesSearchApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = SalesRulesSearchApiAxiosParamCreator(configuration)
    return {
        /**
         * Retrieve sales rules that match te specified criteria. This call returns an array of objects, but detailed information about each object’s attributes might not be included. See http://devdocs.magento.com/codelinks/attributes.html#RuleRepositoryInterface to determine which call to use to get detailed information about all attributes for an object.
         * @summary salesRules/search
         * @param {string} [searchCriteriaFilterGroups0Filters0Field] Field
         * @param {string} [searchCriteriaFilterGroups0Filters0Value] Value
         * @param {string} [searchCriteriaFilterGroups0Filters0ConditionType] Condition type
         * @param {string} [searchCriteriaSortOrders0Field] Sorting field.
         * @param {string} [searchCriteriaSortOrders0Direction] Sorting direction.
         * @param {number} [searchCriteriaPageSize] Page size.
         * @param {number} [searchCriteriaCurrentPage] Current page.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async salesRuleRuleRepositoryV1GetListGet(searchCriteriaFilterGroups0Filters0Field?: string, searchCriteriaFilterGroups0Filters0Value?: string, searchCriteriaFilterGroups0Filters0ConditionType?: string, searchCriteriaSortOrders0Field?: string, searchCriteriaSortOrders0Direction?: string, searchCriteriaPageSize?: number, searchCriteriaCurrentPage?: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<SalesRuleDataRuleSearchResultInterface>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.salesRuleRuleRepositoryV1GetListGet(searchCriteriaFilterGroups0Filters0Field, searchCriteriaFilterGroups0Filters0Value, searchCriteriaFilterGroups0Filters0ConditionType, searchCriteriaSortOrders0Field, searchCriteriaSortOrders0Direction, searchCriteriaPageSize, searchCriteriaCurrentPage, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * SalesRulesSearchApi - factory interface
 * @export
 */
export const SalesRulesSearchApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = SalesRulesSearchApiFp(configuration)
    return {
        /**
         * Retrieve sales rules that match te specified criteria. This call returns an array of objects, but detailed information about each object’s attributes might not be included. See http://devdocs.magento.com/codelinks/attributes.html#RuleRepositoryInterface to determine which call to use to get detailed information about all attributes for an object.
         * @summary salesRules/search
         * @param {string} [searchCriteriaFilterGroups0Filters0Field] Field
         * @param {string} [searchCriteriaFilterGroups0Filters0Value] Value
         * @param {string} [searchCriteriaFilterGroups0Filters0ConditionType] Condition type
         * @param {string} [searchCriteriaSortOrders0Field] Sorting field.
         * @param {string} [searchCriteriaSortOrders0Direction] Sorting direction.
         * @param {number} [searchCriteriaPageSize] Page size.
         * @param {number} [searchCriteriaCurrentPage] Current page.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        salesRuleRuleRepositoryV1GetListGet(searchCriteriaFilterGroups0Filters0Field?: string, searchCriteriaFilterGroups0Filters0Value?: string, searchCriteriaFilterGroups0Filters0ConditionType?: string, searchCriteriaSortOrders0Field?: string, searchCriteriaSortOrders0Direction?: string, searchCriteriaPageSize?: number, searchCriteriaCurrentPage?: number, options?: any): AxiosPromise<SalesRuleDataRuleSearchResultInterface> {
            return localVarFp.salesRuleRuleRepositoryV1GetListGet(searchCriteriaFilterGroups0Filters0Field, searchCriteriaFilterGroups0Filters0Value, searchCriteriaFilterGroups0Filters0ConditionType, searchCriteriaSortOrders0Field, searchCriteriaSortOrders0Direction, searchCriteriaPageSize, searchCriteriaCurrentPage, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * SalesRulesSearchApi - object-oriented interface
 * @export
 * @class SalesRulesSearchApi
 * @extends {BaseAPI}
 */
export class SalesRulesSearchApi extends BaseAPI {
    /**
     * Retrieve sales rules that match te specified criteria. This call returns an array of objects, but detailed information about each object’s attributes might not be included. See http://devdocs.magento.com/codelinks/attributes.html#RuleRepositoryInterface to determine which call to use to get detailed information about all attributes for an object.
     * @summary salesRules/search
     * @param {string} [searchCriteriaFilterGroups0Filters0Field] Field
     * @param {string} [searchCriteriaFilterGroups0Filters0Value] Value
     * @param {string} [searchCriteriaFilterGroups0Filters0ConditionType] Condition type
     * @param {string} [searchCriteriaSortOrders0Field] Sorting field.
     * @param {string} [searchCriteriaSortOrders0Direction] Sorting direction.
     * @param {number} [searchCriteriaPageSize] Page size.
     * @param {number} [searchCriteriaCurrentPage] Current page.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SalesRulesSearchApi
     */
    public salesRuleRuleRepositoryV1GetListGet(searchCriteriaFilterGroups0Filters0Field?: string, searchCriteriaFilterGroups0Filters0Value?: string, searchCriteriaFilterGroups0Filters0ConditionType?: string, searchCriteriaSortOrders0Field?: string, searchCriteriaSortOrders0Direction?: string, searchCriteriaPageSize?: number, searchCriteriaCurrentPage?: number, options?: AxiosRequestConfig) {
        return SalesRulesSearchApiFp(this.configuration).salesRuleRuleRepositoryV1GetListGet(searchCriteriaFilterGroups0Filters0Field, searchCriteriaFilterGroups0Filters0Value, searchCriteriaFilterGroups0Filters0ConditionType, searchCriteriaSortOrders0Field, searchCriteriaSortOrders0Direction, searchCriteriaPageSize, searchCriteriaCurrentPage, options).then((request) => request(this.axios, this.basePath));
    }
}


/**
 * SearchApi - axios parameter creator
 * @export
 */
export const SearchApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Make Full Text Search and return found Documents
         * @summary search
         * @param {string} [searchCriteriaRequestName] 
         * @param {string} [searchCriteriaFilterGroups0Filters0Field] Field
         * @param {string} [searchCriteriaFilterGroups0Filters0Value] Value
         * @param {string} [searchCriteriaFilterGroups0Filters0ConditionType] Condition type
         * @param {string} [searchCriteriaSortOrders0Field] Sorting field.
         * @param {string} [searchCriteriaSortOrders0Direction] Sorting direction.
         * @param {number} [searchCriteriaPageSize] Page size.
         * @param {number} [searchCriteriaCurrentPage] Current page.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        searchV1SearchGet: async (searchCriteriaRequestName?: string, searchCriteriaFilterGroups0Filters0Field?: string, searchCriteriaFilterGroups0Filters0Value?: string, searchCriteriaFilterGroups0Filters0ConditionType?: string, searchCriteriaSortOrders0Field?: string, searchCriteriaSortOrders0Direction?: string, searchCriteriaPageSize?: number, searchCriteriaCurrentPage?: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/V1/search`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (searchCriteriaRequestName !== undefined) {
                localVarQueryParameter['searchCriteria[requestName]'] = searchCriteriaRequestName;
            }

            if (searchCriteriaFilterGroups0Filters0Field !== undefined) {
                localVarQueryParameter['searchCriteria[filterGroups][0][filters][0][field]'] = searchCriteriaFilterGroups0Filters0Field;
            }

            if (searchCriteriaFilterGroups0Filters0Value !== undefined) {
                localVarQueryParameter['searchCriteria[filterGroups][0][filters][0][value]'] = searchCriteriaFilterGroups0Filters0Value;
            }

            if (searchCriteriaFilterGroups0Filters0ConditionType !== undefined) {
                localVarQueryParameter['searchCriteria[filterGroups][0][filters][0][conditionType]'] = searchCriteriaFilterGroups0Filters0ConditionType;
            }

            if (searchCriteriaSortOrders0Field !== undefined) {
                localVarQueryParameter['searchCriteria[sortOrders][0][field]'] = searchCriteriaSortOrders0Field;
            }

            if (searchCriteriaSortOrders0Direction !== undefined) {
                localVarQueryParameter['searchCriteria[sortOrders][0][direction]'] = searchCriteriaSortOrders0Direction;
            }

            if (searchCriteriaPageSize !== undefined) {
                localVarQueryParameter['searchCriteria[pageSize]'] = searchCriteriaPageSize;
            }

            if (searchCriteriaCurrentPage !== undefined) {
                localVarQueryParameter['searchCriteria[currentPage]'] = searchCriteriaCurrentPage;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * SearchApi - functional programming interface
 * @export
 */
export const SearchApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = SearchApiAxiosParamCreator(configuration)
    return {
        /**
         * Make Full Text Search and return found Documents
         * @summary search
         * @param {string} [searchCriteriaRequestName] 
         * @param {string} [searchCriteriaFilterGroups0Filters0Field] Field
         * @param {string} [searchCriteriaFilterGroups0Filters0Value] Value
         * @param {string} [searchCriteriaFilterGroups0Filters0ConditionType] Condition type
         * @param {string} [searchCriteriaSortOrders0Field] Sorting field.
         * @param {string} [searchCriteriaSortOrders0Direction] Sorting direction.
         * @param {number} [searchCriteriaPageSize] Page size.
         * @param {number} [searchCriteriaCurrentPage] Current page.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async searchV1SearchGet(searchCriteriaRequestName?: string, searchCriteriaFilterGroups0Filters0Field?: string, searchCriteriaFilterGroups0Filters0Value?: string, searchCriteriaFilterGroups0Filters0ConditionType?: string, searchCriteriaSortOrders0Field?: string, searchCriteriaSortOrders0Direction?: string, searchCriteriaPageSize?: number, searchCriteriaCurrentPage?: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<FrameworkSearchSearchResultInterface>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.searchV1SearchGet(searchCriteriaRequestName, searchCriteriaFilterGroups0Filters0Field, searchCriteriaFilterGroups0Filters0Value, searchCriteriaFilterGroups0Filters0ConditionType, searchCriteriaSortOrders0Field, searchCriteriaSortOrders0Direction, searchCriteriaPageSize, searchCriteriaCurrentPage, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * SearchApi - factory interface
 * @export
 */
export const SearchApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = SearchApiFp(configuration)
    return {
        /**
         * Make Full Text Search and return found Documents
         * @summary search
         * @param {string} [searchCriteriaRequestName] 
         * @param {string} [searchCriteriaFilterGroups0Filters0Field] Field
         * @param {string} [searchCriteriaFilterGroups0Filters0Value] Value
         * @param {string} [searchCriteriaFilterGroups0Filters0ConditionType] Condition type
         * @param {string} [searchCriteriaSortOrders0Field] Sorting field.
         * @param {string} [searchCriteriaSortOrders0Direction] Sorting direction.
         * @param {number} [searchCriteriaPageSize] Page size.
         * @param {number} [searchCriteriaCurrentPage] Current page.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        searchV1SearchGet(searchCriteriaRequestName?: string, searchCriteriaFilterGroups0Filters0Field?: string, searchCriteriaFilterGroups0Filters0Value?: string, searchCriteriaFilterGroups0Filters0ConditionType?: string, searchCriteriaSortOrders0Field?: string, searchCriteriaSortOrders0Direction?: string, searchCriteriaPageSize?: number, searchCriteriaCurrentPage?: number, options?: any): AxiosPromise<FrameworkSearchSearchResultInterface> {
            return localVarFp.searchV1SearchGet(searchCriteriaRequestName, searchCriteriaFilterGroups0Filters0Field, searchCriteriaFilterGroups0Filters0Value, searchCriteriaFilterGroups0Filters0ConditionType, searchCriteriaSortOrders0Field, searchCriteriaSortOrders0Direction, searchCriteriaPageSize, searchCriteriaCurrentPage, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * SearchApi - object-oriented interface
 * @export
 * @class SearchApi
 * @extends {BaseAPI}
 */
export class SearchApi extends BaseAPI {
    /**
     * Make Full Text Search and return found Documents
     * @summary search
     * @param {string} [searchCriteriaRequestName] 
     * @param {string} [searchCriteriaFilterGroups0Filters0Field] Field
     * @param {string} [searchCriteriaFilterGroups0Filters0Value] Value
     * @param {string} [searchCriteriaFilterGroups0Filters0ConditionType] Condition type
     * @param {string} [searchCriteriaSortOrders0Field] Sorting field.
     * @param {string} [searchCriteriaSortOrders0Direction] Sorting direction.
     * @param {number} [searchCriteriaPageSize] Page size.
     * @param {number} [searchCriteriaCurrentPage] Current page.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SearchApi
     */
    public searchV1SearchGet(searchCriteriaRequestName?: string, searchCriteriaFilterGroups0Filters0Field?: string, searchCriteriaFilterGroups0Filters0Value?: string, searchCriteriaFilterGroups0Filters0ConditionType?: string, searchCriteriaSortOrders0Field?: string, searchCriteriaSortOrders0Direction?: string, searchCriteriaPageSize?: number, searchCriteriaCurrentPage?: number, options?: AxiosRequestConfig) {
        return SearchApiFp(this.configuration).searchV1SearchGet(searchCriteriaRequestName, searchCriteriaFilterGroups0Filters0Field, searchCriteriaFilterGroups0Filters0Value, searchCriteriaFilterGroups0Filters0ConditionType, searchCriteriaSortOrders0Field, searchCriteriaSortOrders0Direction, searchCriteriaPageSize, searchCriteriaCurrentPage, options).then((request) => request(this.axios, this.basePath));
    }
}


/**
 * SharedCatalogApi - axios parameter creator
 * @export
 */
export const SharedCatalogApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Return the list of shared catalogs and basic properties for each catalog.
         * @summary sharedCatalog/
         * @param {string} [searchCriteriaFilterGroups0Filters0Field] Field
         * @param {string} [searchCriteriaFilterGroups0Filters0Value] Value
         * @param {string} [searchCriteriaFilterGroups0Filters0ConditionType] Condition type
         * @param {string} [searchCriteriaSortOrders0Field] Sorting field.
         * @param {string} [searchCriteriaSortOrders0Direction] Sorting direction.
         * @param {number} [searchCriteriaPageSize] Page size.
         * @param {number} [searchCriteriaCurrentPage] Current page.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        sharedCatalogSharedCatalogRepositoryV1GetListGet: async (searchCriteriaFilterGroups0Filters0Field?: string, searchCriteriaFilterGroups0Filters0Value?: string, searchCriteriaFilterGroups0Filters0ConditionType?: string, searchCriteriaSortOrders0Field?: string, searchCriteriaSortOrders0Direction?: string, searchCriteriaPageSize?: number, searchCriteriaCurrentPage?: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/V1/sharedCatalog/`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (searchCriteriaFilterGroups0Filters0Field !== undefined) {
                localVarQueryParameter['searchCriteria[filterGroups][0][filters][0][field]'] = searchCriteriaFilterGroups0Filters0Field;
            }

            if (searchCriteriaFilterGroups0Filters0Value !== undefined) {
                localVarQueryParameter['searchCriteria[filterGroups][0][filters][0][value]'] = searchCriteriaFilterGroups0Filters0Value;
            }

            if (searchCriteriaFilterGroups0Filters0ConditionType !== undefined) {
                localVarQueryParameter['searchCriteria[filterGroups][0][filters][0][conditionType]'] = searchCriteriaFilterGroups0Filters0ConditionType;
            }

            if (searchCriteriaSortOrders0Field !== undefined) {
                localVarQueryParameter['searchCriteria[sortOrders][0][field]'] = searchCriteriaSortOrders0Field;
            }

            if (searchCriteriaSortOrders0Direction !== undefined) {
                localVarQueryParameter['searchCriteria[sortOrders][0][direction]'] = searchCriteriaSortOrders0Direction;
            }

            if (searchCriteriaPageSize !== undefined) {
                localVarQueryParameter['searchCriteria[pageSize]'] = searchCriteriaPageSize;
            }

            if (searchCriteriaCurrentPage !== undefined) {
                localVarQueryParameter['searchCriteria[currentPage]'] = searchCriteriaCurrentPage;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Create or update Shared Catalog service.
         * @summary sharedCatalog
         * @param {SharedCatalogSharedCatalogRepositoryV1SavePostRequest} [sharedCatalogSharedCatalogRepositoryV1SavePostBody] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        sharedCatalogSharedCatalogRepositoryV1SavePost: async (sharedCatalogSharedCatalogRepositoryV1SavePostBody?: SharedCatalogSharedCatalogRepositoryV1SavePostRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/V1/sharedCatalog`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(sharedCatalogSharedCatalogRepositoryV1SavePostBody, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * SharedCatalogApi - functional programming interface
 * @export
 */
export const SharedCatalogApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = SharedCatalogApiAxiosParamCreator(configuration)
    return {
        /**
         * Return the list of shared catalogs and basic properties for each catalog.
         * @summary sharedCatalog/
         * @param {string} [searchCriteriaFilterGroups0Filters0Field] Field
         * @param {string} [searchCriteriaFilterGroups0Filters0Value] Value
         * @param {string} [searchCriteriaFilterGroups0Filters0ConditionType] Condition type
         * @param {string} [searchCriteriaSortOrders0Field] Sorting field.
         * @param {string} [searchCriteriaSortOrders0Direction] Sorting direction.
         * @param {number} [searchCriteriaPageSize] Page size.
         * @param {number} [searchCriteriaCurrentPage] Current page.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async sharedCatalogSharedCatalogRepositoryV1GetListGet(searchCriteriaFilterGroups0Filters0Field?: string, searchCriteriaFilterGroups0Filters0Value?: string, searchCriteriaFilterGroups0Filters0ConditionType?: string, searchCriteriaSortOrders0Field?: string, searchCriteriaSortOrders0Direction?: string, searchCriteriaPageSize?: number, searchCriteriaCurrentPage?: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<SharedCatalogDataSearchResultsInterface>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.sharedCatalogSharedCatalogRepositoryV1GetListGet(searchCriteriaFilterGroups0Filters0Field, searchCriteriaFilterGroups0Filters0Value, searchCriteriaFilterGroups0Filters0ConditionType, searchCriteriaSortOrders0Field, searchCriteriaSortOrders0Direction, searchCriteriaPageSize, searchCriteriaCurrentPage, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Create or update Shared Catalog service.
         * @summary sharedCatalog
         * @param {SharedCatalogSharedCatalogRepositoryV1SavePostRequest} [sharedCatalogSharedCatalogRepositoryV1SavePostBody] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async sharedCatalogSharedCatalogRepositoryV1SavePost(sharedCatalogSharedCatalogRepositoryV1SavePostBody?: SharedCatalogSharedCatalogRepositoryV1SavePostRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<number>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.sharedCatalogSharedCatalogRepositoryV1SavePost(sharedCatalogSharedCatalogRepositoryV1SavePostBody, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * SharedCatalogApi - factory interface
 * @export
 */
export const SharedCatalogApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = SharedCatalogApiFp(configuration)
    return {
        /**
         * Return the list of shared catalogs and basic properties for each catalog.
         * @summary sharedCatalog/
         * @param {string} [searchCriteriaFilterGroups0Filters0Field] Field
         * @param {string} [searchCriteriaFilterGroups0Filters0Value] Value
         * @param {string} [searchCriteriaFilterGroups0Filters0ConditionType] Condition type
         * @param {string} [searchCriteriaSortOrders0Field] Sorting field.
         * @param {string} [searchCriteriaSortOrders0Direction] Sorting direction.
         * @param {number} [searchCriteriaPageSize] Page size.
         * @param {number} [searchCriteriaCurrentPage] Current page.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        sharedCatalogSharedCatalogRepositoryV1GetListGet(searchCriteriaFilterGroups0Filters0Field?: string, searchCriteriaFilterGroups0Filters0Value?: string, searchCriteriaFilterGroups0Filters0ConditionType?: string, searchCriteriaSortOrders0Field?: string, searchCriteriaSortOrders0Direction?: string, searchCriteriaPageSize?: number, searchCriteriaCurrentPage?: number, options?: any): AxiosPromise<SharedCatalogDataSearchResultsInterface> {
            return localVarFp.sharedCatalogSharedCatalogRepositoryV1GetListGet(searchCriteriaFilterGroups0Filters0Field, searchCriteriaFilterGroups0Filters0Value, searchCriteriaFilterGroups0Filters0ConditionType, searchCriteriaSortOrders0Field, searchCriteriaSortOrders0Direction, searchCriteriaPageSize, searchCriteriaCurrentPage, options).then((request) => request(axios, basePath));
        },
        /**
         * Create or update Shared Catalog service.
         * @summary sharedCatalog
         * @param {SharedCatalogSharedCatalogRepositoryV1SavePostRequest} [sharedCatalogSharedCatalogRepositoryV1SavePostBody] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        sharedCatalogSharedCatalogRepositoryV1SavePost(sharedCatalogSharedCatalogRepositoryV1SavePostBody?: SharedCatalogSharedCatalogRepositoryV1SavePostRequest, options?: any): AxiosPromise<number> {
            return localVarFp.sharedCatalogSharedCatalogRepositoryV1SavePost(sharedCatalogSharedCatalogRepositoryV1SavePostBody, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * SharedCatalogApi - object-oriented interface
 * @export
 * @class SharedCatalogApi
 * @extends {BaseAPI}
 */
export class SharedCatalogApi extends BaseAPI {
    /**
     * Return the list of shared catalogs and basic properties for each catalog.
     * @summary sharedCatalog/
     * @param {string} [searchCriteriaFilterGroups0Filters0Field] Field
     * @param {string} [searchCriteriaFilterGroups0Filters0Value] Value
     * @param {string} [searchCriteriaFilterGroups0Filters0ConditionType] Condition type
     * @param {string} [searchCriteriaSortOrders0Field] Sorting field.
     * @param {string} [searchCriteriaSortOrders0Direction] Sorting direction.
     * @param {number} [searchCriteriaPageSize] Page size.
     * @param {number} [searchCriteriaCurrentPage] Current page.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SharedCatalogApi
     */
    public sharedCatalogSharedCatalogRepositoryV1GetListGet(searchCriteriaFilterGroups0Filters0Field?: string, searchCriteriaFilterGroups0Filters0Value?: string, searchCriteriaFilterGroups0Filters0ConditionType?: string, searchCriteriaSortOrders0Field?: string, searchCriteriaSortOrders0Direction?: string, searchCriteriaPageSize?: number, searchCriteriaCurrentPage?: number, options?: AxiosRequestConfig) {
        return SharedCatalogApiFp(this.configuration).sharedCatalogSharedCatalogRepositoryV1GetListGet(searchCriteriaFilterGroups0Filters0Field, searchCriteriaFilterGroups0Filters0Value, searchCriteriaFilterGroups0Filters0ConditionType, searchCriteriaSortOrders0Field, searchCriteriaSortOrders0Direction, searchCriteriaPageSize, searchCriteriaCurrentPage, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Create or update Shared Catalog service.
     * @summary sharedCatalog
     * @param {SharedCatalogSharedCatalogRepositoryV1SavePostRequest} [sharedCatalogSharedCatalogRepositoryV1SavePostBody] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SharedCatalogApi
     */
    public sharedCatalogSharedCatalogRepositoryV1SavePost(sharedCatalogSharedCatalogRepositoryV1SavePostBody?: SharedCatalogSharedCatalogRepositoryV1SavePostRequest, options?: AxiosRequestConfig) {
        return SharedCatalogApiFp(this.configuration).sharedCatalogSharedCatalogRepositoryV1SavePost(sharedCatalogSharedCatalogRepositoryV1SavePostBody, options).then((request) => request(this.axios, this.basePath));
    }
}


/**
 * SharedCatalogIdApi - axios parameter creator
 * @export
 */
export const SharedCatalogIdApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Create or update Shared Catalog service.
         * @summary sharedCatalog/{id}
         * @param {string} id 
         * @param {SharedCatalogSharedCatalogRepositoryV1SavePostRequest} [sharedCatalogSharedCatalogRepositoryV1SavePutBody] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        sharedCatalogSharedCatalogRepositoryV1SavePut: async (id: string, sharedCatalogSharedCatalogRepositoryV1SavePutBody?: SharedCatalogSharedCatalogRepositoryV1SavePostRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('sharedCatalogSharedCatalogRepositoryV1SavePut', 'id', id)
            const localVarPath = `/V1/sharedCatalog/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(sharedCatalogSharedCatalogRepositoryV1SavePutBody, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * SharedCatalogIdApi - functional programming interface
 * @export
 */
export const SharedCatalogIdApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = SharedCatalogIdApiAxiosParamCreator(configuration)
    return {
        /**
         * Create or update Shared Catalog service.
         * @summary sharedCatalog/{id}
         * @param {string} id 
         * @param {SharedCatalogSharedCatalogRepositoryV1SavePostRequest} [sharedCatalogSharedCatalogRepositoryV1SavePutBody] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async sharedCatalogSharedCatalogRepositoryV1SavePut(id: string, sharedCatalogSharedCatalogRepositoryV1SavePutBody?: SharedCatalogSharedCatalogRepositoryV1SavePostRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<number>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.sharedCatalogSharedCatalogRepositoryV1SavePut(id, sharedCatalogSharedCatalogRepositoryV1SavePutBody, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * SharedCatalogIdApi - factory interface
 * @export
 */
export const SharedCatalogIdApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = SharedCatalogIdApiFp(configuration)
    return {
        /**
         * Create or update Shared Catalog service.
         * @summary sharedCatalog/{id}
         * @param {string} id 
         * @param {SharedCatalogSharedCatalogRepositoryV1SavePostRequest} [sharedCatalogSharedCatalogRepositoryV1SavePutBody] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        sharedCatalogSharedCatalogRepositoryV1SavePut(id: string, sharedCatalogSharedCatalogRepositoryV1SavePutBody?: SharedCatalogSharedCatalogRepositoryV1SavePostRequest, options?: any): AxiosPromise<number> {
            return localVarFp.sharedCatalogSharedCatalogRepositoryV1SavePut(id, sharedCatalogSharedCatalogRepositoryV1SavePutBody, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * SharedCatalogIdApi - object-oriented interface
 * @export
 * @class SharedCatalogIdApi
 * @extends {BaseAPI}
 */
export class SharedCatalogIdApi extends BaseAPI {
    /**
     * Create or update Shared Catalog service.
     * @summary sharedCatalog/{id}
     * @param {string} id 
     * @param {SharedCatalogSharedCatalogRepositoryV1SavePostRequest} [sharedCatalogSharedCatalogRepositoryV1SavePutBody] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SharedCatalogIdApi
     */
    public sharedCatalogSharedCatalogRepositoryV1SavePut(id: string, sharedCatalogSharedCatalogRepositoryV1SavePutBody?: SharedCatalogSharedCatalogRepositoryV1SavePostRequest, options?: AxiosRequestConfig) {
        return SharedCatalogIdApiFp(this.configuration).sharedCatalogSharedCatalogRepositoryV1SavePut(id, sharedCatalogSharedCatalogRepositoryV1SavePutBody, options).then((request) => request(this.axios, this.basePath));
    }
}


/**
 * SharedCatalogIdAssignCategoriesApi - axios parameter creator
 * @export
 */
export const SharedCatalogIdAssignCategoriesApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Add categories into the shared catalog.
         * @summary sharedCatalog/{id}/assignCategories
         * @param {number} id 
         * @param {SharedCatalogCategoryManagementV1AssignCategoriesPostRequest} [sharedCatalogCategoryManagementV1AssignCategoriesPostBody] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        sharedCatalogCategoryManagementV1AssignCategoriesPost: async (id: number, sharedCatalogCategoryManagementV1AssignCategoriesPostBody?: SharedCatalogCategoryManagementV1AssignCategoriesPostRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('sharedCatalogCategoryManagementV1AssignCategoriesPost', 'id', id)
            const localVarPath = `/V1/sharedCatalog/{id}/assignCategories`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(sharedCatalogCategoryManagementV1AssignCategoriesPostBody, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * SharedCatalogIdAssignCategoriesApi - functional programming interface
 * @export
 */
export const SharedCatalogIdAssignCategoriesApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = SharedCatalogIdAssignCategoriesApiAxiosParamCreator(configuration)
    return {
        /**
         * Add categories into the shared catalog.
         * @summary sharedCatalog/{id}/assignCategories
         * @param {number} id 
         * @param {SharedCatalogCategoryManagementV1AssignCategoriesPostRequest} [sharedCatalogCategoryManagementV1AssignCategoriesPostBody] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async sharedCatalogCategoryManagementV1AssignCategoriesPost(id: number, sharedCatalogCategoryManagementV1AssignCategoriesPostBody?: SharedCatalogCategoryManagementV1AssignCategoriesPostRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<boolean>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.sharedCatalogCategoryManagementV1AssignCategoriesPost(id, sharedCatalogCategoryManagementV1AssignCategoriesPostBody, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * SharedCatalogIdAssignCategoriesApi - factory interface
 * @export
 */
export const SharedCatalogIdAssignCategoriesApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = SharedCatalogIdAssignCategoriesApiFp(configuration)
    return {
        /**
         * Add categories into the shared catalog.
         * @summary sharedCatalog/{id}/assignCategories
         * @param {number} id 
         * @param {SharedCatalogCategoryManagementV1AssignCategoriesPostRequest} [sharedCatalogCategoryManagementV1AssignCategoriesPostBody] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        sharedCatalogCategoryManagementV1AssignCategoriesPost(id: number, sharedCatalogCategoryManagementV1AssignCategoriesPostBody?: SharedCatalogCategoryManagementV1AssignCategoriesPostRequest, options?: any): AxiosPromise<boolean> {
            return localVarFp.sharedCatalogCategoryManagementV1AssignCategoriesPost(id, sharedCatalogCategoryManagementV1AssignCategoriesPostBody, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * SharedCatalogIdAssignCategoriesApi - object-oriented interface
 * @export
 * @class SharedCatalogIdAssignCategoriesApi
 * @extends {BaseAPI}
 */
export class SharedCatalogIdAssignCategoriesApi extends BaseAPI {
    /**
     * Add categories into the shared catalog.
     * @summary sharedCatalog/{id}/assignCategories
     * @param {number} id 
     * @param {SharedCatalogCategoryManagementV1AssignCategoriesPostRequest} [sharedCatalogCategoryManagementV1AssignCategoriesPostBody] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SharedCatalogIdAssignCategoriesApi
     */
    public sharedCatalogCategoryManagementV1AssignCategoriesPost(id: number, sharedCatalogCategoryManagementV1AssignCategoriesPostBody?: SharedCatalogCategoryManagementV1AssignCategoriesPostRequest, options?: AxiosRequestConfig) {
        return SharedCatalogIdAssignCategoriesApiFp(this.configuration).sharedCatalogCategoryManagementV1AssignCategoriesPost(id, sharedCatalogCategoryManagementV1AssignCategoriesPostBody, options).then((request) => request(this.axios, this.basePath));
    }
}


/**
 * SharedCatalogIdAssignProductsApi - axios parameter creator
 * @export
 */
export const SharedCatalogIdAssignProductsApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Add products into the shared catalog.
         * @summary sharedCatalog/{id}/assignProducts
         * @param {number} id 
         * @param {SharedCatalogProductManagementV1AssignProductsPostRequest} [sharedCatalogProductManagementV1AssignProductsPostBody] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        sharedCatalogProductManagementV1AssignProductsPost: async (id: number, sharedCatalogProductManagementV1AssignProductsPostBody?: SharedCatalogProductManagementV1AssignProductsPostRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('sharedCatalogProductManagementV1AssignProductsPost', 'id', id)
            const localVarPath = `/V1/sharedCatalog/{id}/assignProducts`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(sharedCatalogProductManagementV1AssignProductsPostBody, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * SharedCatalogIdAssignProductsApi - functional programming interface
 * @export
 */
export const SharedCatalogIdAssignProductsApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = SharedCatalogIdAssignProductsApiAxiosParamCreator(configuration)
    return {
        /**
         * Add products into the shared catalog.
         * @summary sharedCatalog/{id}/assignProducts
         * @param {number} id 
         * @param {SharedCatalogProductManagementV1AssignProductsPostRequest} [sharedCatalogProductManagementV1AssignProductsPostBody] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async sharedCatalogProductManagementV1AssignProductsPost(id: number, sharedCatalogProductManagementV1AssignProductsPostBody?: SharedCatalogProductManagementV1AssignProductsPostRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<boolean>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.sharedCatalogProductManagementV1AssignProductsPost(id, sharedCatalogProductManagementV1AssignProductsPostBody, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * SharedCatalogIdAssignProductsApi - factory interface
 * @export
 */
export const SharedCatalogIdAssignProductsApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = SharedCatalogIdAssignProductsApiFp(configuration)
    return {
        /**
         * Add products into the shared catalog.
         * @summary sharedCatalog/{id}/assignProducts
         * @param {number} id 
         * @param {SharedCatalogProductManagementV1AssignProductsPostRequest} [sharedCatalogProductManagementV1AssignProductsPostBody] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        sharedCatalogProductManagementV1AssignProductsPost(id: number, sharedCatalogProductManagementV1AssignProductsPostBody?: SharedCatalogProductManagementV1AssignProductsPostRequest, options?: any): AxiosPromise<boolean> {
            return localVarFp.sharedCatalogProductManagementV1AssignProductsPost(id, sharedCatalogProductManagementV1AssignProductsPostBody, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * SharedCatalogIdAssignProductsApi - object-oriented interface
 * @export
 * @class SharedCatalogIdAssignProductsApi
 * @extends {BaseAPI}
 */
export class SharedCatalogIdAssignProductsApi extends BaseAPI {
    /**
     * Add products into the shared catalog.
     * @summary sharedCatalog/{id}/assignProducts
     * @param {number} id 
     * @param {SharedCatalogProductManagementV1AssignProductsPostRequest} [sharedCatalogProductManagementV1AssignProductsPostBody] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SharedCatalogIdAssignProductsApi
     */
    public sharedCatalogProductManagementV1AssignProductsPost(id: number, sharedCatalogProductManagementV1AssignProductsPostBody?: SharedCatalogProductManagementV1AssignProductsPostRequest, options?: AxiosRequestConfig) {
        return SharedCatalogIdAssignProductsApiFp(this.configuration).sharedCatalogProductManagementV1AssignProductsPost(id, sharedCatalogProductManagementV1AssignProductsPostBody, options).then((request) => request(this.axios, this.basePath));
    }
}


/**
 * SharedCatalogIdCategoriesApi - axios parameter creator
 * @export
 */
export const SharedCatalogIdCategoriesApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Return the list of categories in the selected shared catalog.
         * @summary sharedCatalog/{id}/categories
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        sharedCatalogCategoryManagementV1GetCategoriesGet: async (id: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('sharedCatalogCategoryManagementV1GetCategoriesGet', 'id', id)
            const localVarPath = `/V1/sharedCatalog/{id}/categories`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * SharedCatalogIdCategoriesApi - functional programming interface
 * @export
 */
export const SharedCatalogIdCategoriesApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = SharedCatalogIdCategoriesApiAxiosParamCreator(configuration)
    return {
        /**
         * Return the list of categories in the selected shared catalog.
         * @summary sharedCatalog/{id}/categories
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async sharedCatalogCategoryManagementV1GetCategoriesGet(id: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<number>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.sharedCatalogCategoryManagementV1GetCategoriesGet(id, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * SharedCatalogIdCategoriesApi - factory interface
 * @export
 */
export const SharedCatalogIdCategoriesApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = SharedCatalogIdCategoriesApiFp(configuration)
    return {
        /**
         * Return the list of categories in the selected shared catalog.
         * @summary sharedCatalog/{id}/categories
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        sharedCatalogCategoryManagementV1GetCategoriesGet(id: number, options?: any): AxiosPromise<Array<number>> {
            return localVarFp.sharedCatalogCategoryManagementV1GetCategoriesGet(id, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * SharedCatalogIdCategoriesApi - object-oriented interface
 * @export
 * @class SharedCatalogIdCategoriesApi
 * @extends {BaseAPI}
 */
export class SharedCatalogIdCategoriesApi extends BaseAPI {
    /**
     * Return the list of categories in the selected shared catalog.
     * @summary sharedCatalog/{id}/categories
     * @param {number} id 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SharedCatalogIdCategoriesApi
     */
    public sharedCatalogCategoryManagementV1GetCategoriesGet(id: number, options?: AxiosRequestConfig) {
        return SharedCatalogIdCategoriesApiFp(this.configuration).sharedCatalogCategoryManagementV1GetCategoriesGet(id, options).then((request) => request(this.axios, this.basePath));
    }
}


/**
 * SharedCatalogIdProductsApi - axios parameter creator
 * @export
 */
export const SharedCatalogIdProductsApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Return the list of product SKUs in the selected shared catalog.
         * @summary sharedCatalog/{id}/products
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        sharedCatalogProductManagementV1GetProductsGet: async (id: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('sharedCatalogProductManagementV1GetProductsGet', 'id', id)
            const localVarPath = `/V1/sharedCatalog/{id}/products`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * SharedCatalogIdProductsApi - functional programming interface
 * @export
 */
export const SharedCatalogIdProductsApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = SharedCatalogIdProductsApiAxiosParamCreator(configuration)
    return {
        /**
         * Return the list of product SKUs in the selected shared catalog.
         * @summary sharedCatalog/{id}/products
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async sharedCatalogProductManagementV1GetProductsGet(id: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<string>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.sharedCatalogProductManagementV1GetProductsGet(id, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * SharedCatalogIdProductsApi - factory interface
 * @export
 */
export const SharedCatalogIdProductsApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = SharedCatalogIdProductsApiFp(configuration)
    return {
        /**
         * Return the list of product SKUs in the selected shared catalog.
         * @summary sharedCatalog/{id}/products
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        sharedCatalogProductManagementV1GetProductsGet(id: number, options?: any): AxiosPromise<Array<string>> {
            return localVarFp.sharedCatalogProductManagementV1GetProductsGet(id, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * SharedCatalogIdProductsApi - object-oriented interface
 * @export
 * @class SharedCatalogIdProductsApi
 * @extends {BaseAPI}
 */
export class SharedCatalogIdProductsApi extends BaseAPI {
    /**
     * Return the list of product SKUs in the selected shared catalog.
     * @summary sharedCatalog/{id}/products
     * @param {number} id 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SharedCatalogIdProductsApi
     */
    public sharedCatalogProductManagementV1GetProductsGet(id: number, options?: AxiosRequestConfig) {
        return SharedCatalogIdProductsApiFp(this.configuration).sharedCatalogProductManagementV1GetProductsGet(id, options).then((request) => request(this.axios, this.basePath));
    }
}


/**
 * SharedCatalogIdUnassignCategoriesApi - axios parameter creator
 * @export
 */
export const SharedCatalogIdUnassignCategoriesApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Remove the specified categories from the shared catalog.
         * @summary sharedCatalog/{id}/unassignCategories
         * @param {number} id 
         * @param {SharedCatalogCategoryManagementV1AssignCategoriesPostRequest} [sharedCatalogCategoryManagementV1UnassignCategoriesPostBody] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        sharedCatalogCategoryManagementV1UnassignCategoriesPost: async (id: number, sharedCatalogCategoryManagementV1UnassignCategoriesPostBody?: SharedCatalogCategoryManagementV1AssignCategoriesPostRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('sharedCatalogCategoryManagementV1UnassignCategoriesPost', 'id', id)
            const localVarPath = `/V1/sharedCatalog/{id}/unassignCategories`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(sharedCatalogCategoryManagementV1UnassignCategoriesPostBody, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * SharedCatalogIdUnassignCategoriesApi - functional programming interface
 * @export
 */
export const SharedCatalogIdUnassignCategoriesApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = SharedCatalogIdUnassignCategoriesApiAxiosParamCreator(configuration)
    return {
        /**
         * Remove the specified categories from the shared catalog.
         * @summary sharedCatalog/{id}/unassignCategories
         * @param {number} id 
         * @param {SharedCatalogCategoryManagementV1AssignCategoriesPostRequest} [sharedCatalogCategoryManagementV1UnassignCategoriesPostBody] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async sharedCatalogCategoryManagementV1UnassignCategoriesPost(id: number, sharedCatalogCategoryManagementV1UnassignCategoriesPostBody?: SharedCatalogCategoryManagementV1AssignCategoriesPostRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<boolean>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.sharedCatalogCategoryManagementV1UnassignCategoriesPost(id, sharedCatalogCategoryManagementV1UnassignCategoriesPostBody, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * SharedCatalogIdUnassignCategoriesApi - factory interface
 * @export
 */
export const SharedCatalogIdUnassignCategoriesApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = SharedCatalogIdUnassignCategoriesApiFp(configuration)
    return {
        /**
         * Remove the specified categories from the shared catalog.
         * @summary sharedCatalog/{id}/unassignCategories
         * @param {number} id 
         * @param {SharedCatalogCategoryManagementV1AssignCategoriesPostRequest} [sharedCatalogCategoryManagementV1UnassignCategoriesPostBody] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        sharedCatalogCategoryManagementV1UnassignCategoriesPost(id: number, sharedCatalogCategoryManagementV1UnassignCategoriesPostBody?: SharedCatalogCategoryManagementV1AssignCategoriesPostRequest, options?: any): AxiosPromise<boolean> {
            return localVarFp.sharedCatalogCategoryManagementV1UnassignCategoriesPost(id, sharedCatalogCategoryManagementV1UnassignCategoriesPostBody, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * SharedCatalogIdUnassignCategoriesApi - object-oriented interface
 * @export
 * @class SharedCatalogIdUnassignCategoriesApi
 * @extends {BaseAPI}
 */
export class SharedCatalogIdUnassignCategoriesApi extends BaseAPI {
    /**
     * Remove the specified categories from the shared catalog.
     * @summary sharedCatalog/{id}/unassignCategories
     * @param {number} id 
     * @param {SharedCatalogCategoryManagementV1AssignCategoriesPostRequest} [sharedCatalogCategoryManagementV1UnassignCategoriesPostBody] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SharedCatalogIdUnassignCategoriesApi
     */
    public sharedCatalogCategoryManagementV1UnassignCategoriesPost(id: number, sharedCatalogCategoryManagementV1UnassignCategoriesPostBody?: SharedCatalogCategoryManagementV1AssignCategoriesPostRequest, options?: AxiosRequestConfig) {
        return SharedCatalogIdUnassignCategoriesApiFp(this.configuration).sharedCatalogCategoryManagementV1UnassignCategoriesPost(id, sharedCatalogCategoryManagementV1UnassignCategoriesPostBody, options).then((request) => request(this.axios, this.basePath));
    }
}


/**
 * SharedCatalogIdUnassignProductsApi - axios parameter creator
 * @export
 */
export const SharedCatalogIdUnassignProductsApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Remove the specified products from the shared catalog.
         * @summary sharedCatalog/{id}/unassignProducts
         * @param {number} id 
         * @param {SharedCatalogProductManagementV1AssignProductsPostRequest} [sharedCatalogProductManagementV1UnassignProductsPostBody] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        sharedCatalogProductManagementV1UnassignProductsPost: async (id: number, sharedCatalogProductManagementV1UnassignProductsPostBody?: SharedCatalogProductManagementV1AssignProductsPostRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('sharedCatalogProductManagementV1UnassignProductsPost', 'id', id)
            const localVarPath = `/V1/sharedCatalog/{id}/unassignProducts`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(sharedCatalogProductManagementV1UnassignProductsPostBody, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * SharedCatalogIdUnassignProductsApi - functional programming interface
 * @export
 */
export const SharedCatalogIdUnassignProductsApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = SharedCatalogIdUnassignProductsApiAxiosParamCreator(configuration)
    return {
        /**
         * Remove the specified products from the shared catalog.
         * @summary sharedCatalog/{id}/unassignProducts
         * @param {number} id 
         * @param {SharedCatalogProductManagementV1AssignProductsPostRequest} [sharedCatalogProductManagementV1UnassignProductsPostBody] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async sharedCatalogProductManagementV1UnassignProductsPost(id: number, sharedCatalogProductManagementV1UnassignProductsPostBody?: SharedCatalogProductManagementV1AssignProductsPostRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<boolean>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.sharedCatalogProductManagementV1UnassignProductsPost(id, sharedCatalogProductManagementV1UnassignProductsPostBody, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * SharedCatalogIdUnassignProductsApi - factory interface
 * @export
 */
export const SharedCatalogIdUnassignProductsApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = SharedCatalogIdUnassignProductsApiFp(configuration)
    return {
        /**
         * Remove the specified products from the shared catalog.
         * @summary sharedCatalog/{id}/unassignProducts
         * @param {number} id 
         * @param {SharedCatalogProductManagementV1AssignProductsPostRequest} [sharedCatalogProductManagementV1UnassignProductsPostBody] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        sharedCatalogProductManagementV1UnassignProductsPost(id: number, sharedCatalogProductManagementV1UnassignProductsPostBody?: SharedCatalogProductManagementV1AssignProductsPostRequest, options?: any): AxiosPromise<boolean> {
            return localVarFp.sharedCatalogProductManagementV1UnassignProductsPost(id, sharedCatalogProductManagementV1UnassignProductsPostBody, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * SharedCatalogIdUnassignProductsApi - object-oriented interface
 * @export
 * @class SharedCatalogIdUnassignProductsApi
 * @extends {BaseAPI}
 */
export class SharedCatalogIdUnassignProductsApi extends BaseAPI {
    /**
     * Remove the specified products from the shared catalog.
     * @summary sharedCatalog/{id}/unassignProducts
     * @param {number} id 
     * @param {SharedCatalogProductManagementV1AssignProductsPostRequest} [sharedCatalogProductManagementV1UnassignProductsPostBody] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SharedCatalogIdUnassignProductsApi
     */
    public sharedCatalogProductManagementV1UnassignProductsPost(id: number, sharedCatalogProductManagementV1UnassignProductsPostBody?: SharedCatalogProductManagementV1AssignProductsPostRequest, options?: AxiosRequestConfig) {
        return SharedCatalogIdUnassignProductsApiFp(this.configuration).sharedCatalogProductManagementV1UnassignProductsPost(id, sharedCatalogProductManagementV1UnassignProductsPostBody, options).then((request) => request(this.axios, this.basePath));
    }
}


/**
 * SharedCatalogSharedCatalogIdApi - axios parameter creator
 * @export
 */
export const SharedCatalogSharedCatalogIdApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Delete a shared catalog by ID.
         * @summary sharedCatalog/{sharedCatalogId}
         * @param {number} sharedCatalogId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        sharedCatalogSharedCatalogRepositoryV1DeleteByIdDelete: async (sharedCatalogId: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'sharedCatalogId' is not null or undefined
            assertParamExists('sharedCatalogSharedCatalogRepositoryV1DeleteByIdDelete', 'sharedCatalogId', sharedCatalogId)
            const localVarPath = `/V1/sharedCatalog/{sharedCatalogId}`
                .replace(`{${"sharedCatalogId"}}`, encodeURIComponent(String(sharedCatalogId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Return the following properties for the selected shared catalog: ID, Store Group ID, Name, Type, Description, Customer Group, Tax Class.
         * @summary sharedCatalog/{sharedCatalogId}
         * @param {number} sharedCatalogId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        sharedCatalogSharedCatalogRepositoryV1GetGet: async (sharedCatalogId: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'sharedCatalogId' is not null or undefined
            assertParamExists('sharedCatalogSharedCatalogRepositoryV1GetGet', 'sharedCatalogId', sharedCatalogId)
            const localVarPath = `/V1/sharedCatalog/{sharedCatalogId}`
                .replace(`{${"sharedCatalogId"}}`, encodeURIComponent(String(sharedCatalogId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * SharedCatalogSharedCatalogIdApi - functional programming interface
 * @export
 */
export const SharedCatalogSharedCatalogIdApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = SharedCatalogSharedCatalogIdApiAxiosParamCreator(configuration)
    return {
        /**
         * Delete a shared catalog by ID.
         * @summary sharedCatalog/{sharedCatalogId}
         * @param {number} sharedCatalogId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async sharedCatalogSharedCatalogRepositoryV1DeleteByIdDelete(sharedCatalogId: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<boolean>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.sharedCatalogSharedCatalogRepositoryV1DeleteByIdDelete(sharedCatalogId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Return the following properties for the selected shared catalog: ID, Store Group ID, Name, Type, Description, Customer Group, Tax Class.
         * @summary sharedCatalog/{sharedCatalogId}
         * @param {number} sharedCatalogId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async sharedCatalogSharedCatalogRepositoryV1GetGet(sharedCatalogId: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<SharedCatalogDataSharedCatalogInterface>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.sharedCatalogSharedCatalogRepositoryV1GetGet(sharedCatalogId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * SharedCatalogSharedCatalogIdApi - factory interface
 * @export
 */
export const SharedCatalogSharedCatalogIdApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = SharedCatalogSharedCatalogIdApiFp(configuration)
    return {
        /**
         * Delete a shared catalog by ID.
         * @summary sharedCatalog/{sharedCatalogId}
         * @param {number} sharedCatalogId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        sharedCatalogSharedCatalogRepositoryV1DeleteByIdDelete(sharedCatalogId: number, options?: any): AxiosPromise<boolean> {
            return localVarFp.sharedCatalogSharedCatalogRepositoryV1DeleteByIdDelete(sharedCatalogId, options).then((request) => request(axios, basePath));
        },
        /**
         * Return the following properties for the selected shared catalog: ID, Store Group ID, Name, Type, Description, Customer Group, Tax Class.
         * @summary sharedCatalog/{sharedCatalogId}
         * @param {number} sharedCatalogId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        sharedCatalogSharedCatalogRepositoryV1GetGet(sharedCatalogId: number, options?: any): AxiosPromise<SharedCatalogDataSharedCatalogInterface> {
            return localVarFp.sharedCatalogSharedCatalogRepositoryV1GetGet(sharedCatalogId, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * SharedCatalogSharedCatalogIdApi - object-oriented interface
 * @export
 * @class SharedCatalogSharedCatalogIdApi
 * @extends {BaseAPI}
 */
export class SharedCatalogSharedCatalogIdApi extends BaseAPI {
    /**
     * Delete a shared catalog by ID.
     * @summary sharedCatalog/{sharedCatalogId}
     * @param {number} sharedCatalogId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SharedCatalogSharedCatalogIdApi
     */
    public sharedCatalogSharedCatalogRepositoryV1DeleteByIdDelete(sharedCatalogId: number, options?: AxiosRequestConfig) {
        return SharedCatalogSharedCatalogIdApiFp(this.configuration).sharedCatalogSharedCatalogRepositoryV1DeleteByIdDelete(sharedCatalogId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Return the following properties for the selected shared catalog: ID, Store Group ID, Name, Type, Description, Customer Group, Tax Class.
     * @summary sharedCatalog/{sharedCatalogId}
     * @param {number} sharedCatalogId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SharedCatalogSharedCatalogIdApi
     */
    public sharedCatalogSharedCatalogRepositoryV1GetGet(sharedCatalogId: number, options?: AxiosRequestConfig) {
        return SharedCatalogSharedCatalogIdApiFp(this.configuration).sharedCatalogSharedCatalogRepositoryV1GetGet(sharedCatalogId, options).then((request) => request(this.axios, this.basePath));
    }
}


/**
 * SharedCatalogSharedCatalogIdAssignCompaniesApi - axios parameter creator
 * @export
 */
export const SharedCatalogSharedCatalogIdAssignCompaniesApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Assign companies to a shared catalog.
         * @summary sharedCatalog/{sharedCatalogId}/assignCompanies
         * @param {number} sharedCatalogId 
         * @param {SharedCatalogCompanyManagementV1AssignCompaniesPostRequest} [sharedCatalogCompanyManagementV1AssignCompaniesPostBody] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        sharedCatalogCompanyManagementV1AssignCompaniesPost: async (sharedCatalogId: number, sharedCatalogCompanyManagementV1AssignCompaniesPostBody?: SharedCatalogCompanyManagementV1AssignCompaniesPostRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'sharedCatalogId' is not null or undefined
            assertParamExists('sharedCatalogCompanyManagementV1AssignCompaniesPost', 'sharedCatalogId', sharedCatalogId)
            const localVarPath = `/V1/sharedCatalog/{sharedCatalogId}/assignCompanies`
                .replace(`{${"sharedCatalogId"}}`, encodeURIComponent(String(sharedCatalogId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(sharedCatalogCompanyManagementV1AssignCompaniesPostBody, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * SharedCatalogSharedCatalogIdAssignCompaniesApi - functional programming interface
 * @export
 */
export const SharedCatalogSharedCatalogIdAssignCompaniesApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = SharedCatalogSharedCatalogIdAssignCompaniesApiAxiosParamCreator(configuration)
    return {
        /**
         * Assign companies to a shared catalog.
         * @summary sharedCatalog/{sharedCatalogId}/assignCompanies
         * @param {number} sharedCatalogId 
         * @param {SharedCatalogCompanyManagementV1AssignCompaniesPostRequest} [sharedCatalogCompanyManagementV1AssignCompaniesPostBody] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async sharedCatalogCompanyManagementV1AssignCompaniesPost(sharedCatalogId: number, sharedCatalogCompanyManagementV1AssignCompaniesPostBody?: SharedCatalogCompanyManagementV1AssignCompaniesPostRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<boolean>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.sharedCatalogCompanyManagementV1AssignCompaniesPost(sharedCatalogId, sharedCatalogCompanyManagementV1AssignCompaniesPostBody, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * SharedCatalogSharedCatalogIdAssignCompaniesApi - factory interface
 * @export
 */
export const SharedCatalogSharedCatalogIdAssignCompaniesApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = SharedCatalogSharedCatalogIdAssignCompaniesApiFp(configuration)
    return {
        /**
         * Assign companies to a shared catalog.
         * @summary sharedCatalog/{sharedCatalogId}/assignCompanies
         * @param {number} sharedCatalogId 
         * @param {SharedCatalogCompanyManagementV1AssignCompaniesPostRequest} [sharedCatalogCompanyManagementV1AssignCompaniesPostBody] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        sharedCatalogCompanyManagementV1AssignCompaniesPost(sharedCatalogId: number, sharedCatalogCompanyManagementV1AssignCompaniesPostBody?: SharedCatalogCompanyManagementV1AssignCompaniesPostRequest, options?: any): AxiosPromise<boolean> {
            return localVarFp.sharedCatalogCompanyManagementV1AssignCompaniesPost(sharedCatalogId, sharedCatalogCompanyManagementV1AssignCompaniesPostBody, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * SharedCatalogSharedCatalogIdAssignCompaniesApi - object-oriented interface
 * @export
 * @class SharedCatalogSharedCatalogIdAssignCompaniesApi
 * @extends {BaseAPI}
 */
export class SharedCatalogSharedCatalogIdAssignCompaniesApi extends BaseAPI {
    /**
     * Assign companies to a shared catalog.
     * @summary sharedCatalog/{sharedCatalogId}/assignCompanies
     * @param {number} sharedCatalogId 
     * @param {SharedCatalogCompanyManagementV1AssignCompaniesPostRequest} [sharedCatalogCompanyManagementV1AssignCompaniesPostBody] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SharedCatalogSharedCatalogIdAssignCompaniesApi
     */
    public sharedCatalogCompanyManagementV1AssignCompaniesPost(sharedCatalogId: number, sharedCatalogCompanyManagementV1AssignCompaniesPostBody?: SharedCatalogCompanyManagementV1AssignCompaniesPostRequest, options?: AxiosRequestConfig) {
        return SharedCatalogSharedCatalogIdAssignCompaniesApiFp(this.configuration).sharedCatalogCompanyManagementV1AssignCompaniesPost(sharedCatalogId, sharedCatalogCompanyManagementV1AssignCompaniesPostBody, options).then((request) => request(this.axios, this.basePath));
    }
}


/**
 * SharedCatalogSharedCatalogIdCompaniesApi - axios parameter creator
 * @export
 */
export const SharedCatalogSharedCatalogIdCompaniesApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Return the list of company IDs for the companies assigned to the selected catalog.
         * @summary sharedCatalog/{sharedCatalogId}/companies
         * @param {number} sharedCatalogId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        sharedCatalogCompanyManagementV1GetCompaniesGet: async (sharedCatalogId: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'sharedCatalogId' is not null or undefined
            assertParamExists('sharedCatalogCompanyManagementV1GetCompaniesGet', 'sharedCatalogId', sharedCatalogId)
            const localVarPath = `/V1/sharedCatalog/{sharedCatalogId}/companies`
                .replace(`{${"sharedCatalogId"}}`, encodeURIComponent(String(sharedCatalogId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * SharedCatalogSharedCatalogIdCompaniesApi - functional programming interface
 * @export
 */
export const SharedCatalogSharedCatalogIdCompaniesApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = SharedCatalogSharedCatalogIdCompaniesApiAxiosParamCreator(configuration)
    return {
        /**
         * Return the list of company IDs for the companies assigned to the selected catalog.
         * @summary sharedCatalog/{sharedCatalogId}/companies
         * @param {number} sharedCatalogId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async sharedCatalogCompanyManagementV1GetCompaniesGet(sharedCatalogId: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<string>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.sharedCatalogCompanyManagementV1GetCompaniesGet(sharedCatalogId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * SharedCatalogSharedCatalogIdCompaniesApi - factory interface
 * @export
 */
export const SharedCatalogSharedCatalogIdCompaniesApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = SharedCatalogSharedCatalogIdCompaniesApiFp(configuration)
    return {
        /**
         * Return the list of company IDs for the companies assigned to the selected catalog.
         * @summary sharedCatalog/{sharedCatalogId}/companies
         * @param {number} sharedCatalogId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        sharedCatalogCompanyManagementV1GetCompaniesGet(sharedCatalogId: number, options?: any): AxiosPromise<string> {
            return localVarFp.sharedCatalogCompanyManagementV1GetCompaniesGet(sharedCatalogId, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * SharedCatalogSharedCatalogIdCompaniesApi - object-oriented interface
 * @export
 * @class SharedCatalogSharedCatalogIdCompaniesApi
 * @extends {BaseAPI}
 */
export class SharedCatalogSharedCatalogIdCompaniesApi extends BaseAPI {
    /**
     * Return the list of company IDs for the companies assigned to the selected catalog.
     * @summary sharedCatalog/{sharedCatalogId}/companies
     * @param {number} sharedCatalogId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SharedCatalogSharedCatalogIdCompaniesApi
     */
    public sharedCatalogCompanyManagementV1GetCompaniesGet(sharedCatalogId: number, options?: AxiosRequestConfig) {
        return SharedCatalogSharedCatalogIdCompaniesApiFp(this.configuration).sharedCatalogCompanyManagementV1GetCompaniesGet(sharedCatalogId, options).then((request) => request(this.axios, this.basePath));
    }
}


/**
 * SharedCatalogSharedCatalogIdUnassignCompaniesApi - axios parameter creator
 * @export
 */
export const SharedCatalogSharedCatalogIdUnassignCompaniesApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Unassign companies from a shared catalog.
         * @summary sharedCatalog/{sharedCatalogId}/unassignCompanies
         * @param {number} sharedCatalogId 
         * @param {SharedCatalogCompanyManagementV1AssignCompaniesPostRequest} [sharedCatalogCompanyManagementV1UnassignCompaniesPostBody] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        sharedCatalogCompanyManagementV1UnassignCompaniesPost: async (sharedCatalogId: number, sharedCatalogCompanyManagementV1UnassignCompaniesPostBody?: SharedCatalogCompanyManagementV1AssignCompaniesPostRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'sharedCatalogId' is not null or undefined
            assertParamExists('sharedCatalogCompanyManagementV1UnassignCompaniesPost', 'sharedCatalogId', sharedCatalogId)
            const localVarPath = `/V1/sharedCatalog/{sharedCatalogId}/unassignCompanies`
                .replace(`{${"sharedCatalogId"}}`, encodeURIComponent(String(sharedCatalogId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(sharedCatalogCompanyManagementV1UnassignCompaniesPostBody, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * SharedCatalogSharedCatalogIdUnassignCompaniesApi - functional programming interface
 * @export
 */
export const SharedCatalogSharedCatalogIdUnassignCompaniesApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = SharedCatalogSharedCatalogIdUnassignCompaniesApiAxiosParamCreator(configuration)
    return {
        /**
         * Unassign companies from a shared catalog.
         * @summary sharedCatalog/{sharedCatalogId}/unassignCompanies
         * @param {number} sharedCatalogId 
         * @param {SharedCatalogCompanyManagementV1AssignCompaniesPostRequest} [sharedCatalogCompanyManagementV1UnassignCompaniesPostBody] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async sharedCatalogCompanyManagementV1UnassignCompaniesPost(sharedCatalogId: number, sharedCatalogCompanyManagementV1UnassignCompaniesPostBody?: SharedCatalogCompanyManagementV1AssignCompaniesPostRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<boolean>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.sharedCatalogCompanyManagementV1UnassignCompaniesPost(sharedCatalogId, sharedCatalogCompanyManagementV1UnassignCompaniesPostBody, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * SharedCatalogSharedCatalogIdUnassignCompaniesApi - factory interface
 * @export
 */
export const SharedCatalogSharedCatalogIdUnassignCompaniesApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = SharedCatalogSharedCatalogIdUnassignCompaniesApiFp(configuration)
    return {
        /**
         * Unassign companies from a shared catalog.
         * @summary sharedCatalog/{sharedCatalogId}/unassignCompanies
         * @param {number} sharedCatalogId 
         * @param {SharedCatalogCompanyManagementV1AssignCompaniesPostRequest} [sharedCatalogCompanyManagementV1UnassignCompaniesPostBody] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        sharedCatalogCompanyManagementV1UnassignCompaniesPost(sharedCatalogId: number, sharedCatalogCompanyManagementV1UnassignCompaniesPostBody?: SharedCatalogCompanyManagementV1AssignCompaniesPostRequest, options?: any): AxiosPromise<boolean> {
            return localVarFp.sharedCatalogCompanyManagementV1UnassignCompaniesPost(sharedCatalogId, sharedCatalogCompanyManagementV1UnassignCompaniesPostBody, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * SharedCatalogSharedCatalogIdUnassignCompaniesApi - object-oriented interface
 * @export
 * @class SharedCatalogSharedCatalogIdUnassignCompaniesApi
 * @extends {BaseAPI}
 */
export class SharedCatalogSharedCatalogIdUnassignCompaniesApi extends BaseAPI {
    /**
     * Unassign companies from a shared catalog.
     * @summary sharedCatalog/{sharedCatalogId}/unassignCompanies
     * @param {number} sharedCatalogId 
     * @param {SharedCatalogCompanyManagementV1AssignCompaniesPostRequest} [sharedCatalogCompanyManagementV1UnassignCompaniesPostBody] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SharedCatalogSharedCatalogIdUnassignCompaniesApi
     */
    public sharedCatalogCompanyManagementV1UnassignCompaniesPost(sharedCatalogId: number, sharedCatalogCompanyManagementV1UnassignCompaniesPostBody?: SharedCatalogCompanyManagementV1AssignCompaniesPostRequest, options?: AxiosRequestConfig) {
        return SharedCatalogSharedCatalogIdUnassignCompaniesApiFp(this.configuration).sharedCatalogCompanyManagementV1UnassignCompaniesPost(sharedCatalogId, sharedCatalogCompanyManagementV1UnassignCompaniesPostBody, options).then((request) => request(this.axios, this.basePath));
    }
}


/**
 * ShipmentApi - axios parameter creator
 * @export
 */
export const ShipmentApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Performs persist operations for a specified shipment.
         * @summary shipment/
         * @param {SalesShipmentRepositoryV1SavePostRequest} [salesShipmentRepositoryV1SavePostBody] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        salesShipmentRepositoryV1SavePost: async (salesShipmentRepositoryV1SavePostBody?: SalesShipmentRepositoryV1SavePostRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/V1/shipment/`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(salesShipmentRepositoryV1SavePostBody, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * ShipmentApi - functional programming interface
 * @export
 */
export const ShipmentApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = ShipmentApiAxiosParamCreator(configuration)
    return {
        /**
         * Performs persist operations for a specified shipment.
         * @summary shipment/
         * @param {SalesShipmentRepositoryV1SavePostRequest} [salesShipmentRepositoryV1SavePostBody] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async salesShipmentRepositoryV1SavePost(salesShipmentRepositoryV1SavePostBody?: SalesShipmentRepositoryV1SavePostRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<SalesDataShipmentInterface>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.salesShipmentRepositoryV1SavePost(salesShipmentRepositoryV1SavePostBody, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * ShipmentApi - factory interface
 * @export
 */
export const ShipmentApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = ShipmentApiFp(configuration)
    return {
        /**
         * Performs persist operations for a specified shipment.
         * @summary shipment/
         * @param {SalesShipmentRepositoryV1SavePostRequest} [salesShipmentRepositoryV1SavePostBody] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        salesShipmentRepositoryV1SavePost(salesShipmentRepositoryV1SavePostBody?: SalesShipmentRepositoryV1SavePostRequest, options?: any): AxiosPromise<SalesDataShipmentInterface> {
            return localVarFp.salesShipmentRepositoryV1SavePost(salesShipmentRepositoryV1SavePostBody, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * ShipmentApi - object-oriented interface
 * @export
 * @class ShipmentApi
 * @extends {BaseAPI}
 */
export class ShipmentApi extends BaseAPI {
    /**
     * Performs persist operations for a specified shipment.
     * @summary shipment/
     * @param {SalesShipmentRepositoryV1SavePostRequest} [salesShipmentRepositoryV1SavePostBody] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ShipmentApi
     */
    public salesShipmentRepositoryV1SavePost(salesShipmentRepositoryV1SavePostBody?: SalesShipmentRepositoryV1SavePostRequest, options?: AxiosRequestConfig) {
        return ShipmentApiFp(this.configuration).salesShipmentRepositoryV1SavePost(salesShipmentRepositoryV1SavePostBody, options).then((request) => request(this.axios, this.basePath));
    }
}


/**
 * ShipmentIdApi - axios parameter creator
 * @export
 */
export const ShipmentIdApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Loads a specified shipment.
         * @summary shipment/{id}
         * @param {number} id The shipment ID.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        salesShipmentRepositoryV1GetGet: async (id: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('salesShipmentRepositoryV1GetGet', 'id', id)
            const localVarPath = `/V1/shipment/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * ShipmentIdApi - functional programming interface
 * @export
 */
export const ShipmentIdApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = ShipmentIdApiAxiosParamCreator(configuration)
    return {
        /**
         * Loads a specified shipment.
         * @summary shipment/{id}
         * @param {number} id The shipment ID.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async salesShipmentRepositoryV1GetGet(id: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<SalesDataShipmentInterface>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.salesShipmentRepositoryV1GetGet(id, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * ShipmentIdApi - factory interface
 * @export
 */
export const ShipmentIdApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = ShipmentIdApiFp(configuration)
    return {
        /**
         * Loads a specified shipment.
         * @summary shipment/{id}
         * @param {number} id The shipment ID.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        salesShipmentRepositoryV1GetGet(id: number, options?: any): AxiosPromise<SalesDataShipmentInterface> {
            return localVarFp.salesShipmentRepositoryV1GetGet(id, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * ShipmentIdApi - object-oriented interface
 * @export
 * @class ShipmentIdApi
 * @extends {BaseAPI}
 */
export class ShipmentIdApi extends BaseAPI {
    /**
     * Loads a specified shipment.
     * @summary shipment/{id}
     * @param {number} id The shipment ID.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ShipmentIdApi
     */
    public salesShipmentRepositoryV1GetGet(id: number, options?: AxiosRequestConfig) {
        return ShipmentIdApiFp(this.configuration).salesShipmentRepositoryV1GetGet(id, options).then((request) => request(this.axios, this.basePath));
    }
}


/**
 * ShipmentIdCommentsApi - axios parameter creator
 * @export
 */
export const ShipmentIdCommentsApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Performs persist operations for a specified shipment comment.
         * @summary shipment/{id}/comments
         * @param {string} id 
         * @param {SalesShipmentCommentRepositoryV1SavePostRequest} [salesShipmentCommentRepositoryV1SavePostBody] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        salesShipmentCommentRepositoryV1SavePost: async (id: string, salesShipmentCommentRepositoryV1SavePostBody?: SalesShipmentCommentRepositoryV1SavePostRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('salesShipmentCommentRepositoryV1SavePost', 'id', id)
            const localVarPath = `/V1/shipment/{id}/comments`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(salesShipmentCommentRepositoryV1SavePostBody, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Lists comments for a specified shipment.
         * @summary shipment/{id}/comments
         * @param {number} id The shipment ID.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        salesShipmentManagementV1GetCommentsListGet: async (id: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('salesShipmentManagementV1GetCommentsListGet', 'id', id)
            const localVarPath = `/V1/shipment/{id}/comments`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * ShipmentIdCommentsApi - functional programming interface
 * @export
 */
export const ShipmentIdCommentsApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = ShipmentIdCommentsApiAxiosParamCreator(configuration)
    return {
        /**
         * Performs persist operations for a specified shipment comment.
         * @summary shipment/{id}/comments
         * @param {string} id 
         * @param {SalesShipmentCommentRepositoryV1SavePostRequest} [salesShipmentCommentRepositoryV1SavePostBody] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async salesShipmentCommentRepositoryV1SavePost(id: string, salesShipmentCommentRepositoryV1SavePostBody?: SalesShipmentCommentRepositoryV1SavePostRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<SalesDataShipmentCommentInterface>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.salesShipmentCommentRepositoryV1SavePost(id, salesShipmentCommentRepositoryV1SavePostBody, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Lists comments for a specified shipment.
         * @summary shipment/{id}/comments
         * @param {number} id The shipment ID.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async salesShipmentManagementV1GetCommentsListGet(id: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<SalesDataShipmentCommentSearchResultInterface>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.salesShipmentManagementV1GetCommentsListGet(id, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * ShipmentIdCommentsApi - factory interface
 * @export
 */
export const ShipmentIdCommentsApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = ShipmentIdCommentsApiFp(configuration)
    return {
        /**
         * Performs persist operations for a specified shipment comment.
         * @summary shipment/{id}/comments
         * @param {string} id 
         * @param {SalesShipmentCommentRepositoryV1SavePostRequest} [salesShipmentCommentRepositoryV1SavePostBody] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        salesShipmentCommentRepositoryV1SavePost(id: string, salesShipmentCommentRepositoryV1SavePostBody?: SalesShipmentCommentRepositoryV1SavePostRequest, options?: any): AxiosPromise<SalesDataShipmentCommentInterface> {
            return localVarFp.salesShipmentCommentRepositoryV1SavePost(id, salesShipmentCommentRepositoryV1SavePostBody, options).then((request) => request(axios, basePath));
        },
        /**
         * Lists comments for a specified shipment.
         * @summary shipment/{id}/comments
         * @param {number} id The shipment ID.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        salesShipmentManagementV1GetCommentsListGet(id: number, options?: any): AxiosPromise<SalesDataShipmentCommentSearchResultInterface> {
            return localVarFp.salesShipmentManagementV1GetCommentsListGet(id, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * ShipmentIdCommentsApi - object-oriented interface
 * @export
 * @class ShipmentIdCommentsApi
 * @extends {BaseAPI}
 */
export class ShipmentIdCommentsApi extends BaseAPI {
    /**
     * Performs persist operations for a specified shipment comment.
     * @summary shipment/{id}/comments
     * @param {string} id 
     * @param {SalesShipmentCommentRepositoryV1SavePostRequest} [salesShipmentCommentRepositoryV1SavePostBody] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ShipmentIdCommentsApi
     */
    public salesShipmentCommentRepositoryV1SavePost(id: string, salesShipmentCommentRepositoryV1SavePostBody?: SalesShipmentCommentRepositoryV1SavePostRequest, options?: AxiosRequestConfig) {
        return ShipmentIdCommentsApiFp(this.configuration).salesShipmentCommentRepositoryV1SavePost(id, salesShipmentCommentRepositoryV1SavePostBody, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Lists comments for a specified shipment.
     * @summary shipment/{id}/comments
     * @param {number} id The shipment ID.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ShipmentIdCommentsApi
     */
    public salesShipmentManagementV1GetCommentsListGet(id: number, options?: AxiosRequestConfig) {
        return ShipmentIdCommentsApiFp(this.configuration).salesShipmentManagementV1GetCommentsListGet(id, options).then((request) => request(this.axios, this.basePath));
    }
}


/**
 * ShipmentIdEmailsApi - axios parameter creator
 * @export
 */
export const ShipmentIdEmailsApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Emails user a specified shipment.
         * @summary shipment/{id}/emails
         * @param {number} id The shipment ID.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        salesShipmentManagementV1NotifyPost: async (id: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('salesShipmentManagementV1NotifyPost', 'id', id)
            const localVarPath = `/V1/shipment/{id}/emails`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * ShipmentIdEmailsApi - functional programming interface
 * @export
 */
export const ShipmentIdEmailsApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = ShipmentIdEmailsApiAxiosParamCreator(configuration)
    return {
        /**
         * Emails user a specified shipment.
         * @summary shipment/{id}/emails
         * @param {number} id The shipment ID.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async salesShipmentManagementV1NotifyPost(id: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<boolean>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.salesShipmentManagementV1NotifyPost(id, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * ShipmentIdEmailsApi - factory interface
 * @export
 */
export const ShipmentIdEmailsApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = ShipmentIdEmailsApiFp(configuration)
    return {
        /**
         * Emails user a specified shipment.
         * @summary shipment/{id}/emails
         * @param {number} id The shipment ID.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        salesShipmentManagementV1NotifyPost(id: number, options?: any): AxiosPromise<boolean> {
            return localVarFp.salesShipmentManagementV1NotifyPost(id, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * ShipmentIdEmailsApi - object-oriented interface
 * @export
 * @class ShipmentIdEmailsApi
 * @extends {BaseAPI}
 */
export class ShipmentIdEmailsApi extends BaseAPI {
    /**
     * Emails user a specified shipment.
     * @summary shipment/{id}/emails
     * @param {number} id The shipment ID.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ShipmentIdEmailsApi
     */
    public salesShipmentManagementV1NotifyPost(id: number, options?: AxiosRequestConfig) {
        return ShipmentIdEmailsApiFp(this.configuration).salesShipmentManagementV1NotifyPost(id, options).then((request) => request(this.axios, this.basePath));
    }
}


/**
 * ShipmentIdLabelApi - axios parameter creator
 * @export
 */
export const ShipmentIdLabelApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Gets a specified shipment label.
         * @summary shipment/{id}/label
         * @param {number} id The shipment label ID.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        salesShipmentManagementV1GetLabelGet: async (id: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('salesShipmentManagementV1GetLabelGet', 'id', id)
            const localVarPath = `/V1/shipment/{id}/label`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * ShipmentIdLabelApi - functional programming interface
 * @export
 */
export const ShipmentIdLabelApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = ShipmentIdLabelApiAxiosParamCreator(configuration)
    return {
        /**
         * Gets a specified shipment label.
         * @summary shipment/{id}/label
         * @param {number} id The shipment label ID.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async salesShipmentManagementV1GetLabelGet(id: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<string>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.salesShipmentManagementV1GetLabelGet(id, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * ShipmentIdLabelApi - factory interface
 * @export
 */
export const ShipmentIdLabelApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = ShipmentIdLabelApiFp(configuration)
    return {
        /**
         * Gets a specified shipment label.
         * @summary shipment/{id}/label
         * @param {number} id The shipment label ID.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        salesShipmentManagementV1GetLabelGet(id: number, options?: any): AxiosPromise<string> {
            return localVarFp.salesShipmentManagementV1GetLabelGet(id, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * ShipmentIdLabelApi - object-oriented interface
 * @export
 * @class ShipmentIdLabelApi
 * @extends {BaseAPI}
 */
export class ShipmentIdLabelApi extends BaseAPI {
    /**
     * Gets a specified shipment label.
     * @summary shipment/{id}/label
     * @param {number} id The shipment label ID.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ShipmentIdLabelApi
     */
    public salesShipmentManagementV1GetLabelGet(id: number, options?: AxiosRequestConfig) {
        return ShipmentIdLabelApiFp(this.configuration).salesShipmentManagementV1GetLabelGet(id, options).then((request) => request(this.axios, this.basePath));
    }
}


/**
 * ShipmentTrackApi - axios parameter creator
 * @export
 */
export const ShipmentTrackApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Performs persist operations for a specified shipment track.
         * @summary shipment/track
         * @param {SalesShipmentTrackRepositoryV1SavePostRequest} [salesShipmentTrackRepositoryV1SavePostBody] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        salesShipmentTrackRepositoryV1SavePost: async (salesShipmentTrackRepositoryV1SavePostBody?: SalesShipmentTrackRepositoryV1SavePostRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/V1/shipment/track`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(salesShipmentTrackRepositoryV1SavePostBody, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * ShipmentTrackApi - functional programming interface
 * @export
 */
export const ShipmentTrackApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = ShipmentTrackApiAxiosParamCreator(configuration)
    return {
        /**
         * Performs persist operations for a specified shipment track.
         * @summary shipment/track
         * @param {SalesShipmentTrackRepositoryV1SavePostRequest} [salesShipmentTrackRepositoryV1SavePostBody] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async salesShipmentTrackRepositoryV1SavePost(salesShipmentTrackRepositoryV1SavePostBody?: SalesShipmentTrackRepositoryV1SavePostRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<SalesDataShipmentTrackInterface>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.salesShipmentTrackRepositoryV1SavePost(salesShipmentTrackRepositoryV1SavePostBody, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * ShipmentTrackApi - factory interface
 * @export
 */
export const ShipmentTrackApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = ShipmentTrackApiFp(configuration)
    return {
        /**
         * Performs persist operations for a specified shipment track.
         * @summary shipment/track
         * @param {SalesShipmentTrackRepositoryV1SavePostRequest} [salesShipmentTrackRepositoryV1SavePostBody] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        salesShipmentTrackRepositoryV1SavePost(salesShipmentTrackRepositoryV1SavePostBody?: SalesShipmentTrackRepositoryV1SavePostRequest, options?: any): AxiosPromise<SalesDataShipmentTrackInterface> {
            return localVarFp.salesShipmentTrackRepositoryV1SavePost(salesShipmentTrackRepositoryV1SavePostBody, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * ShipmentTrackApi - object-oriented interface
 * @export
 * @class ShipmentTrackApi
 * @extends {BaseAPI}
 */
export class ShipmentTrackApi extends BaseAPI {
    /**
     * Performs persist operations for a specified shipment track.
     * @summary shipment/track
     * @param {SalesShipmentTrackRepositoryV1SavePostRequest} [salesShipmentTrackRepositoryV1SavePostBody] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ShipmentTrackApi
     */
    public salesShipmentTrackRepositoryV1SavePost(salesShipmentTrackRepositoryV1SavePostBody?: SalesShipmentTrackRepositoryV1SavePostRequest, options?: AxiosRequestConfig) {
        return ShipmentTrackApiFp(this.configuration).salesShipmentTrackRepositoryV1SavePost(salesShipmentTrackRepositoryV1SavePostBody, options).then((request) => request(this.axios, this.basePath));
    }
}


/**
 * ShipmentTrackIdApi - axios parameter creator
 * @export
 */
export const ShipmentTrackIdApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Deletes a specified shipment track by ID.
         * @summary shipment/track/{id}
         * @param {number} id The shipment track ID.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        salesShipmentTrackRepositoryV1DeleteByIdDelete: async (id: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('salesShipmentTrackRepositoryV1DeleteByIdDelete', 'id', id)
            const localVarPath = `/V1/shipment/track/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * ShipmentTrackIdApi - functional programming interface
 * @export
 */
export const ShipmentTrackIdApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = ShipmentTrackIdApiAxiosParamCreator(configuration)
    return {
        /**
         * Deletes a specified shipment track by ID.
         * @summary shipment/track/{id}
         * @param {number} id The shipment track ID.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async salesShipmentTrackRepositoryV1DeleteByIdDelete(id: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<boolean>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.salesShipmentTrackRepositoryV1DeleteByIdDelete(id, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * ShipmentTrackIdApi - factory interface
 * @export
 */
export const ShipmentTrackIdApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = ShipmentTrackIdApiFp(configuration)
    return {
        /**
         * Deletes a specified shipment track by ID.
         * @summary shipment/track/{id}
         * @param {number} id The shipment track ID.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        salesShipmentTrackRepositoryV1DeleteByIdDelete(id: number, options?: any): AxiosPromise<boolean> {
            return localVarFp.salesShipmentTrackRepositoryV1DeleteByIdDelete(id, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * ShipmentTrackIdApi - object-oriented interface
 * @export
 * @class ShipmentTrackIdApi
 * @extends {BaseAPI}
 */
export class ShipmentTrackIdApi extends BaseAPI {
    /**
     * Deletes a specified shipment track by ID.
     * @summary shipment/track/{id}
     * @param {number} id The shipment track ID.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ShipmentTrackIdApi
     */
    public salesShipmentTrackRepositoryV1DeleteByIdDelete(id: number, options?: AxiosRequestConfig) {
        return ShipmentTrackIdApiFp(this.configuration).salesShipmentTrackRepositoryV1DeleteByIdDelete(id, options).then((request) => request(this.axios, this.basePath));
    }
}


/**
 * ShipmentsApi - axios parameter creator
 * @export
 */
export const ShipmentsApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Lists shipments that match specified search criteria. This call returns an array of objects, but detailed information about each object’s attributes might not be included. See http://devdocs.magento.com/codelinks/attributes.html#ShipmentRepositoryInterface to determine which call to use to get detailed information about all attributes for an object.
         * @summary shipments
         * @param {string} [searchCriteriaFilterGroups0Filters0Field] Field
         * @param {string} [searchCriteriaFilterGroups0Filters0Value] Value
         * @param {string} [searchCriteriaFilterGroups0Filters0ConditionType] Condition type
         * @param {string} [searchCriteriaSortOrders0Field] Sorting field.
         * @param {string} [searchCriteriaSortOrders0Direction] Sorting direction.
         * @param {number} [searchCriteriaPageSize] Page size.
         * @param {number} [searchCriteriaCurrentPage] Current page.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        salesShipmentRepositoryV1GetListGet: async (searchCriteriaFilterGroups0Filters0Field?: string, searchCriteriaFilterGroups0Filters0Value?: string, searchCriteriaFilterGroups0Filters0ConditionType?: string, searchCriteriaSortOrders0Field?: string, searchCriteriaSortOrders0Direction?: string, searchCriteriaPageSize?: number, searchCriteriaCurrentPage?: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/V1/shipments`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (searchCriteriaFilterGroups0Filters0Field !== undefined) {
                localVarQueryParameter['searchCriteria[filterGroups][0][filters][0][field]'] = searchCriteriaFilterGroups0Filters0Field;
            }

            if (searchCriteriaFilterGroups0Filters0Value !== undefined) {
                localVarQueryParameter['searchCriteria[filterGroups][0][filters][0][value]'] = searchCriteriaFilterGroups0Filters0Value;
            }

            if (searchCriteriaFilterGroups0Filters0ConditionType !== undefined) {
                localVarQueryParameter['searchCriteria[filterGroups][0][filters][0][conditionType]'] = searchCriteriaFilterGroups0Filters0ConditionType;
            }

            if (searchCriteriaSortOrders0Field !== undefined) {
                localVarQueryParameter['searchCriteria[sortOrders][0][field]'] = searchCriteriaSortOrders0Field;
            }

            if (searchCriteriaSortOrders0Direction !== undefined) {
                localVarQueryParameter['searchCriteria[sortOrders][0][direction]'] = searchCriteriaSortOrders0Direction;
            }

            if (searchCriteriaPageSize !== undefined) {
                localVarQueryParameter['searchCriteria[pageSize]'] = searchCriteriaPageSize;
            }

            if (searchCriteriaCurrentPage !== undefined) {
                localVarQueryParameter['searchCriteria[currentPage]'] = searchCriteriaCurrentPage;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * ShipmentsApi - functional programming interface
 * @export
 */
export const ShipmentsApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = ShipmentsApiAxiosParamCreator(configuration)
    return {
        /**
         * Lists shipments that match specified search criteria. This call returns an array of objects, but detailed information about each object’s attributes might not be included. See http://devdocs.magento.com/codelinks/attributes.html#ShipmentRepositoryInterface to determine which call to use to get detailed information about all attributes for an object.
         * @summary shipments
         * @param {string} [searchCriteriaFilterGroups0Filters0Field] Field
         * @param {string} [searchCriteriaFilterGroups0Filters0Value] Value
         * @param {string} [searchCriteriaFilterGroups0Filters0ConditionType] Condition type
         * @param {string} [searchCriteriaSortOrders0Field] Sorting field.
         * @param {string} [searchCriteriaSortOrders0Direction] Sorting direction.
         * @param {number} [searchCriteriaPageSize] Page size.
         * @param {number} [searchCriteriaCurrentPage] Current page.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async salesShipmentRepositoryV1GetListGet(searchCriteriaFilterGroups0Filters0Field?: string, searchCriteriaFilterGroups0Filters0Value?: string, searchCriteriaFilterGroups0Filters0ConditionType?: string, searchCriteriaSortOrders0Field?: string, searchCriteriaSortOrders0Direction?: string, searchCriteriaPageSize?: number, searchCriteriaCurrentPage?: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<SalesDataShipmentSearchResultInterface>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.salesShipmentRepositoryV1GetListGet(searchCriteriaFilterGroups0Filters0Field, searchCriteriaFilterGroups0Filters0Value, searchCriteriaFilterGroups0Filters0ConditionType, searchCriteriaSortOrders0Field, searchCriteriaSortOrders0Direction, searchCriteriaPageSize, searchCriteriaCurrentPage, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * ShipmentsApi - factory interface
 * @export
 */
export const ShipmentsApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = ShipmentsApiFp(configuration)
    return {
        /**
         * Lists shipments that match specified search criteria. This call returns an array of objects, but detailed information about each object’s attributes might not be included. See http://devdocs.magento.com/codelinks/attributes.html#ShipmentRepositoryInterface to determine which call to use to get detailed information about all attributes for an object.
         * @summary shipments
         * @param {string} [searchCriteriaFilterGroups0Filters0Field] Field
         * @param {string} [searchCriteriaFilterGroups0Filters0Value] Value
         * @param {string} [searchCriteriaFilterGroups0Filters0ConditionType] Condition type
         * @param {string} [searchCriteriaSortOrders0Field] Sorting field.
         * @param {string} [searchCriteriaSortOrders0Direction] Sorting direction.
         * @param {number} [searchCriteriaPageSize] Page size.
         * @param {number} [searchCriteriaCurrentPage] Current page.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        salesShipmentRepositoryV1GetListGet(searchCriteriaFilterGroups0Filters0Field?: string, searchCriteriaFilterGroups0Filters0Value?: string, searchCriteriaFilterGroups0Filters0ConditionType?: string, searchCriteriaSortOrders0Field?: string, searchCriteriaSortOrders0Direction?: string, searchCriteriaPageSize?: number, searchCriteriaCurrentPage?: number, options?: any): AxiosPromise<SalesDataShipmentSearchResultInterface> {
            return localVarFp.salesShipmentRepositoryV1GetListGet(searchCriteriaFilterGroups0Filters0Field, searchCriteriaFilterGroups0Filters0Value, searchCriteriaFilterGroups0Filters0ConditionType, searchCriteriaSortOrders0Field, searchCriteriaSortOrders0Direction, searchCriteriaPageSize, searchCriteriaCurrentPage, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * ShipmentsApi - object-oriented interface
 * @export
 * @class ShipmentsApi
 * @extends {BaseAPI}
 */
export class ShipmentsApi extends BaseAPI {
    /**
     * Lists shipments that match specified search criteria. This call returns an array of objects, but detailed information about each object’s attributes might not be included. See http://devdocs.magento.com/codelinks/attributes.html#ShipmentRepositoryInterface to determine which call to use to get detailed information about all attributes for an object.
     * @summary shipments
     * @param {string} [searchCriteriaFilterGroups0Filters0Field] Field
     * @param {string} [searchCriteriaFilterGroups0Filters0Value] Value
     * @param {string} [searchCriteriaFilterGroups0Filters0ConditionType] Condition type
     * @param {string} [searchCriteriaSortOrders0Field] Sorting field.
     * @param {string} [searchCriteriaSortOrders0Direction] Sorting direction.
     * @param {number} [searchCriteriaPageSize] Page size.
     * @param {number} [searchCriteriaCurrentPage] Current page.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ShipmentsApi
     */
    public salesShipmentRepositoryV1GetListGet(searchCriteriaFilterGroups0Filters0Field?: string, searchCriteriaFilterGroups0Filters0Value?: string, searchCriteriaFilterGroups0Filters0ConditionType?: string, searchCriteriaSortOrders0Field?: string, searchCriteriaSortOrders0Direction?: string, searchCriteriaPageSize?: number, searchCriteriaCurrentPage?: number, options?: AxiosRequestConfig) {
        return ShipmentsApiFp(this.configuration).salesShipmentRepositoryV1GetListGet(searchCriteriaFilterGroups0Filters0Field, searchCriteriaFilterGroups0Filters0Value, searchCriteriaFilterGroups0Filters0ConditionType, searchCriteriaSortOrders0Field, searchCriteriaSortOrders0Direction, searchCriteriaPageSize, searchCriteriaCurrentPage, options).then((request) => request(this.axios, this.basePath));
    }
}


/**
 * StockItemsLowStockApi - axios parameter creator
 * @export
 */
export const StockItemsLowStockApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Retrieves a list of SKU\'s with low inventory qty
         * @summary stockItems/lowStock/
         * @param {number} scopeId 
         * @param {number} qty 
         * @param {number} [currentPage] 
         * @param {number} [pageSize] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        catalogInventoryStockRegistryV1GetLowStockItemsGet: async (scopeId: number, qty: number, currentPage?: number, pageSize?: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'scopeId' is not null or undefined
            assertParamExists('catalogInventoryStockRegistryV1GetLowStockItemsGet', 'scopeId', scopeId)
            // verify required parameter 'qty' is not null or undefined
            assertParamExists('catalogInventoryStockRegistryV1GetLowStockItemsGet', 'qty', qty)
            const localVarPath = `/V1/stockItems/lowStock/`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (scopeId !== undefined) {
                localVarQueryParameter['scopeId'] = scopeId;
            }

            if (qty !== undefined) {
                localVarQueryParameter['qty'] = qty;
            }

            if (currentPage !== undefined) {
                localVarQueryParameter['currentPage'] = currentPage;
            }

            if (pageSize !== undefined) {
                localVarQueryParameter['pageSize'] = pageSize;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * StockItemsLowStockApi - functional programming interface
 * @export
 */
export const StockItemsLowStockApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = StockItemsLowStockApiAxiosParamCreator(configuration)
    return {
        /**
         * Retrieves a list of SKU\'s with low inventory qty
         * @summary stockItems/lowStock/
         * @param {number} scopeId 
         * @param {number} qty 
         * @param {number} [currentPage] 
         * @param {number} [pageSize] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async catalogInventoryStockRegistryV1GetLowStockItemsGet(scopeId: number, qty: number, currentPage?: number, pageSize?: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<CatalogInventoryDataStockItemCollectionInterface>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.catalogInventoryStockRegistryV1GetLowStockItemsGet(scopeId, qty, currentPage, pageSize, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * StockItemsLowStockApi - factory interface
 * @export
 */
export const StockItemsLowStockApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = StockItemsLowStockApiFp(configuration)
    return {
        /**
         * Retrieves a list of SKU\'s with low inventory qty
         * @summary stockItems/lowStock/
         * @param {number} scopeId 
         * @param {number} qty 
         * @param {number} [currentPage] 
         * @param {number} [pageSize] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        catalogInventoryStockRegistryV1GetLowStockItemsGet(scopeId: number, qty: number, currentPage?: number, pageSize?: number, options?: any): AxiosPromise<CatalogInventoryDataStockItemCollectionInterface> {
            return localVarFp.catalogInventoryStockRegistryV1GetLowStockItemsGet(scopeId, qty, currentPage, pageSize, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * StockItemsLowStockApi - object-oriented interface
 * @export
 * @class StockItemsLowStockApi
 * @extends {BaseAPI}
 */
export class StockItemsLowStockApi extends BaseAPI {
    /**
     * Retrieves a list of SKU\'s with low inventory qty
     * @summary stockItems/lowStock/
     * @param {number} scopeId 
     * @param {number} qty 
     * @param {number} [currentPage] 
     * @param {number} [pageSize] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof StockItemsLowStockApi
     */
    public catalogInventoryStockRegistryV1GetLowStockItemsGet(scopeId: number, qty: number, currentPage?: number, pageSize?: number, options?: AxiosRequestConfig) {
        return StockItemsLowStockApiFp(this.configuration).catalogInventoryStockRegistryV1GetLowStockItemsGet(scopeId, qty, currentPage, pageSize, options).then((request) => request(this.axios, this.basePath));
    }
}


/**
 * StockItemsProductSkuApi - axios parameter creator
 * @export
 */
export const StockItemsProductSkuApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary stockItems/{productSku}
         * @param {string} productSku 
         * @param {number} [scopeId] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        catalogInventoryStockRegistryV1GetStockItemBySkuGet: async (productSku: string, scopeId?: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'productSku' is not null or undefined
            assertParamExists('catalogInventoryStockRegistryV1GetStockItemBySkuGet', 'productSku', productSku)
            const localVarPath = `/V1/stockItems/{productSku}`
                .replace(`{${"productSku"}}`, encodeURIComponent(String(productSku)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (scopeId !== undefined) {
                localVarQueryParameter['scopeId'] = scopeId;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * StockItemsProductSkuApi - functional programming interface
 * @export
 */
export const StockItemsProductSkuApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = StockItemsProductSkuApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @summary stockItems/{productSku}
         * @param {string} productSku 
         * @param {number} [scopeId] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async catalogInventoryStockRegistryV1GetStockItemBySkuGet(productSku: string, scopeId?: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<CatalogInventoryDataStockItemInterface>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.catalogInventoryStockRegistryV1GetStockItemBySkuGet(productSku, scopeId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * StockItemsProductSkuApi - factory interface
 * @export
 */
export const StockItemsProductSkuApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = StockItemsProductSkuApiFp(configuration)
    return {
        /**
         * 
         * @summary stockItems/{productSku}
         * @param {string} productSku 
         * @param {number} [scopeId] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        catalogInventoryStockRegistryV1GetStockItemBySkuGet(productSku: string, scopeId?: number, options?: any): AxiosPromise<CatalogInventoryDataStockItemInterface> {
            return localVarFp.catalogInventoryStockRegistryV1GetStockItemBySkuGet(productSku, scopeId, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * StockItemsProductSkuApi - object-oriented interface
 * @export
 * @class StockItemsProductSkuApi
 * @extends {BaseAPI}
 */
export class StockItemsProductSkuApi extends BaseAPI {
    /**
     * 
     * @summary stockItems/{productSku}
     * @param {string} productSku 
     * @param {number} [scopeId] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof StockItemsProductSkuApi
     */
    public catalogInventoryStockRegistryV1GetStockItemBySkuGet(productSku: string, scopeId?: number, options?: AxiosRequestConfig) {
        return StockItemsProductSkuApiFp(this.configuration).catalogInventoryStockRegistryV1GetStockItemBySkuGet(productSku, scopeId, options).then((request) => request(this.axios, this.basePath));
    }
}


/**
 * StockStatusesProductSkuApi - axios parameter creator
 * @export
 */
export const StockStatusesProductSkuApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary stockStatuses/{productSku}
         * @param {string} productSku 
         * @param {number} [scopeId] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        catalogInventoryStockRegistryV1GetStockStatusBySkuGet: async (productSku: string, scopeId?: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'productSku' is not null or undefined
            assertParamExists('catalogInventoryStockRegistryV1GetStockStatusBySkuGet', 'productSku', productSku)
            const localVarPath = `/V1/stockStatuses/{productSku}`
                .replace(`{${"productSku"}}`, encodeURIComponent(String(productSku)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (scopeId !== undefined) {
                localVarQueryParameter['scopeId'] = scopeId;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * StockStatusesProductSkuApi - functional programming interface
 * @export
 */
export const StockStatusesProductSkuApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = StockStatusesProductSkuApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @summary stockStatuses/{productSku}
         * @param {string} productSku 
         * @param {number} [scopeId] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async catalogInventoryStockRegistryV1GetStockStatusBySkuGet(productSku: string, scopeId?: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<CatalogInventoryDataStockStatusInterface>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.catalogInventoryStockRegistryV1GetStockStatusBySkuGet(productSku, scopeId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * StockStatusesProductSkuApi - factory interface
 * @export
 */
export const StockStatusesProductSkuApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = StockStatusesProductSkuApiFp(configuration)
    return {
        /**
         * 
         * @summary stockStatuses/{productSku}
         * @param {string} productSku 
         * @param {number} [scopeId] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        catalogInventoryStockRegistryV1GetStockStatusBySkuGet(productSku: string, scopeId?: number, options?: any): AxiosPromise<CatalogInventoryDataStockStatusInterface> {
            return localVarFp.catalogInventoryStockRegistryV1GetStockStatusBySkuGet(productSku, scopeId, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * StockStatusesProductSkuApi - object-oriented interface
 * @export
 * @class StockStatusesProductSkuApi
 * @extends {BaseAPI}
 */
export class StockStatusesProductSkuApi extends BaseAPI {
    /**
     * 
     * @summary stockStatuses/{productSku}
     * @param {string} productSku 
     * @param {number} [scopeId] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof StockStatusesProductSkuApi
     */
    public catalogInventoryStockRegistryV1GetStockStatusBySkuGet(productSku: string, scopeId?: number, options?: AxiosRequestConfig) {
        return StockStatusesProductSkuApiFp(this.configuration).catalogInventoryStockRegistryV1GetStockStatusBySkuGet(productSku, scopeId, options).then((request) => request(this.axios, this.basePath));
    }
}


/**
 * StoreStoreConfigsApi - axios parameter creator
 * @export
 */
export const StoreStoreConfigsApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary store/storeConfigs
         * @param {Array<string>} [storeCodes] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        storeStoreConfigManagerV1GetStoreConfigsGet: async (storeCodes?: Array<string>, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/V1/store/storeConfigs`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (storeCodes) {
                localVarQueryParameter['storeCodes'] = storeCodes.join(COLLECTION_FORMATS.csv);
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * StoreStoreConfigsApi - functional programming interface
 * @export
 */
export const StoreStoreConfigsApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = StoreStoreConfigsApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @summary store/storeConfigs
         * @param {Array<string>} [storeCodes] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async storeStoreConfigManagerV1GetStoreConfigsGet(storeCodes?: Array<string>, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<StoreDataStoreConfigInterface>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.storeStoreConfigManagerV1GetStoreConfigsGet(storeCodes, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * StoreStoreConfigsApi - factory interface
 * @export
 */
export const StoreStoreConfigsApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = StoreStoreConfigsApiFp(configuration)
    return {
        /**
         * 
         * @summary store/storeConfigs
         * @param {Array<string>} [storeCodes] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        storeStoreConfigManagerV1GetStoreConfigsGet(storeCodes?: Array<string>, options?: any): AxiosPromise<Array<StoreDataStoreConfigInterface>> {
            return localVarFp.storeStoreConfigManagerV1GetStoreConfigsGet(storeCodes, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * StoreStoreConfigsApi - object-oriented interface
 * @export
 * @class StoreStoreConfigsApi
 * @extends {BaseAPI}
 */
export class StoreStoreConfigsApi extends BaseAPI {
    /**
     * 
     * @summary store/storeConfigs
     * @param {Array<string>} [storeCodes] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof StoreStoreConfigsApi
     */
    public storeStoreConfigManagerV1GetStoreConfigsGet(storeCodes?: Array<string>, options?: AxiosRequestConfig) {
        return StoreStoreConfigsApiFp(this.configuration).storeStoreConfigManagerV1GetStoreConfigsGet(storeCodes, options).then((request) => request(this.axios, this.basePath));
    }
}


/**
 * StoreStoreGroupsApi - axios parameter creator
 * @export
 */
export const StoreStoreGroupsApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Retrieve list of all groups
         * @summary store/storeGroups
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        storeGroupRepositoryV1GetListGet: async (options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/V1/store/storeGroups`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * StoreStoreGroupsApi - functional programming interface
 * @export
 */
export const StoreStoreGroupsApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = StoreStoreGroupsApiAxiosParamCreator(configuration)
    return {
        /**
         * Retrieve list of all groups
         * @summary store/storeGroups
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async storeGroupRepositoryV1GetListGet(options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<StoreDataGroupInterface>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.storeGroupRepositoryV1GetListGet(options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * StoreStoreGroupsApi - factory interface
 * @export
 */
export const StoreStoreGroupsApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = StoreStoreGroupsApiFp(configuration)
    return {
        /**
         * Retrieve list of all groups
         * @summary store/storeGroups
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        storeGroupRepositoryV1GetListGet(options?: any): AxiosPromise<Array<StoreDataGroupInterface>> {
            return localVarFp.storeGroupRepositoryV1GetListGet(options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * StoreStoreGroupsApi - object-oriented interface
 * @export
 * @class StoreStoreGroupsApi
 * @extends {BaseAPI}
 */
export class StoreStoreGroupsApi extends BaseAPI {
    /**
     * Retrieve list of all groups
     * @summary store/storeGroups
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof StoreStoreGroupsApi
     */
    public storeGroupRepositoryV1GetListGet(options?: AxiosRequestConfig) {
        return StoreStoreGroupsApiFp(this.configuration).storeGroupRepositoryV1GetListGet(options).then((request) => request(this.axios, this.basePath));
    }
}


/**
 * StoreStoreViewsApi - axios parameter creator
 * @export
 */
export const StoreStoreViewsApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Retrieve list of all stores
         * @summary store/storeViews
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        storeStoreRepositoryV1GetListGet: async (options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/V1/store/storeViews`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * StoreStoreViewsApi - functional programming interface
 * @export
 */
export const StoreStoreViewsApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = StoreStoreViewsApiAxiosParamCreator(configuration)
    return {
        /**
         * Retrieve list of all stores
         * @summary store/storeViews
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async storeStoreRepositoryV1GetListGet(options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<StoreDataStoreInterface>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.storeStoreRepositoryV1GetListGet(options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * StoreStoreViewsApi - factory interface
 * @export
 */
export const StoreStoreViewsApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = StoreStoreViewsApiFp(configuration)
    return {
        /**
         * Retrieve list of all stores
         * @summary store/storeViews
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        storeStoreRepositoryV1GetListGet(options?: any): AxiosPromise<Array<StoreDataStoreInterface>> {
            return localVarFp.storeStoreRepositoryV1GetListGet(options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * StoreStoreViewsApi - object-oriented interface
 * @export
 * @class StoreStoreViewsApi
 * @extends {BaseAPI}
 */
export class StoreStoreViewsApi extends BaseAPI {
    /**
     * Retrieve list of all stores
     * @summary store/storeViews
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof StoreStoreViewsApi
     */
    public storeStoreRepositoryV1GetListGet(options?: AxiosRequestConfig) {
        return StoreStoreViewsApiFp(this.configuration).storeStoreRepositoryV1GetListGet(options).then((request) => request(this.axios, this.basePath));
    }
}


/**
 * StoreWebsitesApi - axios parameter creator
 * @export
 */
export const StoreWebsitesApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Retrieve list of all websites
         * @summary store/websites
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        storeWebsiteRepositoryV1GetListGet: async (options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/V1/store/websites`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * StoreWebsitesApi - functional programming interface
 * @export
 */
export const StoreWebsitesApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = StoreWebsitesApiAxiosParamCreator(configuration)
    return {
        /**
         * Retrieve list of all websites
         * @summary store/websites
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async storeWebsiteRepositoryV1GetListGet(options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<StoreDataWebsiteInterface>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.storeWebsiteRepositoryV1GetListGet(options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * StoreWebsitesApi - factory interface
 * @export
 */
export const StoreWebsitesApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = StoreWebsitesApiFp(configuration)
    return {
        /**
         * Retrieve list of all websites
         * @summary store/websites
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        storeWebsiteRepositoryV1GetListGet(options?: any): AxiosPromise<Array<StoreDataWebsiteInterface>> {
            return localVarFp.storeWebsiteRepositoryV1GetListGet(options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * StoreWebsitesApi - object-oriented interface
 * @export
 * @class StoreWebsitesApi
 * @extends {BaseAPI}
 */
export class StoreWebsitesApi extends BaseAPI {
    /**
     * Retrieve list of all websites
     * @summary store/websites
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof StoreWebsitesApi
     */
    public storeWebsiteRepositoryV1GetListGet(options?: AxiosRequestConfig) {
        return StoreWebsitesApiFp(this.configuration).storeWebsiteRepositoryV1GetListGet(options).then((request) => request(this.axios, this.basePath));
    }
}


/**
 * TaxClassesApi - axios parameter creator
 * @export
 */
export const TaxClassesApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Create a Tax Class
         * @summary taxClasses
         * @param {TaxTaxClassRepositoryV1SavePostRequest} [taxTaxClassRepositoryV1SavePostBody] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        taxTaxClassRepositoryV1SavePost: async (taxTaxClassRepositoryV1SavePostBody?: TaxTaxClassRepositoryV1SavePostRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/V1/taxClasses`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(taxTaxClassRepositoryV1SavePostBody, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * TaxClassesApi - functional programming interface
 * @export
 */
export const TaxClassesApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = TaxClassesApiAxiosParamCreator(configuration)
    return {
        /**
         * Create a Tax Class
         * @summary taxClasses
         * @param {TaxTaxClassRepositoryV1SavePostRequest} [taxTaxClassRepositoryV1SavePostBody] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async taxTaxClassRepositoryV1SavePost(taxTaxClassRepositoryV1SavePostBody?: TaxTaxClassRepositoryV1SavePostRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<string>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.taxTaxClassRepositoryV1SavePost(taxTaxClassRepositoryV1SavePostBody, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * TaxClassesApi - factory interface
 * @export
 */
export const TaxClassesApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = TaxClassesApiFp(configuration)
    return {
        /**
         * Create a Tax Class
         * @summary taxClasses
         * @param {TaxTaxClassRepositoryV1SavePostRequest} [taxTaxClassRepositoryV1SavePostBody] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        taxTaxClassRepositoryV1SavePost(taxTaxClassRepositoryV1SavePostBody?: TaxTaxClassRepositoryV1SavePostRequest, options?: any): AxiosPromise<string> {
            return localVarFp.taxTaxClassRepositoryV1SavePost(taxTaxClassRepositoryV1SavePostBody, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * TaxClassesApi - object-oriented interface
 * @export
 * @class TaxClassesApi
 * @extends {BaseAPI}
 */
export class TaxClassesApi extends BaseAPI {
    /**
     * Create a Tax Class
     * @summary taxClasses
     * @param {TaxTaxClassRepositoryV1SavePostRequest} [taxTaxClassRepositoryV1SavePostBody] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TaxClassesApi
     */
    public taxTaxClassRepositoryV1SavePost(taxTaxClassRepositoryV1SavePostBody?: TaxTaxClassRepositoryV1SavePostRequest, options?: AxiosRequestConfig) {
        return TaxClassesApiFp(this.configuration).taxTaxClassRepositoryV1SavePost(taxTaxClassRepositoryV1SavePostBody, options).then((request) => request(this.axios, this.basePath));
    }
}


/**
 * TaxClassesClassIdApi - axios parameter creator
 * @export
 */
export const TaxClassesClassIdApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Create a Tax Class
         * @summary taxClasses/{classId}
         * @param {string} classId 
         * @param {TaxTaxClassRepositoryV1SavePostRequest} [taxTaxClassRepositoryV1SavePutBody] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        taxTaxClassRepositoryV1SavePut: async (classId: string, taxTaxClassRepositoryV1SavePutBody?: TaxTaxClassRepositoryV1SavePostRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'classId' is not null or undefined
            assertParamExists('taxTaxClassRepositoryV1SavePut', 'classId', classId)
            const localVarPath = `/V1/taxClasses/{classId}`
                .replace(`{${"classId"}}`, encodeURIComponent(String(classId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(taxTaxClassRepositoryV1SavePutBody, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * TaxClassesClassIdApi - functional programming interface
 * @export
 */
export const TaxClassesClassIdApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = TaxClassesClassIdApiAxiosParamCreator(configuration)
    return {
        /**
         * Create a Tax Class
         * @summary taxClasses/{classId}
         * @param {string} classId 
         * @param {TaxTaxClassRepositoryV1SavePostRequest} [taxTaxClassRepositoryV1SavePutBody] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async taxTaxClassRepositoryV1SavePut(classId: string, taxTaxClassRepositoryV1SavePutBody?: TaxTaxClassRepositoryV1SavePostRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<string>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.taxTaxClassRepositoryV1SavePut(classId, taxTaxClassRepositoryV1SavePutBody, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * TaxClassesClassIdApi - factory interface
 * @export
 */
export const TaxClassesClassIdApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = TaxClassesClassIdApiFp(configuration)
    return {
        /**
         * Create a Tax Class
         * @summary taxClasses/{classId}
         * @param {string} classId 
         * @param {TaxTaxClassRepositoryV1SavePostRequest} [taxTaxClassRepositoryV1SavePutBody] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        taxTaxClassRepositoryV1SavePut(classId: string, taxTaxClassRepositoryV1SavePutBody?: TaxTaxClassRepositoryV1SavePostRequest, options?: any): AxiosPromise<string> {
            return localVarFp.taxTaxClassRepositoryV1SavePut(classId, taxTaxClassRepositoryV1SavePutBody, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * TaxClassesClassIdApi - object-oriented interface
 * @export
 * @class TaxClassesClassIdApi
 * @extends {BaseAPI}
 */
export class TaxClassesClassIdApi extends BaseAPI {
    /**
     * Create a Tax Class
     * @summary taxClasses/{classId}
     * @param {string} classId 
     * @param {TaxTaxClassRepositoryV1SavePostRequest} [taxTaxClassRepositoryV1SavePutBody] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TaxClassesClassIdApi
     */
    public taxTaxClassRepositoryV1SavePut(classId: string, taxTaxClassRepositoryV1SavePutBody?: TaxTaxClassRepositoryV1SavePostRequest, options?: AxiosRequestConfig) {
        return TaxClassesClassIdApiFp(this.configuration).taxTaxClassRepositoryV1SavePut(classId, taxTaxClassRepositoryV1SavePutBody, options).then((request) => request(this.axios, this.basePath));
    }
}


/**
 * TaxClassesSearchApi - axios parameter creator
 * @export
 */
export const TaxClassesSearchApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Retrieve tax classes which match a specific criteria. This call returns an array of objects, but detailed information about each object’s attributes might not be included. See http://devdocs.magento.com/codelinks/attributes.html#TaxClassRepositoryInterface to determine which call to use to get detailed information about all attributes for an object.
         * @summary taxClasses/search
         * @param {string} [searchCriteriaFilterGroups0Filters0Field] Field
         * @param {string} [searchCriteriaFilterGroups0Filters0Value] Value
         * @param {string} [searchCriteriaFilterGroups0Filters0ConditionType] Condition type
         * @param {string} [searchCriteriaSortOrders0Field] Sorting field.
         * @param {string} [searchCriteriaSortOrders0Direction] Sorting direction.
         * @param {number} [searchCriteriaPageSize] Page size.
         * @param {number} [searchCriteriaCurrentPage] Current page.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        taxTaxClassRepositoryV1GetListGet: async (searchCriteriaFilterGroups0Filters0Field?: string, searchCriteriaFilterGroups0Filters0Value?: string, searchCriteriaFilterGroups0Filters0ConditionType?: string, searchCriteriaSortOrders0Field?: string, searchCriteriaSortOrders0Direction?: string, searchCriteriaPageSize?: number, searchCriteriaCurrentPage?: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/V1/taxClasses/search`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (searchCriteriaFilterGroups0Filters0Field !== undefined) {
                localVarQueryParameter['searchCriteria[filterGroups][0][filters][0][field]'] = searchCriteriaFilterGroups0Filters0Field;
            }

            if (searchCriteriaFilterGroups0Filters0Value !== undefined) {
                localVarQueryParameter['searchCriteria[filterGroups][0][filters][0][value]'] = searchCriteriaFilterGroups0Filters0Value;
            }

            if (searchCriteriaFilterGroups0Filters0ConditionType !== undefined) {
                localVarQueryParameter['searchCriteria[filterGroups][0][filters][0][conditionType]'] = searchCriteriaFilterGroups0Filters0ConditionType;
            }

            if (searchCriteriaSortOrders0Field !== undefined) {
                localVarQueryParameter['searchCriteria[sortOrders][0][field]'] = searchCriteriaSortOrders0Field;
            }

            if (searchCriteriaSortOrders0Direction !== undefined) {
                localVarQueryParameter['searchCriteria[sortOrders][0][direction]'] = searchCriteriaSortOrders0Direction;
            }

            if (searchCriteriaPageSize !== undefined) {
                localVarQueryParameter['searchCriteria[pageSize]'] = searchCriteriaPageSize;
            }

            if (searchCriteriaCurrentPage !== undefined) {
                localVarQueryParameter['searchCriteria[currentPage]'] = searchCriteriaCurrentPage;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * TaxClassesSearchApi - functional programming interface
 * @export
 */
export const TaxClassesSearchApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = TaxClassesSearchApiAxiosParamCreator(configuration)
    return {
        /**
         * Retrieve tax classes which match a specific criteria. This call returns an array of objects, but detailed information about each object’s attributes might not be included. See http://devdocs.magento.com/codelinks/attributes.html#TaxClassRepositoryInterface to determine which call to use to get detailed information about all attributes for an object.
         * @summary taxClasses/search
         * @param {string} [searchCriteriaFilterGroups0Filters0Field] Field
         * @param {string} [searchCriteriaFilterGroups0Filters0Value] Value
         * @param {string} [searchCriteriaFilterGroups0Filters0ConditionType] Condition type
         * @param {string} [searchCriteriaSortOrders0Field] Sorting field.
         * @param {string} [searchCriteriaSortOrders0Direction] Sorting direction.
         * @param {number} [searchCriteriaPageSize] Page size.
         * @param {number} [searchCriteriaCurrentPage] Current page.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async taxTaxClassRepositoryV1GetListGet(searchCriteriaFilterGroups0Filters0Field?: string, searchCriteriaFilterGroups0Filters0Value?: string, searchCriteriaFilterGroups0Filters0ConditionType?: string, searchCriteriaSortOrders0Field?: string, searchCriteriaSortOrders0Direction?: string, searchCriteriaPageSize?: number, searchCriteriaCurrentPage?: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<TaxDataTaxClassSearchResultsInterface>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.taxTaxClassRepositoryV1GetListGet(searchCriteriaFilterGroups0Filters0Field, searchCriteriaFilterGroups0Filters0Value, searchCriteriaFilterGroups0Filters0ConditionType, searchCriteriaSortOrders0Field, searchCriteriaSortOrders0Direction, searchCriteriaPageSize, searchCriteriaCurrentPage, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * TaxClassesSearchApi - factory interface
 * @export
 */
export const TaxClassesSearchApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = TaxClassesSearchApiFp(configuration)
    return {
        /**
         * Retrieve tax classes which match a specific criteria. This call returns an array of objects, but detailed information about each object’s attributes might not be included. See http://devdocs.magento.com/codelinks/attributes.html#TaxClassRepositoryInterface to determine which call to use to get detailed information about all attributes for an object.
         * @summary taxClasses/search
         * @param {string} [searchCriteriaFilterGroups0Filters0Field] Field
         * @param {string} [searchCriteriaFilterGroups0Filters0Value] Value
         * @param {string} [searchCriteriaFilterGroups0Filters0ConditionType] Condition type
         * @param {string} [searchCriteriaSortOrders0Field] Sorting field.
         * @param {string} [searchCriteriaSortOrders0Direction] Sorting direction.
         * @param {number} [searchCriteriaPageSize] Page size.
         * @param {number} [searchCriteriaCurrentPage] Current page.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        taxTaxClassRepositoryV1GetListGet(searchCriteriaFilterGroups0Filters0Field?: string, searchCriteriaFilterGroups0Filters0Value?: string, searchCriteriaFilterGroups0Filters0ConditionType?: string, searchCriteriaSortOrders0Field?: string, searchCriteriaSortOrders0Direction?: string, searchCriteriaPageSize?: number, searchCriteriaCurrentPage?: number, options?: any): AxiosPromise<TaxDataTaxClassSearchResultsInterface> {
            return localVarFp.taxTaxClassRepositoryV1GetListGet(searchCriteriaFilterGroups0Filters0Field, searchCriteriaFilterGroups0Filters0Value, searchCriteriaFilterGroups0Filters0ConditionType, searchCriteriaSortOrders0Field, searchCriteriaSortOrders0Direction, searchCriteriaPageSize, searchCriteriaCurrentPage, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * TaxClassesSearchApi - object-oriented interface
 * @export
 * @class TaxClassesSearchApi
 * @extends {BaseAPI}
 */
export class TaxClassesSearchApi extends BaseAPI {
    /**
     * Retrieve tax classes which match a specific criteria. This call returns an array of objects, but detailed information about each object’s attributes might not be included. See http://devdocs.magento.com/codelinks/attributes.html#TaxClassRepositoryInterface to determine which call to use to get detailed information about all attributes for an object.
     * @summary taxClasses/search
     * @param {string} [searchCriteriaFilterGroups0Filters0Field] Field
     * @param {string} [searchCriteriaFilterGroups0Filters0Value] Value
     * @param {string} [searchCriteriaFilterGroups0Filters0ConditionType] Condition type
     * @param {string} [searchCriteriaSortOrders0Field] Sorting field.
     * @param {string} [searchCriteriaSortOrders0Direction] Sorting direction.
     * @param {number} [searchCriteriaPageSize] Page size.
     * @param {number} [searchCriteriaCurrentPage] Current page.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TaxClassesSearchApi
     */
    public taxTaxClassRepositoryV1GetListGet(searchCriteriaFilterGroups0Filters0Field?: string, searchCriteriaFilterGroups0Filters0Value?: string, searchCriteriaFilterGroups0Filters0ConditionType?: string, searchCriteriaSortOrders0Field?: string, searchCriteriaSortOrders0Direction?: string, searchCriteriaPageSize?: number, searchCriteriaCurrentPage?: number, options?: AxiosRequestConfig) {
        return TaxClassesSearchApiFp(this.configuration).taxTaxClassRepositoryV1GetListGet(searchCriteriaFilterGroups0Filters0Field, searchCriteriaFilterGroups0Filters0Value, searchCriteriaFilterGroups0Filters0ConditionType, searchCriteriaSortOrders0Field, searchCriteriaSortOrders0Direction, searchCriteriaPageSize, searchCriteriaCurrentPage, options).then((request) => request(this.axios, this.basePath));
    }
}


/**
 * TaxClassesTaxClassIdApi - axios parameter creator
 * @export
 */
export const TaxClassesTaxClassIdApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Delete a tax class with the given tax class id.
         * @summary taxClasses/{taxClassId}
         * @param {number} taxClassId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        taxTaxClassRepositoryV1DeleteByIdDelete: async (taxClassId: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'taxClassId' is not null or undefined
            assertParamExists('taxTaxClassRepositoryV1DeleteByIdDelete', 'taxClassId', taxClassId)
            const localVarPath = `/V1/taxClasses/{taxClassId}`
                .replace(`{${"taxClassId"}}`, encodeURIComponent(String(taxClassId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Get a tax class with the given tax class id.
         * @summary taxClasses/{taxClassId}
         * @param {number} taxClassId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        taxTaxClassRepositoryV1GetGet: async (taxClassId: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'taxClassId' is not null or undefined
            assertParamExists('taxTaxClassRepositoryV1GetGet', 'taxClassId', taxClassId)
            const localVarPath = `/V1/taxClasses/{taxClassId}`
                .replace(`{${"taxClassId"}}`, encodeURIComponent(String(taxClassId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * TaxClassesTaxClassIdApi - functional programming interface
 * @export
 */
export const TaxClassesTaxClassIdApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = TaxClassesTaxClassIdApiAxiosParamCreator(configuration)
    return {
        /**
         * Delete a tax class with the given tax class id.
         * @summary taxClasses/{taxClassId}
         * @param {number} taxClassId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async taxTaxClassRepositoryV1DeleteByIdDelete(taxClassId: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<boolean>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.taxTaxClassRepositoryV1DeleteByIdDelete(taxClassId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Get a tax class with the given tax class id.
         * @summary taxClasses/{taxClassId}
         * @param {number} taxClassId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async taxTaxClassRepositoryV1GetGet(taxClassId: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<TaxDataTaxClassInterface>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.taxTaxClassRepositoryV1GetGet(taxClassId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * TaxClassesTaxClassIdApi - factory interface
 * @export
 */
export const TaxClassesTaxClassIdApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = TaxClassesTaxClassIdApiFp(configuration)
    return {
        /**
         * Delete a tax class with the given tax class id.
         * @summary taxClasses/{taxClassId}
         * @param {number} taxClassId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        taxTaxClassRepositoryV1DeleteByIdDelete(taxClassId: number, options?: any): AxiosPromise<boolean> {
            return localVarFp.taxTaxClassRepositoryV1DeleteByIdDelete(taxClassId, options).then((request) => request(axios, basePath));
        },
        /**
         * Get a tax class with the given tax class id.
         * @summary taxClasses/{taxClassId}
         * @param {number} taxClassId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        taxTaxClassRepositoryV1GetGet(taxClassId: number, options?: any): AxiosPromise<TaxDataTaxClassInterface> {
            return localVarFp.taxTaxClassRepositoryV1GetGet(taxClassId, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * TaxClassesTaxClassIdApi - object-oriented interface
 * @export
 * @class TaxClassesTaxClassIdApi
 * @extends {BaseAPI}
 */
export class TaxClassesTaxClassIdApi extends BaseAPI {
    /**
     * Delete a tax class with the given tax class id.
     * @summary taxClasses/{taxClassId}
     * @param {number} taxClassId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TaxClassesTaxClassIdApi
     */
    public taxTaxClassRepositoryV1DeleteByIdDelete(taxClassId: number, options?: AxiosRequestConfig) {
        return TaxClassesTaxClassIdApiFp(this.configuration).taxTaxClassRepositoryV1DeleteByIdDelete(taxClassId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Get a tax class with the given tax class id.
     * @summary taxClasses/{taxClassId}
     * @param {number} taxClassId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TaxClassesTaxClassIdApi
     */
    public taxTaxClassRepositoryV1GetGet(taxClassId: number, options?: AxiosRequestConfig) {
        return TaxClassesTaxClassIdApiFp(this.configuration).taxTaxClassRepositoryV1GetGet(taxClassId, options).then((request) => request(this.axios, this.basePath));
    }
}


/**
 * TaxRatesApi - axios parameter creator
 * @export
 */
export const TaxRatesApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Create or update tax rate
         * @summary taxRates
         * @param {TaxTaxRateRepositoryV1SavePutRequest} [taxTaxRateRepositoryV1SavePostBody] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        taxTaxRateRepositoryV1SavePost: async (taxTaxRateRepositoryV1SavePostBody?: TaxTaxRateRepositoryV1SavePutRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/V1/taxRates`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(taxTaxRateRepositoryV1SavePostBody, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Create or update tax rate
         * @summary taxRates
         * @param {TaxTaxRateRepositoryV1SavePutRequest} [taxTaxRateRepositoryV1SavePutBody] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        taxTaxRateRepositoryV1SavePut: async (taxTaxRateRepositoryV1SavePutBody?: TaxTaxRateRepositoryV1SavePutRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/V1/taxRates`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(taxTaxRateRepositoryV1SavePutBody, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * TaxRatesApi - functional programming interface
 * @export
 */
export const TaxRatesApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = TaxRatesApiAxiosParamCreator(configuration)
    return {
        /**
         * Create or update tax rate
         * @summary taxRates
         * @param {TaxTaxRateRepositoryV1SavePutRequest} [taxTaxRateRepositoryV1SavePostBody] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async taxTaxRateRepositoryV1SavePost(taxTaxRateRepositoryV1SavePostBody?: TaxTaxRateRepositoryV1SavePutRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<TaxDataTaxRateInterface>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.taxTaxRateRepositoryV1SavePost(taxTaxRateRepositoryV1SavePostBody, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Create or update tax rate
         * @summary taxRates
         * @param {TaxTaxRateRepositoryV1SavePutRequest} [taxTaxRateRepositoryV1SavePutBody] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async taxTaxRateRepositoryV1SavePut(taxTaxRateRepositoryV1SavePutBody?: TaxTaxRateRepositoryV1SavePutRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<TaxDataTaxRateInterface>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.taxTaxRateRepositoryV1SavePut(taxTaxRateRepositoryV1SavePutBody, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * TaxRatesApi - factory interface
 * @export
 */
export const TaxRatesApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = TaxRatesApiFp(configuration)
    return {
        /**
         * Create or update tax rate
         * @summary taxRates
         * @param {TaxTaxRateRepositoryV1SavePutRequest} [taxTaxRateRepositoryV1SavePostBody] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        taxTaxRateRepositoryV1SavePost(taxTaxRateRepositoryV1SavePostBody?: TaxTaxRateRepositoryV1SavePutRequest, options?: any): AxiosPromise<TaxDataTaxRateInterface> {
            return localVarFp.taxTaxRateRepositoryV1SavePost(taxTaxRateRepositoryV1SavePostBody, options).then((request) => request(axios, basePath));
        },
        /**
         * Create or update tax rate
         * @summary taxRates
         * @param {TaxTaxRateRepositoryV1SavePutRequest} [taxTaxRateRepositoryV1SavePutBody] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        taxTaxRateRepositoryV1SavePut(taxTaxRateRepositoryV1SavePutBody?: TaxTaxRateRepositoryV1SavePutRequest, options?: any): AxiosPromise<TaxDataTaxRateInterface> {
            return localVarFp.taxTaxRateRepositoryV1SavePut(taxTaxRateRepositoryV1SavePutBody, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * TaxRatesApi - object-oriented interface
 * @export
 * @class TaxRatesApi
 * @extends {BaseAPI}
 */
export class TaxRatesApi extends BaseAPI {
    /**
     * Create or update tax rate
     * @summary taxRates
     * @param {TaxTaxRateRepositoryV1SavePutRequest} [taxTaxRateRepositoryV1SavePostBody] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TaxRatesApi
     */
    public taxTaxRateRepositoryV1SavePost(taxTaxRateRepositoryV1SavePostBody?: TaxTaxRateRepositoryV1SavePutRequest, options?: AxiosRequestConfig) {
        return TaxRatesApiFp(this.configuration).taxTaxRateRepositoryV1SavePost(taxTaxRateRepositoryV1SavePostBody, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Create or update tax rate
     * @summary taxRates
     * @param {TaxTaxRateRepositoryV1SavePutRequest} [taxTaxRateRepositoryV1SavePutBody] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TaxRatesApi
     */
    public taxTaxRateRepositoryV1SavePut(taxTaxRateRepositoryV1SavePutBody?: TaxTaxRateRepositoryV1SavePutRequest, options?: AxiosRequestConfig) {
        return TaxRatesApiFp(this.configuration).taxTaxRateRepositoryV1SavePut(taxTaxRateRepositoryV1SavePutBody, options).then((request) => request(this.axios, this.basePath));
    }
}


/**
 * TaxRatesRateIdApi - axios parameter creator
 * @export
 */
export const TaxRatesRateIdApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Delete tax rate
         * @summary taxRates/{rateId}
         * @param {number} rateId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        taxTaxRateRepositoryV1DeleteByIdDelete: async (rateId: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'rateId' is not null or undefined
            assertParamExists('taxTaxRateRepositoryV1DeleteByIdDelete', 'rateId', rateId)
            const localVarPath = `/V1/taxRates/{rateId}`
                .replace(`{${"rateId"}}`, encodeURIComponent(String(rateId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Get tax rate
         * @summary taxRates/{rateId}
         * @param {number} rateId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        taxTaxRateRepositoryV1GetGet: async (rateId: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'rateId' is not null or undefined
            assertParamExists('taxTaxRateRepositoryV1GetGet', 'rateId', rateId)
            const localVarPath = `/V1/taxRates/{rateId}`
                .replace(`{${"rateId"}}`, encodeURIComponent(String(rateId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * TaxRatesRateIdApi - functional programming interface
 * @export
 */
export const TaxRatesRateIdApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = TaxRatesRateIdApiAxiosParamCreator(configuration)
    return {
        /**
         * Delete tax rate
         * @summary taxRates/{rateId}
         * @param {number} rateId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async taxTaxRateRepositoryV1DeleteByIdDelete(rateId: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<boolean>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.taxTaxRateRepositoryV1DeleteByIdDelete(rateId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Get tax rate
         * @summary taxRates/{rateId}
         * @param {number} rateId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async taxTaxRateRepositoryV1GetGet(rateId: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<TaxDataTaxRateInterface>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.taxTaxRateRepositoryV1GetGet(rateId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * TaxRatesRateIdApi - factory interface
 * @export
 */
export const TaxRatesRateIdApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = TaxRatesRateIdApiFp(configuration)
    return {
        /**
         * Delete tax rate
         * @summary taxRates/{rateId}
         * @param {number} rateId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        taxTaxRateRepositoryV1DeleteByIdDelete(rateId: number, options?: any): AxiosPromise<boolean> {
            return localVarFp.taxTaxRateRepositoryV1DeleteByIdDelete(rateId, options).then((request) => request(axios, basePath));
        },
        /**
         * Get tax rate
         * @summary taxRates/{rateId}
         * @param {number} rateId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        taxTaxRateRepositoryV1GetGet(rateId: number, options?: any): AxiosPromise<TaxDataTaxRateInterface> {
            return localVarFp.taxTaxRateRepositoryV1GetGet(rateId, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * TaxRatesRateIdApi - object-oriented interface
 * @export
 * @class TaxRatesRateIdApi
 * @extends {BaseAPI}
 */
export class TaxRatesRateIdApi extends BaseAPI {
    /**
     * Delete tax rate
     * @summary taxRates/{rateId}
     * @param {number} rateId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TaxRatesRateIdApi
     */
    public taxTaxRateRepositoryV1DeleteByIdDelete(rateId: number, options?: AxiosRequestConfig) {
        return TaxRatesRateIdApiFp(this.configuration).taxTaxRateRepositoryV1DeleteByIdDelete(rateId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Get tax rate
     * @summary taxRates/{rateId}
     * @param {number} rateId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TaxRatesRateIdApi
     */
    public taxTaxRateRepositoryV1GetGet(rateId: number, options?: AxiosRequestConfig) {
        return TaxRatesRateIdApiFp(this.configuration).taxTaxRateRepositoryV1GetGet(rateId, options).then((request) => request(this.axios, this.basePath));
    }
}


/**
 * TaxRatesSearchApi - axios parameter creator
 * @export
 */
export const TaxRatesSearchApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Search TaxRates This call returns an array of objects, but detailed information about each object’s attributes might not be included. See http://devdocs.magento.com/codelinks/attributes.html#TaxRateRepositoryInterface to determine which call to use to get detailed information about all attributes for an object.
         * @summary taxRates/search
         * @param {string} [searchCriteriaFilterGroups0Filters0Field] Field
         * @param {string} [searchCriteriaFilterGroups0Filters0Value] Value
         * @param {string} [searchCriteriaFilterGroups0Filters0ConditionType] Condition type
         * @param {string} [searchCriteriaSortOrders0Field] Sorting field.
         * @param {string} [searchCriteriaSortOrders0Direction] Sorting direction.
         * @param {number} [searchCriteriaPageSize] Page size.
         * @param {number} [searchCriteriaCurrentPage] Current page.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        taxTaxRateRepositoryV1GetListGet: async (searchCriteriaFilterGroups0Filters0Field?: string, searchCriteriaFilterGroups0Filters0Value?: string, searchCriteriaFilterGroups0Filters0ConditionType?: string, searchCriteriaSortOrders0Field?: string, searchCriteriaSortOrders0Direction?: string, searchCriteriaPageSize?: number, searchCriteriaCurrentPage?: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/V1/taxRates/search`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (searchCriteriaFilterGroups0Filters0Field !== undefined) {
                localVarQueryParameter['searchCriteria[filterGroups][0][filters][0][field]'] = searchCriteriaFilterGroups0Filters0Field;
            }

            if (searchCriteriaFilterGroups0Filters0Value !== undefined) {
                localVarQueryParameter['searchCriteria[filterGroups][0][filters][0][value]'] = searchCriteriaFilterGroups0Filters0Value;
            }

            if (searchCriteriaFilterGroups0Filters0ConditionType !== undefined) {
                localVarQueryParameter['searchCriteria[filterGroups][0][filters][0][conditionType]'] = searchCriteriaFilterGroups0Filters0ConditionType;
            }

            if (searchCriteriaSortOrders0Field !== undefined) {
                localVarQueryParameter['searchCriteria[sortOrders][0][field]'] = searchCriteriaSortOrders0Field;
            }

            if (searchCriteriaSortOrders0Direction !== undefined) {
                localVarQueryParameter['searchCriteria[sortOrders][0][direction]'] = searchCriteriaSortOrders0Direction;
            }

            if (searchCriteriaPageSize !== undefined) {
                localVarQueryParameter['searchCriteria[pageSize]'] = searchCriteriaPageSize;
            }

            if (searchCriteriaCurrentPage !== undefined) {
                localVarQueryParameter['searchCriteria[currentPage]'] = searchCriteriaCurrentPage;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * TaxRatesSearchApi - functional programming interface
 * @export
 */
export const TaxRatesSearchApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = TaxRatesSearchApiAxiosParamCreator(configuration)
    return {
        /**
         * Search TaxRates This call returns an array of objects, but detailed information about each object’s attributes might not be included. See http://devdocs.magento.com/codelinks/attributes.html#TaxRateRepositoryInterface to determine which call to use to get detailed information about all attributes for an object.
         * @summary taxRates/search
         * @param {string} [searchCriteriaFilterGroups0Filters0Field] Field
         * @param {string} [searchCriteriaFilterGroups0Filters0Value] Value
         * @param {string} [searchCriteriaFilterGroups0Filters0ConditionType] Condition type
         * @param {string} [searchCriteriaSortOrders0Field] Sorting field.
         * @param {string} [searchCriteriaSortOrders0Direction] Sorting direction.
         * @param {number} [searchCriteriaPageSize] Page size.
         * @param {number} [searchCriteriaCurrentPage] Current page.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async taxTaxRateRepositoryV1GetListGet(searchCriteriaFilterGroups0Filters0Field?: string, searchCriteriaFilterGroups0Filters0Value?: string, searchCriteriaFilterGroups0Filters0ConditionType?: string, searchCriteriaSortOrders0Field?: string, searchCriteriaSortOrders0Direction?: string, searchCriteriaPageSize?: number, searchCriteriaCurrentPage?: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<TaxDataTaxRateSearchResultsInterface>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.taxTaxRateRepositoryV1GetListGet(searchCriteriaFilterGroups0Filters0Field, searchCriteriaFilterGroups0Filters0Value, searchCriteriaFilterGroups0Filters0ConditionType, searchCriteriaSortOrders0Field, searchCriteriaSortOrders0Direction, searchCriteriaPageSize, searchCriteriaCurrentPage, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * TaxRatesSearchApi - factory interface
 * @export
 */
export const TaxRatesSearchApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = TaxRatesSearchApiFp(configuration)
    return {
        /**
         * Search TaxRates This call returns an array of objects, but detailed information about each object’s attributes might not be included. See http://devdocs.magento.com/codelinks/attributes.html#TaxRateRepositoryInterface to determine which call to use to get detailed information about all attributes for an object.
         * @summary taxRates/search
         * @param {string} [searchCriteriaFilterGroups0Filters0Field] Field
         * @param {string} [searchCriteriaFilterGroups0Filters0Value] Value
         * @param {string} [searchCriteriaFilterGroups0Filters0ConditionType] Condition type
         * @param {string} [searchCriteriaSortOrders0Field] Sorting field.
         * @param {string} [searchCriteriaSortOrders0Direction] Sorting direction.
         * @param {number} [searchCriteriaPageSize] Page size.
         * @param {number} [searchCriteriaCurrentPage] Current page.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        taxTaxRateRepositoryV1GetListGet(searchCriteriaFilterGroups0Filters0Field?: string, searchCriteriaFilterGroups0Filters0Value?: string, searchCriteriaFilterGroups0Filters0ConditionType?: string, searchCriteriaSortOrders0Field?: string, searchCriteriaSortOrders0Direction?: string, searchCriteriaPageSize?: number, searchCriteriaCurrentPage?: number, options?: any): AxiosPromise<TaxDataTaxRateSearchResultsInterface> {
            return localVarFp.taxTaxRateRepositoryV1GetListGet(searchCriteriaFilterGroups0Filters0Field, searchCriteriaFilterGroups0Filters0Value, searchCriteriaFilterGroups0Filters0ConditionType, searchCriteriaSortOrders0Field, searchCriteriaSortOrders0Direction, searchCriteriaPageSize, searchCriteriaCurrentPage, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * TaxRatesSearchApi - object-oriented interface
 * @export
 * @class TaxRatesSearchApi
 * @extends {BaseAPI}
 */
export class TaxRatesSearchApi extends BaseAPI {
    /**
     * Search TaxRates This call returns an array of objects, but detailed information about each object’s attributes might not be included. See http://devdocs.magento.com/codelinks/attributes.html#TaxRateRepositoryInterface to determine which call to use to get detailed information about all attributes for an object.
     * @summary taxRates/search
     * @param {string} [searchCriteriaFilterGroups0Filters0Field] Field
     * @param {string} [searchCriteriaFilterGroups0Filters0Value] Value
     * @param {string} [searchCriteriaFilterGroups0Filters0ConditionType] Condition type
     * @param {string} [searchCriteriaSortOrders0Field] Sorting field.
     * @param {string} [searchCriteriaSortOrders0Direction] Sorting direction.
     * @param {number} [searchCriteriaPageSize] Page size.
     * @param {number} [searchCriteriaCurrentPage] Current page.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TaxRatesSearchApi
     */
    public taxTaxRateRepositoryV1GetListGet(searchCriteriaFilterGroups0Filters0Field?: string, searchCriteriaFilterGroups0Filters0Value?: string, searchCriteriaFilterGroups0Filters0ConditionType?: string, searchCriteriaSortOrders0Field?: string, searchCriteriaSortOrders0Direction?: string, searchCriteriaPageSize?: number, searchCriteriaCurrentPage?: number, options?: AxiosRequestConfig) {
        return TaxRatesSearchApiFp(this.configuration).taxTaxRateRepositoryV1GetListGet(searchCriteriaFilterGroups0Filters0Field, searchCriteriaFilterGroups0Filters0Value, searchCriteriaFilterGroups0Filters0ConditionType, searchCriteriaSortOrders0Field, searchCriteriaSortOrders0Direction, searchCriteriaPageSize, searchCriteriaCurrentPage, options).then((request) => request(this.axios, this.basePath));
    }
}


/**
 * TaxRulesApi - axios parameter creator
 * @export
 */
export const TaxRulesApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Save TaxRule
         * @summary taxRules
         * @param {TaxTaxRuleRepositoryV1SavePutRequest} [taxTaxRuleRepositoryV1SavePostBody] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        taxTaxRuleRepositoryV1SavePost: async (taxTaxRuleRepositoryV1SavePostBody?: TaxTaxRuleRepositoryV1SavePutRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/V1/taxRules`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(taxTaxRuleRepositoryV1SavePostBody, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Save TaxRule
         * @summary taxRules
         * @param {TaxTaxRuleRepositoryV1SavePutRequest} [taxTaxRuleRepositoryV1SavePutBody] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        taxTaxRuleRepositoryV1SavePut: async (taxTaxRuleRepositoryV1SavePutBody?: TaxTaxRuleRepositoryV1SavePutRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/V1/taxRules`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(taxTaxRuleRepositoryV1SavePutBody, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * TaxRulesApi - functional programming interface
 * @export
 */
export const TaxRulesApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = TaxRulesApiAxiosParamCreator(configuration)
    return {
        /**
         * Save TaxRule
         * @summary taxRules
         * @param {TaxTaxRuleRepositoryV1SavePutRequest} [taxTaxRuleRepositoryV1SavePostBody] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async taxTaxRuleRepositoryV1SavePost(taxTaxRuleRepositoryV1SavePostBody?: TaxTaxRuleRepositoryV1SavePutRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<TaxDataTaxRuleInterface>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.taxTaxRuleRepositoryV1SavePost(taxTaxRuleRepositoryV1SavePostBody, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Save TaxRule
         * @summary taxRules
         * @param {TaxTaxRuleRepositoryV1SavePutRequest} [taxTaxRuleRepositoryV1SavePutBody] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async taxTaxRuleRepositoryV1SavePut(taxTaxRuleRepositoryV1SavePutBody?: TaxTaxRuleRepositoryV1SavePutRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<TaxDataTaxRuleInterface>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.taxTaxRuleRepositoryV1SavePut(taxTaxRuleRepositoryV1SavePutBody, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * TaxRulesApi - factory interface
 * @export
 */
export const TaxRulesApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = TaxRulesApiFp(configuration)
    return {
        /**
         * Save TaxRule
         * @summary taxRules
         * @param {TaxTaxRuleRepositoryV1SavePutRequest} [taxTaxRuleRepositoryV1SavePostBody] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        taxTaxRuleRepositoryV1SavePost(taxTaxRuleRepositoryV1SavePostBody?: TaxTaxRuleRepositoryV1SavePutRequest, options?: any): AxiosPromise<TaxDataTaxRuleInterface> {
            return localVarFp.taxTaxRuleRepositoryV1SavePost(taxTaxRuleRepositoryV1SavePostBody, options).then((request) => request(axios, basePath));
        },
        /**
         * Save TaxRule
         * @summary taxRules
         * @param {TaxTaxRuleRepositoryV1SavePutRequest} [taxTaxRuleRepositoryV1SavePutBody] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        taxTaxRuleRepositoryV1SavePut(taxTaxRuleRepositoryV1SavePutBody?: TaxTaxRuleRepositoryV1SavePutRequest, options?: any): AxiosPromise<TaxDataTaxRuleInterface> {
            return localVarFp.taxTaxRuleRepositoryV1SavePut(taxTaxRuleRepositoryV1SavePutBody, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * TaxRulesApi - object-oriented interface
 * @export
 * @class TaxRulesApi
 * @extends {BaseAPI}
 */
export class TaxRulesApi extends BaseAPI {
    /**
     * Save TaxRule
     * @summary taxRules
     * @param {TaxTaxRuleRepositoryV1SavePutRequest} [taxTaxRuleRepositoryV1SavePostBody] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TaxRulesApi
     */
    public taxTaxRuleRepositoryV1SavePost(taxTaxRuleRepositoryV1SavePostBody?: TaxTaxRuleRepositoryV1SavePutRequest, options?: AxiosRequestConfig) {
        return TaxRulesApiFp(this.configuration).taxTaxRuleRepositoryV1SavePost(taxTaxRuleRepositoryV1SavePostBody, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Save TaxRule
     * @summary taxRules
     * @param {TaxTaxRuleRepositoryV1SavePutRequest} [taxTaxRuleRepositoryV1SavePutBody] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TaxRulesApi
     */
    public taxTaxRuleRepositoryV1SavePut(taxTaxRuleRepositoryV1SavePutBody?: TaxTaxRuleRepositoryV1SavePutRequest, options?: AxiosRequestConfig) {
        return TaxRulesApiFp(this.configuration).taxTaxRuleRepositoryV1SavePut(taxTaxRuleRepositoryV1SavePutBody, options).then((request) => request(this.axios, this.basePath));
    }
}


/**
 * TaxRulesRuleIdApi - axios parameter creator
 * @export
 */
export const TaxRulesRuleIdApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Delete TaxRule
         * @summary taxRules/{ruleId}
         * @param {number} ruleId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        taxTaxRuleRepositoryV1DeleteByIdDelete: async (ruleId: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'ruleId' is not null or undefined
            assertParamExists('taxTaxRuleRepositoryV1DeleteByIdDelete', 'ruleId', ruleId)
            const localVarPath = `/V1/taxRules/{ruleId}`
                .replace(`{${"ruleId"}}`, encodeURIComponent(String(ruleId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Get TaxRule
         * @summary taxRules/{ruleId}
         * @param {number} ruleId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        taxTaxRuleRepositoryV1GetGet: async (ruleId: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'ruleId' is not null or undefined
            assertParamExists('taxTaxRuleRepositoryV1GetGet', 'ruleId', ruleId)
            const localVarPath = `/V1/taxRules/{ruleId}`
                .replace(`{${"ruleId"}}`, encodeURIComponent(String(ruleId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * TaxRulesRuleIdApi - functional programming interface
 * @export
 */
export const TaxRulesRuleIdApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = TaxRulesRuleIdApiAxiosParamCreator(configuration)
    return {
        /**
         * Delete TaxRule
         * @summary taxRules/{ruleId}
         * @param {number} ruleId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async taxTaxRuleRepositoryV1DeleteByIdDelete(ruleId: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<boolean>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.taxTaxRuleRepositoryV1DeleteByIdDelete(ruleId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Get TaxRule
         * @summary taxRules/{ruleId}
         * @param {number} ruleId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async taxTaxRuleRepositoryV1GetGet(ruleId: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<TaxDataTaxRuleInterface>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.taxTaxRuleRepositoryV1GetGet(ruleId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * TaxRulesRuleIdApi - factory interface
 * @export
 */
export const TaxRulesRuleIdApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = TaxRulesRuleIdApiFp(configuration)
    return {
        /**
         * Delete TaxRule
         * @summary taxRules/{ruleId}
         * @param {number} ruleId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        taxTaxRuleRepositoryV1DeleteByIdDelete(ruleId: number, options?: any): AxiosPromise<boolean> {
            return localVarFp.taxTaxRuleRepositoryV1DeleteByIdDelete(ruleId, options).then((request) => request(axios, basePath));
        },
        /**
         * Get TaxRule
         * @summary taxRules/{ruleId}
         * @param {number} ruleId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        taxTaxRuleRepositoryV1GetGet(ruleId: number, options?: any): AxiosPromise<TaxDataTaxRuleInterface> {
            return localVarFp.taxTaxRuleRepositoryV1GetGet(ruleId, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * TaxRulesRuleIdApi - object-oriented interface
 * @export
 * @class TaxRulesRuleIdApi
 * @extends {BaseAPI}
 */
export class TaxRulesRuleIdApi extends BaseAPI {
    /**
     * Delete TaxRule
     * @summary taxRules/{ruleId}
     * @param {number} ruleId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TaxRulesRuleIdApi
     */
    public taxTaxRuleRepositoryV1DeleteByIdDelete(ruleId: number, options?: AxiosRequestConfig) {
        return TaxRulesRuleIdApiFp(this.configuration).taxTaxRuleRepositoryV1DeleteByIdDelete(ruleId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Get TaxRule
     * @summary taxRules/{ruleId}
     * @param {number} ruleId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TaxRulesRuleIdApi
     */
    public taxTaxRuleRepositoryV1GetGet(ruleId: number, options?: AxiosRequestConfig) {
        return TaxRulesRuleIdApiFp(this.configuration).taxTaxRuleRepositoryV1GetGet(ruleId, options).then((request) => request(this.axios, this.basePath));
    }
}


/**
 * TaxRulesSearchApi - axios parameter creator
 * @export
 */
export const TaxRulesSearchApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Search TaxRules This call returns an array of objects, but detailed information about each object’s attributes might not be included. See http://devdocs.magento.com/codelinks/attributes.html#TaxRuleRepositoryInterface to determine which call to use to get detailed information about all attributes for an object.
         * @summary taxRules/search
         * @param {string} [searchCriteriaFilterGroups0Filters0Field] Field
         * @param {string} [searchCriteriaFilterGroups0Filters0Value] Value
         * @param {string} [searchCriteriaFilterGroups0Filters0ConditionType] Condition type
         * @param {string} [searchCriteriaSortOrders0Field] Sorting field.
         * @param {string} [searchCriteriaSortOrders0Direction] Sorting direction.
         * @param {number} [searchCriteriaPageSize] Page size.
         * @param {number} [searchCriteriaCurrentPage] Current page.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        taxTaxRuleRepositoryV1GetListGet: async (searchCriteriaFilterGroups0Filters0Field?: string, searchCriteriaFilterGroups0Filters0Value?: string, searchCriteriaFilterGroups0Filters0ConditionType?: string, searchCriteriaSortOrders0Field?: string, searchCriteriaSortOrders0Direction?: string, searchCriteriaPageSize?: number, searchCriteriaCurrentPage?: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/V1/taxRules/search`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (searchCriteriaFilterGroups0Filters0Field !== undefined) {
                localVarQueryParameter['searchCriteria[filterGroups][0][filters][0][field]'] = searchCriteriaFilterGroups0Filters0Field;
            }

            if (searchCriteriaFilterGroups0Filters0Value !== undefined) {
                localVarQueryParameter['searchCriteria[filterGroups][0][filters][0][value]'] = searchCriteriaFilterGroups0Filters0Value;
            }

            if (searchCriteriaFilterGroups0Filters0ConditionType !== undefined) {
                localVarQueryParameter['searchCriteria[filterGroups][0][filters][0][conditionType]'] = searchCriteriaFilterGroups0Filters0ConditionType;
            }

            if (searchCriteriaSortOrders0Field !== undefined) {
                localVarQueryParameter['searchCriteria[sortOrders][0][field]'] = searchCriteriaSortOrders0Field;
            }

            if (searchCriteriaSortOrders0Direction !== undefined) {
                localVarQueryParameter['searchCriteria[sortOrders][0][direction]'] = searchCriteriaSortOrders0Direction;
            }

            if (searchCriteriaPageSize !== undefined) {
                localVarQueryParameter['searchCriteria[pageSize]'] = searchCriteriaPageSize;
            }

            if (searchCriteriaCurrentPage !== undefined) {
                localVarQueryParameter['searchCriteria[currentPage]'] = searchCriteriaCurrentPage;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * TaxRulesSearchApi - functional programming interface
 * @export
 */
export const TaxRulesSearchApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = TaxRulesSearchApiAxiosParamCreator(configuration)
    return {
        /**
         * Search TaxRules This call returns an array of objects, but detailed information about each object’s attributes might not be included. See http://devdocs.magento.com/codelinks/attributes.html#TaxRuleRepositoryInterface to determine which call to use to get detailed information about all attributes for an object.
         * @summary taxRules/search
         * @param {string} [searchCriteriaFilterGroups0Filters0Field] Field
         * @param {string} [searchCriteriaFilterGroups0Filters0Value] Value
         * @param {string} [searchCriteriaFilterGroups0Filters0ConditionType] Condition type
         * @param {string} [searchCriteriaSortOrders0Field] Sorting field.
         * @param {string} [searchCriteriaSortOrders0Direction] Sorting direction.
         * @param {number} [searchCriteriaPageSize] Page size.
         * @param {number} [searchCriteriaCurrentPage] Current page.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async taxTaxRuleRepositoryV1GetListGet(searchCriteriaFilterGroups0Filters0Field?: string, searchCriteriaFilterGroups0Filters0Value?: string, searchCriteriaFilterGroups0Filters0ConditionType?: string, searchCriteriaSortOrders0Field?: string, searchCriteriaSortOrders0Direction?: string, searchCriteriaPageSize?: number, searchCriteriaCurrentPage?: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<TaxDataTaxRuleSearchResultsInterface>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.taxTaxRuleRepositoryV1GetListGet(searchCriteriaFilterGroups0Filters0Field, searchCriteriaFilterGroups0Filters0Value, searchCriteriaFilterGroups0Filters0ConditionType, searchCriteriaSortOrders0Field, searchCriteriaSortOrders0Direction, searchCriteriaPageSize, searchCriteriaCurrentPage, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * TaxRulesSearchApi - factory interface
 * @export
 */
export const TaxRulesSearchApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = TaxRulesSearchApiFp(configuration)
    return {
        /**
         * Search TaxRules This call returns an array of objects, but detailed information about each object’s attributes might not be included. See http://devdocs.magento.com/codelinks/attributes.html#TaxRuleRepositoryInterface to determine which call to use to get detailed information about all attributes for an object.
         * @summary taxRules/search
         * @param {string} [searchCriteriaFilterGroups0Filters0Field] Field
         * @param {string} [searchCriteriaFilterGroups0Filters0Value] Value
         * @param {string} [searchCriteriaFilterGroups0Filters0ConditionType] Condition type
         * @param {string} [searchCriteriaSortOrders0Field] Sorting field.
         * @param {string} [searchCriteriaSortOrders0Direction] Sorting direction.
         * @param {number} [searchCriteriaPageSize] Page size.
         * @param {number} [searchCriteriaCurrentPage] Current page.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        taxTaxRuleRepositoryV1GetListGet(searchCriteriaFilterGroups0Filters0Field?: string, searchCriteriaFilterGroups0Filters0Value?: string, searchCriteriaFilterGroups0Filters0ConditionType?: string, searchCriteriaSortOrders0Field?: string, searchCriteriaSortOrders0Direction?: string, searchCriteriaPageSize?: number, searchCriteriaCurrentPage?: number, options?: any): AxiosPromise<TaxDataTaxRuleSearchResultsInterface> {
            return localVarFp.taxTaxRuleRepositoryV1GetListGet(searchCriteriaFilterGroups0Filters0Field, searchCriteriaFilterGroups0Filters0Value, searchCriteriaFilterGroups0Filters0ConditionType, searchCriteriaSortOrders0Field, searchCriteriaSortOrders0Direction, searchCriteriaPageSize, searchCriteriaCurrentPage, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * TaxRulesSearchApi - object-oriented interface
 * @export
 * @class TaxRulesSearchApi
 * @extends {BaseAPI}
 */
export class TaxRulesSearchApi extends BaseAPI {
    /**
     * Search TaxRules This call returns an array of objects, but detailed information about each object’s attributes might not be included. See http://devdocs.magento.com/codelinks/attributes.html#TaxRuleRepositoryInterface to determine which call to use to get detailed information about all attributes for an object.
     * @summary taxRules/search
     * @param {string} [searchCriteriaFilterGroups0Filters0Field] Field
     * @param {string} [searchCriteriaFilterGroups0Filters0Value] Value
     * @param {string} [searchCriteriaFilterGroups0Filters0ConditionType] Condition type
     * @param {string} [searchCriteriaSortOrders0Field] Sorting field.
     * @param {string} [searchCriteriaSortOrders0Direction] Sorting direction.
     * @param {number} [searchCriteriaPageSize] Page size.
     * @param {number} [searchCriteriaCurrentPage] Current page.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TaxRulesSearchApi
     */
    public taxTaxRuleRepositoryV1GetListGet(searchCriteriaFilterGroups0Filters0Field?: string, searchCriteriaFilterGroups0Filters0Value?: string, searchCriteriaFilterGroups0Filters0ConditionType?: string, searchCriteriaSortOrders0Field?: string, searchCriteriaSortOrders0Direction?: string, searchCriteriaPageSize?: number, searchCriteriaCurrentPage?: number, options?: AxiosRequestConfig) {
        return TaxRulesSearchApiFp(this.configuration).taxTaxRuleRepositoryV1GetListGet(searchCriteriaFilterGroups0Filters0Field, searchCriteriaFilterGroups0Filters0Value, searchCriteriaFilterGroups0Filters0ConditionType, searchCriteriaSortOrders0Field, searchCriteriaSortOrders0Direction, searchCriteriaPageSize, searchCriteriaCurrentPage, options).then((request) => request(this.axios, this.basePath));
    }
}


/**
 * TeamApi - axios parameter creator
 * @export
 */
export const TeamApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Returns the list of teams for the specified search criteria (team name or description).
         * @summary team/
         * @param {string} [searchCriteriaFilterGroups0Filters0Field] Field
         * @param {string} [searchCriteriaFilterGroups0Filters0Value] Value
         * @param {string} [searchCriteriaFilterGroups0Filters0ConditionType] Condition type
         * @param {string} [searchCriteriaSortOrders0Field] Sorting field.
         * @param {string} [searchCriteriaSortOrders0Direction] Sorting direction.
         * @param {number} [searchCriteriaPageSize] Page size.
         * @param {number} [searchCriteriaCurrentPage] Current page.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        companyTeamRepositoryV1GetListGet: async (searchCriteriaFilterGroups0Filters0Field?: string, searchCriteriaFilterGroups0Filters0Value?: string, searchCriteriaFilterGroups0Filters0ConditionType?: string, searchCriteriaSortOrders0Field?: string, searchCriteriaSortOrders0Direction?: string, searchCriteriaPageSize?: number, searchCriteriaCurrentPage?: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/V1/team/`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (searchCriteriaFilterGroups0Filters0Field !== undefined) {
                localVarQueryParameter['searchCriteria[filterGroups][0][filters][0][field]'] = searchCriteriaFilterGroups0Filters0Field;
            }

            if (searchCriteriaFilterGroups0Filters0Value !== undefined) {
                localVarQueryParameter['searchCriteria[filterGroups][0][filters][0][value]'] = searchCriteriaFilterGroups0Filters0Value;
            }

            if (searchCriteriaFilterGroups0Filters0ConditionType !== undefined) {
                localVarQueryParameter['searchCriteria[filterGroups][0][filters][0][conditionType]'] = searchCriteriaFilterGroups0Filters0ConditionType;
            }

            if (searchCriteriaSortOrders0Field !== undefined) {
                localVarQueryParameter['searchCriteria[sortOrders][0][field]'] = searchCriteriaSortOrders0Field;
            }

            if (searchCriteriaSortOrders0Direction !== undefined) {
                localVarQueryParameter['searchCriteria[sortOrders][0][direction]'] = searchCriteriaSortOrders0Direction;
            }

            if (searchCriteriaPageSize !== undefined) {
                localVarQueryParameter['searchCriteria[pageSize]'] = searchCriteriaPageSize;
            }

            if (searchCriteriaCurrentPage !== undefined) {
                localVarQueryParameter['searchCriteria[currentPage]'] = searchCriteriaCurrentPage;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * TeamApi - functional programming interface
 * @export
 */
export const TeamApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = TeamApiAxiosParamCreator(configuration)
    return {
        /**
         * Returns the list of teams for the specified search criteria (team name or description).
         * @summary team/
         * @param {string} [searchCriteriaFilterGroups0Filters0Field] Field
         * @param {string} [searchCriteriaFilterGroups0Filters0Value] Value
         * @param {string} [searchCriteriaFilterGroups0Filters0ConditionType] Condition type
         * @param {string} [searchCriteriaSortOrders0Field] Sorting field.
         * @param {string} [searchCriteriaSortOrders0Direction] Sorting direction.
         * @param {number} [searchCriteriaPageSize] Page size.
         * @param {number} [searchCriteriaCurrentPage] Current page.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async companyTeamRepositoryV1GetListGet(searchCriteriaFilterGroups0Filters0Field?: string, searchCriteriaFilterGroups0Filters0Value?: string, searchCriteriaFilterGroups0Filters0ConditionType?: string, searchCriteriaSortOrders0Field?: string, searchCriteriaSortOrders0Direction?: string, searchCriteriaPageSize?: number, searchCriteriaCurrentPage?: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<CompanyDataTeamSearchResultsInterface>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.companyTeamRepositoryV1GetListGet(searchCriteriaFilterGroups0Filters0Field, searchCriteriaFilterGroups0Filters0Value, searchCriteriaFilterGroups0Filters0ConditionType, searchCriteriaSortOrders0Field, searchCriteriaSortOrders0Direction, searchCriteriaPageSize, searchCriteriaCurrentPage, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * TeamApi - factory interface
 * @export
 */
export const TeamApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = TeamApiFp(configuration)
    return {
        /**
         * Returns the list of teams for the specified search criteria (team name or description).
         * @summary team/
         * @param {string} [searchCriteriaFilterGroups0Filters0Field] Field
         * @param {string} [searchCriteriaFilterGroups0Filters0Value] Value
         * @param {string} [searchCriteriaFilterGroups0Filters0ConditionType] Condition type
         * @param {string} [searchCriteriaSortOrders0Field] Sorting field.
         * @param {string} [searchCriteriaSortOrders0Direction] Sorting direction.
         * @param {number} [searchCriteriaPageSize] Page size.
         * @param {number} [searchCriteriaCurrentPage] Current page.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        companyTeamRepositoryV1GetListGet(searchCriteriaFilterGroups0Filters0Field?: string, searchCriteriaFilterGroups0Filters0Value?: string, searchCriteriaFilterGroups0Filters0ConditionType?: string, searchCriteriaSortOrders0Field?: string, searchCriteriaSortOrders0Direction?: string, searchCriteriaPageSize?: number, searchCriteriaCurrentPage?: number, options?: any): AxiosPromise<CompanyDataTeamSearchResultsInterface> {
            return localVarFp.companyTeamRepositoryV1GetListGet(searchCriteriaFilterGroups0Filters0Field, searchCriteriaFilterGroups0Filters0Value, searchCriteriaFilterGroups0Filters0ConditionType, searchCriteriaSortOrders0Field, searchCriteriaSortOrders0Direction, searchCriteriaPageSize, searchCriteriaCurrentPage, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * TeamApi - object-oriented interface
 * @export
 * @class TeamApi
 * @extends {BaseAPI}
 */
export class TeamApi extends BaseAPI {
    /**
     * Returns the list of teams for the specified search criteria (team name or description).
     * @summary team/
     * @param {string} [searchCriteriaFilterGroups0Filters0Field] Field
     * @param {string} [searchCriteriaFilterGroups0Filters0Value] Value
     * @param {string} [searchCriteriaFilterGroups0Filters0ConditionType] Condition type
     * @param {string} [searchCriteriaSortOrders0Field] Sorting field.
     * @param {string} [searchCriteriaSortOrders0Direction] Sorting direction.
     * @param {number} [searchCriteriaPageSize] Page size.
     * @param {number} [searchCriteriaCurrentPage] Current page.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TeamApi
     */
    public companyTeamRepositoryV1GetListGet(searchCriteriaFilterGroups0Filters0Field?: string, searchCriteriaFilterGroups0Filters0Value?: string, searchCriteriaFilterGroups0Filters0ConditionType?: string, searchCriteriaSortOrders0Field?: string, searchCriteriaSortOrders0Direction?: string, searchCriteriaPageSize?: number, searchCriteriaCurrentPage?: number, options?: AxiosRequestConfig) {
        return TeamApiFp(this.configuration).companyTeamRepositoryV1GetListGet(searchCriteriaFilterGroups0Filters0Field, searchCriteriaFilterGroups0Filters0Value, searchCriteriaFilterGroups0Filters0ConditionType, searchCriteriaSortOrders0Field, searchCriteriaSortOrders0Direction, searchCriteriaPageSize, searchCriteriaCurrentPage, options).then((request) => request(this.axios, this.basePath));
    }
}


/**
 * TeamCompanyIdApi - axios parameter creator
 * @export
 */
export const TeamCompanyIdApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Create a team in the company structure.
         * @summary team/{companyId}
         * @param {number} companyId 
         * @param {CompanyTeamRepositoryV1CreatePostRequest} [companyTeamRepositoryV1CreatePostBody] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        companyTeamRepositoryV1CreatePost: async (companyId: number, companyTeamRepositoryV1CreatePostBody?: CompanyTeamRepositoryV1CreatePostRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'companyId' is not null or undefined
            assertParamExists('companyTeamRepositoryV1CreatePost', 'companyId', companyId)
            const localVarPath = `/V1/team/{companyId}`
                .replace(`{${"companyId"}}`, encodeURIComponent(String(companyId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(companyTeamRepositoryV1CreatePostBody, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * TeamCompanyIdApi - functional programming interface
 * @export
 */
export const TeamCompanyIdApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = TeamCompanyIdApiAxiosParamCreator(configuration)
    return {
        /**
         * Create a team in the company structure.
         * @summary team/{companyId}
         * @param {number} companyId 
         * @param {CompanyTeamRepositoryV1CreatePostRequest} [companyTeamRepositoryV1CreatePostBody] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async companyTeamRepositoryV1CreatePost(companyId: number, companyTeamRepositoryV1CreatePostBody?: CompanyTeamRepositoryV1CreatePostRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ErrorResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.companyTeamRepositoryV1CreatePost(companyId, companyTeamRepositoryV1CreatePostBody, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * TeamCompanyIdApi - factory interface
 * @export
 */
export const TeamCompanyIdApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = TeamCompanyIdApiFp(configuration)
    return {
        /**
         * Create a team in the company structure.
         * @summary team/{companyId}
         * @param {number} companyId 
         * @param {CompanyTeamRepositoryV1CreatePostRequest} [companyTeamRepositoryV1CreatePostBody] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        companyTeamRepositoryV1CreatePost(companyId: number, companyTeamRepositoryV1CreatePostBody?: CompanyTeamRepositoryV1CreatePostRequest, options?: any): AxiosPromise<ErrorResponse> {
            return localVarFp.companyTeamRepositoryV1CreatePost(companyId, companyTeamRepositoryV1CreatePostBody, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * TeamCompanyIdApi - object-oriented interface
 * @export
 * @class TeamCompanyIdApi
 * @extends {BaseAPI}
 */
export class TeamCompanyIdApi extends BaseAPI {
    /**
     * Create a team in the company structure.
     * @summary team/{companyId}
     * @param {number} companyId 
     * @param {CompanyTeamRepositoryV1CreatePostRequest} [companyTeamRepositoryV1CreatePostBody] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TeamCompanyIdApi
     */
    public companyTeamRepositoryV1CreatePost(companyId: number, companyTeamRepositoryV1CreatePostBody?: CompanyTeamRepositoryV1CreatePostRequest, options?: AxiosRequestConfig) {
        return TeamCompanyIdApiFp(this.configuration).companyTeamRepositoryV1CreatePost(companyId, companyTeamRepositoryV1CreatePostBody, options).then((request) => request(this.axios, this.basePath));
    }
}


/**
 * TeamTeamIdApi - axios parameter creator
 * @export
 */
export const TeamTeamIdApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Delete a team from the company structure.
         * @summary team/{teamId}
         * @param {number} teamId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        companyTeamRepositoryV1DeleteByIdDelete: async (teamId: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'teamId' is not null or undefined
            assertParamExists('companyTeamRepositoryV1DeleteByIdDelete', 'teamId', teamId)
            const localVarPath = `/V1/team/{teamId}`
                .replace(`{${"teamId"}}`, encodeURIComponent(String(teamId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Returns data for a team in the company, by entity id.
         * @summary team/{teamId}
         * @param {number} teamId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        companyTeamRepositoryV1GetGet: async (teamId: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'teamId' is not null or undefined
            assertParamExists('companyTeamRepositoryV1GetGet', 'teamId', teamId)
            const localVarPath = `/V1/team/{teamId}`
                .replace(`{${"teamId"}}`, encodeURIComponent(String(teamId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Update a team in the company structure.
         * @summary team/{teamId}
         * @param {string} teamId 
         * @param {CompanyTeamRepositoryV1CreatePostRequest} [companyTeamRepositoryV1SavePutBody] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        companyTeamRepositoryV1SavePut: async (teamId: string, companyTeamRepositoryV1SavePutBody?: CompanyTeamRepositoryV1CreatePostRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'teamId' is not null or undefined
            assertParamExists('companyTeamRepositoryV1SavePut', 'teamId', teamId)
            const localVarPath = `/V1/team/{teamId}`
                .replace(`{${"teamId"}}`, encodeURIComponent(String(teamId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(companyTeamRepositoryV1SavePutBody, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * TeamTeamIdApi - functional programming interface
 * @export
 */
export const TeamTeamIdApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = TeamTeamIdApiAxiosParamCreator(configuration)
    return {
        /**
         * Delete a team from the company structure.
         * @summary team/{teamId}
         * @param {number} teamId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async companyTeamRepositoryV1DeleteByIdDelete(teamId: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ErrorResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.companyTeamRepositoryV1DeleteByIdDelete(teamId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Returns data for a team in the company, by entity id.
         * @summary team/{teamId}
         * @param {number} teamId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async companyTeamRepositoryV1GetGet(teamId: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<CompanyDataTeamInterface>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.companyTeamRepositoryV1GetGet(teamId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Update a team in the company structure.
         * @summary team/{teamId}
         * @param {string} teamId 
         * @param {CompanyTeamRepositoryV1CreatePostRequest} [companyTeamRepositoryV1SavePutBody] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async companyTeamRepositoryV1SavePut(teamId: string, companyTeamRepositoryV1SavePutBody?: CompanyTeamRepositoryV1CreatePostRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<boolean>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.companyTeamRepositoryV1SavePut(teamId, companyTeamRepositoryV1SavePutBody, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * TeamTeamIdApi - factory interface
 * @export
 */
export const TeamTeamIdApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = TeamTeamIdApiFp(configuration)
    return {
        /**
         * Delete a team from the company structure.
         * @summary team/{teamId}
         * @param {number} teamId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        companyTeamRepositoryV1DeleteByIdDelete(teamId: number, options?: any): AxiosPromise<ErrorResponse> {
            return localVarFp.companyTeamRepositoryV1DeleteByIdDelete(teamId, options).then((request) => request(axios, basePath));
        },
        /**
         * Returns data for a team in the company, by entity id.
         * @summary team/{teamId}
         * @param {number} teamId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        companyTeamRepositoryV1GetGet(teamId: number, options?: any): AxiosPromise<CompanyDataTeamInterface> {
            return localVarFp.companyTeamRepositoryV1GetGet(teamId, options).then((request) => request(axios, basePath));
        },
        /**
         * Update a team in the company structure.
         * @summary team/{teamId}
         * @param {string} teamId 
         * @param {CompanyTeamRepositoryV1CreatePostRequest} [companyTeamRepositoryV1SavePutBody] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        companyTeamRepositoryV1SavePut(teamId: string, companyTeamRepositoryV1SavePutBody?: CompanyTeamRepositoryV1CreatePostRequest, options?: any): AxiosPromise<boolean> {
            return localVarFp.companyTeamRepositoryV1SavePut(teamId, companyTeamRepositoryV1SavePutBody, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * TeamTeamIdApi - object-oriented interface
 * @export
 * @class TeamTeamIdApi
 * @extends {BaseAPI}
 */
export class TeamTeamIdApi extends BaseAPI {
    /**
     * Delete a team from the company structure.
     * @summary team/{teamId}
     * @param {number} teamId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TeamTeamIdApi
     */
    public companyTeamRepositoryV1DeleteByIdDelete(teamId: number, options?: AxiosRequestConfig) {
        return TeamTeamIdApiFp(this.configuration).companyTeamRepositoryV1DeleteByIdDelete(teamId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Returns data for a team in the company, by entity id.
     * @summary team/{teamId}
     * @param {number} teamId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TeamTeamIdApi
     */
    public companyTeamRepositoryV1GetGet(teamId: number, options?: AxiosRequestConfig) {
        return TeamTeamIdApiFp(this.configuration).companyTeamRepositoryV1GetGet(teamId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Update a team in the company structure.
     * @summary team/{teamId}
     * @param {string} teamId 
     * @param {CompanyTeamRepositoryV1CreatePostRequest} [companyTeamRepositoryV1SavePutBody] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TeamTeamIdApi
     */
    public companyTeamRepositoryV1SavePut(teamId: string, companyTeamRepositoryV1SavePutBody?: CompanyTeamRepositoryV1CreatePostRequest, options?: AxiosRequestConfig) {
        return TeamTeamIdApiFp(this.configuration).companyTeamRepositoryV1SavePut(teamId, companyTeamRepositoryV1SavePutBody, options).then((request) => request(this.axios, this.basePath));
    }
}


/**
 * TemandoRmaRmaIdShipmentsApi - axios parameter creator
 * @export
 */
export const TemandoRmaRmaIdShipmentsApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Assign platform shipment IDs to a core RMA entity.
         * @summary temando/rma/{rmaId}/shipments
         * @param {number} rmaId 
         * @param {TemandoShippingRmaRmaShipmentManagementV1AssignShipmentIdsPutRequest} [temandoShippingRmaRmaShipmentManagementV1AssignShipmentIdsPutBody] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        temandoShippingRmaRmaShipmentManagementV1AssignShipmentIdsPut: async (rmaId: number, temandoShippingRmaRmaShipmentManagementV1AssignShipmentIdsPutBody?: TemandoShippingRmaRmaShipmentManagementV1AssignShipmentIdsPutRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'rmaId' is not null or undefined
            assertParamExists('temandoShippingRmaRmaShipmentManagementV1AssignShipmentIdsPut', 'rmaId', rmaId)
            const localVarPath = `/V1/temando/rma/{rmaId}/shipments`
                .replace(`{${"rmaId"}}`, encodeURIComponent(String(rmaId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(temandoShippingRmaRmaShipmentManagementV1AssignShipmentIdsPutBody, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * TemandoRmaRmaIdShipmentsApi - functional programming interface
 * @export
 */
export const TemandoRmaRmaIdShipmentsApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = TemandoRmaRmaIdShipmentsApiAxiosParamCreator(configuration)
    return {
        /**
         * Assign platform shipment IDs to a core RMA entity.
         * @summary temando/rma/{rmaId}/shipments
         * @param {number} rmaId 
         * @param {TemandoShippingRmaRmaShipmentManagementV1AssignShipmentIdsPutRequest} [temandoShippingRmaRmaShipmentManagementV1AssignShipmentIdsPutBody] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async temandoShippingRmaRmaShipmentManagementV1AssignShipmentIdsPut(rmaId: number, temandoShippingRmaRmaShipmentManagementV1AssignShipmentIdsPutBody?: TemandoShippingRmaRmaShipmentManagementV1AssignShipmentIdsPutRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<number>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.temandoShippingRmaRmaShipmentManagementV1AssignShipmentIdsPut(rmaId, temandoShippingRmaRmaShipmentManagementV1AssignShipmentIdsPutBody, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * TemandoRmaRmaIdShipmentsApi - factory interface
 * @export
 */
export const TemandoRmaRmaIdShipmentsApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = TemandoRmaRmaIdShipmentsApiFp(configuration)
    return {
        /**
         * Assign platform shipment IDs to a core RMA entity.
         * @summary temando/rma/{rmaId}/shipments
         * @param {number} rmaId 
         * @param {TemandoShippingRmaRmaShipmentManagementV1AssignShipmentIdsPutRequest} [temandoShippingRmaRmaShipmentManagementV1AssignShipmentIdsPutBody] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        temandoShippingRmaRmaShipmentManagementV1AssignShipmentIdsPut(rmaId: number, temandoShippingRmaRmaShipmentManagementV1AssignShipmentIdsPutBody?: TemandoShippingRmaRmaShipmentManagementV1AssignShipmentIdsPutRequest, options?: any): AxiosPromise<number> {
            return localVarFp.temandoShippingRmaRmaShipmentManagementV1AssignShipmentIdsPut(rmaId, temandoShippingRmaRmaShipmentManagementV1AssignShipmentIdsPutBody, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * TemandoRmaRmaIdShipmentsApi - object-oriented interface
 * @export
 * @class TemandoRmaRmaIdShipmentsApi
 * @extends {BaseAPI}
 */
export class TemandoRmaRmaIdShipmentsApi extends BaseAPI {
    /**
     * Assign platform shipment IDs to a core RMA entity.
     * @summary temando/rma/{rmaId}/shipments
     * @param {number} rmaId 
     * @param {TemandoShippingRmaRmaShipmentManagementV1AssignShipmentIdsPutRequest} [temandoShippingRmaRmaShipmentManagementV1AssignShipmentIdsPutBody] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TemandoRmaRmaIdShipmentsApi
     */
    public temandoShippingRmaRmaShipmentManagementV1AssignShipmentIdsPut(rmaId: number, temandoShippingRmaRmaShipmentManagementV1AssignShipmentIdsPutBody?: TemandoShippingRmaRmaShipmentManagementV1AssignShipmentIdsPutRequest, options?: AxiosRequestConfig) {
        return TemandoRmaRmaIdShipmentsApiFp(this.configuration).temandoShippingRmaRmaShipmentManagementV1AssignShipmentIdsPut(rmaId, temandoShippingRmaRmaShipmentManagementV1AssignShipmentIdsPutBody, options).then((request) => request(this.axios, this.basePath));
    }
}


/**
 * TransactionsApi - axios parameter creator
 * @export
 */
export const TransactionsApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Lists transactions that match specified search criteria. This call returns an array of objects, but detailed information about each object’s attributes might not be included. See http://devdocs.magento.com/codelinks/attributes.html#TransactionRepositoryInterface to determine which call to use to get detailed information about all attributes for an object.
         * @summary transactions
         * @param {string} [searchCriteriaFilterGroups0Filters0Field] Field
         * @param {string} [searchCriteriaFilterGroups0Filters0Value] Value
         * @param {string} [searchCriteriaFilterGroups0Filters0ConditionType] Condition type
         * @param {string} [searchCriteriaSortOrders0Field] Sorting field.
         * @param {string} [searchCriteriaSortOrders0Direction] Sorting direction.
         * @param {number} [searchCriteriaPageSize] Page size.
         * @param {number} [searchCriteriaCurrentPage] Current page.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        salesTransactionRepositoryV1GetListGet: async (searchCriteriaFilterGroups0Filters0Field?: string, searchCriteriaFilterGroups0Filters0Value?: string, searchCriteriaFilterGroups0Filters0ConditionType?: string, searchCriteriaSortOrders0Field?: string, searchCriteriaSortOrders0Direction?: string, searchCriteriaPageSize?: number, searchCriteriaCurrentPage?: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/V1/transactions`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (searchCriteriaFilterGroups0Filters0Field !== undefined) {
                localVarQueryParameter['searchCriteria[filterGroups][0][filters][0][field]'] = searchCriteriaFilterGroups0Filters0Field;
            }

            if (searchCriteriaFilterGroups0Filters0Value !== undefined) {
                localVarQueryParameter['searchCriteria[filterGroups][0][filters][0][value]'] = searchCriteriaFilterGroups0Filters0Value;
            }

            if (searchCriteriaFilterGroups0Filters0ConditionType !== undefined) {
                localVarQueryParameter['searchCriteria[filterGroups][0][filters][0][conditionType]'] = searchCriteriaFilterGroups0Filters0ConditionType;
            }

            if (searchCriteriaSortOrders0Field !== undefined) {
                localVarQueryParameter['searchCriteria[sortOrders][0][field]'] = searchCriteriaSortOrders0Field;
            }

            if (searchCriteriaSortOrders0Direction !== undefined) {
                localVarQueryParameter['searchCriteria[sortOrders][0][direction]'] = searchCriteriaSortOrders0Direction;
            }

            if (searchCriteriaPageSize !== undefined) {
                localVarQueryParameter['searchCriteria[pageSize]'] = searchCriteriaPageSize;
            }

            if (searchCriteriaCurrentPage !== undefined) {
                localVarQueryParameter['searchCriteria[currentPage]'] = searchCriteriaCurrentPage;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * TransactionsApi - functional programming interface
 * @export
 */
export const TransactionsApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = TransactionsApiAxiosParamCreator(configuration)
    return {
        /**
         * Lists transactions that match specified search criteria. This call returns an array of objects, but detailed information about each object’s attributes might not be included. See http://devdocs.magento.com/codelinks/attributes.html#TransactionRepositoryInterface to determine which call to use to get detailed information about all attributes for an object.
         * @summary transactions
         * @param {string} [searchCriteriaFilterGroups0Filters0Field] Field
         * @param {string} [searchCriteriaFilterGroups0Filters0Value] Value
         * @param {string} [searchCriteriaFilterGroups0Filters0ConditionType] Condition type
         * @param {string} [searchCriteriaSortOrders0Field] Sorting field.
         * @param {string} [searchCriteriaSortOrders0Direction] Sorting direction.
         * @param {number} [searchCriteriaPageSize] Page size.
         * @param {number} [searchCriteriaCurrentPage] Current page.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async salesTransactionRepositoryV1GetListGet(searchCriteriaFilterGroups0Filters0Field?: string, searchCriteriaFilterGroups0Filters0Value?: string, searchCriteriaFilterGroups0Filters0ConditionType?: string, searchCriteriaSortOrders0Field?: string, searchCriteriaSortOrders0Direction?: string, searchCriteriaPageSize?: number, searchCriteriaCurrentPage?: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<SalesDataTransactionSearchResultInterface>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.salesTransactionRepositoryV1GetListGet(searchCriteriaFilterGroups0Filters0Field, searchCriteriaFilterGroups0Filters0Value, searchCriteriaFilterGroups0Filters0ConditionType, searchCriteriaSortOrders0Field, searchCriteriaSortOrders0Direction, searchCriteriaPageSize, searchCriteriaCurrentPage, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * TransactionsApi - factory interface
 * @export
 */
export const TransactionsApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = TransactionsApiFp(configuration)
    return {
        /**
         * Lists transactions that match specified search criteria. This call returns an array of objects, but detailed information about each object’s attributes might not be included. See http://devdocs.magento.com/codelinks/attributes.html#TransactionRepositoryInterface to determine which call to use to get detailed information about all attributes for an object.
         * @summary transactions
         * @param {string} [searchCriteriaFilterGroups0Filters0Field] Field
         * @param {string} [searchCriteriaFilterGroups0Filters0Value] Value
         * @param {string} [searchCriteriaFilterGroups0Filters0ConditionType] Condition type
         * @param {string} [searchCriteriaSortOrders0Field] Sorting field.
         * @param {string} [searchCriteriaSortOrders0Direction] Sorting direction.
         * @param {number} [searchCriteriaPageSize] Page size.
         * @param {number} [searchCriteriaCurrentPage] Current page.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        salesTransactionRepositoryV1GetListGet(searchCriteriaFilterGroups0Filters0Field?: string, searchCriteriaFilterGroups0Filters0Value?: string, searchCriteriaFilterGroups0Filters0ConditionType?: string, searchCriteriaSortOrders0Field?: string, searchCriteriaSortOrders0Direction?: string, searchCriteriaPageSize?: number, searchCriteriaCurrentPage?: number, options?: any): AxiosPromise<SalesDataTransactionSearchResultInterface> {
            return localVarFp.salesTransactionRepositoryV1GetListGet(searchCriteriaFilterGroups0Filters0Field, searchCriteriaFilterGroups0Filters0Value, searchCriteriaFilterGroups0Filters0ConditionType, searchCriteriaSortOrders0Field, searchCriteriaSortOrders0Direction, searchCriteriaPageSize, searchCriteriaCurrentPage, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * TransactionsApi - object-oriented interface
 * @export
 * @class TransactionsApi
 * @extends {BaseAPI}
 */
export class TransactionsApi extends BaseAPI {
    /**
     * Lists transactions that match specified search criteria. This call returns an array of objects, but detailed information about each object’s attributes might not be included. See http://devdocs.magento.com/codelinks/attributes.html#TransactionRepositoryInterface to determine which call to use to get detailed information about all attributes for an object.
     * @summary transactions
     * @param {string} [searchCriteriaFilterGroups0Filters0Field] Field
     * @param {string} [searchCriteriaFilterGroups0Filters0Value] Value
     * @param {string} [searchCriteriaFilterGroups0Filters0ConditionType] Condition type
     * @param {string} [searchCriteriaSortOrders0Field] Sorting field.
     * @param {string} [searchCriteriaSortOrders0Direction] Sorting direction.
     * @param {number} [searchCriteriaPageSize] Page size.
     * @param {number} [searchCriteriaCurrentPage] Current page.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TransactionsApi
     */
    public salesTransactionRepositoryV1GetListGet(searchCriteriaFilterGroups0Filters0Field?: string, searchCriteriaFilterGroups0Filters0Value?: string, searchCriteriaFilterGroups0Filters0ConditionType?: string, searchCriteriaSortOrders0Field?: string, searchCriteriaSortOrders0Direction?: string, searchCriteriaPageSize?: number, searchCriteriaCurrentPage?: number, options?: AxiosRequestConfig) {
        return TransactionsApiFp(this.configuration).salesTransactionRepositoryV1GetListGet(searchCriteriaFilterGroups0Filters0Field, searchCriteriaFilterGroups0Filters0Value, searchCriteriaFilterGroups0Filters0ConditionType, searchCriteriaSortOrders0Field, searchCriteriaSortOrders0Direction, searchCriteriaPageSize, searchCriteriaCurrentPage, options).then((request) => request(this.axios, this.basePath));
    }
}


/**
 * TransactionsIdApi - axios parameter creator
 * @export
 */
export const TransactionsIdApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Loads a specified transaction.
         * @summary transactions/{id}
         * @param {number} id The transaction ID.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        salesTransactionRepositoryV1GetGet: async (id: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('salesTransactionRepositoryV1GetGet', 'id', id)
            const localVarPath = `/V1/transactions/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * TransactionsIdApi - functional programming interface
 * @export
 */
export const TransactionsIdApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = TransactionsIdApiAxiosParamCreator(configuration)
    return {
        /**
         * Loads a specified transaction.
         * @summary transactions/{id}
         * @param {number} id The transaction ID.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async salesTransactionRepositoryV1GetGet(id: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<SalesDataTransactionInterface>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.salesTransactionRepositoryV1GetGet(id, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * TransactionsIdApi - factory interface
 * @export
 */
export const TransactionsIdApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = TransactionsIdApiFp(configuration)
    return {
        /**
         * Loads a specified transaction.
         * @summary transactions/{id}
         * @param {number} id The transaction ID.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        salesTransactionRepositoryV1GetGet(id: number, options?: any): AxiosPromise<SalesDataTransactionInterface> {
            return localVarFp.salesTransactionRepositoryV1GetGet(id, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * TransactionsIdApi - object-oriented interface
 * @export
 * @class TransactionsIdApi
 * @extends {BaseAPI}
 */
export class TransactionsIdApi extends BaseAPI {
    /**
     * Loads a specified transaction.
     * @summary transactions/{id}
     * @param {number} id The transaction ID.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TransactionsIdApi
     */
    public salesTransactionRepositoryV1GetGet(id: number, options?: AxiosRequestConfig) {
        return TransactionsIdApiFp(this.configuration).salesTransactionRepositoryV1GetGet(id, options).then((request) => request(this.axios, this.basePath));
    }
}


/**
 * WorldpayGuestCartsCartIdPaymentInformationApi - axios parameter creator
 * @export
 */
export const WorldpayGuestCartsCartIdPaymentInformationApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Proxy handler for guest place order
         * @summary worldpay-guest-carts/{cartId}/payment-information
         * @param {string} cartId 
         * @param {CheckoutGuestPaymentInformationManagementV1SavePaymentInformationAndPlaceOrderPostRequest} [worldpayGuestPaymentInformationManagementProxyV1SavePaymentInformationAndPlaceOrderPostBody] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        worldpayGuestPaymentInformationManagementProxyV1SavePaymentInformationAndPlaceOrderPost: async (cartId: string, worldpayGuestPaymentInformationManagementProxyV1SavePaymentInformationAndPlaceOrderPostBody?: CheckoutGuestPaymentInformationManagementV1SavePaymentInformationAndPlaceOrderPostRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'cartId' is not null or undefined
            assertParamExists('worldpayGuestPaymentInformationManagementProxyV1SavePaymentInformationAndPlaceOrderPost', 'cartId', cartId)
            const localVarPath = `/V1/worldpay-guest-carts/{cartId}/payment-information`
                .replace(`{${"cartId"}}`, encodeURIComponent(String(cartId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(worldpayGuestPaymentInformationManagementProxyV1SavePaymentInformationAndPlaceOrderPostBody, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * WorldpayGuestCartsCartIdPaymentInformationApi - functional programming interface
 * @export
 */
export const WorldpayGuestCartsCartIdPaymentInformationApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = WorldpayGuestCartsCartIdPaymentInformationApiAxiosParamCreator(configuration)
    return {
        /**
         * Proxy handler for guest place order
         * @summary worldpay-guest-carts/{cartId}/payment-information
         * @param {string} cartId 
         * @param {CheckoutGuestPaymentInformationManagementV1SavePaymentInformationAndPlaceOrderPostRequest} [worldpayGuestPaymentInformationManagementProxyV1SavePaymentInformationAndPlaceOrderPostBody] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async worldpayGuestPaymentInformationManagementProxyV1SavePaymentInformationAndPlaceOrderPost(cartId: string, worldpayGuestPaymentInformationManagementProxyV1SavePaymentInformationAndPlaceOrderPostBody?: CheckoutGuestPaymentInformationManagementV1SavePaymentInformationAndPlaceOrderPostRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<number>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.worldpayGuestPaymentInformationManagementProxyV1SavePaymentInformationAndPlaceOrderPost(cartId, worldpayGuestPaymentInformationManagementProxyV1SavePaymentInformationAndPlaceOrderPostBody, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * WorldpayGuestCartsCartIdPaymentInformationApi - factory interface
 * @export
 */
export const WorldpayGuestCartsCartIdPaymentInformationApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = WorldpayGuestCartsCartIdPaymentInformationApiFp(configuration)
    return {
        /**
         * Proxy handler for guest place order
         * @summary worldpay-guest-carts/{cartId}/payment-information
         * @param {string} cartId 
         * @param {CheckoutGuestPaymentInformationManagementV1SavePaymentInformationAndPlaceOrderPostRequest} [worldpayGuestPaymentInformationManagementProxyV1SavePaymentInformationAndPlaceOrderPostBody] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        worldpayGuestPaymentInformationManagementProxyV1SavePaymentInformationAndPlaceOrderPost(cartId: string, worldpayGuestPaymentInformationManagementProxyV1SavePaymentInformationAndPlaceOrderPostBody?: CheckoutGuestPaymentInformationManagementV1SavePaymentInformationAndPlaceOrderPostRequest, options?: any): AxiosPromise<number> {
            return localVarFp.worldpayGuestPaymentInformationManagementProxyV1SavePaymentInformationAndPlaceOrderPost(cartId, worldpayGuestPaymentInformationManagementProxyV1SavePaymentInformationAndPlaceOrderPostBody, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * WorldpayGuestCartsCartIdPaymentInformationApi - object-oriented interface
 * @export
 * @class WorldpayGuestCartsCartIdPaymentInformationApi
 * @extends {BaseAPI}
 */
export class WorldpayGuestCartsCartIdPaymentInformationApi extends BaseAPI {
    /**
     * Proxy handler for guest place order
     * @summary worldpay-guest-carts/{cartId}/payment-information
     * @param {string} cartId 
     * @param {CheckoutGuestPaymentInformationManagementV1SavePaymentInformationAndPlaceOrderPostRequest} [worldpayGuestPaymentInformationManagementProxyV1SavePaymentInformationAndPlaceOrderPostBody] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof WorldpayGuestCartsCartIdPaymentInformationApi
     */
    public worldpayGuestPaymentInformationManagementProxyV1SavePaymentInformationAndPlaceOrderPost(cartId: string, worldpayGuestPaymentInformationManagementProxyV1SavePaymentInformationAndPlaceOrderPostBody?: CheckoutGuestPaymentInformationManagementV1SavePaymentInformationAndPlaceOrderPostRequest, options?: AxiosRequestConfig) {
        return WorldpayGuestCartsCartIdPaymentInformationApiFp(this.configuration).worldpayGuestPaymentInformationManagementProxyV1SavePaymentInformationAndPlaceOrderPost(cartId, worldpayGuestPaymentInformationManagementProxyV1SavePaymentInformationAndPlaceOrderPostBody, options).then((request) => request(this.axios, this.basePath));
    }
}


